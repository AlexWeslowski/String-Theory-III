

import mpmath
import math
import matplotlib.pyplot as plt
import sympy
import numpy
#import gmpy2
import pyquaternion
import tinyquaternion
import fractions
import primesieve
import random
import time
import os
import pickle
import sqlite3

cls = lambda: os.system('cls') or None




q = Quaternion(a=1., n=numpy.array([1/.numpy.sqrt(3),1./numpy.sqrt(3),1./numpy.sqrt(3)]))
q = Quaternion()
q.a = 2*np.arccos(1.)
q.n = [1./numpy.sqrt(3),1./numpy.sqrt(3),1./numpy.sqrt(3)] / numpy.sin(q.a/2)

q.a = 1.
q.n = [1./numpy.sqrt(3),1./numpy.sqrt(3),1./numpy.sqrt(3)]




def best_n(x):
    dic = {}
    minf = math.log(mpmath.mp.prec)/1.229346 + 0.125
    maxf = math.log(mpmath.mp.prec)/1.113095 + 0.125
    mult = 128
    for fpow in [f/mult for f in range(int(minf*mult), int(math.ceil(maxf*mult)) + 1)]:
        n = mpmath.power(2, mpmath.exp(fpow))
        n = mpmath.ceil(n) if mpmath.fmod(n, 1) > 0.5 else mpmath.floor(n)
        dist = abs(1 - mpmath.fdiv(x, mpmath.power(mpmath.fadd(1, mpmath.fdiv(mpmath.log(x), mpmath.floor(n))), mpmath.floor(n))))
        if dist not in dic:
            dic[dist] = [mpmath.exp(fpow)]
        else:
            dic[dist].append(mpmath.exp(fpow))
    arykeys = sorted([k for k in dic.keys()])
    return dic[arykeys[0]]

thisi = -1
p1 = [mpmath.mpf('13860658187287')]
p2 = [mpmath.mpf('44038395018313')]
p1p2 = [mpmath.fmul(p1[thisi], p2[thisi])]
best_n(mpmath.fmul(13860658187287, 44038395018313))
# best n for 768 bit prec is mpmath.power(2, 387.973679118979325773066073071526990919281392162175)
# best n for 768 bit prec is 1 + 2*2*41777*3418231*837391097*1294159944129738656178525247016882984667470604870120780790405163717026855099566164249217342238603
# 4*math.exp(10.640101227841237)*math.exp(15.044633723756114)*math.exp(20.54580177977558)*mpmath.exp(mpmath.mpf('221.3060307202966244702345590967853901434743336102142916456455947269442894506390172540318905322497822959'))

def log_primes(imax):
    global p1
    global p2
    global p1p2
    
    log_p1 = math.log(p1[thisi])
    log_p1p2 = math.log(p1p2[thisi])
    for i in range(1, imax + 1):
        it = primesieve.Iterator()
        it.skipto(int(math.exp(0.5*log_p1p2 - random.random()*(0.5*log_p1p2 - log_p1))))
        thisp1 = it.next_prime()
        it.skipto(int(p1p2[thisi]/thisp1))
        thisp2 = it.next_prime()
        thisp1p2 = mpmath.fmul(thisp1, thisp2)
        
        thislogp1 = 0.5*mpmath.log(thisp1)
        thislog = abs(mpmath.log(abs(1/(2**32 - (mpmath.log(thisp1, 1 + mpmath.fdiv(thislogp1, mpmath.power(2, 32))) - 0.5*thislogp1)))))
        thislogupper = math.log(thislog, 0.5*thislogp1)
        thisloglower = math.log(thislog, thislogp1)
        print(str(float(thislogupper)))
        print(str(abs(1/(thislogupper - 1))))
        print(str(float(thisloglower)))
        print(str(1/(1 - thisloglower)))
        print(str(abs(1/(thislogupper - 1) - 1/(1 - thisloglower))))
        thismin = min(abs(1/(thislogupper - 1)), abs(1/(1 - thisloglower)))
        thismax = max(abs(1/(thislogupper - 1)), abs(1/(1 - thisloglower)))
        print(str(thismax - thismin))
        print(str(thismax / thismin))
        print("------------------")
        
        thislogp2 = mpmath.log(thisp2)
        thislog = abs(mpmath.log(abs(1/(2**32 - (mpmath.log(thisp2, 1 + mpmath.fdiv(thislogp2, mpmath.power(2, 32))) - 0.5*thislogp2)))))
        thislogupper = math.log(thislog, 0.5*thislogp2)
        thisloglower = math.log(thislog, thislogp2)
        print(str(float(thislogupper)))
        print(str(abs(1/(thislogupper - 1))))
        print(str(float(thisloglower)))
        print(str(1/(1 - thisloglower)))
        print(str(abs(1/(thislogupper - 1) - 1/(1 - thisloglower))))
        thismin = min(abs(1/(thislogupper - 1)), abs(1/(1 - thisloglower)))
        thismax = max(abs(1/(thislogupper - 1)), abs(1/(1 - thisloglower)))
        print(str(thismax - thismin))
        print(str(thismax / thismin))
        print("------------------")
        
        thislogp1p2 = 0.5*mpmath.log(thisp1p2)
        thislog = abs(mpmath.log(abs(1/(2**32 - (mpmath.log(mpmath.sqrt(thisp1p2), 1 + mpmath.fdiv(thislogp1p2, mpmath.power(2, 32))) - 0.5*thislogp1p2)))))
        thislogupper = math.log(thislog, 0.5*thislogp1p2)
        thisloglower = math.log(thislog, thislogp1p2)
        print(str(float(thislogupper)))
        print(str(1/(thislogupper - 1)))
        print(str(float(thisloglower)))
        print(str(1/(1 - thisloglower)))
        print(str(abs(1/(thislogupper - 1) - 1/(1 - thisloglower))))
        thismin = min(abs(1/(thislogupper - 1)), abs(1/(1 - thisloglower)))
        thismax = max(abs(1/(thislogupper - 1)), abs(1/(1 - thisloglower)))
        print(str(thismax - thismin))
        print(str(thismax / thismin))
        print("")

def round_mpf(f, idigits):
    f = mpmath.fmul(f, mpmath.power(10, idigits))
    f = mpmath.floor(f) if mpmath.fmod(f, 1) < 0.5 else mpmath.ceil(f)
    return mpmath.fdiv(f, mpmath.power(10, idigits))

# find_log_powers(1.5834681558242139, 0.48369700687367256, 3, False)
def find_log_powers(x, y, idigits, return_powers):
    max_xpow = int(mpmath.floor(mpmath.log(mpmath.power(2, mpmath.mp.prec/1.5), mpmath.fdiv(1, x) if x < 1 else x)))
    max_ypow = int(mpmath.floor(mpmath.log(mpmath.power(2, mpmath.mp.prec/1.5), mpmath.fdiv(1, y) if y < 1 else y)))
    min_xpow = 5
    min_ypow = 5
    two = mpmath.power(2, 53)
    if x < 2:
        if x < 1:
            min_xpow = -5*int(max_xpow/5)
    if y < 2:
        if y < 1:
            min_ypow = -5*int(max_ypow/5)
    dic_str = {}
    dic_pow = {}
    for xpow in range(min_xpow, max_xpow + 1, 5):
        for ypow in range(min_ypow, max_ypow + 1, 5):
            fdiv = mpmath.fdiv(mpmath.power(x, xpow), mpmath.power(y, ypow))
            if round(abs(fdiv) + 0.001, 2) >= 1 and fdiv < two and (round_mpf(fdiv + 0.001, idigits) % 1 == 0 or round_mpf(fdiv - 0.001, idigits) % 1 == 0):
                val = "mpmath.fdiv(mpmath.power(" + str(x) + ", " + str(xpow) + "), mpmath.power(" + str(y) + ", " + str(ypow) + ")) # " + str(round_mpf(fdiv, 14))
                key = abs(round_mpf(fdiv, 0) - fdiv)
                if key in dic_str:
                    if type(dic_str[key]) is list:
                        dic_str[key].append(val)
                        dic_pow[key].append((xpow, ypow))
                    else:
                        dic_str[key] = [dic_str[key], val]
                        dic_pow[key] = [dic_pow[key], (xpow, ypow)]
                else:
                    dic_str[key] = val
                    dic_pow[key] = (xpow, ypow)
            flog = mpmath.log(mpmath.power(x, xpow) / mpmath.power(y, ypow))
            if round(abs(flog) + 0.001, 2) >= 1 and flog < two and (round_mpf(flog + 0.001, idigits) % 1 == 0 or round_mpf(flog - 0.001, idigits) % 1 == 0):
                val = "mpmath.log(mpmath.power(" + str(x) + ", " + str(xpow) + ") / mpmath.power(" + str(y) + ", " + str(ypow) + ")) # " + str(round_mpf(flog, 14))
                key = abs(round_mpf(flog, 0) - flog)
                if key in dic_str:
                    if type(dic_str[key]) is list:
                        dic_str[key].append(val)
                        dic_pow[key].append((xpow, ypow))
                    else:
                        dic_str[key] = [dic_str[key], val]
                        dic_pow[key] = [dic_pow[key], (xpow, ypow)]
                else:
                    dic_str[key] = val
                    dic_pow[key] = (xpow, ypow)
                
    arykeys = sorted([k for k in dic_str.keys()])
    arypows = []
    for k in arykeys:
        if type(dic_str[k]) is list:
            for itm in dic_str[k]:
                print(itm)
            if return_powers:
                for itm in dic_pow[k]:
                    arypows.append(itm)
        else:
            print(dic_str[k])
            if return_powers:
                arypows.append(dic_pow[k])
    if return_powers:
        return arypows



log_primes(4)

find_log_powers(20.154887370892173, 18.990489330238855)
mpmath.log(mpmath.power(20.154887370892173, 10) / mpmath.power(18.990489330238855, 35)) # -73.003372145642870316418967253033605949429747
mpmath.log(mpmath.power(20.154887370892173, 45) / mpmath.power(18.990489330238855, 15)) #  90.996031994122423180782627379294015709859245

mpmath.fdiv(91, 73) / mpmath.fdiv(1/(73.00337214564287 - 73), 1/(91 - 90.99603199412242318))
1.0593819009583177599381406788874
mpmath.log(1 / (mpmath.fdiv(91, 73) / mpmath.fdiv(1/(mpmath.mpf('73.003372145642870316418967253033605949429747') - 73), 1/(91 - mpmath.mpf('90.996031994122423180782627379294015709859245'))) - 1))
2.82376579671472307588996
mpmath.log(1 / (mpmath.fdiv(91, 73) / mpmath.fdiv(1/(73.00337214564287 - 73), 1/(91 - 90.99603199412242318)) - 1), 3)
2.5703023949769248675921123022638184463979597993233948858948450423698623057036123357055171219504377317157023491614771622406746877390956017076149561150597046661714631511228589669462224845515844018754835954507714458507284222100222434493
mpmath.log(1 / (mpmath.fdiv(91, 73) / mpmath.fdiv(1/(73.00337214564287 - 73), 1/(91 - 90.99603199412242318)) - 1), 6)
1.575973698038435979881718201302673221070707326030633615216201856036641211916037599463890856991126892365447961697282941908510492290784524601544007683847312682076285146417484920433275643568433434728780430219871669931308610264932571465

# where 1.575973698038436 = 0.5016480084512622 * math.pi
#                         = 0.5060531935852313 + math.log(math.pi)**0.5
#                         = 0.4979507541828385 + (18.5)**(1/4)
#                         = 0.4979507541828385 + (240.25)**0.5
#                         = math.pi**0.5**0.5**0.5**0.5**0.5 - 0.49387058010086116
#                         = (math.pi**0.5**0.5**0.5**0.5**0.5 - 0.5)*2
#                         = 3.1396885562785943
#   and 2.570302394976925 = 0.5039367179156784 + (0.5*math.pi*math.e)**0.5
#                         = 0.5000000016043931 + math.log(237976860**(1/4.5))**0.5
#                         = 0.5000000016043931 + math.log((2 * 2 * 3 * 5 * 11 * 23 * 61 * 257)**(1/4.5))**0.5
#                         = 0.5004581168376276 + math.pi**0.5**0.5**0.5**0.5**0.5

# note, 90 vs 91
mpmath.log(1 / (mpmath.fdiv(90, 73) / mpmath.fdiv(1 / (mpmath.mpf('73.003372145642870316418967253033605949429747') - 73), 1 / (91 - mpmath.mpf('90.996031994122423180782627379294015709859245'))) - 1))
3.0419785024998035307433839050140942375790719
mpmath.log(1 / (mpmath.fdiv(90, 73) / ((1 / (mpmath.mpf('73.003372145642870316418967253033605949429747') - 73))/(1 / (91 - mpmath.mpf('90.996031994122423180782627379294015709859245')))) - 1), mpmath.pi())
2.6573766790779881812641399552968316762908
mpmath.log(1 / (mpmath.fdiv(90, 73) / ((1 / (mpmath.mpf('73.003372145642870316418967253033605949429747') - 73))/(1 / (91 - mpmath.mpf('90.996031994122423180782627379294015709859245')))) - 1), 2*mpmath.pi())
1.6551588558874109855780983829646625171611

1 / (2.657376679097845 - 1.655158855899779 - 1)
450.89256928689997
mpmath.log(1 / (mpmath.mpf('2.6573766790779881812641399552968316762908') - mpmath.mpf('1.6551588558874109855780983829646625171611') - 1))
6.1112291089315191603862958574341469776250663443
mpmath.log(1 / (mpmath.mpf('2.6573766790779881812641399552968316762908') - mpmath.mpf('1.6551588558874109855780983829646625171611') - 1), 2 * mpmath.e())
3.6093903584391629552975450145488531309689340847
mpmath.mpf('6.1112291089315191603862958574341469776250663443') - mpmath.mpf('3.6093903584391629552975450145488531309689340847')
2.5018387504923562050887508428852938466561322596
mpmath.log(1 / (mpmath.mpf('2.6573766790779881812641399552968316762908') - mpmath.mpf('1.6551588558874109855780983829646625171611') - 1), mpmath.pi())
5.33857740981133778892684208595148119626320232636639
mpmath.log(1 / (mpmath.mpf('2.6573766790779881812641399552968316762908') - mpmath.mpf('1.6551588558874109855780983829646625171611') - 1), 2*mpmath.pi())
3.325156628060552398534536760200262750469578902
mpmath.mpf('5.33857740981133778892684208595148119626320232636639') - mpmath.mpf('3.325156628060552398534536760200262750469578902')
2.01342078175078539039230532575121844579362342436639
tgt = mpmath.mpf('2.01342078175078539039230532575121844579362342436639')
x = mpmath.mpf(2.1)
dx = mpmath.mpf(-0.0625)
while mpmath.power(1 + mpmath.fdiv(mpmath.log(2), x), x + 0.5*mpmath.log(2)) < tgt:
    x += dx
    if mpmath.power(1 + mpmath.fdiv(mpmath.log(2), x), x + 0.5*mpmath.log(2)) > tgt:
        x -= dx
        dx /= 2
        if abs(dx) < mpmath.power(2, -760):
            break
mpmath.power(1 + mpmath.fdiv(mpmath.log(2), 2 + mpmath.power(2, mpmath.mpf('-63.385183367484721118564904986215401'))), 2 + mpmath.power(2, mpmath.mpf('-63.385183367484721118564904986215401')) + 0.5*mpmath.log(2))

find_log_powers(19.97099066803443, 18.990489330238855)
mpmath.log(mpmath.power(19.97099066803443, 15) / mpmath.power(18.990489330238855, 55)) # -117.00239477
mpmath.log(mpmath.power(19.97099066803443, 30) / mpmath.power(18.990489330238855, 110)) # -234.00478953
mpmath.log(mpmath.power(19.97099066803443, 35) / mpmath.power(18.990489330238855, 75)) # -115.99554553
mpmath.log(mpmath.power(19.97099066803443, 70) / mpmath.power(18.990489330238855, 25)) # 136.00119547
mpmath.log(mpmath.power(19.97099066803443, 85) / mpmath.power(18.990489330238855, 80)) # 18.99880071

math.log(1 / ((234/136) / ((1/(136.00119547 - 136))/(1/(234.00478953 - 234)))), math.pi - math.e)
-0.9832234742401901
math.log(1 / ((234/136) / ((1/(136.00119547 - 136))/(1/(234.00478953 - 234)))), 2*math.pi - math.e)
0.6649374980808372
math.log(1 / ((234/136) / ((1/(136.00119547 - 136))/(1/(234.00478953 - 234)))), 2*(math.pi - math.e))
-5.076394276058569

(0.9832234742401901 - 0.6649374980808372) * math.pi
0.9999248844428789
(5.076394276058569 - 0.9832234742401901) * (math.pi - math.e)
1.7326835095188238
(5.076394276058569 - 0.9832234742401901) * (math.pi - math.e)**2
0.7334636861048536

0.5*mpmath.log(p1[thisi])
mpf('15.130037798411509478721392385334037592657202270233497896472200294669069482708602823862984608096996169969693832603050291803537875758298041661613355911919151176278848658035952567878288544640423918595740682306782755121737403881731238173')
mpmath.log(p1[thisi])
mpf('30.260075596823018957442784770668075185314404540466995792944400589338138965417205647725969216193992339939387665206100583607075751516596083323226711823838302352557697316071905135756577089280847837191481364613565510243474807763462476346')
math.log(1/(2**32 - (mpmath.log(p1[thisi], 1 + mpmath.fdiv(mpmath.log(p1[thisi]), mpmath.power(2, 32))) - 0.5*mpmath.log(p1[thisi]))))
17.84595801802948
math.log(17.84595801802948, 15.1300377984115)
1.0607708275737244
1/(math.log(17.84595801802948, 15.1300377984115) - 1)
16.455263815304228
math.log(17.84595801802948, 2*15.1300377984115)
0.8451382360850233
1/(1 - math.log(17.84595801802948, 2*15.1300377984115))
6.457371882636096
16.455263815304228 / 6.457371882636096
2.548291180124303
16.455263815304228 - 6.457371882636096
9.997891932668132 # 10 - 1/474.3681498606974

math.log(1/(2**32 - (mpmath.log(p2[thisi], 1 + mpmath.fdiv(mpmath.log(p2[thisi]), mpmath.power(2, 32))) - 0.5*mpmath.log(p2[thisi]))))
17.770976513944596
0.5*math.log(p2[thisi])
15.708041491696537
math.log(17.770976513944596, 15.708041491696537)
1.0448024962113556
1/(math.log(17.770976513944596, 15.708041491696537) - 1)
22.3201849129679
1/(1 - math.log(17.770976513944596, 2*15.708041491696537))
6.050547780609357
22.3201849129679 / 6.050547780609357
3.6889527563932419
22.3201849129679 - 6.050547780609357
16.269637132358543 # 16 + 1/3.7086880106345141
22.3201849129679 + 6.050547780609357
28.370732693577256

math.log(1/(mpmath.power(2, 64) - (mpmath.log(p1p2[thisi], 1 + mpmath.fdiv(mpmath.log(p1p2[thisi]), mpmath.power(2, 64))) - 0.5*mpmath.log(p1p2[thisi]))))
38.602531310649056
0.5*mpmath.log(p1p2[thisi])
mpf('30.838079290108047407754368831524702485471720850404522475924091802898021996506272355209416128952333033712950410800188442581423044418497588515862691671621884512615914943951003434957395286850450187110893712188969401057315957139747049251')
math.log(38.602531310649056, 30.83807929010804740775436883)
1.0654954627506812
1/(math.log(38.602531310649056, 30.83807929010804740775436883) - 1)
15.268233218026992
math.log(38.602531310649056, 2*30.83807929010804740775436883)
0.886319443620174
1/(1 - math.log(38.602531310649056, 2*30.83807929010804740775436883))
8.796579044342733
15.268233218026992/8.796579044342733
1.7357012471622497
15.268233218026992 - 8.796579044342733
6.471654173684259
15.268233218026992 - 8.796579044342733 - 6.457371882636096
0.014282291048163032


mpmath.log(abs(mpmath.log(x) - mpmath.log(mpmath.power(mpmath.fadd(1, mpmath.fdiv(mpmath.log(x), mpmath.floor(n))), mpmath.floor(n)))), mpmath.floor(n))
mpf('-0.7791171881078001210866733225691')
mpmath.log(abs(mpmath.log(x) - mpmath.log(mpmath.power(mpmath.fadd(1, mpmath.fdiv(mpmath.log(x), mpmath.floor(n))), mpmath.floor(n)))), x)
mpf('-3.7797893295070632931502310735494')

math.log(1/(mpmath.power(2, 32) - (0.5*mpmath.log(p1p2[thisi], 1 + mpmath.fdiv(0.5*mpmath.log(p1p2[thisi]), mpmath.power(2, 32))) - 0.25*mpmath.log(p1p2[thisi]))))
17.808115897440725
math.log(17.808115897440725, 15.419039645054)
1.0526579374870502
1/(math.log(17.808115897440725, 15.419039645054) - 1)
18.99048933023485
math.log(17.808115897440725, 2*15.419039645054)
0.8398553637618505
1/(1 - math.log(17.808115897440725, 2*15.419039645054))
6.244355249668869
18.9905/6.24436
3.041319666880205
18.9905 - 6.24436


(1 + (x*i)/n)^(n + eps) = cos(x) + i * sin(x)
(n + eps)*log(1 + (x*i)/n) = log(cos(x) + i * sin(x))
eps*log(1 + (x*i)/n) = log(cos(x) + i * sin(x)) - n*log(1 + (x*i)/n)
eps = (log(cos(x) + i * sin(x)) - n*log(1 + (x*i)/n) / log(1 + (x*i)/n)
eps = ((1/n)*log(cos(x) + i * sin(x)) - log(1 + (x*i)/n) / (1/n)*log(1 + (x*i)/n)

L'Hopital's Rule
x, n, i = sympy.symbols("x n i")
sympy.Derivative("(1/n)*log(cos(x) + i * sin(x)) - log(1 + (x*i)/n)", "n").doit() = i*x/(n**2*(i*x/n + 1)) - log(i*sin(x) + cos(x))/n**2
sympy.Derivative("(1/n)*log(1 + (x*i)/n)", "n").doit()                            = -i*x/(n**3*(i*x/n + 1)) - log(i*x/n + 1)/n**2

(i*x/(n**2*(i*x/n + 1)) - log(i*sin(x) + cos(x))/n**2) / (-i*x/(n**3*(i*x/n + 1)) - log(i*x/n + 1)/n**2)

sympy.simplify(sympy.expand("(i*x/(n**2*(i*x/n + 1)) - log(i*sin(x) + cos(x))/n**2) / (-i*x/(n**3*(i*x/n + 1)) - log(i*x/n + 1)/n**2)"))
(-i*n*x + i*x*log(i*sin(x) + cos(x)) + n*log(i*sin(x) + cos(x)))/(i*x*log((i*x + n)/n) + i*x + n*log((i*x + n)/n))
(-i*x + i*x*log(i*sin(x) + cos(x))/n + log(i*sin(x) + cos(x)))/(i*x*log((i*x + n)/n)/n + i*x/n + log((i*x + n)/n))

sympy.Derivative("(-i*x + i*x*log(i*sin(x) + cos(x))/n + log(i*sin(x) + cos(x)))", "n").doit() = -i*x*log(i*sin(x) + cos(x))/n**2
sympy.Derivative("(i*x*log((i*x + n)/n)/n + i*x/n + log((i*x + n)/n))", "n").doit()            = i*x*(1/n - (i*x + n)/n**2)/(i*x + n) - i*x*log((i*x + n)/n)/n**2 - i*x/n**2 + n*(1/n - (i*x + n)/n**2)/(i*x + n)

(-i*x*log(i*sin(x) + cos(x))/n**2) / (i*x*(1/n - (i*x + n)/n**2)/(i*x + n) - i*x*log((i*x + n)/n)/n**2 - i*x/n**2 + n*(1/n - (i*x + n)/n**2)/(i*x + n))
sympy.simplify(sympy.expand("(-i*x*log(i*sin(x) + cos(x))/n**2) / (i*x*(1/n - (i*x + n)/n**2)/(i*x + n) - i*x*log((i*x + n)/n)/n**2 - i*x/n**2 + n*(1/n - (i*x + n)/n**2)/(i*x + n))"))

log(i*sin(x) + cos(x))/(log((i*x + n)/n) + 2)
eps = log(i*sin(x) + cos(x))/(log(i*x/n + 1) + 2)
    = log(i*sin(x) + cos(x))/(log(1) + 2)
    = log(i*sin(x) + cos(x))/2

mpmath.log(mpmath.mpc(0, 1)*mpmath.sin(0.1234) + mpmath.cos(0.1234))
mpc(real='-9.2055087269362009669408922640471764737243e-40', imag='0.12339999999999999580335696691690827719904')
mpmath.log(mpmath.mpc(0, 1)*mpmath.sin(0.5678) + mpmath.cos(0.5678))
mpc(real='-1.3409101314165876081618461342841577406256e-39', imag='0.56779999999999997140065488565596751868725')

eps = i*x/2
(1 + (x*i)/n)^(n + eps) = cos(x) + i * sin(x)
(1 + (x*i)/n)^(n + x*i/2) = cos(x) + i * sin(x)



(1 + x/n)^(n + eps) = z
(n + eps)*log(1 + x/n) = log(z)
eps*log(1 + x/n) = log(z) - n*log(1 + x/n)
eps = (log(z) - n*log(1 + x/n))/log(1 + x/n)
    = ((1/n)*log(z) - log(1 + x/n))/((1/n)*log(1 + x/n))

L'Hopital's Rule
z, x, n = sympy.symbols("z x n")
sympy.Derivative("(1/n)*log(z) - log(1 + x/n)", "n").doit() = x/(n**2*(1 + x/n)) - log(z)/n**2
sympy.Derivative("(1/n)*log(1 + x/n)", "n").doit()          = -log(1 + x/n)/n**2 - x/(n**3*(1 + x/n))

sympy.simplify(sympy.expand("(x/(n**2*(1 + x/n)) - log(z)/n**2) / (-log(1 + x/n)/n**2 - x/(n**3*(1 + x/n)))"))
(-n*x + n*log(z) + x*log(z))/(n*log((n + x)/n) + x*log((n + x)/n) + x)
(-x + log(z) + (x/n)*log(z))/(log((n + x)/n) + (x/n)*log((n + x)/n) + x/n)

sympy.Derivative("-x + log(z) + (x/n)*log(z)", "n").doit()                  = -x*log(z)/n**2
sympy.Derivative("log((n + x)/n) + (x/n)*log((n + x)/n) + x/n", "n").doit() = n*(1/n - (n + x)/n**2)/(n + x) + x*(1/n - (n + x)/n**2)/(n + x) - x*log((n + x)/n)/n**2 - x/n**2

sympy.simplify(sympy.expand("(-x*log(z)/n**2) / (n*(1/n - (n + x)/n**2)/(n + x) + x*(1/n - (n + x)/n**2)/(n + x) - x*log((n + x)/n)/n**2 - x/n**2)"))
log(z)/(log((n + x)/n) + 2)
log(z)/(log(1 + x/n) + 2)
log(z)/2

approx_z = lambda x, n, z: mpmath.power(1 + mpmath.fdiv(x, n), n + mpmath.fdiv(mpmath.log(z), 2))
approx_z(100, 2**32, 2)
approx_z(mpmath.log(20), 2**16, 20)
mpf('20.000000010432251086181570156266440046959')


n, eps, x = sympy.symbols("n eps x")
f1 = sympy.expand("(n + eps)*log(1 + (x*i)/n)")
eps*log(i*x/n + 1) + n*log(i*x/n + 1)
f1.diff("x")
eps*i/(n*(i*x/n + 1)) + i/(i*x/n + 1)
f2 = sympy.expand("log(cos(x) + i * sin(x))")
log(i*sin(x) + cos(x))
f2.diff("x")
(i*cos(x) - sin(x))/(i*sin(x) + cos(x))

assuming (d/dx) log(i*sin(x) + cos(x)) = i:
eps*i/(n*(i*x/n + 1)) + i/(i*x/n + 1) = i
eps/(n*(i*x/n + 1)) + 1/(i*x/n + 1) = 1
eps/(n*(i*x/n + 1)) = 1 - 1/(i*x/n + 1)
eps = (n*(i*x/n + 1)) * (1 - 1/(i*x/n + 1))
eps = n*(i*x/n + 1) - n
eps = i*x


e^(i * x + eps) = cos(x) + i * sin(x)
(d/dx) (i * x + eps) = (d/dx) log(cos(x) + i * sin(x))
i = i

e^(i * x) = cos(x + eps) + i * sin(x + eps)



e^(ln(z)*(a+bi)) = (1 + (ln(z)*(a+bi))/n)^n * (1 + (ln(x)*(a+bi))/n)^(z/2)
e^x1 = (1 + x1/n1)^n1 * (1 + x1/n1)^(z/2)
e^x1 = (1 + x1/n1)^2*n1 * (1 + x1/n1)^(z/(2*n1))

z, a, b, n, i = sympy.symbols("z a b n i")
z, a, b, n, i = 4, 0.75, 41, 17, 1j
sympy.expand("(1 + (ln(z)*(a+b*i))/n)^n * (1 + (ln(x)*(a+bi))/n)^(z/2)")

z, pow_re, pow_im, n, i = sympy.symbols("z pow_im pow_re n i")
sympy.expand("(1 + (ln(z)*(pow1 + pow2))/n)^n * (1 + (ln(x)*(pow1 + pow2))/n)^(z/2)")

(1 + pow_re*log(z)/n + pow_im*log(z)/n)**n * (1 + pow_re*log(z)/n + pow_im*log(x)/n)**(z/2)

sympy.simplify(sympy.expand("(1 + (ln(z)*(pow_re + pow_im))/n)^(z/2)"))
for i in [3, 5, 7]:
    s = str(sympy.simplify(sympy.expand("(1 + (ln(" + str(i) + ")*(pow_re + pow_im))/3)^(" + str(i) + "/2)")))
    for j in range(2, i + 1):
        s = s.replace("/" + str(i**j), "/" + str(i) + "^" + str(j))
    print(s)
sympy.simplify(sympy.expand())

sqrt(3)*sqrt(pow_im*log(5) + pow_re*log(5) + 3)*(pow_im**2*log(5)**2 + 2*pow_im*pow_re*log(5)**2 + pow_im*log(15625) + pow_re**2*log(5)**2 + pow_re*log(15625) + 9)/27

for i in [3, 5, 7]:
    s = str(sympy.simplify(sympy.expand("(1 + pow_re*log(z)/" + str(i) + " + pow_im*log(z)/" + str(i) + ")**" + str(i) + "")))
    for j in range(2, i + 1):
        s = s.replace("/" + str(i**j), "/" + str(i) + "^" + str(j))
    print(s)
pow_im**3*log(z)**3/3^3 + pow_im**2*pow_re*log(z)**3/3^2 + pow_im**2*log(z)**2/3 + pow_im*pow_re**2*log(z)**3/3^2 + 2*pow_im*pow_re*log(z)**2/3 + pow_im*log(z) + pow_re**3*log(z)**3/3^3 + pow_re**2*log(z)**2/3 + pow_re*log(z) + 1
pow_im**5*log(z)**5/5^5 + pow_im**4*pow_re*log(z)**5/5^4 + pow_im**4*log(z)**4/5^3 + 2*pow_im**3*pow_re**2*log(z)**5/5^4 + 4*pow_im**3*pow_re*log(z)**4/5^3 + 2*pow_im**3*log(z)**3/5^2 + 2*pow_im**2*pow_re**3*log(z)**5/5^4 + 6*pow_im**2*pow_re**2*log(z)**4/5^3 + 6*pow_im**2*pow_re*log(z)**3/5^2 + 2*pow_im**2*log(z)**2/5 + pow_im*pow_re**4*log(z)**5/5^4 + 4*pow_im*pow_re**3*log(z)**4/5^3 + 6*pow_im*pow_re**2*log(z)**3/5^2 + 4*pow_im*pow_re*log(z)**2/5 + pow_im*log(z) + pow_re**5*log(z)**5/5^5 + pow_re**4*log(z)**4/5^3 + 2*pow_re**3*log(z)**3/5^2 + 2*pow_re**2*log(z)**2/5 + pow_re*log(z) + 1
pow_im**7*log(z)**7/7^7 + pow_im**6*pow_re*log(z)**7/7^6 + pow_im**6*log(z)**6/7^5 + 3*pow_im**5*pow_re**2*log(z)**7/7^6 + 6*pow_im**5*pow_re*log(z)**6/7^5 + 3*pow_im**5*log(z)**5/7^4 + 5*pow_im**4*pow_re**3*log(z)**7/7^6 + 15*pow_im**4*pow_re**2*log(z)**6/7^5 + 15*pow_im**4*pow_re*log(z)**5/7^4 + 5*pow_im**4*log(z)**4/7^3 + 5*pow_im**3*pow_re**4*log(z)**7/7^6 + 20*pow_im**3*pow_re**3*log(z)**6/7^5 + 30*pow_im**3*pow_re**2*log(z)**5/7^4 + 20*pow_im**3*pow_re*log(z)**4/7^3 + 5*pow_im**3*log(z)**3/7^2 + 3*pow_im**2*pow_re**5*log(z)**7/7^6 + 15*pow_im**2*pow_re**4*log(z)**6/7^5 + 30*pow_im**2*pow_re**3*log(z)**5/7^4 + 30*pow_im**2*pow_re**2*log(z)**4/7^3 + 15*pow_im**2*pow_re*log(z)**3/7^2 + 3*pow_im**2*log(z)**2/7 + pow_im*pow_re**6*log(z)**7/7^6 + 6*pow_im*pow_re**5*log(z)**6/7^5 + 15*pow_im*pow_re**4*log(z)**5/7^4 + 20*pow_im*pow_re**3*log(z)**4/7^3 + 15*pow_im*pow_re**2*log(z)**3/7^2 + 6*pow_im*pow_re*log(z)**2/7 + pow_im*log(z) + pow_re**7*log(z)**7/7^7 + pow_re**6*log(z)**6/7^5 + 3*pow_re**5*log(z)**5/7^4 + 5*pow_re**4*log(z)**4/7^3 + 5*pow_re**3*log(z)**3/7^2 + 3*pow_re**2*log(z)**2/7 + pow_re*log(z) + 1

(1 + pow1*log(x)/n + pow2*log(x)/n)**(z/2)



(1 + pow_re*log(z)/n + pow_im*log(z)/n)**n * (1 + pow_re*log(z)/n + pow_im*log(x)/n)**(z/2)
(1 + pow_re*log(z)/n + pow_im*log(z)/n)**n * (1 + pow_re*log(z)/n + pow_im*log(x)/n)**(z*n/2*n)
(1 + pow_re*log(z)/n + pow_im*log(z)/n)**2*n * (1 + pow_re*log(z)/n + pow_im*log(x)/n)**(z/2*n)


(1 + (pow_re + pow_im)*log(z)/n1)**2*n1
substitute (pow_re + pow_im)*log(z)/n1 = x2/n2, 2*n1 = n2 + x2/2
           n2 = 2*n1 - x2/2
           n2 = n1*x2/((pow_re + pow_im)*log(z))
           2*n1 - x2/2 = n1*x2/((pow_re + pow_im)*log(z))
           4*n1 - x2 = 2*n1*x/((pow_re + pow_im)*log(z))
           ((pow_re + pow_im)*log(z)) = 2*n1*x/(4*n1 - x2)
           ((pow_re + pow_im)*log(z)) = 2/(4/x2 - 1/n1)
           (4/x2 - 1/n1) = 2/((pow_re + pow_im)*log(z))
           1/n1 = 4/x2 - 2/((pow_re + pow_im)*log(z))
           n1 = 1 / (4/x2 - 2/((pow_re + pow_im)*log(z)))
           4/x2 = 2/((pow_re + pow_im)*log(z)) + 1/n1
           x2 = 4/(2/((pow_re + pow_im)*log(z)) + 1/n1)
            n2 = 2*n1 - x2/2
            n2 = 2 / (4/x - 2/((pow_re + pow_im)*log(z))) - 1/(1/((pow_re + pow_im)*log(z)) + 1/n1)
            n2 = 2 / ((2/((pow_re + pow_im)*log(z)) + 1/n1) - 2/((pow_re + pow_im)*log(z))) - 1/(1/((pow_re + pow_im)*log(z)) + 1/n1)
            x2/2 = 2*n1 - n2
            x2 = 4*n1 - 2*n2 
            
           n2 = 2*n1 - x2/2
           n2 = n1*x2/x1
           2*n1 - x2/2 = n1*x2/x1
           x2/2 = 2*n1 - n1*x2/x1
           x2 = 4*n1 - 2*n1*x2/x1
           x2 + 2*n1*x2/x1 = 4*n1
           x2*(x1 + 2*n1)/x1 = 4*n1
           x2 = 4*n1*x1/(x1 + 2*n1)
           x2 = 4*x1/(x1/n1 + 2)
           x2 = 2*x1

n2, n1, x2, x1, pow_re, pow_im, z = sympy.symbols("n1 n2 x2 x1 pow_re pow_im z")
sympy.simplify(sympy.expand("2 / ((2/((pow_re + pow_im)*log(z)) + 1/n1) - 2/((pow_re + pow_im)*log(z))) - 1/(1/((pow_re + pow_im)*log(z)) + 1/n1)"))
n2 = n1*(2*n1 + (pow_im + pow_re)*log(z))/(n1 + (pow_im + pow_re)*log(z))
x2 = 4*n1 - 2*n2
   = 4*n1 - 2*n1*(2*n1 + (pow_im + pow_re)*log(z))/(n1 + (pow_im + pow_re)*log(z))

(1 + (pow_re + pow_im)*log(z)/n1)**2*n1
x1 = (pow_re + pow_im)*log(z)
x1/n1 = x2/n2
2*n1 = n2 + x2/2

(1 + (pow_re + pow_im)*log(z)/n1)**2*n1
(1 + x1/n1)**2*n1
(1 + x2/n2)**(n2 + x2/2)
e^(x2) = e^(4*n1 - 2*n1*(2*n1 + (pow_im + pow_re)*log(z))/(n1 + (pow_im + pow_re)*log(z)))
       = e^(4*n1 - 2*n1*(2*n1 + x1)/(n1 + x1))
       = e^2*n1*(2 - (2*n1 + x1)/(n1 + x1))
       = e^2*n1*(2 - n1/(n1 + x1) - 1)
       = e^2*n1*(1 - n1/(n1 + x1))
       = e^2*n1*((n1 + x1 - n1)/(n1 + x1))
       = e^2*n1*(x1/(n1 + x1))
       = e^(2*x1/(1 + x1/n1))
       = e^(2*x1) as n1 -> inf
       = e^(2*(pow_im + pow_re)*log(z))
       = z^(2*(pow_im + pow_re))


e^2*n1*(2 - n1/(n1 + x1) - 1) = 0
2*n1*(2 - n1/(n1 + x1) - 1) = -inf
(2 - 1/(1 + x1/n1) - 1) = -inf/2*n1
1/(1 + x1/n1) = inf/2*n1 - 1
1/(1 + x1/n1) = (inf - 2*n1)/2*n1
(1 + x1/n1) = 2*n1/(inf - 2*n1)
x1/n1 = 2*n1/(inf - 2*n1) - 1
x1 = 2*n1^2/(inf - 2*n1) - 1
x1 = 2/(inf/n1^2 - 2/n1) - 1
x1 = -1
(pow_im + pow_re)*log(z) = -1
z^(pow_im + pow_re) = e^-1
log(z) = -1/(pow_im + pow_re)
z = -1/(pow_im + pow_re)
(pow_im + pow_re) = 1/z



(1 + (pow_re + pow_im)*log(z)/n)^(n + eps) = e^((pow_re + pow_im)*log(z))
x1 = (pow_re + pow_im)*log(z)
zpow = (pow_re + pow_im)
(1 + x1/n)^(n + eps) = z^zpow
(n + eps)*log(1 + x1/n) = zpow*log(z)
eps*log(1 + x1/n) = zpow*log(z) - n*log(1 + x1/n)
eps = (zpow*log(z) - n*log(1 + x1/n))/log(1 + x1/n)
eps = ((1/n)*zpow*log(z) - log(1 + x1/n))/((1/n)*log(1 + x1/n))

L'Hopital's Rule
x1, n, z = sympy.symbols("x1 n z")
sympy.Derivative("((1/n)*zpow*log(z) - log(1 + x1/n))", "n").doit() = x1/(n**2*(1 + x1/n)) - zpow*log(z)/n**2
sympy.Derivative("((1/n)*log(1 + x1/n))", "n").doit()               = -log(1 + x1/n)/n**2 - x1/(n**3*(1 + x1/n))

sympy.simplify(sympy.expand("(x1/(n**2*(1 + x1/n)) - zpow*log(z)/n**2) / (-log(1 + x1/n)/n**2 - x1/(n**3*(1 + x1/n)))"))

(-n*x1 + n*zpow*log(z) + x1*zpow*log(z))/(n*log((n + x1)/n) + x1*log((n + x1)/n) + x1)
(-n*x1 + n*zpow*log(z) + x1*zpow*log(z))/((n + x1)*log((n + x1)/n) + x1)

sympy.Derivative("(-n*x1 + n*zpow*log(z) + x1*zpow*log(z))", "n").doit() = -x1 + zpow*log(z)
sympy.Derivative("((n + x1)*log((n + x1)/n) + x1)", "n").doit()          = n*(1/n - (n + x1)/n**2) + log((n + x1)/n)

(-x1 + zpow*log(z)) / (n*(1/n - (n + x1)/n**2) + log((n + x1)/n))

sympy.Derivative("(-x1 + zpow*log(z))", "n").doit()                         = 0
sympy.Derivative("(n*(1/n - (n + x1)/n**2) + log((n + x1)/n))", "n").doit() = n*(-2/n**2 + 2*(n + x1)/n**3) + n*(1/n - (n + x1)/n**2)/(n + x1) + 1/n - (n + x1)/n**2

sympy.simplify(sympy.expand("n*(-2/n**2 + 2*(n + x1)/n**3) + n*(1/n - (n + x1)/n**2)/(n + x1) + 1/n - (n + x1)/n**2"))
0 / (x1**2/(n**2*(n + x1)))
0 / (x1**2/n**2)/(n + x1))
0 / (x1**2/n**3)/(1 + x1/n))
0

(1 + (pow_re + pow_im)*log(z)/n)^(n + eps) = e^((pow_re + pow_im)*log(z))
x1 = (pow_re + pow_im)*log(z)
(1 + x1/n)^(n + eps) = e^x1
(n + eps)*log(1 + x1/n) = x1
eps*log(1 + x1/n) = x1 - n*log(1 + x1/n)
eps = (x1 - n*log(1 + x1/n))/log(1 + x1/n)
eps = (x1/n - log(1 + x1/n))/((1/n)*log(1 + x1/n))

L'Hopital's Rule
x1, n = sympy.symbols("x1 n")
sympy.Derivative("x1/n - log(1 + x1/n)", "n").doit()   = -x1/n**2 + x1/(n**2*(1 + x1/n))
sympy.Derivative("(1/n) * log(1 + x1/n)", "n").doit() = -log(1 + x1/n)/n**2 - x1/(n**3*(1 + x1/n))

(-x1/n**2 + x1/(n**2*(1 + x1/n))) / (-log(1 + x1/n)/n**2 - x1/(n**3*(1 + x1/n)))
(-x1 + x1/(1 + x1/n)) / (-log(1 + x1/n) - x1/(n*(1 + x1/n)))

sympy.Derivative("(-x1 + x1/(1 + x1/n))", "n").doit()              = x1**2/(n**2*(1 + x1/n)**2)
sympy.Derivative("-log(1 + x1/n) - x1/(n*(1 + x1/n))", "n").doit() = 2*x1/(n**2*(1 + x1/n)) - x1**2/(n**3*(1 + x1/n)**2) 

sympy.simplify(sympy.expand("(x1^2/(n^2*(1 + x1/n)^2)) / (2*x1/(n^2*(1 + x1/n)) - x1^2/(n^3*(1 + x1/n)^2))")
n*x1/(2*n + x1)
x1/(2 + x1/n)
x1/2

(x1^2/(n^2*(1 + x1/n)^2)) / (2*x1/(n^2*(1 + x1/n)) - x1^2/(n^3*(1 + x1/n)^2))
(x1^2/n^2) / (2*x1*(1 + x1/n)/(n^2*) - x1^2/n^3))
(x1^2) / (2*x1*(1 + x1/n) - x1^2/n)
(x1^2) / (2*x1 + 2*x1^2/n - x1^2/n)
(x1^2) / (2*x1)
x1 / 2 = (pow_re + pow_im)*log(z)/2


(1 + pow_re*log(z)/n + pow_im*log(z)/n)**2*n
substitute 2*n = n + (pow_re + pow_im)*log(z)
             n = (1/2)*n + (1/2)*(pow_re + pow_im)*log(z)
(1 + (pow_re + pow_im)*log(z)/((1/2)*n/(pow_re + pow_im)*log(z) + (1/2)))**((1/2)*n + (1/2)*(pow_re + pow_im)*log(z))
(1 + 1/(n/(2*(pow_re + pow_im)*log(z)) + 1/2))**((1/2)*n + (1/2)*(pow_re + pow_im)*log(z))

(1 + (pow_re + pow_im)*log(z)/n)^(2*n)
substitute 2*n = n + 2*(pow_re + pow_im)*log(z)
             n = (1/2)*n + (pow_re + pow_im)*log(z)
(1 + (pow_re + pow_im)*log(z)/((1/2)*n + (pow_re + pow_im)*log(z)))^(n + 2*(pow_re + pow_im)*log(z))
(1 + 2*(pow_re + pow_im)*log(z)/(n + 2*(pow_re + pow_im)*log(z)))^(n + 2*(pow_re + pow_im)*log(z))
substitute x = 4*(pow_re + pow_im)*log(z)
           (1/2)*x = 2*(pow_re + pow_im)*log(z)
(1 + (1/2)*x/(n + (1/2)*x))^(n + (1/2)*x)
(1 + x/(2*n + x))^(n + (1/2)*x)
myexp_left = lambda x, n: mpmath.power(1 + mpmath.fdiv(x, 2*n + x), n + 0.5*x)


z_re, z_im, i, prec = 0, 0, 2, 192
myexp_left(mpmath.fmul(mpmath.mpc(z_re, z_im), mpmath.log(i)), prec)

myexp_left(mpmath.fmul(mpmath.mpc(-1, 1), mpmath.log(10)), prec)


class ms():
    def __init__(self, name, minsum, minsumidx, lenary, minsumary, minsumhsh, z_sum, icount):
        self.name = name
        self.maxminsum = 0
        self.maxminsumidx = -1
        self.minminsum = 10**8
        self.minminsumidx = -1
        self.lenary = 0
        self.minsumary = []
        self.minsumhsh = {}
        self.z_sum = mpmath.mpf(0)
        self.icount = 0
    
    def minsum_func(self, z_re, z_im):
        if self.lenary < 200 or mpmath.fabs(self.z_sum) < self.maxminsum:
            self.icount += 1
            if self.lenary < 200:
                abs_zsum = float(mpmath.fabs(self.z_sum))
                if abs_zsum in self.minsumhsh:
                    if type(self.minsumhsh[abs_sum]) is tuple:
                        self.minsumhsh[abs_sum] = [self.minsumhsh[abs_sum]]
                    if type(self.minsumhsh[abs_sum]) is list:
                        self.minsumhsh[abs_sum].append((self.z_sum, z_re, z_im))
                else:
                    self.minsumhsh[abs_zsum] = (self.z_sum, z_re, z_im)
                self.minsumary.append(self.z_sum)
                self.lenary = len(self.minsumary)
            else:
                self.minsumary.append(self.z_sum)
                if self.maxminsumidx == -1 or self.minminsumidx == -1:
                    self.maxminsum = mpmath.fabs(self.minsumary[0])
                    for msa in range(1, len(self.minsumary)):
                        abs_minsum = mpmath.fabs(self.minsumary[msa])
                        if abs_minsum > mpmath.fabs(self.maxminsum):
                            self.maxminsum = abs_minsum
                            self.maxminsumidx = msa
                        if abs_minsum < mpmath.fabs(self.minminsum):
                            self.minminsum = abs_minsum
                            self.minminsumidx = msa
                else:
                    if self.maxminsumidx != -1 and self.minsumary[self.maxminsumidx] in self.minsumary:
                        self.minsumary.remove(self.minsumary[self.maxminsumidx])
                    if float(self.mpmath.fabs(self.maxminsum)) in self.minsumhsh:
                        _ = self.minsumhsh.pop(float(mpmath.fabs(self.maxminsum)))
                    elif float(mpmath.fabs(self.maxminsum)) in self.minsumhsh:
                        _ = self.minsumhsh.pop(float(mpmath.fabs(self.maxminsum)))
                    elif mpmath.fabs(self.maxminsum) in self.minsumhsh:
                        _ = self.minsumhsh.pop(mpmath.fabs(self.maxminsum))
                    self.maxminsum = mpmath.fabs(self.minsumary[0])
                    for msa in range(1, len(self.minsumary)):
                        abs_minsum = mpmath.fabs(self.minsumary[msa])
                        if abs_minsum > mpmath.fabs(self.maxminsum):
                            self.maxminsum = abs_minsum
                            self.maxminsumidx = msa
                        if abs_minsum < mpmath.fabs(self.minminsum):
                            self.minminsum = abs_minsum
                            self.minminsumidx = msa
                abs_zsum = float(mpmath.fabs(self.z_sum))
                if abs_zsum in self.minsumhsh:
                    if type(self.minsumhsh[abs_sum]) is tuple:
                        self.minsumhsh[abs_sum] = [self.minsumhsh[abs_sum]]
                    if type(self.minsumhsh[abs_sum]) is list:
                        self.minsumhsh[abs_sum].append((self.z_sum, z_re, z_im))
                else:
                    self.minsumhsh[abs_zsum] = (self.z_sum, z_re, z_im)
                if self.icount > 1000:
                    print("new minsum" + self.name + " (" + round(mpmath.fabs(self.z_sum), 8) + ") found at coords (" + str(z_re) + ", " + str(z_im) + ")")




ms_e = ms("_e", 10**8, -1, 0, [], {}, 0, 0)
ms_mye1 = ms("_mye1", 10**8, -1, 0, [], {}, 0, 0)
ms_mye2 = ms("_mye2", 10**8, -1, 0, [], {}, 0, 0)
ms_mye3 = ms("_mye3", 10**8, -1, 0, [], {}, 0, 0)
ms_mye4 = ms("_mye4", 10**8, -1, 0, [], {}, 0, 0)
ms_mye5 = ms("_mye5", 10**8, -1, 0, [], {}, 0, 0)
ms_mye6 = ms("_mye6", 10**8, -1, 0, [], {}, 0, 0)
ms_intpow = ms("_intpow", 10**8, -1, 0, [], {}, 0, 0)
best_n = lambda iprec: int(mpmath.ceil(mpmath.exp(mpmath.log(iprec)/1.181)))
myexp_left1 = lambda x, n: mpmath.power(1 + mpmath.fdiv(x, 2*n + x), n + 0.5*x)
myexp_left2 = lambda x, n: mpmath.power(1 + mpmath.fdiv(x, n + 0.5*x), n + 0.5*x)
# prec_n = best_n(53)
prec_n = 6.20128516868674e+187
mpmath.mp.prec = 512
# tgt = abs(mpmath.exp(mpmath.fmul(2 * z_mpc, mpmath.log(17))))
this_myexp, prev_myexp, decreasing_myexp, min_myexp = 2**32, 2**32, [2, 2**32], [2, 2**32] 
for prec_n in [mpmath.power(2, ipow2) for ipow2 in range(64, 8192*8192 + 1, 64)]:
    this_myexp = abs(myexp_left(mpmath.fmul(mpmath.zetazero(8), mpmath.log(17)), prec_n))
    if this_myexp < prev_myexp and this_myexp < decreasing_myexp[1]:
        decreasing_myexp = [prec_n, this_myexp]
    if this_myexp < min_myexp[1]:
        min_myexp = [prec_n, this_myexp]
    prev_myexp = this_myexp
for z_re in [x/350 for x in range(-350, 350 + 1)]:
    for z_im in [x/350 for x in range(14*350, 22*350 + 1)]:
        for obj in [ms_e, ms_mye1, ms_mye2, ms_mye3, ms_mye4, ms_mye5, ms_mye6, ms_intpow]:
            obj.z_sum = mpmath.mpf(0)
        z_mpc = -mpmath.mpc(z_re, z_im)
        for i in range(1, 5000 + 1):
            ms_e.z_sum = mpmath.fadd(ms_e.z_sum, (-1)**((i + 1) % 2) * mpmath.exp(mpmath.fmul(2 * z_mpc, mpmath.log(i))))
            ms_mye1.z_sum = mpmath.fadd(ms_mye1.z_sum, (-1)**((i + 1) % 2) * myexp_left1(mpmath.fmul(0.5*z_mpc, mpmath.log(i)), prec_n))
            ms_mye2.z_sum = mpmath.fadd(ms_mye2.z_sum, (-1)**((i + 1) % 2) * myexp_left1(mpmath.fmul(z_mpc, mpmath.log(i)), prec_n))
            ms_mye3.z_sum = mpmath.fadd(ms_mye3.z_sum, (-1)**((i + 1) % 2) * myexp_left1(mpmath.fmul(2*z_mpc, mpmath.log(i)), prec_n))
            ms_mye4.z_sum = mpmath.fadd(ms_mye4.z_sum, (-1)**((i + 1) % 2) * myexp_left2(mpmath.fmul(0.5*z_mpc, mpmath.log(i)), prec_n))
            ms_mye5.z_sum = mpmath.fadd(ms_mye5.z_sum, (-1)**((i + 1) % 2) * myexp_left2(mpmath.fmul(z_mpc, mpmath.log(i)), prec_n))
            ms_mye6.z_sum = mpmath.fadd(ms_mye6.z_sum, (-1)**((i + 1) % 2) * myexp_left2(mpmath.fmul(2*z_mpc, mpmath.log(i)), prec_n))
            ms_intpow.z_sum = mpmath.fadd(ms_intpow.z_sum, (-1)**((i + 1) % 2) * mpmath.power(i, 2 * z_mpc))
        for obj in [ms_e, ms_mye1, ms_mye2, ms_mye3, ms_mye4, ms_mye5, ms_mye6, ms_intpow]:
            obj.minsum_func(z_re, z_im)

for obj in [ms_e, ms_mye, ms_intpow]:
    min_sum = min([abs(z_sum) for z_sum in obj.minsumary])
    if type(obj.minsumhsh[float(mpmath.fabs(min_sum))]) is tuple:
        print("ms" + obj.name + ", " + str(obj.minsumhsh[float(mpmath.fabs(min_sum))]))
    elif type(obj.minsumhsh[float(mpmath.fabs(min_sum))]) is list:
        for msh in range(0, len(obj.minsumhsh[float(mpmath.fabs(min_sum))])):
            print("ms" + obj.name + ", " + str(obj.minsumhsh[float(mpmath.fabs(min_sum))][msh]))

ms_e, (mpf('0.0'), 0.5, 14)
ms_mye, (mpc(real='0.0', imag='0.0'), -0.9266666666666666, 0.0)
ms_intpow, (mpc(real='-106027.69717883406', imag='147553.75407192047'), -0.9266666666666666, 3.7066666666666666)


(1 + (pow_re + pow_im)*log(z)/n)^(2*n1)
substitute 2*n1 = n2 + (1/2)*(pow_re + pow_im)*log(z)
(1 + (pow_re + pow_im)*log(z)/(n2 + (1/2)*(pow_re + pow_im)*log(z)))^(n2 + (1/2)*(pow_re + pow_im)*log(z))
(1 + (pow_re + pow_im)*log(z)/(n2 + (1/2)*(pow_re + pow_im)*log(z)))^(n2 + (1/2)*(pow_re + pow_im)*log(z))
substitute (pow_re + pow_im)*log(z)/(n2 + (1/2)*(pow_re + pow_im)*log(z)) = (pow_re + pow_im)*log(z) / n2
           n2 = n2 + (1/2)*(pow_re + pow_im)*log(z))
           (1/2)*(pow_re + pow_im)*log(z)) = 0


def calc_zeta_sum(z_re, z_im, max_i, prec):
    best_n = lambda iprec: int(mpmath.ceil(mpmath.exp(mpmath.log(iprec)/1.181)))
    myexp_left = lambda x, n: mpmath.power(1 + mpmath.fdiv(x, n + 0.5*x), n + 0.5*x)
    hsh = {}
    hsh[53] = 10**6
    hsh[64] = 5 * 10**5
    hsh[128] = 2.5 * 10**5
    hsh[256] = 2 * 10**5
    if prec not in hsh:
        return -1
    n = best_n(prec)
    z_sum_e = mpmath.mpf(0)
    z_sum_mye = mpmath.mpf(0)
    z_sum_intpow = mpmath.mpf(0)
    z_mpc = -mpmath.mpc(z_re, z_im)
    t1 = time.time()
    for i in range(1, max_i + 1):
        # alternating sum
        z_sum_e = mpmath.fadd(z_sum_e, (-1)**((i + 1) % 2) * mpmath.exp(mpmath.fmul(2 * z_mpc, mpmath.log(i))))
        z_sum_mye = mpmath.fadd(z_sum_mye, (-1)**((i + 1) % 2) * myexp_left(mpmath.fmul(z_mpc, mpmath.log(i)), n))
        z_sum_intpow = mpmath.fadd(z_sum_intpow, (-1)**((i + 1) % 2) * mpmath.power(i, 2 * z_mpc))
        if  i % hsh[prec] == 0:
            t2 = time.time()
            print(str(i) + ", time elapsed " + str(round((t2 - t1)/60, 2)) + " minutes")
            print("z_sum_e = mpc('" + str(z_sum_e.real) + "', '" + str(z_sum_e.imag) + "')")
            print("abs(z_sum_e) = mpf('" + str(mpmath.fabs(z_sum_e)) + "')")
            print("z_sum_mye = mpc('" + str(z_sum_mye.real) + "', '" + str(z_sum_mye.imag) + "')")
            print("abs(z_sum_mye) = mpf('" + str(mpmath.fabs(z_sum_mye)) + "')")
            print("z_sum_intpow = mpc('" + str(z_sum_intpow.real) + "', '" + str(z_sum_intpow.imag) + "')")
            print("abs(z_sum_intpow) = mpf('" + str(mpmath.fabs(z_sum_intpow)) + "')")
    return z_sum_e, z_sum_mye, z_sum_intpow


e^0.5+14j 0
e^2(0.25+7j) = 0

mpmath.mp.prec, maxi = 53, 8*10**6
z_sum_e, z_sum_mye, z_sum_intpow = calc_zeta_sum(0.25, mpmath.zetazero(8).imag/2, maxi, 53)
mpc(real='113003.53473550486', imag='1037850.5789680264')
mpf('1043984.4937196079')

 
def calc_and_print_left(i, z_re, z_im, prec):
    x = mpmath.fmul(4*mpmath.log(i), mpmath.mpc(z_re, z_im))
    z_left = myexp_left(x, mpmath.power(2, best_n(prec) + 0.5*x))
    print("mpmath.mpc('" + str(z_left.real) + "', '" + str(z_left.imag) + "')")
    if z_left.real < 1:
        print("mpmath.mpc(1 - mpmath.power(2, mpmath.mpf('" + str(mpmath.log(1 - z_left.real, 2)) + "')), mpmath.power(2, mpmath.mpf('" + str(mpmath.log(z_left.imag, 2)) + "')))")
    else:
        print("mpmath.mpc(1 + mpmath.power(2, mpmath.mpf('" + str(mpmath.log(z_left.real - 1, 2)) + "')), mpmath.power(2, mpmath.mpf('" + str(mpmath.log(z_left.imag, 2)) + "')))")

calc_and_print_left(2, 0.5, mpmath.zetazero(8).imag, 128)
mpmath.mpc('-1.861880575089820214368697096249056656603618683596715898181384172657013964783', '-0.7303428811888274281234803971029273831100015791050236645751985546096548344079')

calc_and_print_left(200, 0.5, mpmath.zetazero(8).imag, 256)
mpmath.mpc('180.2073747218817283887521962999749743214426947907167745374743469163731142479', '86.748499098527936755092713669061064154740168376557518224639687492230540879')

(1 + pow_re*log(z)/n + pow_im*log(x)/n)**(z/2*n)
myexp_right = lambda z, n: mpmath.power(1 + mpmath.fdiv(z, n), mpmath.fdiv(z, 2*n))
(1 + pow_re*log(z)/n + pow_im*log(z)/n)**2*n
myexp_left = lambda z, n: mpmath.power(1 + mpmath.fdiv(z, n), 2*n)

best_n = lambda iprec: int(mpmath.ceil(mpmath.exp(mpmath.log(iprec)/1.181)))
mpmath.mp.prec = 256
def calc_and_print_right(x, z_re, z_im, prec):
    z_right = myexp_right(mpmath.fmul(mpmath.log(x), mpmath.mpc(z_re, z_im)), mpmath.power(2, best_n(prec)))
    print("mpmath.mpc('" + str(z_right.real) + "', '" + str(z_right.imag) + "')")
    if z_right.real < 1:
        print("mpmath.mpc(1 - mpmath.power(2, mpmath.mpf('" + str(mpmath.log(1 - z_right.real, 2)) + "')), mpmath.power(2, mpmath.mpf('" + str(mpmath.log(z_right.imag, 2)) + "')))")
    else:
        print("mpmath.mpc(1 + mpmath.power(2, mpmath.mpf('" + str(mpmath.log(z_right.real - 1, 2)) + "')), mpmath.power(2, mpmath.mpf('" + str(mpmath.log(z_right.imag, 2)) + "')))")

def calc_and_print_left(x, z_re, z_im, prec):
    z_left = myexp_left(mpmath.fmul(mpmath.log(x), mpmath.mpc(z_re, z_im)), mpmath.power(2, best_n(prec)))
    print("mpmath.mpc('" + str(z_left.real) + "', '" + str(z_left.imag) + "')")
    if z_left.real < 1:
        print("mpmath.mpc(1 - mpmath.power(2, mpmath.mpf('" + str(mpmath.log(1 - z_left.real, 2)) + "')), mpmath.power(2, mpmath.mpf('" + str(mpmath.log(z_left.imag, 2)) + "')))")
    else:
        print("mpmath.mpc(1 + mpmath.power(2, mpmath.mpf('" + str(mpmath.log(z_left.real - 1, 2)) + "')), mpmath.power(2, mpmath.mpf('" + str(mpmath.log(z_left.imag, 2)) + "')))")

calc_and_print_right(2, 0.5, 99.2137, 128)
mpmath.mpc(real='0.9999999999999999999999999999999995552727740715542474719152646449392724777257708', imag='4.482632149839390380245506826541075924858248298394234182816508048982849972692813e-36')
mpmath.mpc(1 - mpmath.power(2, mpmath.mpf('-110.7926344978703334291269064837398435091292258356578542043298198469285330566')), mpmath.power(2, mpmath.mpf('-117.4250653009813070299737535741803945976984348903131225035278003479079638272')))

calc_and_print_right(2, 0.5, 99.2137, 256)
mpmath.mpc('1.000000000000000000000000000000000000011295396073927752966531061612777794918', '0.0')
mpmath.mpc(1 + mpmath.power(2, mpmath.mpf('-126.0575327458897952286034157768061800737602870017616646573981471785476248789')), mpmath.power(2, mpmath.mpf('-inf')))
~ mpmath.mpc(1, 0)

calc_and_print_right(200, 0.5, 99.2137, 128)
mpmath.mpc('1.000000000000000000000000000000000000659973472517589182802802586269155792294', '0.0')
mpmath.mpc(mpmath.power(2, mpmath.mpf('-120.1889314739923149303252294892831969576983361284845561589668052777469664199')) - 1, mpmath.power(2, mpmath.mpf('-inf')))

calc_and_print_right(200, 0.5, 99.2137, 256)
mpmath.mpc('1.000000000000000000000000000000000000659973472517589182802802586269155792294', '0.0')
mpmath.mpc(mpmath.power(2, mpmath.mpf('-120.1889314739923149303252294892831969576983361284845561589668052777469664199')) - 1, mpmath.power(2, mpmath.mpf('-inf')))

calc_and_print_left(2, 0.5, 99.2137, 128)
mpmath.mpc('1.54162101108875052331133727861861603474024873688927447226866341479069816441', '-1.27412898019380869256470191682281413114422511813845225087366576788842291473')

calc_and_print_left(200, 0.5, 99.2137, 128)
mpmath.mpc('-90.32695704606519726404614811701016616720242486141539031754687629772922349946', '178.4405806726930585108166126928068239312055537699696310261426939806270782815')
calc_and_print_left(200, 0.5, 99.2137, 256)
mpmath.mpc('-90.32695704605458859501338089659523647543685474126917097165368145000414019129', '178.4405806726715662380244749258092784959345737250859255204576650838729876764')


(1 + z/n)^(n + z/2) = e^z

e^z = (1 + z/n)^(n + z/2) = (1 + z/n)^n * (1 + z/n)^(z/2)

e^(ln(z)*(a+bi)) = (1 + (ln(z)*(a+bi))/n)^n * (1 + (ln(x)*(a+bi))/n)^(z/2)

myexp_left = lambda z, n: mpmath.power(1 + mpmath.fdiv(z, n), n)
myexp_right = lambda z, n: mpmath.power(1 + mpmath.fdiv(z, n), mpmath.fdiv(z, 2))
myexp = lambda z, zpow, n: mpmath.fmul(myexp_left(mpmath.fmul(z, zpow), n), myexp_right(mpmath.fmul(z, zpow), n))

best_n = lambda iprec: int(mpmath.ceil(mpmath.exp(mpmath.log(iprec)/1.181)))

def calc_and_print(z1, z1_pow, iprec):
    n = best_n(iprec)
    z2 = myexp(z1, z1_pow, mpmath.power(2, n) + mpmath.power(2, n/2))
    print("mpmath.mpc('" + str(z2.real) + "', '" + str(z2.imag) + "')")
    print("mpmath.mpc(" + ("-" if z2.real < 0 else "") + "mpmath.power(2, " + str(mpmath.log(abs(z2.real), 2)) + "), " + ("-" if z2.imag < 0 else "") + "mpmath.power(2, " + str(mpmath.log(abs(z2.imag), 2)) + "))")

calc_and_print(2, mpmath.mpc(0.5, mpmath.power(2, 128 - 4)), mpmath.power(2, best_n(128)))
z = myexp(2, mpmath.mpc(0.5, mpmath.power(2, mpmath.mp.prec - 1)), mpmath.power(2, best_n(128)))
mpmath.mpc(real='-4.4448301323572658046554472665886154327045e-116068303764065406596853161452211912363', imag='-3.4607970967024993485119349967510662118789e-116068303764065406596853161452211912362')
mpmath.mpc(-mpmath.power(2, -3.8557055919976946436902596239385613726e+38), -mpmath.power(2, -3.8557055919976946436902596239385613726e+38))

z = myexp(2, mpmath.mpc(0.5, mpmath.power(2, 128 - 4)), mpmath.power(2, best_n(128)))
mpmath.mpc('-7.8547810242086417746620800438277425331e-14508537970508175813795383743662754832', '-5.8859821071931134559524924160196735044e-14508537970508175813795383743662754832')
mpmath.mpc(mpmath.power(2, -48196319899971183029156900904635217693.0), mpmath.power(2, -48196319899971183029156900904635217694.0))

mpmath.mp.prec = 512
z = myexp(2, mpmath.mpc(0.5, mpmath.power(2, 128)), mpmath.power(2, best_n(128)))
mpmath.mpc('-1.03995659627849626827340048243265550061348698994028267337284627053022688457036611637074596519870049041971229537277933435440046036483233445670822619106592e-232136607528130813158277332809981371707', '-4.03282272470279596515058010369990276719239079046785687786097999006703341375233381274521910492038151527923209499927602844743014920936290435994172062378293e-232136607528130813158277332809981371708')
mpmath.mpc(-mpmath.power(2, -771141118399538928620359367219497824737.32358481483062916243908261997311286077549995636706109812353440271644156879828208622380838186619669995862894490286, -mpmath.power(2, -771141118399538928620359367219497824738.690246237912821085961983476951566562028246229888100903248144355269426013748756209965227354299241430544491334518784))

mpmath.mp.prec = 4096
two = mpmath.mpf(0)
for i in range(mpmath.mp.prec - 1, int(mpmath.mp.prec/4), -1):
    two += mpmath.power(2, i)

i = 1024
while mpmath.power(1 + mpmath.fdiv(mpmath.mpc(0, 2 * mpmath.pi()), two), two + mpmath.mpf('0.5' + ('0' * i) + '1')).imag - mpmath.power(1 + mpmath.fdiv(mpmath.mpc(0, 2 * mpmath.pi()), two), two).imag != 0:
    i += 1

mpmath.power(1 + mpmath.fdiv(mpmath.mpc(0, 2 * mpmath.pi()), two), two + mpmath.mpf('0.5' + ('0' * 1231) + '1')).imag - mpmath.power(1 + mpmath.fdiv(mpmath.mpc(0, 2 * mpmath.pi()), two), two).imag
mpmath.power(1 + mpmath.fdiv(mpmath.mpc(0, 2 * mpmath.pi()), two), two + mpmath.mpf('0.5' + ('0' * 1232) + '1')).imag - mpmath.power(1 + mpmath.fdiv(mpmath.mpc(0, 2 * mpmath.pi()), two), two).imag

ip = -mpmath.lambertw(-mpmath.log(0.5))/mpmath.log(0.5)
mpmath.log(mpmath.mpc(0.37038, ip), mpmath.zetazero(100))
mpmath.log(mpmath.mpc(0.37122, ip), mpmath.zetazero(101))

def factors(n):
    rslt = []
    for p in primesieve.primes(int(math.sqrt(n))):
        while n % p == 0:
            n /= p
            rslt.append(p)
        if n == 1:
            break
    if n != 1:
        rslt.append(int(n))
    return rslt


# 
# e^(ai + bj + ck) = cos(abs_v) + (sin(abs_v)/abs_v)*(ai + bj + ck)
# e^(a + bi + cj + dk) = e^a * (cos(abs_v) + (sin(abs_v)/abs_v)*(bi + cj + dk)
# 
def power3(a, b, c, pow):
    abs_z = mpmath.sqrt(mpmath.power(a, 2) + mpmath.power(b, 2) + mpmath.power(c, 2))
    sin_over_z = mpmath.sin(abs_z)/abs_z
    return mpmath.cos(abs_z), sin_over_z * a, sin_over_z * b, sin_over_z * c

# 
# e^(ai + bj + ck) = cos(abs_v) + (sin(abs_v)/abs_v)*(ai + bj + ck)
# e^(a + bi + cj + dk) = e^a * (cos(abs_v) + (sin(abs_v)/abs_v)*(bi + cj + dk))
# e^((pi/sqrt(2)) * i) + e^((pi/sqrt(2)) * j) = e^((pi/sqrt(3)) * i) + e^((pi/sqrt(3)) * j) + e^((pi/sqrt(3)) * k) = -1
# (1 + (pi * i)/(n * sqrt(2)) + (pi * j)/(n * sqrt(2)))^n = -1
# (1 + (pi * i)/(2 * sqrt(2)) + (pi * j)/(2 * sqrt(2)))^2 = 1 + 2*(pi*i)/(2*sqrt(2)) + 2*(pi*j)/(2*sqrt(2)) - 2*(pi^2)/8 + 2*(pi*i*j)/8 = 1 + (pi*i)/sqrt(2) + (pi*j)/sqrt(2) - (pi^2)/4 + (pi*i*j)/4
# (1 + (pi * i)/(2 * sqrt(2)) + (pi * j)/(2 * sqrt(2)))^4 = 1 + 4*(pi*i)/(2*sqrt(2)) + 4*(pi*j)/(2*sqrt(2)) - 2*(pi^4)/8 + 2*(pi*i*j)/8 = 1 + (pi*i)/sqrt(2) + (pi*j)/sqrt(2) - (pi^2)/4 + (pi*i*j)/4
# 
def power4(a, b, c, d, pow):
    abs_z = mpmath.sqrt(mpmath.power(b, 2) + mpmath.power(c, 2) + mpmath.power(d, 2))
    sin_over_z = mpmath.exp(a) * mpmath.sin(abs_z)/abs_z
    return mpmath.exp(a) * (mpmath.cos(abs_z)), sin_over_z * a, sin_over_z * b, sin_over_z * c

def get_e2(x, adj):
    x = abs(x)
    n = mpmath.mpf(2)
    dn = mpmath.mpf(2)
    if x > mpmath.exp(-1):
        return mpmath.inf 
    elif x < mpmath.power(1 - mpmath.fdiv(1, 2), 2 + adj):
        n = mpmath.mpf(1.0001220703125)
        dn = mpmath.mpf(0.5)
    for pow2 in range(4, 64 + 1, 2):
        if x > mpmath.power(1 - mpmath.fdiv(1, mpmath.power(2, pow2)), mpmath.power(2, pow2) + adj):
            n = mpmath.power(2, pow2 - 2)
            dn = mpmath.power(2, pow2 - 3)
        else:
            break
    iter = 0
    while mpmath.power(1 - mpmath.fdiv(1, n), n + adj) < x:
        iter += 1
        n += dn
        if mpmath.power(1 - mpmath.fdiv(1, n), n + adj) > x:
            n -= dn
            dn /= 2
            if dn < mpmath.power(2, -mpmath.mp.prec):
                break
        if iter > 10**4:
            break
    return n



returns 1/e

def get_e4(x, adj=0):
    x = abs(x)
    n = mpmath.mpf(2)
    dn = mpmath.mpf(64)
    cmp = 1
    if x >= 0.5:
        return 1
    elif x > mpmath.fdiv(1, mpmath.power(1 + mpmath.fdiv(1, 2), 2 + adj)):
        n = mpmath.mpf(1.0625)
        dn = mpmath.mpf(0.125)
        cmp = -1
    elif x > mpmath.fdiv(1, mpmath.power(1 + mpmath.fdiv(1, 1.0001), 1.0001 + adj)):
        n = mpmath.mpf(1.0001)
        dn = mpmath.mpf(0.0016)
        cmp = -1
    elif x < mpmath.fdiv(1, mpmath.power(1 + mpmath.fdiv(1, 0.99999999), 0.99999999 + adj)):
        n = mpmath.mpf(0.99999999)
        dn = -mpmath.power(2, -10)
    elif x < 1/math.e:
        return math.inf
    iter = 0
    print("n " + str(n) + ", dn " + str(dn) + ", cmp " + str(cmp))
    compare = lambda val, x, posneg: True if (val > x and posneg > 0) or (val < x and posneg < 0) else False 
    while compare(mpmath.fdiv(1, mpmath.power(1 + mpmath.fdiv(1, n), n + adj)), x, cmp):
        iter += 1
        n += dn
        if not compare(mpmath.fdiv(1, mpmath.power(1 + mpmath.fdiv(1, n), n + adj)), x, cmp):
            n -= dn
            dn /= 2
            if dn < mpmath.power(2, -mpmath.mp.prec):
                break
        if iter > 4*mpmath.mp.prec or n < 0:
            print("possible non-convergence")
            break
    return n


def get_e5(x, adj):
    n = mpmath.mpf(2)
    dn = mpmath.mpf(2)
    pi = mpmath.mpc(0, mpmath.pi())
    pow2 = min(mpmath.mp.prec, 64)
    two = mpmath.power(2, -pow2)
    if adj == mpmath.mpc(0, mpmath.pi()/2):
        # mpmath.mpf('-0.041079238187590181587515379250572247269049')
        if x > mpmath.power(1 + mpmath.fdiv(pi, 1 + two), two + adj).real:
            return 1
        if x < mpmath.power(1 + mpmath.fdiv(pi, 2), 2 + adj).real:
            n = mpmath.mpf(1) + two
            dn = mpmath.mpf(0.5)
    else:
        if x > mpmath.power(1 + mpmath.fdiv(pi, 1 + two), two + adj).real:
            return 1
        f = mpmath.mpf('1.3476738473541767437418299360071350666057')
        if x == mpmath.power(1 + mpmath.fdiv(pi, f), f + adj).real:
            return f
        minval = mpmath.mpf('-2.32059738855693746160808907538830233492')
        for thisx in [mpmath.fdiv(i, 64) for i in range(2 * 64, 6 * 64)]:
            if mpmath.power(1 + mpmath.fdiv(pi, thisx), thisx + adj).real < minval:
                minval = mpmath.power(1 + mpmath.fdiv(pi, 2), 2 + adj).real
        if x < minval:
            return 0
        if x > mpmath.power(1 + mpmath.fdiv(pi, 2), 2 + adj).real:
            n = mpmath.mpf(1) + two
            dn = mpmath.mpf(0.5)
    for pow2 in range(4, 64 + 1, 2):
        if x < mpmath.power(1 + mpmath.fdiv(pi, mpmath.power(2, pow2)), mpmath.power(2, pow2) + adj).real:
            n = mpmath.power(2, pow2 - 2)
            dn = mpmath.power(2, pow2 - 3)
        else:
            break
    iter = 0
    two = mpmath.power(2, -mpmath.mp.prec)
    while mpmath.power(1 + mpmath.fdiv(pi, n), n + adj).real > x:
        iter += 1
        n += dn
        if mpmath.power(1 + mpmath.fdiv(pi, n), n + adj).real < x:
            n -= dn
            dn /= 2
            if dn < two:
                break
        if iter > 10**4:
            break
    return n


def get_e6(x, adj):
    x = abs(x)
    n = mpmath.mpf(2)
    dn = mpmath.mpf(2)
    pi = mpmath.mpc(0, mpmath.pi())
    if adj == mpmath.mpc(0, mpmath.pi()/2):
        if x > mpmath.power(1 - mpmath.fdiv(pi, 1.25), 1.25 + adj).real:
            return mpmath.inf
        if x < 1:
            n = 
    elif x > mpmath.power(1 - mpmath.fdiv(1, 2), 2 + adj).real:
        n = mpmath.mpf(1.0001220703125)
        dn = mpmath.mpf(0.5)
    for pow2 in range(4, 64 + 1, 2):
        if x > mpmath.power(1 - mpmath.fdiv(pi, mpmath.power(2, pow2)), mpmath.power(2, pow2) + adj).real:
            n = mpmath.power(2, pow2 - 2)
            dn = mpmath.power(2, pow2 - 3)
        else:
            break
    iter = 0
    while abs(mpmath.power(1 - mpmath.fdiv(1, n), n + adj).real) > x:
        iter += 1
        n += dn
        if mpmath.power(1 - mpmath.fdiv(1, n), n + adj).real > x:
            n -= dn
            dn /= 2
            if dn < mpmath.power(2, -mpmath.mp.prec):
                break
        if iter > 10**4:
            break
    return n




one = pyquaternion.Quaternion(1, 0, 0, 0)
i = pyquaternion.Quaternion(0, 1, 0, 0)
j = pyquaternion.Quaternion(0, 0, 1, 0)
k = pyquaternion.Quaternion(0, 0, 0, 1)
q = pyquaternion.Quaternion(1, numpy.pi, numpy.pi, numpy.pi)

pi = numpy.pi
n = 10**8
(1 + (pi*i)/n + (pi*j)/n + (pi*k)/n)**(n + 0.5 + pi*i/4 + pi*j/4 + pi*k/4)
Quaternion(0.43453756157654716, -0.5199927480368263, -0.5199927480368263, -0.5199927480368263)
(1 + (pi*i)/(n*numpy.sqrt(3)) + (pi*j)/(n*numpy.sqrt(3)) + (pi*k)/(n*numpy.sqrt(3)))**(n + 0.5 + pi*i + pi*j + pi*k)
Quaternion(-0.5111705101900349, 0.49622063436908853, 0.49622063436908853, 0.49622063436908853)

n  = 4000
(1 + (pi*i)/(n*numpy.sqrt(3)) + (pi*j)/(n*numpy.sqrt(3)) + (pi*k)/(n*numpy.sqrt(3)))**(n + pi*i/2 + pi*j/2 + pi*k/2)
Quaternion(-1.0012344614902897, 3.7364036643106084e-07, 3.7364036643106084e-07, 3.7364036643106084e-07)
(1 + (pi*i)/(n*numpy.sqrt(3)) + (pi*j)/(n*numpy.sqrt(3)) + (pi*k)/(n*numpy.sqrt(3)))**(n + pi*i/3 + pi*j/3 + pi*k/3)
Quaternion(-1.0012344614902897, 3.7364036643106084e-07, 3.7364036643106084e-07, 3.7364036643106084e-07)pyquaternion.Quaternion.log(1 + (pi*i)/n + (pi*j)/n + (pi*k)/n)/pyquaternion.Quaternion.log(pyquaternion.Quaternion(-1, 0, 0, 0))


n = 1000
q = pyquaternion.Quaternion(1, numpy.pi/n, numpy.pi/n, numpy.pi/n)
q**n
Quaternion(0.6661371314192844, -0.4306161985429402, -0.4306161985429402, -0.4306161985429402)
q = pyquaternion.Quaternion(1, numpy.pi/(n * numpy.sqrt(3)), numpy.pi/(n * numpy.sqrt(3)), numpy.pi/(n * numpy.sqrt(3)))
q**n
Quaternion(-1.0012344614902897, 3.7364036643106084e-07, 3.7364036643106084e-07, 3.7364036643106084e-07)
q**pyquaternion.Quaternion(n, pi*i/8, pi*j/8, pi*k/8)
Quaternion(3.2338250914366094e-07, 0.5777065176166859, 0.5777065176166859, 0.5777065176166859)
q**pyquaternion.Quaternion(n, 4*pi*i, 4*pi*j, 4*pi*k)
Quaternion(3.2338250914366094e-07, 0.5777065176166859, 0.5777065176166859, 0.5777065176166859)
n = 500
q = pyquaternion.Quaternion(1, numpy.pi/(n * numpy.sqrt(3)), numpy.pi/(n * numpy.sqrt(3)), numpy.pi/(n * numpy.sqrt(3)))
q**pyquaternion.Quaternion(n + 1, 4*pi*i, 4*pi*j, 4*pi*k)
Quaternion(-1.009918534293708, -0.003639473427506688, -0.003639473427506688, -0.003639473427506688)
q**pyquaternion.Quaternion(n + 1, 2*pi*i, 2*pi*j, 2*pi*k)
Quaternion(-1.009918534293708, -0.003639473427506688, -0.003639473427506688, -0.003639473427506688)
q**pyquaternion.Quaternion(n + 1, pi/3, pi/3, pi/3)
Quaternion(-1.009918534293708, -0.003639473427506688, -0.003639473427506688, -0.003639473427506688)




eps = (x/log(1 + x/n)) - n
(1 + x/n)^(n + eps) = e^x
(1 + x/n)^(n + (x/log(1 + x/n)) - n) = e^x
(1 + x/n)^(x/log(1 + x/n)) = e^x

eps = x/2
(1 + x/n)^(n + eps) = e^x
(1 + x/n)^(n + x/2) = e^x

(1 + ln(x)/n)^(n + ln(x)/2) = e^ln(x)
(n + ln(x)/2)*log(1 + ln(x)/n) = ln(x)
n*log(1 + ln(x)/n) = ln(x) - (ln(x)/2)*log(1 + ln(x)/n)
n*log(1 + ln(x)/n) = ln(x)*(1 - (1/2)*log(1 + ln(x)/n))
(1 + ln(x)/n)^n = e^ln(x)*(1 - (1/2)*log(1 + ln(x)/n))
(1 + ln(x)/n)^n = e^(ln(x) - (1/2)*ln(x)*log(1 + ln(x)/n))
(1 + ln(x)/n)^n = e^ln(x)/e^(ln(x)*(1/2)*log(1 + ln(x)/n))
(1 + ln(x)/n)^n = x/x^((1/2)*log(1 + ln(x)/n))

ln(x) = n*log(1 + ln(x)/n) / (1 - (1/2)*log(1 + ln(x)/n))
ln(x) = n / (1/log(1 + ln(x)/n) - 1/2)
ln(x) * (1/log(1 + ln(x)/n) - 1/2) = n
x = e^(n / (1/log(1 + ln(x)/n) - 1/2))
sqrt(x) = e^(1/2)*(n / (1/log(1 + ln(x)/n) - 1/2))

# p1p2 = e^61.535782837842311364741469541872681225432
# sqrt_p1p2 = e^30.767891418921155682370734770936
# 530457905397658442881753081
# p1 = e^29.972492502461657327448850611089
# p2 = e^31.563290335380654037292618930784

# find n such than log_p2/log_n - log_p1/log_n = 1
# log_n = log_p2 - log_p2
# n = mpmath.exp(mpmath.log(p2) - mpmath.log(p1)) 
# mpmath.mpf('4.9076628617729954155592273914703170395774')

# find n1 such than log_p2/log_n - log_sqrt_p1p2/log_n = 1
# find n2 such than log_sqrt_p1p2/log_n - log_sqrt_p1/log_n = 1
# log_n = log_p2 - log_sqrt_p1p2
# n = mpmath.exp(mpmath.log(p2) - mpmath.log(mpmath.sqrt(p1p2))) 
# mpmath.mpf('2.2153245499865240773770700530041473707343')
# log_n = log_sqrt_p1p2 - log_p1
# n = mpmath.exp(mpmath.log(mpmath.sqrt(p1p2)) - mpmath.log(p1)) 
# mpmath.mpf('2.2153245499865240773770700530041473707343')

# mpmath.log(p1p2, mpmath.mpf('4.9076628617729954155592273914703170395774'))
# mpf('38.682340121704018052645852708862764794826')
# mpmath.log(p1p2, mpmath.mpf('2.2153245499865240773770700530041473707343'))
# mpf('77.364680243408036105291705417725529590029')
# mpmath.log(p1p2, mpmath.mpf('2.2153245499865240773770700530041473707343')) / mpmath.log(p1p2, mpmath.mpf('4.9076628617729954155592273914703170395774'))
# mpf('2.0000000000000000000000000000000000000118')
# mpmath.mpf('4.9076628617729954155592273914703170395774') / mpmath.mpf('2.2153245499865240773770700530041473707343')
# mpf('2.215324549986524077377070053004147370746')

# mpmath.log(mpmath.log(p1p2) / mpmath.mpf('4.9076628617729954155592273914703170395774')) / mpmath.log(pi) = mpmath.mpf('2.215324549986524077377070053004147370746')
# mpmath.log(pi) = mpmath.log(mpmath.log(p1p2) / mpmath.mpf('4.9076628617729954155592273914703170395774')) / mpmath.mpf('2.215324549986524077377070053004147370746')
# pi = mpmath.exp(mpmath.log(mpmath.log(p1p2) / mpmath.mpf('4.9076628617729954155592273914703170395774')) / mpmath.mpf('2.215324549986524077377070053004147370746'))
# pi = mpmath.mpf('3.131501664191563910690803002383842072068')

e^pi*i = -1 = mpmath.power(1 + mpmath.fdiv(mpmath.mpc(0, pi), n), n + mpmath.mpc(0, pi)/2)
mpmath.mpc(0, p) = (n + mpmath.mpc(0, pi)/2)) * mpmath.log(1  + mpmath.fdiv(mpmath.mpc(0, pi), n)
n * mpmath.log(1  + mpmath.fdiv(mpmath.mpc(0, pi), n) = mpmath.mpc(0, pi) - (mpmath.mpc(0, pi)/2) * mpmath.log(1  + mpmath.fdiv(mpmath.mpc(0, pi), n)
n = mpmath.mpc(0, pi) * (1 - (1/2) * mpmath.log(1  + mpmath.fdiv(mpmath.mpc(0, pi), n)) / mpmath.log(1  + mpmath.fdiv(mpmath.mpc(0, pi), n)

pi = mpmath.mpf('3.131501664191563910690803002383842072068')

# 
# find_n(pi, 32, 128)
# find_n(pi, int(mpmath.mp.prec/2.6666), mpmath.mp.prec)
# 
def find_n(search_type, pi, min_pow2, iprec):
    savedprec = mpmath.mp.prec
    if iprec > mpmath.mp.prec:
        mpmath.mp.prec = iprec
    min_dist = mpmath.power(2, mpmath.mp.prec)
    min_n = 0
    dist_decreasing = False
    dist_decreasing_n1 = 0
    dist_decreasing_n2 = 0
    this_dist, prev_dist = 2**32, 2**32
    #imult = iprec/1.5
    imult = iprec*15/16
    max_pow2 = iprec*31/32
    for n1 in [mpmath.power(2, x/imult) for x in range(int(imult*min_pow2), int(imult*max_pow2))]:
        n2 = mpmath.mpc(0, pi) * (1 - (1/2) * mpmath.log(1  + mpmath.fdiv(mpmath.mpc(0, pi), n1))) / mpmath.log(1  + mpmath.fdiv(mpmath.mpc(0, pi), n1))
        this_dist = abs(n2 - n1)
        if this_dist < min_dist:
            dist_decreasing = True
            min_dist = this_dist
            min_n = n1
        else:
            dist_decreasing = False
            if dist_decreasing_n1 == 0:
                dist_decreasing_n1 = n1
        if (not dist_decreasing) and (this_dist > prev_dist) and (dist_decreasing_n2 == 0):
            dist_decreasing_n2 = n1
        prev_dist = this_dist
    if savedprec != mpmath.mp.prec:
        mpmath.mp.prec = savedprec
    return dist_decreasing_n1, dist_decreasing_n2, min_n



class arrayz:
    def __init__(self):
        self.log_p1_e_ary = []
        self.log_p1_p1p2_ary = []
        
        self.f1_hsh = {}
        self.f2_hsh = {}
        self.pi_hsh = {}
        self.log_pi_hsh = {}
        self.log_p1_e_hsh = {}
        self.log_p1_p1p2_hsh = {}
        self.log_min_n_hsh = {}
        self.log_dist_decr_n1_hsh = {}
        self.log_dist_decr_n2_hsh = {}
    
    def get_f1_sorted_log_p1_e(self):
        return [self.f1_hsh[x] for x in sorted(self.log_p1_e_ary)]
    
    def get_f1_sorted_log_p1_p1p2(self):
        return [self.f1_hsh[self.log_p1_e_hsh[x]] for x in sorted(self.log_p1_p1p2_ary)]
    
    def get_f2_sorted_log_p1_e(self):
        return [self.f2_hsh[x] for x in sorted(self.log_p1_e_ary)]
    
    def get_f2_sorted_log_p1_p1p2(self):
        return [self.f2_hsh[self.log_p1_e_hsh[x]] for x in sorted(self.log_p1_p1p2_ary)]
    
    def get_pi_sorted_log_p1_e(self):
        return [self.pi_hsh[x] for x in sorted(self.log_p1_e_ary)]
    
    def get_pi_sorted_log_p1_p1p2(self):
        return [self.pi_hsh[self.log_p1_e_hsh[x]] for x in sorted(self.log_p1_p1p2_ary)]
    
    def get_log_pi_sorted_log_p1_e(self):
        return [self.log_pi_hsh[x] for x in sorted(self.log_p1_e_ary)]
    
    def get_log_pi_sorted_log_p1_p1p2(self):
        return [self.log_pi_hsh[self.log_p1_e_hsh[x]] for x in sorted(self.log_p1_p1p2_ary)]
    
    def get_log_min_n_sorted_log_p1_e(self):
        return [self.log_min_n_hsh[x] for x in sorted(self.log_p1_e_ary)]
    
    def get_log_min_n_sorted_log_p1_p1p2(self):
        return [self.log_min_n_hsh[self.log_p1_e_hsh[x]] for x in sorted(self.log_p1_p1p2_ary)]
    
    def get_log_dist_decr_n1_sorted_log_p1_e(self):
        return [self.log_dist_decr_n1_hsh[x] for x in sorted(self.log_p1_e_ary)]
    
    def get_log_dist_decr_n1_sorted_log_p1_p1p2(self):
        return [self.log_dist_decr_n1_hsh[self.log_p1_e_hsh[x]] for x in sorted(self.log_p1_p1p2_ary)]
    
    def get_log_dist_decr_n2_sorted_log_p1_e(self):
        return [self.log_dist_decr_n2_hsh[x] for x in sorted(self.log_p1_e_ary)]
    
    def get_log_dist_decr_n2_sorted_log_p1_p1p2(self):
        return [self.log_dist_decr_n2_hsh[self.log_p1_e_hsh[x]] for x in sorted(self.log_p1_p1p2_ary)]




p1, p2 = 10396522617497, 51022627941473
p1, p2 = 14011402254263, 20852450975261
p1, p2 = 15053428029503, 66152457549107
p1p2 = mpmath.fmul(p1, p2)
sqrt_p1p2 = mpmath.sqrt(p1p2)
true_logp1_e = mpmath.log(p1)
true_logp1_p1p2 = mpmath.log(p1, p1p2)
true_f1 = mpmath.exp(mpmath.log(p2) - mpmath.log(p1))
true_f2 = mpmath.exp(mpmath.log(sqrt_p1p2) - mpmath.log(p1))
true_pi = mpmath.exp(mpmath.log(mpmath.log(p1p2) / true_f1) / true_f2)
true_logpi = mpmath.log(true_pi, mpmath.pi())
true_dist_decreasing_n1, true_dist_decreasing_n2, true_min_n = find_n(true_pi, int(mpmath.mp.prec/2.6666), 1.5 * mpmath.mp.prec)

idigits = 13
aryprimes = primesieve.primes(int(10**5.75 + 10**5 + 10**4.25))
olda = arrayz()
newa = arrayz()
pary = [p1, p2]
# len(aryprimes)
it = primesieve.Iterator()
const1 = 2*3*5*7 # 2310
const2 = 2*3*5*7*11*13*17*23 # 510510
# const2 = 2*3*5*7*11*13*17*23 # 11741730
for i in range(0, 127):
for i in range(0, 3):
    try:
        mpmath.mp.prec = 128
        newp1, newp2 = 2, 2
        bloop = True
        while bloop:
            newp1, newp2 = generate_primes(idigits)
            if newp1 > 10**(idigits - 1) and len(str(newp1)) >= idigits + 1 and newp1 not in pary and newp2 > 10**(idigits - 1) and len(str(newp2)) >= idigits + 1 and newp2 not in pary:
                bloop = False
                pary.append(newp1)
                pary.append(newp2)
        print(str(newp1) + ", " + str(newp2))
        thisary1 = [newp1, newp2]
        for thisp1 in thisary1:
            dir = 1 if thisp1 < sqrt_p1p2 else -1
            thisp2 = mpmath.floor(p1p2/thisp1 + const1*dir + const2*random.random()*dir)
            if mpmath.log(thisp2, 2) < 53:
                it.skipto(int(thisp2))
                thisp2 = it.next_prime()
            else:
                thisp2 = make_prime(thisp2, aryprimes, 30*dir, 1)
            newp1 = min(thisp1, thisp2)
            newp2 = max(thisp1, thisp2)
            newp1p2 = mpmath.fmul(newp1, newp2)
            
            f1_newp1_newp2 = mpmath.exp(mpmath.log(newp2) - mpmath.log(newp1))
            f2_p1p2_newp1 = mpmath.exp(mpmath.log(sqrt_p1p2) - mpmath.log(newp1))
            pi_p1p2_newp1_newp2 = mpmath.exp(mpmath.log(mpmath.log(p1p2) / f1_newp1_newp2) / f2_p1p2_newp1)
            #dist_decreasing_n1, dist_decreasing_n2, min_n = find_n(pi_p1p2_newp1_newp2, int(mpmath.mp.prec/2.6666), mpmath.mp.prec)
            dist_decreasing_n1, dist_decreasing_n2, min_n = find_n(pi_p1p2_newp1_newp2, int(mpmath.mp.prec/2.6666), 1.5 * mpmath.mp.prec)
            
            if float(mpmath.log(newp1)) not in olda.log_p1_e_ary and float(2 * mpmath.log(newp1, p1p2)) not in olda.log_p1_p1p2_ary:
                olda.log_p1_e_ary.append(float(mpmath.log(newp1)))
                olda.log_p1_p1p2_ary.append(float(2 * mpmath.log(newp1, p1p2)))
                olda.log_p1_e_hsh[olda.log_p1_p1p2_ary[-1]] = olda.log_p1_e_ary[-1] 
                olda.log_p1_p1p2_hsh[olda.log_p1_e_ary[-1]] = olda.log_p1_p1p2_ary[-1]
                
                olda.f1_hsh[olda.log_p1_e_ary[-1]] = f1_newp1_newp2
                olda.f2_hsh[olda.log_p1_e_ary[-1]] = f2_p1p2_newp1
                olda.pi_hsh[olda.log_p1_e_ary[-1]] = pi_p1p2_newp1_newp2
                olda.log_pi_hsh[olda.log_p1_e_ary[-1]] = mpmath.log(pi_p1p2_newp1_newp2, mpmath.pi())
                olda.log_min_n_hsh[olda.log_p1_e_ary[-1]] = mpmath.log(min_n, p1p2)
                olda.log_dist_decr_n1_hsh[olda.log_p1_e_ary[-1]] = mpmath.log(dist_decreasing_n1, p1p2)
                olda.log_dist_decr_n2_hsh[olda.log_p1_e_ary[-1]] = mpmath.log(dist_decreasing_n2, p1p2)
            else:
                print("")
                print("skipping found value " + str(float(mpmath.log(newp1))) + ", " + str(float(mpmath.log(newp1, p1p2))))
            
            print("")
            print(str(int(newp1)) + ", " + str(int(newp2)))
            print("pi_p1p2_newp1_newp2 " + str(pi_p1p2_newp1_newp2))
            print("min_n " + str(min_n) + " (2^" + str(float(mpmath.log(min_n, 2))) + ")")
            print("dist_decreasing_n1 " + str(dist_decreasing_n1) + " (2^" + str(float(mpmath.log(dist_decreasing_n1, 2))) + ")")
            print("dist_decreasing_n2 " + str(dist_decreasing_n2) + " (2^" + str(float(mpmath.log(dist_decreasing_n2, 2))) + ")")
            print("mpmath.log(min_n, p1p2) " + str(mpmath.log(min_n, p1p2)))
            print("mpmath.log(dist_decreasing_n1, p1p2) " + str(mpmath.log(dist_decreasing_n1, p1p2)))
            print("mpmath.log(dist_decreasing_n2, p1p2) " + str(mpmath.log(dist_decreasing_n2, p1p2)))
            
            f1_newp1_newp2 = mpmath.exp(mpmath.log(newp2) - mpmath.log(newp1))
            f2_newp1p2_newp1 = mpmath.exp(mpmath.log(mpmath.sqrt(newp1p2)) - mpmath.log(newp1))
            pi_newp1p2_newp1_newp2 = mpmath.exp(mpmath.log(mpmath.log(newp1p2) / f1_newp1_newp2) / f2_newp1p2_newp1)
            #dist_decreasing_n1, dist_decreasing_n2, min_n = find_n(pi_newp1p2_newp1_newp2, int(mpmath.mp.prec/2.6666), mpmath.mp.prec)
            dist_decreasing_n1, dist_decreasing_n2, min_n = find_n(pi_newp1p2_newp1_newp2, int(mpmath.mp.prec/2.6666), 1.5 * mpmath.mp.prec)
            
            if float(mpmath.log(newp1)) not in newa.log_p1_e_ary and float(2 * mpmath.log(newp1, newp1p2)) not in newa.log_p1_p1p2_ary:
                newa.log_p1_e_ary.append(float(mpmath.log(newp1)))
                newa.log_p1_p1p2_ary.append(float(2 * mpmath.log(newp1, newp1p2)))
                newa.log_p1_e_hsh[newa.log_p1_p1p2_ary[-1]] = newa.log_p1_e_ary[-1] 
                newa.log_p1_p1p2_hsh[newa.log_p1_e_ary[-1]] = newa.log_p1_p1p2_ary[-1]
                
                newa.f1_hsh[newa.log_p1_e_ary[-1]] = f1_newp1_newp2
                newa.f2_hsh[newa.log_p1_e_ary[-1]] = f2_newp1p2_newp1
                newa.pi_hsh[newa.log_p1_e_ary[-1]] = pi_newp1p2_newp1_newp2
                newa.log_pi_hsh[newa.log_p1_e_ary[-1]] = mpmath.log(pi_newp1p2_newp1_newp2, mpmath.pi())
                newa.log_min_n_hsh[newa.log_p1_e_ary[-1]] = mpmath.log(min_n, newp1p2)
                newa.log_dist_decr_n1_hsh[newa.log_p1_e_ary[-1]] = mpmath.log(dist_decreasing_n1, newp1p2)
                newa.log_dist_decr_n2_hsh[newa.log_p1_e_ary[-1]] = mpmath.log(dist_decreasing_n2, newp1p2)
            else:
                print("")
                print("skipping found value " + str(float(mpmath.log(newp1))) + ", " + str(float(mpmath.log(newp1, newp1p2))))
            
            print("")
            print(str(int(newp1)) + ", " + str(int(newp2)))
            print("pi_newp1p2_newp1_newp2 " + str(pi_newp1p2_newp1_newp2))
            print("min_n " + str(min_n) + " (2^" + str(float(mpmath.log(min_n, 2))) + ")")
            print("dist_decreasing_n1 " + str(dist_decreasing_n1) + " (2^" + str(float(mpmath.log(dist_decreasing_n1, 2))) + ")")
            print("dist_decreasing_n2 " + str(dist_decreasing_n2) + " (2^" + str(float(mpmath.log(dist_decreasing_n2, 2))) + ")")
            print("mpmath.log(min_n, newp1p2) " + str(mpmath.log(min_n, newp1p2)))
            print("mpmath.log(dist_decreasing_n1, newp1p2) " + str(mpmath.log(dist_decreasing_n1, newp1p2)))
            print("mpmath.log(dist_decreasing_n2, newp1p2) " + str(mpmath.log(dist_decreasing_n2, newp1p2)))
            
    except NameError as ne:
        print("NameError " + str(ne))
        break
    except AttributeError as ae:
        print("AttributeError " + str(ae))
        break
    except OverflowError as oe:
        print("OverflowError " + str(oe))
        pass
    except Exception as ex:
        print(str(type(ex)) + " " + str(ex))
        pass


plot_y = sorted([x for x in newa.log_pi_hsh.values()])
_ = plt.plot([x for x in range(0, len(plot_y))], plot_y)
_ = plt.hist([float(x) for x in newa.log_pi_hsh.values()], bins=30)
_ = plt.hist([float(x) for x in olda.log_pi_hsh.values()], bins=30)
plt.grid()
plt.show()

plot_x = sorted([olda.log_p1_e_ary[i] for i in range(0, len(olda.log_p1_e_ary)) if olda.log_pi_hsh[olda.log_p1_e_ary[i]] > 0.75 and olda.log_pi_hsh[olda.log_p1_e_ary[i]] < 1.25])
plot_y = [olda.log_pi_hsh[plot_x[i]] for i in range(0, len(plot_x))]
plot_x = sorted([olda.log_p1_e_ary[i] for i in range(0, len(olda.log_p1_e_ary)) if olda.log_pi_hsh[olda.log_p1_e_ary[i]] > 0.5 and olda.log_pi_hsh[olda.log_p1_e_ary[i]] < 1.5])
plot_y = [olda.log_pi_hsh[plot_x[i]] for i in range(0, len(plot_x))]
plot_x = sorted(olda.log_p1_e_ary)
plot_y = [olda.log_pi_hsh[plot_x[i]] for i in range(0, len(plot_x))]
_ = plt.plot(plot_x, plot_y)
plt.grid()
plt.show()

plot_x = sorted(newa.log_p1_e_ary)
plot_y = [newa.log_pi_hsh[plot_x[i]] for i in range(0, len(plot_x))]
_ = plt.plot(plot_x, plot_y)
plt.grid()
plt.show()

min(olda.log_p1_p1p2_ary)
0.960765059322892
float(true_logp1_p1p2)
0.4870742049620866
plot_x = sorted(olda.log_p1_p1p2_ary)
plot_y = [olda.log_dist_decr_n2_hsh[olda.log_p1_e_hsh[x]] for x in sorted(olda.log_p1_p1p2_ary)]
_ = plt.plot(plot_x, plot_y)
_ = plt.plot([true_logp1_p1p2, true_logp1_p1p2], [min(plot_y), max(plot_y)])
plt.grid()
plt.show()

plt.plot(olda.log_p1_e_ary, olda.log_min_n_ary)
plt.plot(olda.log_p1_p1p2_ary, olda.log_min_n_ary)
#plt.plot(newa.log_p1_e_ary, newa.log_min_n_ary)
plt.plot(newa.log_p1_p1p2_ary, newa.log_min_n_ary)
plt.grid()
plt.show()

plt.plot(olda.log_p1_e_ary, olda.log_dist_decr_n_ary)
plt.plot(olda.log_p1_p1p2_ary, olda.log_dist_decr_n_ary)
#plt.plot(newa.log_p1_e_ary, newa.log_dist_decr_n_ary)
plt.plot(newa.log_p1_p1p2_ary, newa.log_dist_decr_n_ary)
plt.grid()
plt.show()

plt.plot(olda.log_p1_e_ary, [mpmath.power(abs(olda.log_dist_decr_n_ary[i] - olda.log_min_n_ary[i]), 0.25) for i in range(0, len(olda.log_min_n_ary))])
plt.plot(olda.log_p1_p1p2_ary, [mpmath.power(abs(olda.log_dist_decr_n_ary[i] - olda.log_min_n_ary[i]), 0.25) for i in range(0, len(olda.log_min_n_ary))])
plt.grid()
plt.show()

plt.plot(olda.log_p1_p1p2_ary, olda.log_pi_ary)
plt.grid()
plt.show()


# min_n, dist_decreasing_n = find_n(mpmath.mpf('3.131501664191563910690803002383842072068'), 128)
# min_n
# mpf('1341683415130235180.1477260203434206913139')
# dist_decreasing_n
# mpf('36893488147419103232.0')
# mpmath.log(min_n, 2)
# mpf('60.21875')
# mpmath.log(dist_decreasing_n, 2)
# mpf('65.0')
# mpmath.log(min_n, p1p2)
# mpf('0.67831194882720033637933097687746845634305')
# mpmath.log(dist_decreasing_n, p1p2)
# mpf('0.73216857994840513734769508661397736854868')

# mpmath.log(mpmath.log(p1p2)/mpmath.mpf('4.9076628617729954155592273914703170395774'), mpmath.pi())
# mpf('2.2090984420997390122664479891647482136938')
# mpmath.log(mpmath.log(mpmath.log(p1p2)/mpmath.mpf('4.9076628617729954155592273914703170395774'), 2 * mpmath.pi()), 1 + mpmath.exp(-1))
# mpf('1.0187714125946917425422382777536103818282')
# mpmath.log(1/ (mpmath.log(mpmath.log(mpmath.log(p1p2)/mpmath.mpf('4.9076628617729954155592273914703170395774'), 2*mpmath.pi()), 1 + mpmath.exp(-1)) - 1))
# mpf('3.9754201731072248138491137621645187323209')
# mpmath.log(1/ (mpmath.log(mpmath.log(mpmath.log(p1p2)/mpmath.mpf('4.9076628617729954155592273914703170395774'), 2*mpmath.pi()), 1 + mpmath.exp(-1)) - 1), mpmath.pi())
# mpf('3.4728019441524637383956984713638197499845')
# mpmath.log(1/ (mpmath.log(mpmath.log(mpmath.log(p1p2)/mpmath.mpf('4.9076628617729954155592273914703170395774'), 2*mpmath.pi()), 1 + mpmath.exp(-1)) - 1), 2 * mpmath.pi())
# mpf('2.1630501004476814253448138755409720478312')

p1, p2 = 10396522617497, 51022627941473
x = mpmath.fmul(p1, p2)
n = mpmath.power(2, int(mpmath.mp.prec/2))
logx1 = mpmath.fdiv(n, mpmath.fdiv(1, mpmath.log(1 + mpmath.fdiv(mpmath.log(x), n))) - 0.5)
x1 = mpmath.exp(logx1)
logx2 = mpmath.log(x)
squaredx2 = mpmath.power(logx2/mpmath.pi(), 2)
fracx2 = fractions.Fraction(float(mpmath.fmod(squaredx2, 1))).limit_denominator(12)
squaredx2 = mpmath.floor(squaredx2 * fracx2.denominator) if mpmath.fmod(squaredx2 * fracx2.denominator, 1) < 0.5 else mpmath.ceil(squaredx2 * fracx2.denominator)
x2 = mpmath.exp(mpmath.sqrt(squaredx2/fracx2.denominator)*mpmath.pi())

x1/x
x2/x

m = e^(2^64 / (1/log(1 + ln(m)/2^64) - 1/2))
n = e^(2^64 / (1/log(1 + ln(n)/2^64) - 1/2))
m*n = e^(2^64 / (1/log(1 + ln(m*n)/2^64) - 1/2))
p1p2 = e^(2^64 / (1/log(1 + ln(p1p2)/2^64) - 1/2))

p1p2 % m = n
p1p2 % n = m

e^(2^64 / (1/log(1 + ln(p1p2)/2^64) - 1/2)) % e^(2^64 / (1/log(1 + ln(p1)/2^64) - 1/2)) = e^(2^64 / (1/log(1 + ln(p1p2/p1)/2^64) - 1/2))
e^(2^64 / (1/log(1 + ln(p1p2)/2^64) - 1/2)) % e^(2^64 / (1/log(1 + ln(p2)/2^64) - 1/2)) = e^(2^64 / (1/log(1 + ln(p1p2/p2)/2^64) - 1/2))


log(p1p2) = (2^64 / (1/log(1 + ln(p1)/2^64) - 1/2)) + (2^64 / (1/log(1 + ln(p2)/2^64) - 1/2))

(2^64 / (1/log(1 + ln(p1p2)/2^64) - 1/2)) = (2^64 / (1/log(1 + ln(p1)/2^64) - 1/2)) + (2^64 / (1/log(1 + ln(p1p2/p1)/2^64) - 1/2))
(1 / (1/log(1 + ln(p1p2)/2^64) - 1/2)) = (1 / (1/log(1 + ln(p1)/2^64) - 1/2)) + (1 / (1/log(1 + ln(p1p2/p1)/2^64) - 1/2))


(1 + x/n)^(n + eps) = e^x
(n + eps)*log(1 + x/n) = x
eps*log(1 + x/n) = x - n*log(1 + x/n)
eps = (x - n*log(1 + x/n))/log(1 + x/n)
eps = (x/n - log(1 + x/n))/((1/n) * log(1 + x/n))

# (x/n - log(1 + x/n)) / ((1/n) * log(1 + x/n))
myepsilon4 = lambda x, n: mpmath.fdiv(mpmath.fdiv(x, n) - mpmath.log(1 + mpmath.fdiv(x, n)), mpmath.fdiv(1, n) * mpmath.log(1 + mpmath.fdiv(x, n)))
eps = (x/log(1 + x/n)) - n
eps = x/2

L'Hopital's Rule
x, n = sympy.symbols("x n")
sympy.Derivative("x/n - log(1 + x/n)", "n").doit()   = -x/n**2 + x/(n**2*(1 + x/n))
sympy.Derivative("(1/n) * log(1 + x/n)", "n").doit() = -log(1 + x/n)/n**2 - x/(n**3*(1 + x/n))

(-x/n**2 + x/(n**2*(1 + x/n))) / (-log(1 + x/n)/n**2 - x/(n**3*(1 + x/n)))
(-x + x/(1 + x/n)) / (-log(1 + x/n) - x/(n*(1 + x/n)))
(-x + x/(1 + x/n)) / (-log(1 + x/n) - x/(n + x))

sympy.Derivative("-x + x/(1 + x/n)", "n").doit()          = x**2/(n**2*(1 + x/n)**2)
sympy.Derivative("-log(1 + x/n) - x/(n + x)", "n").doit() = x/(n + x)**2 + x/(n**2*(1 + x/n))

(x**2/(n**2*(1 + x/n)**2)) / (x/(n + x)**2 + x/(n**2*(1 + x/n)))
(x**2/(1 + x/n)**2) / (x*n**2/(n + x)**2 + x/(1 + x/n))
(x**2/(1 + x/n)) / (x*n**2*(1 + x/n)/(n + x)**2 + x)
(x**2/(1 + x/n)) / (x*n**2*(1 + x/n)/(n**2 + 2*x*n + x**2) + x)
(x**2/(1 + x/n)) / (x*(1 + x/n)/(1 + 2*x/n + x**2/n**2) + x)
x**2 / (x / 1 + x)
x**2 / (2*x)
x / 2


mypow = lambda x, n: mpmath.power(mpmath.fadd(1, mpmath.fdiv(x, n)), mpmath.fadd(n, mpmath.fdiv(x, 2)))

x**(a+bi) = e^(a*ln(x) + b*ln(x)i)
myintpow = lambda i, zpow, n: mypow(mpmath.mpc(zpow.real * mpmath.log(i), zpow.imag * mpmath.log(i)), n)

myintpow(2, mpmath.mpc(0.5, 14), mpmath.power(2, mpmath.mp.prec - 16))
mpmath.power(2, mpmath.mpc(0.5, 14))


arymindist = []
maxprec = 8192
maxminintpow2, maxminirrpow2 = 0, 0
minminintpow2, minminirrpow2 = maxprec, maxprec
maxlogminintpow2, maxlogminirrpow2 = 0, 0
minlogminintpow2, minlogminirrpow2 = maxprec, maxprec
for iprec in [128, 256, 512, 1024, 2048, 4096]:
    for i in [int(2**(2 + f/2.9)) for f in range(0, int(iprec/2) + 1, int(iprec/2/5))]:
        mpmath.mp.prec = iprec
        minintdist, minintpow2 = 1, 2
        minirrdist, minirrpow2 = 1, 2
        imult = 1024
        for pow2 in [x/imult for x in range(imult*2, imult*mpmath.mp.prec)]:
            z1 = myintpow(i, mpmath.mpc(0.5, 14), mpmath.power(2, pow2))
            z2 = mpmath.power(i, mpmath.mpc(0.5, 14))
            if mpmath.fabs(z1 - z2) < minintdist:
                minintdist = mpmath.fabs(z1 - z2)
                minintpow2 = pow2
            z1 = myintpow(i, mpmath.mpc(mpmath.power(0.5, mpmath.fdiv(1, 3)), 4 * mpmath.pi()), mpmath.power(2, pow2))
            z2 = mpmath.power(i, mpmath.mpc(mpmath.power(0.5, mpmath.fdiv(1, 3)), 4 * mpmath.pi()))
            if mpmath.fabs(z1 - z2) < minirrdist:
                minirrdist = mpmath.fabs(z1 - z2)
                minirrpow2 = pow2
        mpmath.mp.prec = 64
        if iprec/minintpow2 < minminintpow2:
            minminintpow2 = iprec/minintpow2
        if iprec/minirrpow2 < minminirrpow2:
            minminirrpow2 = iprec/minirrpow2
        if iprec/minintpow2 > maxminintpow2:
            maxminintpow2 = iprec/minintpow2
        if iprec/minirrpow2 > maxminirrpow2:
            maxminirrpow2 = iprec/minirrpow2
        log_iprec = mpmath.log(iprec)
        if log_iprec/mpmath.log(minintpow2) < minlogminintpow2:
            minlogminintpow2 = log_iprec/mpmath.log(minintpow2)
        if log_iprec/mpmath.log(minirrpow2) < minlogminirrpow2:
            minlogminirrpow2 = log_iprec/mpmath.log(minirrpow2)
        if log_iprec/mpmath.log(minintpow2) > maxlogminintpow2:
            maxlogminintpow2 = log_iprec/mpmath.log(minintpow2)
        if log_iprec/mpmath.log(minirrpow2) > maxlogminirrpow2:
            maxlogminirrpow2 = log_iprec/mpmath.log(minirrpow2)
        arymindist.append((iprec, i, minintdist, minirrdist, mpmath.log(minintdist, 2), mpmath.log(minirrdist, 2), minintpow2, minirrpow2))
        str_i = str(int(i)) + " (2^" + str(round(float(mpmath.log(i, 2)), 6)) + ")"
        print(str_i + ", minintdist mpf('" + str(minintdist) + "') = mpmath.power(2, mpmath.mpf('" + str(mpmath.log(minintdist, 2)) + "'))")
        print(str_i + ", minirrdist mpf('" + str(minirrdist) + "') = mpmath.power(2, mpmath.mpf('" + str(mpmath.log(minirrdist, 2)) + "'))")
        paren1 = "(" + str(iprec) + "/" + str(round(iprec/minintpow2, 6)) + " or exp(log(" + str(iprec) + ")/" + str(round(mpmath.log(iprec)/mpmath.log(minintpow2), 6)) + ")"
        paren2 = "(" + str(iprec) + "/" + str(round(iprec/minirrpow2, 6)) + " or exp(log(" + str(iprec) + ")/" + str(round(mpmath.log(iprec)/mpmath.log(minirrpow2), 6)) + ")"
        print(str_i + ", minintpow2 " + str(minintpow2) + " " + paren1 + ", minirrpow2 " + str(minirrpow2) + " " + paren2 + ", precision " + str(iprec))

def print_fractions():
    minintfrac = fractions.Fraction(float(1/minminintpow2)).limit_denominator(maxprec)
    minirrfrac = fractions.Fraction(float(1/minminirrpow2)).limit_denominator(maxprec)
    maxintfrac = fractions.Fraction(float(1/maxminintpow2)).limit_denominator(maxprec)
    maxirrfrac = fractions.Fraction(float(1/maxminirrpow2)).limit_denominator(maxprec)
    minlogintfrac = fractions.Fraction(float(1/minlogminintpow2)).limit_denominator(maxprec)
    minlogirrfrac = fractions.Fraction(float(1/minlogminirrpow2)).limit_denominator(maxprec)
    maxlogintfrac = fractions.Fraction(float(1/maxlogminintpow2)).limit_denominator(maxprec)
    maxlogirrfrac = fractions.Fraction(float(1/maxlogminirrpow2)).limit_denominator(maxprec)
    s = ""
    for sfrac in ["minintfrac", "minirrfrac", "maxintfrac", "maxirrfrac", "minlogintfrac", "minlogirrfrac", "maxlogintfrac", "maxlogirrfrac"]:
        s += sfrac + " " + str(eval(sfrac + ".numerator")) + "/" + str(eval(sfrac + ".denominator")) + "\n"
    print(s)



# 
# 
# 2048/2.937184 or exp(log(2048)/1.164568)
# 128/2.308418 or exp(log(128)/1.208335)
# 
# 

4 (2^2.0), minintdist mpf('6.5398808571072116e-27') = mpmath.power(2, mpmath.mpf('-86.9827942088694137'))
4 (2^2.0), minirrdist mpf('2.03305020043455506e-27') = mpmath.power(2, mpmath.mpf('-88.6684127230556148'))
4 (2^2.0), minintpow2 49.4013671875 (128/2.591021 or exp(log(128)/1.244117), minirrpow2 49.734375 (128/2.573673 or exp(log(128)/1.241978), precision 128
70 (2^6.129283), minintdist mpf('2.72490512710450974e-26') = mpmath.power(2, mpmath.mpf('-84.923924466553804'))
70 (2^6.129283), minirrdist mpf('2.52702191114166302e-25') = mpmath.power(2, mpmath.mpf('-81.7107641986182795'))
70 (2^6.129283), minintpow2 52.1435546875 (128/2.454762 or exp(log(128)/1.227119), minirrpow2 53.8427734375 (128/2.377292 or exp(log(128)/1.217247), precision 128
1239 (2^10.27496), minintdist mpf('4.82057747245047174e-25') = mpmath.power(2, mpmath.mpf('-80.7789963903060636'))
1239 (2^10.27496), minirrdist mpf('3.56601989515870698e-24') = mpmath.power(2, mpmath.mpf('-77.8919595253806935'))
1239 (2^10.27496), minintpow2 51.48046875 (128/2.48638 or exp(log(128)/1.231104), minirrpow2 52.2001953125 (128/2.452098 or exp(log(128)/1.226782), precision 128
21826 (2^14.41376), minintdist mpf('1.46555141379509864e-24') = mpmath.power(2, mpmath.mpf('-79.1748306964230254'))
21826 (2^14.41376), minirrdist mpf('2.97604768392533431e-23') = mpmath.power(2, mpmath.mpf('-74.8309485400993158'))
21826 (2^14.41376), minintpow2 54.431640625 (128/2.351573 or exp(log(128)/1.213935), minirrpow2 51.974609375 (128/2.462741 or exp(log(128)/1.228127), precision 128
384260 (2^18.551723), minintdist mpf('1.92581711556490518e-23') = mpmath.power(2, mpmath.mpf('-75.4588754776678405'))
384260 (2^18.551723), minirrdist mpf('6.37342985608313831e-22') = mpmath.power(2, mpmath.mpf('-70.4103481208993409'))
384260 (2^18.551723), minintpow2 52.5576171875 (128/2.435422 or exp(log(128)/1.224669), minirrpow2 51.771484375 (128/2.472404 or exp(log(128)/1.229346), precision 128
6764984 (2^22.689655), minintdist mpf('2.5558519499368543e-23') = mpmath.power(2, mpmath.mpf('-75.0505419131346042'))
6764984 (2^22.689655), minirrdist mpf('2.52924989290549234e-21') = mpmath.power(2, mpmath.mpf('-68.4217804086010125'))
6764984 (2^22.689655), minintpow2 55.44921875 (128/2.308418 or exp(log(128)/1.208335), minirrpow2 58.79296875 (128/2.177131 or exp(log(128)/1.190968), precision 128

4 (2^2.0), minintdist mpf('9.78975109555719596e-53') = mpmath.power(2, mpmath.mpf('-172.77091684925948'))
4 (2^2.0), minirrdist mpf('6.83293437332407586e-53') = mpmath.power(2, mpmath.mpf('-173.289683758464481'))
4 (2^2.0), minintpow2 91.6142578125 (256/2.794325 or exp(log(256)/1.227464), minirrpow2 91.8935546875 (256/2.785832 or exp(log(256)/1.226638), precision 256
1574 (2^10.62022), minintdist mpf('8.51362139896553452e-51') = mpmath.power(2, mpmath.mpf('-166.328559904407132'))
1574 (2^10.62022), minirrdist mpf('5.10630170698518611e-50') = mpmath.power(2, mpmath.mpf('-163.744125962143644'))
1574 (2^10.62022), minintpow2 94.3994140625 (256/2.711881 or exp(log(256)/1.219381), minirrpow2 94.083984375 (256/2.720973 or exp(log(256)/1.220279), precision 256
619772 (2^19.241378), minintdist mpf('5.34650093639009184e-49') = mpmath.power(2, mpmath.mpf('-160.355881633338525'))
619772 (2^19.241378), minirrdist mpf('1.99798487228631293e-47') = mpmath.power(2, mpmath.mpf('-155.132074799879072'))
619772 (2^19.241378), minintpow2 95.89453125 (256/2.6696 or exp(log(256)/1.215182), minirrpow2 94.4853515625 (256/2.709415 or exp(log(256)/1.219137), precision 256
243959929 (2^27.862069), minintdist mpf('1.02016248121665617e-47') = mpmath.power(2, mpmath.mpf('-156.101821511257087'))
243959929 (2^27.862069), minirrdist mpf('5.67821481239887386e-45') = mpmath.power(2, mpmath.mpf('-146.98132684127752'))
243959929 (2^27.862069), minintpow2 97.4140625 (256/2.627957 or exp(log(256)/1.21101), minirrpow2 96.1015625 (256/2.663848 or exp(log(256)/1.214608), precision 256
96029500394 (2^36.482759), minintdist mpf('3.48652336501863663e-47') = mpmath.power(2, mpmath.mpf('-154.328831309794049'))
96029500394 (2^36.482759), minirrdist mpf('7.61520341966572826e-43') = mpmath.power(2, mpmath.mpf('-139.914025505213775'))
96029500394 (2^36.482759), minintpow2 97.7646484375 (256/2.618533 or exp(log(256)/1.21006), minirrpow2 95.931640625 (256/2.668567 or exp(log(256)/1.215079), precision 256
37799916363473 (2^45.103448), minintdist mpf('6.68542614650384676e-45') = mpmath.power(2, mpmath.mpf('-146.745744745535951'))
37799916363473 (2^45.103448), minirrdist mpf('7.36103848703998103e-41') = mpmath.power(2, mpmath.mpf('-133.319142575945487'))
37799916363473 (2^45.103448), minintpow2 97.533203125 (256/2.624747 or exp(log(256)/1.210686), minirrpow2 96.0673828125 (256/2.664796 or exp(log(256)/1.214702), precision 256

4 (2^2.0), minintdist mpf('3.63061980426069468e-104') = mpmath.power(2, mpmath.mpf('-343.620306008163056'))
4 (2^2.0), minirrdist mpf('6.08243794055394731e-104') = mpmath.power(2, mpmath.mpf('-342.875872172943075'))
4 (2^2.0), minintpow2 177.791015625 (512/2.879786 or exp(log(512)/1.204168), minirrpow2 177.4951171875 (512/2.884586 or exp(log(512)/1.204556), precision 512
787110 (2^19.586206), minintdist mpf('6.19374118510228546e-101') = mpmath.power(2, mpmath.mpf('-332.8839264845585'))
787110 (2^19.586206), minirrdist mpf('9.05916309446108897e-99') = mpmath.power(2, mpmath.mpf('-325.691503616782669'))
787110 (2^19.586206), minintpow2 182.458984375 (512/2.80611 or exp(log(512)/1.198174), minirrpow2 182.3193359375 (512/2.808259 or exp(log(512)/1.19835), precision 512
154885785622 (2^37.172414), minintdist mpf('1.01443332582273151e-97') = mpmath.power(2, mpmath.mpf('-322.206351157772989'))
154885785622 (2^37.172414), minirrdist mpf('2.54087789128431256e-94') = mpmath.power(2, mpmath.mpf('-310.915913874942304'))
154885785622 (2^37.172414), minintpow2 182.447265625 (512/2.80629 or exp(log(512)/1.198189), minirrpow2 181.802734375 (512/2.816239 or exp(log(512)/1.199004), precision 512
30478062041312124 (2^54.758621), minintdist mpf('7.82108089527331953e-95') = mpmath.power(2, mpmath.mpf('-312.615801008494584'))
30478062041312124 (2^54.758621), minirrdist mpf('5.15815351169621049e-91') = mpmath.power(2, mpmath.mpf('-299.928601924967705'))
30478062041312124 (2^54.758621), minintpow2 183.087890625 (512/2.796471 or exp(log(512)/1.197383), minirrpow2 183.3779296875 (512/2.792048 or exp(log(512)/1.197019), precision 512
5997401647012267425792 (2^72.344828), minintdist mpf('2.13050272570871753e-92') = mpmath.power(2, mpmath.mpf('-304.526190832374227'))
5997401647012267425792 (2^72.344828), minirrdist mpf('4.76751741693362964e-86') = mpmath.power(2, mpmath.mpf('-283.432577951239655'))
5997401647012267425792 (2^72.344828), minintpow2 182.8916015625 (512/2.799472 or exp(log(512)/1.197629), minirrpow2 183.03515625 (512/2.797277 or exp(log(512)/1.197449), precision 512
1180154645883665818180386816 (2^89.931034), minintdist mpf('1.88926956609974126e-89') = mpmath.power(2, mpmath.mpf('-294.733771880925411'))
1180154645883665818180386816 (2^89.931034), minirrdist mpf('2.56405403306425446e-82') = mpmath.power(2, mpmath.mpf('-271.039677116150088'))
1180154645883665818180386816 (2^89.931034), minintpow2 182.91015625 (512/2.799188 or exp(log(512)/1.197606), minirrpow2 184.052734375 (512/2.781811 or exp(log(512)/1.196176), precision 512

4 (2^2.0), minintdist mpf('1.48352648656008453e-207') = mpmath.power(2, mpmath.mpf('-687.070084957071578'))
4 (2^2.0), minirrdist mpf('5.10023280877207602e-207') = mpmath.power(2, mpmath.mpf('-685.288552538836126'))
4 (2^2.0), minintpow2 348.7685546875 (1024/2.936045 or exp(log(1024)/1.183975), minirrpow2 348.380859375 (1024/2.939312 or exp(log(1024)/1.1842), precision 1024
154885785622 (2^37.172414), minintdist mpf('4.35529743230837562e-200') = mpmath.power(2, mpmath.mpf('-662.262847730642875'))
154885785622 (2^37.172414), minirrdist mpf('5.71372489600114676e-197') = mpmath.power(2, mpmath.mpf('-651.905403117636809'))
154885785622 (2^37.172414), minintpow2 352.734375 (1024/2.903034 or exp(log(1024)/1.181693), minirrpow2 352.9248046875 (1024/2.901468 or exp(log(1024)/1.181584), precision 1024
5997401647012267425792 (2^72.344828), minintdist mpf('2.21630476503492713e-195') = mpmath.power(2, mpmath.mpf('-646.627822222382925'))
5997401647012267425792 (2^72.344828), minirrdist mpf('1.18851473448131469e-188') = mpmath.power(2, mpmath.mpf('-624.273322049779067'))
5997401647012267425792 (2^72.344828), minintpow2 353.9990234375 (1024/2.892663 or exp(log(1024)/1.180972), minirrpow2 354.1953125 (1024/2.89106 or exp(log(1024)/1.18086), precision 1024
232228066448517703763433590095872 (2^107.517241), minintdist mpf('8.46754549696143507e-189') = mpmath.power(2, mpmath.mpf('-624.762466100227741'))
232228066448517703763433590095872 (2^107.517241), minirrdist mpf('1.5360506675213829e-180') = mpmath.power(2, mpmath.mpf('-597.327831274749335'))
232228066448517703763433590095872 (2^107.517241), minintpow2 355.921875 (1024/2.877036 or exp(log(1024)/1.179883), minirrpow2 355.5537109375 (1024/2.880015 or exp(log(1024)/1.180091), precision 1024
8992206628896364834114578052301820549660672 (2^142.689655), minintdist mpf('4.46255433784302914e-184') = mpmath.power(2, mpmath.mpf('-609.076899723195255'))
8992206628896364834114578052301820549660672 (2^142.689655), minirrdist mpf('2.46919047446190818e-171') = mpmath.power(2, mpmath.mpf('-566.745666094822311'))
8992206628896364834114578052301820549660672 (2^142.689655), minintpow2 357.2734375 (1024/2.866152 or exp(log(1024)/1.179122), minirrpow2 356.072265625 (1024/2.875821 or exp(log(1024)/1.179798), precision 1024
348191247050200187832943816988495522269615389191176192 (2^177.862069), minintdist mpf('1.46009881572074658e-178') = mpmath.power(2, mpmath.mpf('-590.757134879662948'))
348191247050200187832943816988495522269615389191176192 (2^177.862069), minirrdist mpf('9.57347308813459972e-163') = mpmath.power(2, mpmath.mpf('-538.215237062509927'))
348191247050200187832943816988495522269615389191176192 (2^177.862069), minintpow2 358.57421875 (1024/2.855755 or exp(log(1024)/1.178394), minirrpow2 354.00390625 (1024/2.892623 or exp(log(1024)/1.180969), precision 1024

4 (2^2.0), minintdist mpf('5.22062437414692846e-413') = mpmath.power(2, mpmath.mpf('-1369.57208082850204'))
4 (2^2.0), minirrdist mpf('4.40736857537476558e-412') = mpmath.power(2, mpmath.mpf('-1366.49445754355594'))
4 (2^2.0), minintpow2 689.9501953125 (2048/2.96833 or exp(log(2048)/1.166447), minirrpow2 689.9111328125 (2048/2.968498 or exp(log(2048)/1.166457), precision 2048
5997401647012267425792 (2^72.344828), minintdist mpf('9.21370341135259451e-401') = mpmath.power(2, mpmath.mpf('-1328.88938489142323'))
5997401647012267425792 (2^72.344828), minirrdist mpf('2.61754169723847754e-394') = mpmath.power(2, mpmath.mpf('-1307.45145686626028'))
5997401647012267425792 (2^72.344828), minintpow2 695.0732421875 (2048/2.946452 or exp(log(2048)/1.165128), minirrpow2 697.4599609375 (2048/2.936369 or exp(log(2048)/1.164518), precision 2048
8992206628896364834114578052301820549660672 (2^142.689655), minintdist mpf('4.98906272418351815e-389') = mpmath.power(2, mpmath.mpf('-1289.91126010367372'))
8992206628896364834114578052301820549660672 (2^142.689655), minirrdist mpf('5.00935988160127759e-377') = mpmath.power(2, mpmath.mpf('-1250.04226551135886'))
8992206628896364834114578052301820549660672 (2^142.689655), minintpow2 694.5908203125 (2048/2.948499 or exp(log(2048)/1.165252), minirrpow2 695.2685546875 (2048/2.945624 or exp(log(2048)/1.165078), precision 2048
13482468711604290716096770149231877978064139330389855008377012224 (2^213.034483), minintdist mpf('9.5995804440310887e-379') = mpmath.power(2, mpmath.mpf('-1255.74777660903308'))
13482468711604290716096770149231877978064139330389855008377012224 (2^213.034483), minirrdist mpf('1.17828907093562783e-359') = mpmath.power(2, mpmath.mpf('-1192.33549254403263'))
13482468711604290716096770149231877978064139330389855008377012224 (2^213.034483), minintpow2 696.3154296875 (2048/2.941196 or exp(log(2048)/1.16481), minirrpow2 695.9326171875 (2048/2.942814 or exp(log(2048)/1.164908), precision 2048
20214945014191930013340819770094283364076860349237129321258448291881398297541985959936 (2^283.37931), minintdist mpf('1.37913764110400544e-368') = mpmath.power(2, mpmath.mpf('-1222.00577247023352'))
20214945014191930013340819770094283364076860349237129321258448291881398297541985959936 (2^283.37931), minirrdist mpf('1.07563788767294367e-342') = mpmath.power(2, mpmath.mpf('-1135.99421597356879'))
20214945014191930013340819770094283364076860349237129321258448291881398297541985959936 (2^283.37931), minintpow2 698.197265625 (2048/2.933268 or exp(log(2048)/1.16433), minirrpow2 695.5595703125 (2048/2.944392 or exp(log(2048)/1.165004), precision 2048
30309286130593384559555323965198701283584195061713760619280616111453466306994200310500354942532862345216000 (2^353.724138), minintdist mpf('2.5328390344705289e-358') = mpmath.power(2, mpmath.mpf('-1187.90950257503749'))
30309286130593384559555323965198701283584195061713760619280616111453466306994200310500354942532862345216000 (2^353.724138), minirrdist mpf('8.11856248202498544e-326') = mpmath.power(2, mpmath.mpf('-1079.92733463489074'))
30309286130593384559555323965198701283584195061713760619280616111453466306994200310500354942532862345216000 (2^353.724138), minintpow2 698.302734375 (2048/2.932825 or exp(log(2048)/1.164303), minirrpow2 697.2666015625 (2048/2.937184 or exp(log(2048)/1.164568), precision 2048




fbase, maxden, iprec = 2, 48, 128
mpmath.mp.prec = iprec
number1 = mpmath.fsum([mpmath.power(fbase, i) for i in range(1, int(iprec/1.75) - 4, 2) if random.random() < 0.9])
number2 = mpmath.fsum([mpmath.power(fbase, i) for i in range(2, int(iprec/1.75) - 3, 2) if random.random() < 0.9])

fbase, maxden, iprec = 3, 48, 128
mpmath.mp.prec = iprec
number1 = mpmath.fsum([mpmath.power(fbase, i) for i in range(1, int(iprec/1.75) - 4, 2) if i <= int(mpmath.log(mpmath.power(2, mpmath.mp.prec), fbase)) and random.random() < 0.9])
number2 = mpmath.fsum([mpmath.power(fbase, i) for i in range(2, int(iprec/1.75) - 3, 2) if i <= int(mpmath.log(mpmath.power(2, mpmath.mp.prec), fbase)) and random.random() < 0.9])

fbase, maxden, iprec = 5, 48, 128
mpmath.mp.prec = iprec
number1 = mpmath.fsum([mpmath.power(fbase, i) for i in range(1, int(iprec/1.75) - 4, 2) if i <= int(mpmath.log(mpmath.power(2, mpmath.mp.prec), fbase)) and random.random() < 0.9])
number2 = mpmath.fsum([mpmath.power(fbase, i) for i in range(2, int(iprec/1.75) - 3, 2) if i <= int(mpmath.log(mpmath.power(2, mpmath.mp.prec), fbase)) and random.random() < 0.9])

fbase, maxden, iprec = 7, 48, 128
mpmath.mp.prec = iprec
number1 = mpmath.fsum([mpmath.power(fbase, i) for i in range(1, int(iprec/1.75) - 4, 2) if i <= int(mpmath.log(mpmath.power(2, mpmath.mp.prec), fbase)) and random.random() < 0.9])
number2 = mpmath.fsum([mpmath.power(fbase, i) for i in range(2, int(iprec/1.75) - 3, 2) if i <= int(mpmath.log(mpmath.power(2, mpmath.mp.prec), fbase)) and random.random() < 0.9])

fbase, maxden, iprec = 43, 48, 256
mpmath.mp.prec = iprec
number1 = mpmath.fsum([mpmath.power(fbase, i) for i in range(1, int(iprec/1.75) - 4, 2) if i <= int(mpmath.log(mpmath.power(2, mpmath.mp.prec), fbase)) and random.random() < 0.9])
number2 = mpmath.fsum([mpmath.power(fbase, i) for i in range(2, int(iprec/1.75) - 3, 2) if i <= int(mpmath.log(mpmath.power(2, mpmath.mp.prec), fbase)) and random.random() < 0.9])

fbase, maxden, iprec = 2*mpmath.e(), 48, 128
mpmath.mp.prec = iprec
number1 = mpmath.fsum([mpmath.power(fbase, i) for i in range(1, int(iprec/1.75) - 4, 2) if i <= int(mpmath.log(mpmath.power(2, mpmath.mp.prec), fbase)) and random.random() < 0.9])
number2 = mpmath.fsum([mpmath.power(fbase, i) for i in range(2, int(iprec/1.75) - 3, 2) if i <= int(mpmath.log(mpmath.power(2, mpmath.mp.prec), fbase)) and random.random() < 0.9])


fracs = [0]
for iden in range(2, maxden + 1):
    for inum in range(1, iden):
        if mpmath.fdiv(inum, iden) not in fracs:
            fracs.append(mpmath.fdiv(inum, iden))

def is_fraction(f, ilimit):
    imul = 4
    if mpmath.fmod(imul * f, 1) == 0:
        return 1
    frac2 = fractions.Fraction(float(f)).limit_denominator(ilimit)
    if mpmath.fmod(imul * f * frac2.denominator, 1) == 0:
        return 2
    frac3 = fractions.Fraction(float(f**2)).limit_denominator(ilimit**2)
    if mpmath.fmod(imul * f**2 * frac3.denominator, 1) == 0:
        return 3
    for sq in range(2, 163 + 1):
        frac4 = fractions.Fraction(float(f * mpmath.sqrt(sq))).limit_denominator(ilimit)
        if mpmath.fmod(imul * f * mpmath.sqrt(sq) * frac4.denominator, 1) == 0:
            return 4
    for sq in range(2, 163 + 1):
        frac5 = fractions.Fraction(float(f / mpmath.sqrt(sq))).limit_denominator(ilimit)
        if mpmath.fmod(imul * (f / mpmath.sqrt(sq)) * frac5.denominator, 1) == 0:
            return 5
    pi = mpmath.pi()
    for sq in range(2, 163 + 1):
        frac6 = fractions.Fraction(float(f * pi * mpmath.sqrt(sq))).limit_denominator(ilimit)
        if mpmath.fmod(imul * f * pi * mpmath.sqrt(sq) * frac6.denominator, 1) == 0:
            return 6
    for sq in range(2, 163 + 1):
        frac7 = fractions.Fraction(float(f / pi / mpmath.sqrt(sq))).limit_denominator(ilimit)
        if mpmath.fmod(imul * (f / pi / mpmath.sqrt(sq)) * frac7.denominator, 1) == 0:
            return 7
    return -1

str_z = lambda z: "mpmath.mpc('" + str(z.real) + "', '" + str(z.imag) + "')"
def str_found(op, sreal1, simag1, sreal2, simag2, z):
    if sreal1 in ["-0", "(-0)", "(0)"]:
        sreal1 = "0"
    if simag1 in ["-0", "(-0)", "(0)"]:
        simag1 = "0"
    if sreal2 in ["-0", "(-0)", "(0)"]:
        sreal2 = "0"
    if simag2 in ["-0", "(-0)", "(0)"]:
        simag2 = "0"
    iprec = mpmath.mp.prec
    mpmath.mp.prec = 128
    s = "found mpmath." + op + "(mpmath.mpc(" + sreal1 + ", " + simag1 + "), mpmath.mpc(" + sreal2 + ", " + simag2 + ")) = " + str_z(z)
    mpmath.mp.prec = iprec
    return s

def add_z(z):
    abs_zreal = abs(float(z.real))
    if abs_zreal not in [0, 1] and abs_zreal not in found_floats:
        found_floats.append(abs_zreal)
    abs_zimag = abs(float(z.imag))
    if abs_zimag not in [0, 1] and abs_zimag not in found_floats:
        found_floats.append(abs_zimag)

found_floats = []
mulimag = ["-1", "1", "-0.5 * mpmath.pi()", "0.5 * mpmath.pi()", "-mpmath.pi()", "mpmath.pi()", "2 * mpmath.pi()", "-2 * mpmath.pi()"]
bfirst = True
for i in range(0, len(fracs)):
    if bfirst:
        sbase = str(int(fbase)) if mpmath.fmod(fbase, 1) == 0 else str(fbase)
        snumber1 = str(int(number1)) if mpmath.fmod(number1, 1) == 0 else str(number1)
        snumber2 = str(int(number2)) if mpmath.fmod(number2, 1) == 0 else str(number2)
        print("fbase " + sbase + ", maxden " + str(maxden) + ", iprec " + str(iprec))
        print("number1 " + snumber1 + ", mpmath.power(" + sbase + ", mpmath.mpf('" + str(mpmath.log(number1, fbase)) + "'))")
        print("number2 " + snumber2 + ", mpmath.power(" + sbase + ", mpmath.mpf('" + str(mpmath.log(number2, fbase)) + "'))")
        if mpmath.fmod(fbase, 1) == 0 and mpmath.fmod(fbase, 2) != 0:
            mulimag.append(str(int(-fbase)) + " * mpmath.pi()")
            mulimag.append(str(int(fbase)) + " * mpmath.pi()")
            mulimag.append("(mpmath.pi() / " + str(int(fbase)) + ")")
            mulimag.append("(-mpmath.pi() / " + str(int(fbase)) + ")")
            mulimag.append(str(int(-fbase)) + " * 2 * mpmath.pi()")
            mulimag.append(str(int(fbase)) + " * 2 * mpmath.pi()")
            mulimag.append("(2 * mpmath.pi() / " + str(int(fbase)) + ")")
            mulimag.append("(-2 * mpmath.pi() / " + str(int(fbase)) + ")")
        bfirst = False
    for j in range(0, len(fracs)):
        fraci = 0 if fracs[i] == 0 else fractions.Fraction(float(fracs[i])).limit_denominator(maxden)
        fracj = 0 if fracs[j] == 0 else fractions.Fraction(float(fracs[j])).limit_denominator(maxden)
        for addthisi in range(-maxden, maxden + 1):
            for addthisj in range(-maxden, maxden + 1):
                sfraci = "0" if (fraci == 0 and addthisi == 0) else "" if (fraci == 0) else str(fraci.numerator) + "/" + str(fraci.denominator)
                sfracj = "0" if (fracj == 0 and addthisj == 0) else "" if (fracj == 0) else str(fracj.numerator) + "/" + str(fracj.denominator)
                for mulimagi in mulimag:
                    for mulimagj in mulimag:
                        z = mpmath.fdiv(mpmath.mpc(addthisi + fracs[i], eval(mulimagi) * number1), mpmath.mpc(addthisj + fracs[j], eval(mulimagj) * number2))
                        if is_fraction(z.real, 4*maxden) > 0 or is_fraction(z.imag, 4*maxden) > 0:
                            add_z(z)
                            sreal1 = ("" if addthisi == 0 else str(addthisi) + (" + " if sfraci != "" else "")) + sfraci
                            simag1 = ("" if mulimagi == "1" else mulimagi + " * ") + "number1"
                            sreal2 = ("" if addthisj == 0 else str(addthisj) + (" + " if sfracj != "" else "")) + sfracj
                            simag2 = ("" if mulimagj == "1" else mulimagj + " * ") + "number2"
                            print(str_found("fdiv", sreal1, simag1, sreal2, simag2, z))
                        if fracs[i] != 0 or fracs[j] != 0:
                            z = mpmath.fdiv(mpmath.mpc(addthisi - fracs[i], eval(mulimagi) * number1), mpmath.mpc(addthisj - fracs[j], eval(mulimagj) * number2))
                            if is_fraction(z.real, 4*maxden) > 0 or is_fraction(z.imag, 4*maxden) > 0:
                                add_z(z)
                                sreal1 = ("-" if (addthisi == 0 and sfraci != "0") else "" if (addthisi == 0) else str(addthisi) + (" - " if sfraci != "" else "")) + sfraci
                                simag1 = ("" if mulimagi == "1" else mulimagi + " * ") + "number1"
                                sreal2 = ("-" if (addthisj == 0 and sfracj != "0") else "" if (addthisj == 0) else str(addthisj) + (" - " if sfracj != "" else "")) + sfracj
                                simag2 = ("" if mulimagj == "1" else mulimagj + " * ") + "number2"
                                print(str_found("fdiv", sreal1, simag1, sreal2, simag2, z))
                        
                        z = mpmath.fdiv(mpmath.mpc(addthisi + fracs[i], eval(mulimagi) * number1), mpmath.mpc(number2, eval(mulimagj) * (addthisj + fracs[j])))
                        if is_fraction(z.real, 4*maxden) > 0 or is_fraction(z.imag, 4*maxden) > 0:
                            add_z(z)
                            sreal1 = ("" if addthisi == 0 else str(addthisi) + (" + " if sfraci != "" else "")) + sfraci
                            simag1 = ("" if mulimagi == "1" else mulimagi + " * ") + "number1"
                            sreal2 = "number2"
                            simag2 = ("" if mulimagj == "1" else mulimagj + " * ") + "(" + ("" if addthisj == 0 else str(addthisj) + (" + " if sfracj != "" else "")) + sfracj + ")"
                            print(str_found("fdiv", sreal1, simag1, sreal2, simag2, z))
-                        if fracs[i] != 0 or fracs[j] != 0:
                            z = mpmath.fdiv(mpmath.mpc(addthisi - fracs[i], eval(mulimagi) * number1), mpmath.mpc(number2, eval(mulimagj) * (addthisj - fracs[j])))
                            if is_fraction(z.real, 4*maxden) > 0 or is_fraction(z.imag, 4*maxden) > 0:
                                add_z(z)
                                sreal1 = ("-" if (addthisi == 0 and sfraci != "0") else "" if (addthisi == 0) else str(addthisi) + (" - " if sfraci != "" else "")) + sfraci
                                simag1 = ("" if mulimagi == "1" else mulimagi + " * ") + "number1"
                                sreal2 = "number2"
                                simag2 = ("" if mulimagj == "1" else mulimagj + " * ") + "(" + ("-" if (addthisj == 0 and sfraj != "0") else "" if (addthisj == 0) else str(addthisj) + (" - " if sfracj != "" else "")) + sfracj + ")"
                                print(str_found("fdiv", sreal1, simag1, sreal2, simag2, z))
                        
                        z = mpmath.log(mpmath.mpc(addthisi + fracs[i], eval(mulimagi) * number1), mpmath.mpc(addthisj + fracs[j], eval(mulimagj) * number2))
                        if is_fraction(z.real, 4*maxden) > 0 or is_fraction(z.imag, 4*maxden) > 0:
                            add_z(z)
                            sreal1 = ("" if addthisi == 0 else str(addthisi) + (" + " if sfraci != "" else "")) + sfraci
                            simag1 = ("" if mulimagi == "1" else mulimagi + " * ") + "number1"
                            sreal2 = ("" if addthisj == 0 else str(addthisj) + (" + " if sfracj != "" else "")) + sfracj
                            simag2 = ("" if mulimagj == "1" else mulimagj + " * ") + "number2"
                            print(str_found("log", sreal1, simag1, sreal2, simag2, z))
                        if fracs[i] != 0 or fracs[j] != 0:
                            z = mpmath.log(mpmath.mpc(addthisi - fracs[i], eval(mulimagi) * number1), mpmath.mpc(addthisj - fracs[j], eval(mulimagj) * number2))
                            if is_fraction(z.real, 4*maxden) > 0 or is_fraction(z.imag, 4*maxden) > 0:
                                add_z(z)
                                sreal1 = ("-" if (addthisi == 0 and sfraci != "0") else "" if (addthisi == 0) else str(addthisi) + (" - " if sfraci != "" else "")) + sfraci
                                simag1 = ("" if mulimagi == "1" else mulimagi + " * ") + "number1"
                                sreal2 = ("-" if (addthisj == 0 and sfracj != "0") else "" if (addthisj == 0) else str(addthisj) + (" - " if sfracj != "" else "")) + sfracj
                                simag2 = ("" if mulimagj == "1" else mulimagj + " * ") + "number2"
                                print(str_found("log", sreal1, simag1, sreal2, simag2, z))
                         
                        z = mpmath.log(mpmath.mpc(addthisi + fracs[i], eval(mulimagi) * number1), mpmath.mpc(number2, eval(mulimagj) * (addthisj + fracs[j])))
                        if is_fraction(z.real, 4*maxden) > 0 or is_fraction(z.imag, 4*maxden) > 0:
                            add_z(z)
                            sreal1 = ("" if addthisi == 0 else str(addthisi) + (" + " if sfraci != "" else "")) + sfraci
                            simag1 = ("" if mulimagi == "1" else mulimagi + " * ") + "number1"
                            sreal2 = "number2"
                            simag2 = ("" if mulimagj == "1" else mulimagj + " * ") + "(" + ("" if addthisj == 0 else str(addthisj) + (" + " if sfracj != "" else "")) + sfracj + ")"
                            print(str_found("log", sreal1, simag1, sreal2, simag2, z))
                        if fracs[i] != 0 or fracs[j] != 0:
                            z = mpmath.log(mpmath.mpc(addthisi - fracs[i], eval(mulimagi) * number1), mpmath.mpc(number2, eval(mulimagj) * (addthisj + fracs[j])))
                            if is_fraction(z.real, 4*maxden) > 0 or is_fraction(z.imag, 4*maxden) > 0:
                                add_z(z)
                                sreal1 = ("-" if (addthisi == 0 and sfraci != "0") else "" if (addthisi == 0) else str(addthisi) + (" - " if sfraci != "" else "")) + sfraci
                                simag1 = ("" if mulimagi == "1" else mulimagi + " * ") + "number1"
                                sreal2 = "number2"
                                simag2 = ("" if mulimagj == "1" else mulimagj + " * ") + "(" + ("-" if (addthisj == 0 and sfracj != "0") else "" if (addthisj == 0) else str(addthisj) + (" - " if sfracj != "" else "")) + sfracj + ")"
                                print(str_found("log", sreal1, simag1, sreal2, simag2, z))



# 2022-07-19


fbase 2, maxden 48, iprec 128
number1 178956970, mpmath.power(2, mpmath.mpf('27.415037493904385969072783402768129919942'))
number2 357913940, mpmath.power(2, mpmath.mpf('28.415037493904385969072783402768129919942'))
number2/number1 2.0

0.00000002134434123580371 # 1 / 46850825.18839075
0.00000013411045124422927 # 1 / 7456540.416666667
0.15915494309189533576888 # 1 / 6.283185307179586
0.00000004268868247160743 # 1 / 23425412.59419538
0.07957747154594766788444 # 1 / 13.80556918089281

found mpmath.fdiv(mpmath.mpc(-48, 2 * mpmath.pi() * number1), mpmath.mpc(-48, mpmath.pi() * number2)) = mpmath.mpc('1.0', '0.0')
found mpmath.log(mpmath.mpc(-48, 2 * mpmath.pi() * number1), mpmath.mpc(-48, mpmath.pi() * number2)) = mpmath.mpc('1.0', '0.0')
found mpmath.fdiv(mpmath.mpc(-48, -2 * mpmath.pi() * number1), mpmath.mpc(-48, -mpmath.pi() * number2)) = mpmath.mpc('1.0', '0.0')
found mpmath.log(mpmath.mpc(-48, -2 * mpmath.pi() * number1), mpmath.mpc(-48, -mpmath.pi() * number2)) = mpmath.mpc('1.0', '0.0')
found mpmath.fdiv(mpmath.mpc(-48, -1 * number1), mpmath.mpc(0, -1 * number2)) = mpmath.mpc('0.5', '-0.00000013411045124422926919247682836829434472')
found mpmath.fdiv(mpmath.mpc(-48, -1 * number1), mpmath.mpc(0, number2)) = mpmath.mpc('-0.5', '0.00000013411045124422926919247682836829434472')
found mpmath.fdiv(mpmath.mpc(-48, -1 * number1), mpmath.mpc(number2, (0))) = mpmath.mpc('-0.00000013411045124422926919247682836829434472', '-0.5')
found mpmath.fdiv(mpmath.mpc(-48, -1 * number1), mpmath.mpc(0, -mpmath.pi() * number2)) = mpmath.mpc('0.15915494309189533576888376337251436203', '-0.000000042688682471607426728930539234547217567')
found mpmath.fdiv(mpmath.mpc(-48, -1 * number1), mpmath.mpc(number2, -mpmath.pi() * (0))) = mpmath.mpc('-0.00000013411045124422926919247682836829434472', '-0.5')
found mpmath.fdiv(mpmath.mpc(-48, -1 * number1), mpmath.mpc(0, mpmath.pi() * number2)) = mpmath.mpc('-0.15915494309189533576888376337251436203', '0.000000042688682471607426728930539234547217567')
found mpmath.fdiv(mpmath.mpc(-48, -1 * number1), mpmath.mpc(number2, mpmath.pi() * (0))) = mpmath.mpc('-0.00000013411045124422926919247682836829434472', '-0.5')
found mpmath.fdiv(mpmath.mpc(-48, -1 * number1), mpmath.mpc(0, 2 * mpmath.pi() * number2)) = mpmath.mpc('-0.079577471545947667884441881686257181017', '0.000000021344341235803713364465269617273608783')
found mpmath.fdiv(mpmath.mpc(-48, -1 * number1), mpmath.mpc(number2, 2 * mpmath.pi() * (0))) = mpmath.mpc('-0.00000013411045124422926919247682836829434472', '-0.5')
found mpmath.fdiv(mpmath.mpc(-48, -1 * number1), mpmath.mpc(0, -2 * mpmath.pi() * number2)) = mpmath.mpc('0.079577471545947667884441881686257181017', '-0.000000021344341235803713364465269617273608783')
found mpmath.fdiv(mpmath.mpc(-48, -1 * number1), mpmath.mpc(number2, -2 * mpmath.pi() * (0))) = mpmath.mpc('-0.00000013411045124422926919247682836829434472', '-0.5')
found mpmath.fdiv(mpmath.mpc(-48, number1), mpmath.mpc(0, -1 * number2)) = mpmath.mpc('-0.5', '-0.00000013411045124422926919247682836829434472')
found mpmath.fdiv(mpmath.mpc(-48, number1), mpmath.mpc(number2, -1 * (0))) = mpmath.mpc('-0.00000013411045124422926919247682836829434472', '0.5')
found mpmath.fdiv(mpmath.mpc(-48, number1), mpmath.mpc(number2, -1 * (-0))) = mpmath.mpc('-0.00000013411045124422926919247682836829434472', '0.5')
found mpmath.fdiv(mpmath.mpc(-48, number1), mpmath.mpc(0, number2)) = mpmath.mpc('0.5', '0.00000013411045124422926919247682836829434472')
found mpmath.fdiv(mpmath.mpc(-48, number1), mpmath.mpc(number2, (0))) = mpmath.mpc('-0.00000013411045124422926919247682836829434472', '0.5')
found mpmath.fdiv(mpmath.mpc(-48, number1), mpmath.mpc(0, -mpmath.pi() * number2)) = mpmath.mpc('-0.15915494309189533576888376337251436203', '-0.000000042688682471607426728930539234547217567')
found mpmath.fdiv(mpmath.mpc(-48, number1), mpmath.mpc(number2, -mpmath.pi() * (0))) = mpmath.mpc('-0.00000013411045124422926919247682836829434472', '0.5')
found mpmath.fdiv(mpmath.mpc(-48, number1), mpmath.mpc(0, mpmath.pi() * number2)) = mpmath.mpc('0.15915494309189533576888376337251436203', '0.000000042688682471607426728930539234547217567')
found mpmath.fdiv(mpmath.mpc(-48, number1), mpmath.mpc(number2, mpmath.pi() * (0))) = mpmath.mpc('-0.00000013411045124422926919247682836829434472', '0.5')
found mpmath.fdiv(mpmath.mpc(-48, number1), mpmath.mpc(number2, mpmath.pi() * (-0))) = mpmath.mpc('-0.00000013411045124422926919247682836829434472', '0.5')
found mpmath.fdiv(mpmath.mpc(-48, number1), mpmath.mpc(0, 2 * mpmath.pi() * number2)) = mpmath.mpc('0.079577471545947667884441881686257181017', '0.000000021344341235803713364465269617273608783')
found mpmath.fdiv(mpmath.mpc(-48, number1), mpmath.mpc(number2, 2 * mpmath.pi() * (0))) = mpmath.mpc('-0.00000013411045124422926919247682836829434472', '0.5')
found mpmath.fdiv(mpmath.mpc(-48, number1), mpmath.mpc(number2, 2 * mpmath.pi() * (-0))) = mpmath.mpc('-0.00000013411045124422926919247682836829434472', '0.5')
found mpmath.fdiv(mpmath.mpc(-48, number1), mpmath.mpc(0, -2 * mpmath.pi() * number2)) = mpmath.mpc('-0.079577471545947667884441881686257181017', '-0.000000021344341235803713364465269617273608783')
found mpmath.fdiv(mpmath.mpc(-48, number1), mpmath.mpc(number2, -2 * mpmath.pi() * (0))) = mpmath.mpc('-0.00000013411045124422926919247682836829434472', '0.5')
found mpmath.fdiv(mpmath.mpc(-48, number1), mpmath.mpc(number2, -2 * mpmath.pi() * (-0))) = mpmath.mpc('-0.00000013411045124422926919247682836829434472', '0.5')
found mpmath.fdiv(mpmath.mpc(-48, -mpmath.pi() * number1), mpmath.mpc(0, -mpmath.pi() * number2)) = mpmath.mpc('0.5', '-0.000000042688682471607426728930539234547217567')
found mpmath.fdiv(mpmath.mpc(-48, -mpmath.pi() * number1), mpmath.mpc(0, mpmath.pi() * number2)) = mpmath.mpc('-0.5', '0.000000042688682471607426728930539234547217567')
found mpmath.fdiv(mpmath.mpc(-48, -mpmath.pi() * number1), mpmath.mpc(0, 2 * mpmath.pi() * number2)) = mpmath.mpc('-0.25', '0.000000021344341235803713364465269617273608783')
found mpmath.fdiv(mpmath.mpc(-48, -mpmath.pi() * number1), mpmath.mpc(0, -2 * mpmath.pi() * number2)) = mpmath.mpc('0.25', '-0.000000021344341235803713364465269617273608783')
found mpmath.fdiv(mpmath.mpc(-48, mpmath.pi() * number1), mpmath.mpc(0, -mpmath.pi() * number2)) = mpmath.mpc('-0.5', '-0.000000042688682471607426728930539234547217567')
found mpmath.fdiv(mpmath.mpc(-48, mpmath.pi() * number1), mpmath.mpc(0, mpmath.pi() * number2)) = mpmath.mpc('0.5', '0.000000042688682471607426728930539234547217567')
found mpmath.fdiv(mpmath.mpc(-48, mpmath.pi() * number1), mpmath.mpc(0, 2 * mpmath.pi() * number2)) = mpmath.mpc('0.25', '0.000000021344341235803713364465269617273608783')
found mpmath.fdiv(mpmath.mpc(-48, mpmath.pi() * number1), mpmath.mpc(0, -2 * mpmath.pi() * number2)) = mpmath.mpc('-0.25', '-0.000000021344341235803713364465269617273608783')
found mpmath.fdiv(mpmath.mpc(-48, 2 * mpmath.pi() * number1), mpmath.mpc(0, -mpmath.pi() * number2)) = mpmath.mpc('-1.0', '-0.000000042688682471607426728930539234547217567')
found mpmath.fdiv(mpmath.mpc(-48, 2 * mpmath.pi() * number1), mpmath.mpc(0, mpmath.pi() * number2)) = mpmath.mpc('1.0', '0.000000042688682471607426728930539234547217567')
found mpmath.fdiv(mpmath.mpc(-48, 2 * mpmath.pi() * number1), mpmath.mpc(0, 2 * mpmath.pi() * number2)) = mpmath.mpc('0.5', '0.000000021344341235803713364465269617273608783')
found mpmath.fdiv(mpmath.mpc(-48, 2 * mpmath.pi() * number1), mpmath.mpc(0, -2 * mpmath.pi() * number2)) = mpmath.mpc('-0.5', '-0.000000021344341235803713364465269617273608783')
found mpmath.fdiv(mpmath.mpc(-48, -2 * mpmath.pi() * number1), mpmath.mpc(0, -mpmath.pi() * number2)) = mpmath.mpc('1.0', '-0.000000042688682471607426728930539234547217567')
found mpmath.fdiv(mpmath.mpc(-48, -2 * mpmath.pi() * number1), mpmath.mpc(0, mpmath.pi() * number2)) = mpmath.mpc('-1.0', '0.000000042688682471607426728930539234547217567')
found mpmath.fdiv(mpmath.mpc(-48, -2 * mpmath.pi() * number1), mpmath.mpc(0, 2 * mpmath.pi() * number2)) = mpmath.mpc('-0.5', '0.000000021344341235803713364465269617273608783')
found mpmath.fdiv(mpmath.mpc(-48, -2 * mpmath.pi() * number1), mpmath.mpc(0, -2 * mpmath.pi() * number2)) = mpmath.mpc('0.5', '-0.000000021344341235803713364465269617273608783')
found mpmath.fdiv(mpmath.mpc(-48, 2 * mpmath.pi() * number1), mpmath.mpc(48, -mpmath.pi() * number2)) = mpmath.mpc('-1.0', '0.0')
found mpmath.fdiv(mpmath.mpc(-48, 2 * mpmath.pi() * number1), mpmath.mpc(48, -mpmath.pi() * number2)) = mpmath.mpc('-1.0', '0.0')
found mpmath.fdiv(mpmath.mpc(-48, -2 * mpmath.pi() * number1), mpmath.mpc(48, mpmath.pi() * number2)) = mpmath.mpc('-1.0', '0.0')
found mpmath.fdiv(mpmath.mpc(-48, -2 * mpmath.pi() * number1), mpmath.mpc(48, mpmath.pi() * number2)) = mpmath.mpc('-1.0', '0.0')


fbase 3, maxden 48, iprec 128
number1 8578797170610, mpmath.power(3, mpmath.mpf('27.107210739285587899940454072303955178'))
number2 25736391511830, mpmath.power(3, mpmath.mpf('28.107210739285587899940454072303955178'))





(1 + 1/e^(ln(n)))^(n + eps) = e

(n + eps)*ln((e^ln(n) + 1)/e^ln(n)) = 1

eps * ln((e^ln(n) + 1)/e^ln(n)) = 1 - n * ln((e^ln(n) + 1)/e^ln(n))

eps = (1 - n * ln((e^ln(n) + 1)/e^ln(n))) / ln((e^ln(n) + 1)/e^ln(n))

eps = (1 - n * (ln(e^ln(n) + 1) - ln(e^ln(n))) / (ln(e^ln(n) + 1) - ln(e^ln(n)))

eps = (1 - n * ln(e^ln(n) + 1) - n**2) / (ln(e^ln(n) + 1) - n)

L'Hopital's Rule
n = sympy.symbols("n")
sympy.Derivative("1 - n * log(e^log(n) + 1) - n^2", "n").doit() = -e**log(n)*log(e)/(e**log(n) + 1) - 2*n - log(e**log(n) + 1)
sympy.Derivative("log(e^log(n) + 1) - n", "n").doit()           = e**log(n)*log(e)/(n*(e**log(n) + 1)) - 1

eps = (1 - n * ln(n + 1) - n**2) / (ln(n + 1) - n)

sympy.Derivative("1 - n * log(n + 1) - n^2", "n").doit() = -2*n - n/(n + 1) - log(n + 1)
sympy.Derivative("log(n + 1) - n", "n").doit()           = -1 + 1/(n + 1)

sympy.Derivative("-2*n - n/(n + 1) - log(n + 1)", "n").doit() = n/(n + 1)**2 - 2 - 2/(n + 1)
sympy.Derivative("-1 + 1/(n + 1)", "n").doit()                = -1/(n + 1)**2

(n/(n + 1)**2 - 2 - 2/(n + 1)) * -(n + 1)**2

-n + 2*(n + 1)**2 + 2*(n + 1)

-n + 2*n**2 + 4*n + 2 + 2*n + 2

2*n**2 + 5*n + 4

2 + 5/n + 4/n**2


(-2*n - n/(n + 1) - log(n + 1)) / (-1 + 1/(n + 1))

(2*n + n/(n + 1) + log(n + 1)) / (1 - 1/(n + 1))

(2*n*(n + 1) + n + (n + 1) * log(n + 1)) / n

sympy.Derivative("2*n*(n + 1) + n + (n + 1) * log(n + 1)", "n").doit() = 4*n + log(n + 1) + 4
sympy.Derivative("n", "n").doit()                                      = 1

4*n + log(n + 1) + 4

(4*n**3 + n**2*log(n + 1) + 4*n**2) / n**2

sympy.Derivative("4*n**3 + n**2*log(n + 1) + 4*n**2", "n").doit() = 12*n**2 + n**2/(n + 1) + 2*n*log(n + 1) + 8*n
sympy.Derivative("n**2", "n").doit()                              = 2*n

(12*n**2 + n**2/(n + 1) + 2*n*log(n + 1) + 8*n) / (2*n)



# --------------------------------------------------------------------------------
# 
# 
# 
# --------------------------------------------------------------------------------

(1 + 1/n)^(n + eps) = e

(n + eps)*log(1 + 1/n) = 1

eps*log(1 + 1/n) = 1 - n*log(1 + 1/n)

eps = (1 - n*log(1 + 1/n))/log(1 + 1/n)

eps = (1/n - log(1 + 1/n))/((1/n) * log(1 + 1/n))

L'Hopital's Rule
n = sympy.symbols("n")
d/dn (1/n - log(1 + 1/n))   = sympy.Derivative("(1/n) - log(1 + 1/n)").doit() = -1/n**2 + 1/(n**2*(1 + 1/n))
d/dn ((1/n) * log(1 + 1/n)) = sympy.Derivative("(1/n) * log(1 + 1/n)").doit() = -log(1 + 1/n)/n**2 - 1/(n**3*(1 + 1/n))

(-1/n**2 + 1/(n**2*(1 + 1/n))) / (-1/(n**3*(1 + 1/n)) - log(1 + 1/n)/n**2)

(-1 + 1/(1 + 1/n)) / (-n**2/(n**3*(1 + 1/n)) - log(1 + 1/n))

(-1 + 1/(1 + 1/n)) / (-1/(n + 1) - log(1 + 1/n))

d/dn (-1 + 1/(1 + 1/n))          = sympy.Derivative("-1 + 1/(1 + 1/n)").doit()          = 1/(n**2*(1 + 1/n)**2)
d/dn (-1/(n + 1) - log(1 + 1/n)) = sympy.Derivative("-1/(n + 1) - log(1 + 1/n)").doit() = (n + 1)**(-2) + 1/(n**2*(1 + 1/n))

1/(n**2*(1 + 1/n)**2) / ((n + 1)**(-2) + 1/(n**2*(1 + 1/n)))

1/(1 + 1/n) / ((n**2*(1 + 1/n)) / (n + 1)**2 + 1)

1/(1 + 1/n) / (n*(n + 1) / (n + 1)**2 + 1)

n/(n + 1) / (n / (n + 1) + 1)

1 / (1 + (n + 1) / n)

1 / (1 + (1 + 1/n) / 1)

1 / 2


with n = 1/n, 1 / (1 + (1 + 1/n) / 1) becomes

1 / (1 + (1 + n))

1/n / (2/n + 1)

0


(1 + 1/n^2)^(n^2 + eps) = e

(n^2 + eps)*log(1 + 1/n^2) = 1

eps*log(1 + 1/n^2) = 1 - n^2*log(1 + 1/n^2)

eps = (1 - n^2*log(1 + 1/n^2))/log(1 + 1/n^2)

eps = (1/n^2 - log(1 + 1/n^2))/((1/n^2) * log(1 + 1/n^2))

L'Hopital's Rule
n = sympy.symbols("n")
d/dn (1/n^2 - log(1 + 1/n^2))   = sympy.Derivative("(1/n^2) - log(1 + 1/n^2)").doit() = -2/n**3 + 2/(n**3*(1 + n**(-2)))
d/dn ((1/n^2) * log(1 + 1/n^2)) = sympy.Derivative("(1/n^2) * log(1 + 1/n^2)").doit() = -2*log(1 + n**(-2))/n**3 - 2/(n**5*(1 + n**(-2)))

(-2/n**3 + 2/(n**3*(1 + n**(-2)))) / (-2*log(1 + n**(-2))/n**3 - 2/(n**5*(1 + n**(-2))))

(-2 + 2/(1 + n**(-2))) / (-2*log(1 + n**(-2)) - 2/(n**2*(1 + n**(-2))))

(-2 + 2/(1 + n**(-2))) / (-2*log(1 + n**(-2)) - 2/(n**2 + 1))

sympy.Derivative("-2 + 2/(1 + n^(-2))").doit()              = 4/(n**3*(1 + n**(-2))**2)
sympy.Derivative("-2*log(1 + n^(-2)) - 2/(n^2 + 1)").doit() = 4*n/(n**2 + 1)**2 + 4/(n**3*(1 + n**(-2)))

4/(n**3*(1 + n**(-2))**2) / (4*n/(n**2 + 1)**2 + 4/(n**3*(1 + n**(-2))))

4/(1 + n**(-2))**2 / (4*n**4/(n**2 + 1)**2 + 4/(1 + n**(-2)))

4/(1 + n**(-2))**2 / (4*n**4/(n**4 + 2n**2 + 1) + 4/(1 + n**(-2)))

1 / (n**4/(n**4 + 2n**2 + 1) + 1/(1 + n**(-2)))

1 / (n**4/(n**2 + 1)**2 + n**2/(n**2 + 1))

(n**2 + 1) / (n**4/(n**2 + 1) + n**2)

(1 + 1/n**2) / (1/(1 + 1/n**2) + 1)

1/2


substitution, n = 1/n

(1 + 1/(1/n))^(1/n + eps) = e

(1/n + eps)*log(1 + n) = 1

eps*log(1 + n) = 1 - (1/n)*log(1 + n)

eps = (1 - (1/n)*log(1 + n))/log(1 + n)

eps = (n - log(1 + n)) / (n * log(1 + n))


L'Hopital's Rule A
n = sympy.symbols("n")
sympy.Derivative("n - log(1 + n)", "n").doit() = 1 - 1/(n + 1)
sympy.Derivative("n * log(1 + n)", "n").doit() = n/(n + 1) + log(n + 1)

(1 - 1/(n + 1)) / (n/(n + 1) + log(n + 1))

sympy.Derivative("(1 - 1/(n + 1))", "n").doit()          = (n + 1)**(-2)
sympy.Derivative("(n/(n + 1) + log(n + 1))", "n").doit() = -n/(n + 1)**2 + 2/(n + 1)

(n + 1)**(-2) / (-n/(n + 1)**2 + 2/(n + 1))

1 / (-n + 2*(n + 1))

1 / (n + 2)

1/n / (1 + 2/n)

0

sympy.simplify(sympy.expand("(n + 1)**(-2) / (-n/(n + 1)**2 + 2/(n + 1))"))

1/(n + 2)

(1/n)/(1 + 2/n)

0


L'Hopital's Rule B
sympy.Derivative("1 - (1/n)*log(1 + n)", "n").doit() = -1/(n*(n + 1)) + log(n + 1)/n**2
sympy.Derivative("log(1 + n)", "n").doit()           = 1/(n + 1)

(-1/(n*(n + 1)) + log(n + 1)/n**2) / 1/(n + 1)

(-n/(n + 1) + log(n + 1)) / n**2/(n + 1)

sympy.Derivative("-n/(n + 1) + log(n + 1)", "n").doit() = 
sympy.Derivative("n**2/(n + 1)", "n").doit()            = 

(n/(n + 1)**2) / (-n**2/(n + 1)**2 + 2*n/(n + 1))

(n / (-n**2 + 2*n*(n + 1))

(1 / (-n + 2*(n + 1))

(1 / (-1 + 2*n + 2))

(1/n / (1/n + 2)

0 / 2

sympy.simplify(sympy.expand("(n/(n + 1)**2) / (-n**2/(n + 1)**2 + 2*n/(n + 1))"))

1/(n + 2)



(2*eps1 - eps1/(eps1 + 1) - log(eps1 + 1)) * (eps1 + 1)

2*eps1*(eps1 + 1) - eps1 - (eps1 + 1)*log(eps1 + 1)

2*eps1**2 + 2*eps1 - eps1 - (eps1 + 1)*log(eps1 + 1)

2*eps1**2 + eps1 - log(eps1 + 1)/(1/(eps1 + 1))

sympy.Derivative("log(1 + eps1)").doit() = 1/(eps1 + 1)
sympy.Derivative("1/(1 + eps1)").doit()  = -1/(eps1 + 1)**2

2*eps1**2 + eps1 - -(eps1 + 1)**2/(eps1 + 1)

2*eps1**2 + eps1 + (eps1 + 1)

2*eps1**2 + 2*eps1 + 1

1


(1 + 1/n)^(n + 1/2 + eps) = e

(n + 1/2 + eps)*log(1 + 1/n) = 1

(n + 1/2 + eps) = 1 / log(1 + 1/n)

eps = 1 / log(1 + 1/n) - (n + 1/2)

eps = (1 - (n + 1/2) * log(1 + 1/n)) / log(1 + 1/n)

L'Hopital's Rule
n = sympy.symbols("n")
sympy.Derivative("1 - (n + 1/2) * log(1 + 1/n)").doit() = -log(1 + 1/n) - (-n - 1/2)/(n**2*(1 + 1/n))
sympy.Derivative("log(1 + 1/n)").doit()                 = -1/(n**2*(1 + 1/n))

sympy.Derivative("-log(1 + 1/n) - (-n - 1/2)/(n**2*(1 + 1/n))").doit()  = 2/(n**2*(1 + 1/n)) + 2*(-n - 1/2)/(n**3*(1 + 1/n)) - (-n - 1/2)/(n**4*(1 + 1/n)**2)
sympy.Derivative("-1/(n**2*(1 + 1/n))").doit()                          = 2/(n**3*(1 + 1/n)) - 1/(n**4*(1 + 1/n)**2)

sympy.simplify("( 2/(n**2*(1 + 1/n)) + 2*(-n - 1/2)/(n**3*(1 + 1/n)) - (-n - 1/2)/(n**4*(1 + 1/n)**2) ) / ( 2/(n**3*(1 + 1/n)) - 1/(n**4*(1 + 1/n)**2) )")

-1/(4*n + 2)

-1/n / (4 + 2/n)

0







(1 + 1/n)^(n + eps) = e
(n + eps)*log(1 + 1/n) = 1
eps*log(1 + 1/n) = 1 - n*log(1 + 1/n)
eps = (1 - n*log(1 + 1/n))/log(1 + 1/n)

(1 + pi*i/n)^(n + eps) = -1
1 + pi*i/n = -1^(1/(n + eps))
pi*i/n = -1^(1/(n + eps)) - 1
n = pi*i / (-1^(1/(n + eps)) - 1)

(1 + pi*i/n)^(n + eps) = -1
(n + eps)*log(1 + pi*i/n) = pi*i
eps*log(1 + pi*i/n) = pi*i - n*log(1 + pi*i/n)
eps = (pi*i - n*log(1 + pi*i/n))/log(1 + pi*i/n)

(1 + pi*i/m)^(m + eps1) * (1 + pi*i/n)^(n + eps1) = 1 = (1 + pi*i/(m*n))^((m*n) + eps2)
(m + eps1)*log(1 + pi*i/m) + (n + eps1)*log(1 + pi*i/n) = 0 = ((m*n) + eps2)*log(1 + pi*i/(m*n))
(m + eps1)*log(1 + pi*i/m) + (p1p2/m + eps1)*log(1 + pi*i*m/p1p2) = 0 = (p1p2 + pi*i/2)*log(1 + pi*i/p1p2)
m*log(1 + pi*i/m) + (p1p2/m)*log(1 + pi*i*m/p1p2) + eps1*(log(1 + pi*i/m) + log(1 + pi*i*m/p1p2)) = 0 = (p1p2 + pi*i/2)*log(1 + pi*i/p1p2)
m*log(1 + pi*i/m) + (p1p2/m)*log(1 + pi*i*m/p1p2) + eps1*log((1 + pi*i/m)*(1 + pi*i*m/p1p2)) = 0 = (p1p2 + pi*i/2)*log(1 + pi*i/p1p2)
m*log(1 + pi*i/m) + (p1p2/m)*log(1 + pi*i*m/p1p2) + eps1*log(1 + pi*i/m + pi*i*m/p1p2 - pi^2/p1p2) = 0 = (p1p2 + pi*i/2)*log(1 + pi*i/p1p2)
eps1 = (pi*i - sqrt(p1p2)*log(1 + pi*i/sqrt(p1p2)))/log(1 + pi*i/sqrt(p1p2))


mpmath.mp.prec = 256
idigits = 13
iprec = int((181/512)*mpmath.mp.prec)
# p1, p2 = 10396522617497, 51022627941473
p1, p2 = generate_primes(idigits)
p1p2 = mpmath.fmul(p1, p2)
sqrt_p1p2 = mpmath.sqrt(p1p2)
two = mpmath.power(2, iprec)
pi = mpmath.mpc(0, mpmath.pi())
eps_real2 = myepsilon2(mpmath.power(2, iprec))
eps_real3 = myepsilon3(sqrt_p1p2, two)
eps_complex3 = myepsilon3(mpmath.mpc(0, mpmath.sqrt(p1p2)*mpmath.pi()), two)
eps_real4 = myepsilon4(mpmath.sqrt(p1p2), two)
eps_complex4 = myepsilon4(mpmath.mpc(0, mpmath.sqrt(p1p2)*mpmath.pi()), two)

ls1a = lambda p1, p1p2, pi, eps: p1*mpmath.log(1 + pi/p1) + (p1p2/p1)*mpmath.log(1 + pi*p1/p1p2) + eps*mpmath.log(1 + pi/p1 + pi*p1/p1p2 - pi**2/p1p2)
rs12a = lambda p1p2, pi: (p1p2 + pi/2)*mpmath.log(1 + pi/p1p2)

(1 / (1/log(1 + ln(p1)/2^64) - 1/2)) + (1 / (1/log(1 + ln(p1p2/p1)/2^64) - 1/2)) = (1 / (1/log(1 + ln(p1p2)/2^64) - 1/2))
inv_log = lambda x, prec: mpmath.fdiv(1, mpmath.fdiv(1, mpmath.log(1 + mpmath.fdiv(mpmath.log(x), mpmath.power(2, prec)))) - 1/2)
ls1b = lambda p1, p1p2, prec: inv_log(p1, prec) + inv_log(mpmath.fdiv(p1p2, p1), prec)
rs12b = lambda p1p2, prec: inv_log(p1p2, prec)

e^(2^64 / (1/log(1 + ln(p1p2)/2^64) - 1/2)) % e^(2^64 / (1/log(1 + ln(p1)/2^64) - 1/2)) = e^(2^64 / (1/log(1 + ln(p1p2/p1)/2^64) - 1/2))
e^(2^64 / (1/log(1 + ln(p1p2)/2^64) - 1/2)) % e^(2^64 / (1/log(1 + ln(p2)/2^64) - 1/2)) = e^(2^64 / (1/log(1 + ln(p1p2/p2)/2^64) - 1/2))
my_exp = lambda x, prec: mpmath.exp(mpmath.fmul(mpmath.power(2, prec), inv_log(x, prec)))
my_mod_real = lambda p1p2, p, prec: mpmath.fmod(my_exp(p1p2, prec), my_exp(p, prec)) 
def my_mod_complex(p1p2, p, prec):
    z1 = my_exp(mpmath.mpc(0, p1p2*mpmath.pi()), prec)
    z2 = my_exp(mpmath.mpc(0, p*mpmath.pi()), prec)
    z3 = z1 / z2
    return z1 - mpmath.mpc(mpmath.floor(z3.real), mpmath.floor(z3.imag)) * z2

# eps_real2
# eps_real3
# eps_complex3
# eps_real4
# eps_complex4

iprec = int((181/512)*mpmath.mp.prec)

left_side1_p1p2 = ls1(p1, p1p2, pi, eps)
left_side1_real2_true = ls1(p1, p1p2, pi, eps_real2)
left_side1_real3_true = ls1(p1, p1p2, pi, eps_real3)
left_side1_complex3_true = ls1(p1, p1p2, pi, eps_complex3)
left_side1_real3_true = ls1(p1, p1p2, pi, eps_real4)
left_side1_complex3_true = ls1(p1, p1p2, pi, eps_complex4)
left_side1_complex1_true = ls1(p1, p1p2, pi, eps_complex1)
right_side1_true = rs1(p1p2, pi)
left_side2_real2_true = ls2(p1, p1p2, iprec)
right_side2_real2_true = rs2(p1p2, iprec)
left_side2_complex2_true = ls2(mpmath.mpc(0, p1*mpmath.pi()), mpmath.mpc(0, p1p2*mpmath.pi()), iprec)
right_side2_complex2_true = rs2(mpmath.mpc(0, p1p2*mpmath.pi()), iprec)
mod_real_p1 = my_mod_real(p1p2, p1, iprec)
mod_real_p2 = my_mod_real(p1p2, p2, iprec)
mod_complex_p1 = my_mod_complex(p1p2, p1, iprec)
mod_complex_p2 = my_mod_complex(p1p2, p2, iprec)
logp1_epsreal2 = mpmath.power(1 + mpmath.fdiv(pi, p1), p1 + eps_real2)
logp1_epsreal3 = mpmath.power(1 + mpmath.fdiv(pi, p1), p1 + eps_real3)
logp1_epscomplex3 = mpmath.power(1 + mpmath.fdiv(pi, p1), p1 + eps_complex3)
logp1_epsreal4 = mpmath.power(1 + mpmath.fdiv(pi, p1), p1 + eps_real4)
logp1_epscomplex4 = mpmath.power(1 + mpmath.fdiv(pi, p1), p1 + eps_complex4)
logp2_epsreal2 = mpmath.power(1 + mpmath.fdiv(pi, p2), p2 + eps_real2)
logp2_epsreal3 = mpmath.power(1 + mpmath.fdiv(pi, p2), p2 + eps_real3)
logp2_epscomplex3 = mpmath.power(1 + mpmath.fdiv(pi, p2), p2 + eps_complex3)
logp2_epsreal4 = mpmath.power(1 + mpmath.fdiv(pi, p2), p2 + eps_real4)
logp2_epscomplex4 = mpmath.power(1 + mpmath.fdiv(pi, p2), p2 + eps_complex4)
logp1p2 = mpmath.power(1 + mpmath.fdiv(pi, p1p2), p1p2 + 0.5)




# left_side_real1_true/right_side_1_true
# left_side_complex1_true/right_side_1_true
# mpc(real='1.999999999999999999999999996209529032296088868296440780246044243433732369324511', imag='1.496292607692380675519772814870654596229725558443251018531280686244550215005821e-39')
# mpc(real='3.333362838823980370264718371476116675660652611698118480992833789379963144563084', imag='-0.0000000000003561785458347960343969096517186096317042405626181808697181706847391876451159351')
# mpc(real='2.000000000000588396942539450726274000845034715452937448675986514862147236699105', imag='4.188882899018879392213573819902384119581292468976002962464998526174145609991838')
# 1/(2 - left_side_true/right_side_true)
# mpc(real='263819458985528894056313576.5612726852011093157605035224382899429772265314907902', imag='104143023283613.6813524394726180551902827998376581615919384901016119733135396237')
# (1/(2 - left_side_true/right_side_true)).imag / p1
# mpf('10.01710159398340121556720335983070272899152183913849562728636242481152594163513')
# (1/(2 - left_side_true/right_side_true)).real / p1p2
# mpf('0.4973428735834491925778400881008852076194353918987131409238333836600959986299987')
# (1/(2 - left_side_true/right_side_true)) / p1p2
# mpc(real='0.4973428735834491925778400881008852076194353918987131409238333836600959986299987', imag='0.0000000000001963266495303576098163827074833176654457636883126190013803094328774459857233046')
# 1/((1/(2 - left_side_true/right_side_true)) / p1p2).imag
# mpf('5093552008309.355554668557891213398150087701110643134514296157037285744440904712')
# p2 / (1/((1/(2 - left_side_true/right_side_true)) / p1p2).imag)
# mpf('10.01710159398340121556720335983070272899152183913849562728636242481152594163513')
# mpmath.sqrt(p1p2) / (1/((1/(2 - left_side_true/right_side_true)) / p1p2).imag)
# mpf('4.521730955423364812187088219380164089082397724544040327606948868893508297831445')
# mpmath.log(1/((1/(2 - left_side_true/right_side_true)) / p1p2).imag, p1p2)
# mpf('0.4754793909220009997863238526845477758947372500443746287403113552680531204654609')
# 1/(0.5 - mpmath.mpf('0.4973428735834491925778400881008852076194353918987131409238333836600959986299987'))
# mpf('376.3464145970485137567780175369121454158538085889330174273788158370618946033546')
# 1/(0.5 - mpmath.mpf('0.4754793909220009997863238526845477758947372500443746287403113552680531204654609'))
# mpf('40.78202123034722006048063513695757656943848079920772042800764016554550978887958')
# mpmath.log(1/(2 - left_side_true/right_side_true), mpmath.mpc(0.5, p1p2))
# mpc(real='0.9880054881991834494087946781484797527536519225445062564579169697755739093228959', imag='-0.02522037293010082557397556884939056838926602984611637217958409387219739460033733')
# mpmath.log(1/(2 - left_side_true/right_side_true), mpmath.mpc(math.sqrt(p1p2), p1p2))
# mpc(real='0.9880054881991834849756452752486830455644246319006221813777120094517086493891421', imag='-0.02522037293010012936408738006572539525851495412124276755946770038938227805009563')
# mpmath.log(1/(2 - left_side_true/right_side_true), mpmath.mpc(-math.sqrt(p1p2), p1p2))
# mpc(real='0.9880054881991834138419440810155232873356000641968649786002038727324539213250049', imag='-0.0252203729301015217838637576616646323412077826547396833672116126054282470670986')
# get_e5(-mpmath.log(1/(2 - left_side_true/right_side_true), mpmath.mpc(0.5, p1p2)).real, 0)
# mpf('1.742411786605040402720367685833327972395352660403519031097685129943309852077852')
# mpmath.log(mpmath.log(get_e5(-mpmath.log(1/(2 - left_side_true/right_side_true), mpmath.mpc(0.5, p1p2)).real, 0), mpmath.power(2 * mpmath.pi(), 1)), 0.5)
# mpf('1.726778294276719034685577279797680914548383564032524527442942749192569308581756')
# get_e5(-mpmath.log(1/(2 - left_side_true/right_side_true), mpmath.mpc(0.5, p1p2)).real, mpmath.mpc(0, mpmath.pi()/2))
# mpf('8.587218746896706065333206576679023961552412670896357614787077804860550108439067')
# mpmath.log(pi/(2 - left_side_true/right_side_true), mpmath.mpc(-math.sqrt(p1p2), p1p2))
# mpc(real='1.00724722541791585453660283229047747672480401501688423792215863542663700906052', imag='-0.0001849966725143393189007979617609362342086969999007463919747726137369495833312929')
# mpmath.mpc(1, -mpmath.fdiv(1, mpmath.power(p1p2, 0.139696))) / mpmath.log(pi/(2 - left_side_true/right_side_true), mpmath.mpc(-math.sqrt(p1p2), p1p2))
# mpc(real='0.99280491916092319402073535447176404038377507306299659444845510991778384244146', imag='-0.000001114063993658196587083843134637967209567136477452797126334122201255520888948184')
# mpmath.mpc(1, -mpmath.fdiv(1, mpmath.power(p1p2, 0.25))) / mpmath.log(pi/(2 - left_side_true/right_side_true), mpmath.mpc(-math.sqrt(p1p2), p1p2))
# mpc(real='0.9928048855039613761122302160142069316691343553180045170589342243733756741868773', imag='0.0001821372396450998258415820152641526855183417259369938058925317799685284221352935')
# mpmath.mpc(1, -mpmath.fdiv(1, 5444)) / mpmath.log(pi/(2 - left_side_true/right_side_true), mpmath.mpc(-math.sqrt(p1p2), p1p2))
# mpc(real='0.9928049189604759587521991982916298440579313358081028363870780173194551003489888', imag='-0.00000002269343643222410218765269212407958641800340951456534222753504118307533001168114')
# mpmath.mpc(1, -mpmath.fdiv(1, 2)) / mpmath.log(pi/(2 - left_side_true/right_side_true), mpmath.mpc(-math.sqrt(p1p2), p1p2))
# mpc(real='0.9928960575216603133148731583184689465323499057450166579138195753981705595151866', imag='-0.4962200986215947532031931767400356153689245418395430384425855309090600318244923')
# mpmath.mpc(1, -mpmath.fdiv(1, mpmath.e())) / mpmath.log(pi/(2 - left_side_true/right_side_true), mpmath.mpc(-math.sqrt(p1p2), p1p2))
# mpc(real='0.9928719661157645913430867097582539824944924853834908744976310774272318872320566', imag='-0.3650501623461091041903663717710504034062045644312551379874024311713878207968955')
# get_e2((mpmath.mpc(1, -mpmath.fdiv(1, mpmath.e())) / mpmath.log(pi/(2 - left_side_true/right_side_true), mpmath.mpc(-math.sqrt(p1p2), p1p2))).imag, 0)
# mpf('65.43013612835923918645729240612500680430495437851282860002426836135382962485874')
# get_e2((mpmath.mpc(1, -mpmath.fdiv(1, mpmath.e())) / mpmath.log(pi/(2 - left_side_true/right_side_true), mpmath.mpc(-math.sqrt(p1p2), p1p2))).imag, 0.5)
# mpf('130.1091494453482592206429372319727143404605394031607397410563506814706396866735')
# mpmath.power(1 - mpmath.fdiv(1, mpmath.mpf('130.1091494453482592206429372319727143404605394031607397410563506814706396866735')), mpmath.mpf('130.1091494453482592206429372319727143404605394031607397410563506814706396866735') + 0.5)
# mpf('0.3650501623461091041903663717710504034062045644312551379874024311713878207966709')
# get_e4((mpmath.mpc(1, -mpmath.fdiv(1, 2.5)) / mpmath.log(pi/(2 - left_side_true/right_side_true), mpmath.mpc(-math.sqrt(p1p2), p1p2))).imag, 0)
# mpf('5.918405559568742940512006834630786869547111368075858145573954948619866912589848')
# get_e4((mpmath.mpc(1, -mpmath.fdiv(1, 3)) / mpmath.log(pi/(2 - left_side_true/right_side_true), mpmath.mpc(-math.sqrt(p1p2), p1p2))).imag, 0)
# get_e4((mpmath.mpc(1, -mpmath.fdiv(1, 3)) / mpmath.log(pi/(2 - left_side_true/right_side_true), mpmath.mpc(-math.sqrt(p1p2), p1p2))).imag, 0.5)
# mpf('0.46972655249999994975240724670584313571453094482421875')
# get_e4((mpmath.mpc(1, -mpmath.fdiv(1, mpmath.e())) / mpmath.log(pi/(2 - left_side_true/right_side_true), mpmath.mpc(-math.sqrt(p1p2), p1p2))).imag, 0)
# mpf('2.808196659210933341331075309458091919638601854988333914358421272114809008983376')
# get_e4((mpmath.mpc(1, -mpmath.fdiv(1, mpmath.pi())) / mpmath.log(pi/(2 - left_side_true/right_side_true), mpmath.mpc(-math.sqrt(p1p2), p1p2))).imag, 0.5)
# mpf('0.33984373999999994975240724670584313571453094482421875')



class lsrs:
    def __init__(self, eps, newp1, newp2, newp1p2, left_side1_p1p2, left_side1_newp1p2, right_side1_p1p2, right_side1_newp1p2, left_side2_p1p2, left_side2_newp1p2, right_side2_p1p2, right_side2_newp1p2, mod_real_newp1, mod_real_newp2, mod_complex_newp1, mod_complex_newp2):
        #self.newp1 = newp1
        #self.newp2 = newp2
        #self.newp1p2 = newp1p2
        self.eq = equations(eps, newp1, newp2, newp1p2, left_side1_p1p2, left_side1_newp1p2, right_side1_p1p2, right_side1_newp1p2, left_side2_p1p2, left_side2_newp1p2, right_side2_p1p2, right_side2_newp1p2, mod_real_newp1, mod_real_newp2, mod_complex_newp1, mod_complex_newp2)

class equations:
    def __init__(self, eps, bcomplex, newp1, newp2, newp1p2, left_side_p1p2, left_side_real1_newp1p2, left_side_complex1_p1p2, left_side_complex1_newp1p2, right_side_p1p2, right_side_newp1p2, left_side_real2_p1p2, left_side_real2_newp1p2, right_side_real2_p1p2, right_side_real2_newp1p2, left_side_complex2_p1p2, left_side_complex2_newp1p2, right_side_complex2_p1p2, right_side_complex2_newp1p2, mod_real_newp1, mod_real_newp2, mod_complex_newp1, mod_complex_newp2)
        self.log_newp1 = mpmath.power(1 + mpmath.fdiv(pi, newp1), newp1 + eps)
        self.log_newp2 = mpmath.power(1 + mpmath.fdiv(pi, newp2), newp2 + eps)
        self.log_newp1p2 = mpmath.power(1 + mpmath.fdiv(pi, newp1p2), newp1p2 + eps)
        
        pi = mpmath.mpc(0, mpmath.pi())
        self.ls1_p1p2 = ls1(p1, p1p2, pi, eps)
        self.ls1_newp1p2 = ls1_newp1p2
        self.right_side1_p1p2 = right_side1_p1p2
        self.right_side1_newp1p2 = right_side1_newp1p2
        self.ls2_p1p2 = ls2_p1p2
        self.ls2_newp1p2 = ls2_newp1p2
        self.right_side2_p1p2 = right_side2_p1p2
        self.right_side2_newp1p2 = right_side2_newp1p2
        
        self.mod_real_newp1 = mod_real_newp1
        self.mod_real_newp2 = mod_real_newp2
        self.mod_complex_newp1 = mod_complex_newp1
        self.mod_complex_newp2 = mod_complex_newp2

class objekt:
    def __init__(self, newp1, newp2, newp1p2, ls_real1_p1p2, ls_real1_newp1p2, ls_complex1_p1p2, ls_complex1_newp1p2, right_side_p1p2, right_side_newp1p2, ls_real2_p1p2, ls_real2_newp1p2, right_side_real2_p1p2, right_side_real2_newp1p2, ls_complex2_p1p2, ls_complex2_newp1p2, right_side_complex2_p1p2, right_side_complex2_newp1p2, mod_real_newp1, mod_real_newp2, mod_complex_newp1, mod_complex_newp2
        #self.newp1 = newp1
        #self.log_newp1 = mpmath.power(1 + mpmath.fdiv(pi, newp1), newp1 + eps1)
        #self.newp2 = newp2
        #self.log_newp2 = mpmath.power(1 + mpmath.fdiv(pi, newp2), newp2 + eps1)
        #self.newp1p2 = newp1p2
        #self.log_newp1p2 = mpmath.power(1 + mpmath.fdiv(pi, newp1p2), newp1p2 + eps1)
        logp1_epsreal2 = mpmath.power(1 + mpmath.fdiv(pi, p1), p1 + eps_real2)
        logp1_epsreal3 = mpmath.power(1 + mpmath.fdiv(pi, p1), p1 + eps_real3)
        logp1_epscomplex3 = mpmath.power(1 + mpmath.fdiv(pi, p1), p1 + eps_complex3)
        logp1_epsreal4 = mpmath.power(1 + mpmath.fdiv(pi, p1), p1 + eps_real4)
        logp1_epscomplex4 = mpmath.power(1 + mpmath.fdiv(pi, p1), p1 + eps_complex4)
        
        self.ls1_real1_p1p2 = ls_real1_p1p2
        self.ls1_real1_newp1p2 = ls_real1_newp1p2
        self.ls1_complex1_p1p2 = ls_complex1_p1p2
        self.ls1_complex1_newp1p2 = ls_complex1_newp1p2
        self.right_side1_p1p2 = right_side_p1p2
        self.right_side1_newp1p2 = right_side_newp1p2
        self.ls2_real2_p1p2 = ls_real2_p1p2
        self.ls2_real2_newp1p2 = ls_real2_newp1p2
        self.right_side2_real2_p1p2 = right_side_real2_p1p2
        self.right_side2_real2_newp1p2 = right_side_real2_newp1p2
        self.ls2_complex2_p1p2 = ls_complex2_p1p2
        self.ls2_complex2_newp1p2 = ls_complex2_newp1p2
        self.right_side2_complex2_p1p2 = right_side_complex2_p1p2
        self.right_side2_complex2_newp1p2 = right_side_complex2_newp1p2
        
        self.mod_real_newp1 = mod_real_newp1
        self.mod_real_newp2 = mod_real_newp2
        self.mod_complex_newp1 = mod_complex_newp1
        self.mod_complex_newp2 = mod_complex_newp2

class arrayz:
    def __init__(self):
        self.ratio_half_real = []
        self.ratio_half_cmplx = []
        self.log_half_imag = []
        self.log_88_cmplx = []
        
        self.ratio_1_cmplx = []
        self.ratio_1_inverse = []
        
        self.ratio_10_newp1 = []
        self.ratio_10_newp2 = []
        
        self.get_e2_65 = []
        self.get_e2_130 = []
        
        self.get_e4_3 = []
        self.get_e4_pi = []
        self.get_e4_2pi = []
        
        self.iary = []




idigits = 13
mpmath.mp.prec = 256
hshout = {}
maxi = 10**4
t1 = time.time()
for i in range(1, maxi + 1):
    if i % 200 == 0:
        t2 = time.time()
        print(str(i) + "/"  + str(maxi) + " (" + str(round(100*i/maxi, 2)) + "%), " + str(round((t2 - t1)/60, 2)) + " minutes")
    bloop = True
    while bloop:
        try:
            newp1, newp2 = generate_primes(idigits)
            if len(str(int(newp1))) == idigits + 1 and len(str(int(newp2))) == idigits + 1:
                bloop = False
        except:
            pass
    
    iprec = int((181/512)*mpmath.mp.prec)    
    newp1p2 = mpmath.fmul(newp1, newp2)
    
    search_obj = lsrs(eps_real2, p1, p2, p1p2)
    search_obj.equations.append(equations())
    search_obj.equations[-1].ls1_p1p2 = ls1(newp1, p1p2, pi, eps_real1)
    search_obj.equations[-1].ls1_newp1p2 = ls1(newp1, newp1p2, pi, eps_real1)
    search_obj.equations[-1].right_side1_p1p2 = rs1(p1p2, pi)
    search_obj.equations[-1].right_side1_newp1p2 = rs1(newp1p2, pi)
    ls2_p1p2 = ls2(newp1, p1p2, iprec)
    ls2_newp1p2 = ls2(newp1, newp1p2, iprec)
    
    
    ls_complex1_p1p2 = ls1(newp1, p1p2, pi, eps_complex1)
    ls_complex1_newp1p2 = ls1(newp1, newp1p2, pi, eps_complex1)
    right_side_real2_p1p2 = rs2(p1p2, iprec)
    right_side_real2_newp1p2 = rs2(newp1p2, iprec)
    ls_complex2_p1p2 = ls2(mpmath.mpc(0, newp1*mpmath.pi()), mpmath.mpc(0, p1p2*mpmath.pi()), iprec)
    ls_complex2_newp1p2 = ls2(mpmath.mpc(0, newp1*mpmath.pi()), mpmath.mpc(0, newp1p2*mpmath.pi()), iprec)
    right_side_complex2_p1p2 = rs2(mpmath.mpc(0, p1p2*mpmath.pi()), iprec)
    right_side_complex2_newp1p2 = rs2(mpmath.mpc(0, newp1p2*mpmath.pi()), iprec)
    
    mod_real_newp1 = mymod(p1p2, newp1, iprec)
    mod_real_newp2 = mymod(p1p2, newp2, iprec)
    mod_complex_newp1 = my_mod_complex(p1p2, newp1, iprec)
    mod_complex_newp2 = my_mod_complex(p1p2, newp2, iprec)
    
    log_newp1 = mpmath.power(1 + mpmath.fdiv(pi, newp1), newp1 + eps1)
    hshout[mpmath.log(1/(1 + log_newp1.real), p1p2)] = objekt(newp1, newp2, newp1p2, ls_real1_p1p2, ls_real1_newp1p2, ls_complex1_p1p2, ls_complex1_newp1p2, right_side_p1p2, right_side_newp1p2, ls_real2_p1p2, ls_real2_newp1p2, right_side_real2_p1p2, right_side_real2_newp1p2, ls_complex2_p1p2, ls_complex2_newp1p2, right_side_complex2_p1p2, right_side_complex2_newp1p2, mod_real_newp1, mod_real_newp2, mod_complex_newp1, mod_complex_newp2)
true_obj = 
    
    


arr = arrayz()
sqrt_p1p2 = mpmath.sqrt(p1p2)
arykeys = sorted([x for x in hshout.keys()])
for ak in range(0, len(arykeys)):
    obj = hshout[arykeys[ak]]
    arr = fill_arrayz(arr, obj)

def fill_arrayz(arr, obj):
    arr.ratio_half_real.append( (1/(2 - obj.ls_p1p2/obj.right_side_p1p2)).real / p1p2 )
    arr.ratio_half_cmplx.append( (1/(2 - obj.ls_p1p2/obj.right_side_p1p2)) / mpmath.mpc(0.5, p1p2) )
    arr.log_half_imag.append( mpmath.log(1/((1/(2 - obj.ls_p1p2/obj.right_side_p1p2)) / p1p2).imag, p1p2) )
    arr.log_88_cmplx.append( 1 / mpmath.log(1/((1/(2 - obj.ls_p1p2/obj.right_side_p1p2)) / p1p2), mpmath.mpc(0.5, p1p2)) )
    
    arr.ratio_1_cmplx.append( mpmath.log(1/(2 - obj.ls_p1p2/obj.right_side_p1p2), mpmath.mpc(0.5, p1p2)) )
    arr.ratio_1_inverse.append( 1 / (mpmath.log(1/(2 - obj.ls_p1p2/obj.right_side_p1p2), mpmath.mpc(0.5, p1p2)) - 1) )
    
    arr.ratio_10_newp1.append( (1/(2 - obj.ls_p1p2/obj.right_side_p1p2)).imag / obj.newp1 )
    arr.ratio_10_newp2.append( obj.newp2 / (1/((1/(2 - obj.ls_p1p2/obj.right_side_p1p2)) / p1p2).imag) )
    
    arr.get_e2_65.append( get_e2((mpmath.mpc(1, -mpmath.fdiv(1, mpmath.e())) / mpmath.log(pi/(2 - obj.ls_p1p2/obj.right_side_p1p2), mpmath.mpc(-sqrt_p1p2, p1p2))).imag, 0) )
    arr.get_e2_130.append( get_e2((mpmath.mpc(1, -mpmath.fdiv(1, mpmath.e())) / mpmath.log(pi/(2 - obj.ls_p1p2/obj.right_side_p1p2), mpmath.mpc(-sqrt_p1p2, p1p2))).imag, 0.5) )
    
    arr.get_e4_3.append( get_e4((mpmath.mpc(1, -mpmath.fdiv(1, 3)) / mpmath.log(pi/(2 - obj.ls_p1p2/obj.right_side_p1p2), mpmath.mpc(-sqrt_p1p2, p1p2))).imag, 0.5) )
    arr.get_e4_pi.append( get_e4((mpmath.mpc(1, -mpmath.fdiv(1, mpmath.pi())) / mpmath.log(pi/(2 - obj.ls_p1p2/obj.right_side_p1p2), mpmath.mpc(-sqrt_p1p2, p1p2))).imag, 0.5) )
    arr.get_e4_2pi.append( get_e4((mpmath.mpc(1, -mpmath.fdiv(1, 2 * mpmath.pi())) / mpmath.log(pi/(2 - obj.ls_p1p2/obj.right_side_p1p2), mpmath.mpc(-sqrt_p1p2, p1p2))).imag, 0.5) )
    
    thisi = 1
    di = 1024
    while (mpmath.mpc(1, -mpmath.fdiv(1, thisi)) / mpmath.log(pi/(2 - ls_p1p2/right_side_p1p2), mpmath.mpc(-math.sqrt(p1p2), p1p2))).imag < 0:
        thisi += di
        if (mpmath.mpc(1, -mpmath.fdiv(1, thisi)) / mpmath.log(pi/(2 - ls_p1p2/right_side_p1p2), mpmath.mpc(-math.sqrt(p1p2), p1p2))).imag > 0:
            thisi -= di
            di /= 2
            if di < 1:
                break
    
    arr.iary.append( int(thisi) )
    return arr


obj_true = objekt(eps1, p1, p2, p1p2, ls_true, ls_true, right_side_true, right_side_true)
arr_true = arrayz()
arr = fill_arrayz(arr_true, obj_true)



plt.figure(figsize=(9, 6))
plt.plot(arykeys, arr.ratio_half_real)
plt.plot([log_p1, log_p1], [arr_true.ratio_half_real - sdv_y, arr_true.ratio_half_real + sdv_y])
plt.grid()
plt.show()

plt.figure(figsize=(9, 6))
plt.plot(arykeys, arr.ratio_10_newp1)
avg_y, sdv_y = sum(arr.ratio_10_newp1)/len(arr.ratio_10_newp1), stdev(arr.ratio_10_newp1)
plt.plot([log_p1, log_p1], [arr_true.ratio_10_newp1 - sdv_y, arr_true.ratio_10_newp1 + sdv_y])
plt.grid()
plt.show()

plt.figure(figsize=(9, 6))
plt.plot(arykeys, arr.get_e2_65)
avg_y, sdv_y = sum(arr.get_e2_65)/len(arr.get_e2_65), stdev(arr.get_e2_65)
plt.plot([log_p1, log_p1], [arr_true.get_e2_65 - sdv_y/2, arr_true.get_e2_65 + sdv_y/2])
plt.grid()
plt.show()

# ls_p1p2/right_side_p1p2
# mpc(real='1.999999999999999999999999999999083931090260600166685568113979957149519594657331', imag='2.707624980432499422153425579988651893990772662735856210364128788975576691480682e-43')
# 1/(2 - ls_p1p2/right_side_p1p2)
# mpc(real='1091620935246537946236712102925.707404772669086091638558506145321346745305958551', imag='322650412213797490.1357537859544510645039481002089542818357271075706475954856247')
# (1/(2 - ls_p1p2/right_side_p1p2)).real / p1p2
# mpf('2057.884186735237596107828258234115813515128491722363494951092056399352111337003')
# (1/(2 - ls_p1p2/right_side_p1p2)) / mpmath.mpc(0.5, p1p2)
# mpc(real='0.0000000006082488524172775359827644289683934708383604996332735855124896894627833760189188', imag='-2057.884186735237596107828258234115813514555167386701739650441172398933466039078')
# newp2 / (1/((1/(2 - ls_p1p2/right_side_p1p2)) / p1p2).imag)
# mpf('30193.27370434183497586379947532151052024547409406594267659263548187592974978851')
# mpmath.sqrt(p1p2) / (1/((1/(2 - ls_p1p2/right_side_p1p2)) / p1p2).imag)
# mpf('14008.98793492960522348032745815401139987975385790696617761718545435009319192663')
# mpmath.log(1/((1/(2 - ls_p1p2/right_side_p1p2)) / p1p2).imag, p1p2)
# mpf('0.3448471124009604845900386284380909967968079716844922373948631974032262704533439')
# 1/(0.5 - mpmath.mpf('0.3448471124009604845900386284380909967968079716844922373948631974032262704533439'))
# mpf('6.44525548621623313295892934115513318976799431026019888999466507219103394425267')
# mpmath.log(1/(2 - ls_p1p2/right_side_p1p2), mpmath.mpc(0.5, p1p2))
# mpc(real='1.123251777241964991246954191998967827152603538740203022607769522389553593304942', imag='-0.02867274428614532184966829757094260042784700689033348850021024323025202782643371')
# mpmath.log(1/(2 - ls_p1p2/right_side_p1p2), mpmath.mpc(math.sqrt(p1p2), p1p2))
# mpc(real='1.123251777241965031682486809242783021501869256871713419679632363115493076220426', imag='-0.0286727442861445303368643891126040944234185452412043445692576810451913272492019')
# mpmath.log(pi/(2 - ls_p1p2/right_side_p1p2), mpmath.mpc(-math.sqrt(p1p2), p1p2))
# mpc(real='1.142493514460697391506080325992870126869628455575503798973500470002365067469959', imag='-0.003637368028558930897509246361902520604163036161715206604920913400193288596937108')
# mpmath.mpc(1, -mpmath.fdiv(1, mpmath.power(p1p2, 0.139696))) / mpmath.log(pi/(2 - ls_p1p2/right_side_p1p2), mpmath.mpc(-math.sqrt(p1p2), p1p2))
# mpc(real='0.8752701347893661525695162059211347917201567451788745789745321586643424920277803', imag='0.002624865543927148386612513966413055405878275425674221830073885655755050518625491')
# mpmath.mpc(1, -mpmath.fdiv(1, mpmath.power(p1p2, 0.25))) / mpmath.log(pi/(2 - ls_p1p2/right_side_p1p2), mpmath.mpc(-math.sqrt(p1p2), p1p2))
# mpc(real='0.8752696204396273719989997974347313566506606254169120357177340266712944752843018', imag='0.002786422261891200559180868951394671543522829291393860624091021971195490311293069')
# mpmath.mpc(1, -mpmath.fdiv(1, 314)) / mpmath.log(pi/(2 - ls_p1p2/right_side_p1p2), mpmath.mpc(-math.sqrt(p1p2), p1p2))
# mpc(real='0.8752784943960584293694662372389308186427785849484401601201256390225000920172162', imag='-0.0000008782230989133249525750392499267304942307476855931368207904241304363232229839525')
# mpmath.mpc(1, -mpmath.fdiv(1, 2137)) / mpmath.log(pi/(2 - ls_p1p2/right_side_p1p2), mpmath.mpc(-math.sqrt(p1p2), p1p2))
# mpc(real='0.9816757136926404104276547687540916098911627311364764352260023881338971693315173', imag='-0.0000001863993817321570668849498748028387823105392326044535305223399561590079073686537')
# get_e2((mpmath.mpc(1, -mpmath.fdiv(1, mpmath.e())) / mpmath.log(pi/(2 - ls_p1p2/right_side_p1p2), mpmath.mpc(-math.sqrt(p1p2), p1p2))).imag, 0)
# mpf('13.58177977723780753266326790386717580284148047705370448314462987887869370850692')
# mpf('25.96382151171034396182600799793712200371465754961476068877125181999293710791953')
# get_e2((mpmath.mpc(1, -mpmath.fdiv(1, mpmath.e())) / mpmath.log(pi/(2 - ls_p1p2/right_side_p1p2), mpmath.mpc(-math.sqrt(p1p2), p1p2))).imag, 0.5)
# mpf('26.40798883882472553347617871461998470824643557221469333136507167114083637248309')
# mpf('51.17478056771817217054930136642011971606355145159880283586778200667520414173645')
# mpmath.power(1 - mpmath.fdiv(1, mpmath.mpf('26.40798883882472553347617871461998470824643557221469333136507167114083637248309')), mpmath.mpf('26.40798883882472553347617871461998470824643557221469333136507167114083637248309') + 0.5)
# mpf('0.353904879053207222784458530888188972510931800193506668514460520546791944757656')
# get_e4((mpmath.mpc(1, -mpmath.fdiv(1, 3)) / mpmath.log(pi/(2 - ls_p1p2/right_side_p1p2), mpmath.mpc(-math.sqrt(p1p2), p1p2))).imag, 0.5)
# mpf('0.42773436499999994975240724670584313571453094482421875')
# get_e4((mpmath.mpc(1, -mpmath.fdiv(1, mpmath.e())) / mpmath.log(pi/(2 - ls_p1p2/right_side_p1p2), mpmath.mpc(-math.sqrt(p1p2), p1p2))).imag, 0)
# 
# get_e4((mpmath.mpc(1, -mpmath.fdiv(1, mpmath.pi())) / mpmath.log(pi/(2 - ls_p1p2/right_side_p1p2), mpmath.mpc(-math.sqrt(p1p2), p1p2))).imag, 0.5)
# mpf('0.31542967749999994975240724670584313571453094482421875')
# fractions.Fraction(0.3154296775)
# 5682275912202383, 18014398509481984
# factors(5682275912202383)
# (13 * 17 * 149 * 727 * 237361001) / 2**54
# fractions.Fraction(0.31542967749999995)
# (2841137956101191, 9007199254740992
# factors(2841137956101191)
# (71 * 113 * 354124137617) / 2**53


i = 1
di = 1024
while (mpmath.mpc(1, -mpmath.fdiv(1, i)) / mpmath.log(pi/(2 - ls_p1p2/right_side_p1p2), mpmath.mpc(-math.sqrt(p1p2), p1p2))).imag < 0:
    i += di
    if (mpmath.mpc(1, -mpmath.fdiv(1, i)) / mpmath.log(pi/(2 - ls_p1p2/right_side_p1p2), mpmath.mpc(-math.sqrt(p1p2), p1p2))).imag > 0:
        i -= di
        di /= 2
        if di < 1:
            break

i = 5000
while (mpmath.mpc(1, -mpmath.fdiv(1, i)) / mpmath.log(pi/(2 - ls_true/right_side_true), mpmath.mpc(-math.sqrt(p1p2), p1p2))).imag < 0:
    i += 1
    if (mpmath.mpc(1, -mpmath.fdiv(1, i)) / mpmath.log(pi/(2 - ls_true/right_side_true), mpmath.mpc(-math.sqrt(p1p2), p1p2))).imag > 0:
        i -= 1
        break

def generate_primes(idigits, log_min_p, log_max_p):
    import math
    import mpmath
    import primesieve
    import random
    bloop = True
    it = primesieve.Iterator()
    # 10**13 = 10,000,000,000,000
    min_p = int("1" + ("1"*idigits))
    max_p = int("7" + ("9"*idigits))
    if log_min_p <= 1 or log_min_p < math.log(min_p, 2):
        log_min_p = math.log(min_p, 2)
    if log_max_p <= 1 or log_max_p > math.log(max_p, 2):
        log_max_p = math.log(max_p, 2)
    while bloop:
        try:
            div = lambda pow: (1.5 - 0.412533 * random.random())**pow
            
            # log(10**13, 2)        = 43.185
            # log(28284271247461.9) = 44.685 
            # log(4.5 * 10**13, 2)  = 45.355
            # log(8.0 * 10**13, 2)  = 46.185
            
            p1 = 2**(log_min_p - 0.1699 + 2.3399*random.random())
            # int(21.488 + rand.rand() * (43.185 / 1.8888 - log(2698450.8888, 2)))
            # int(21.488 + rand.rand() * (22.8637 - 21.3637))
            # int(21.488 + rand.rand() * 1.5)
            maxi = int(math.log(2941254, 2) + random.random() * (log_min_p/1.8888 - 21.522))
            for i in [maxi/div(3), maxi/div(2), maxi/div(1), maxi]:
                p1 += 2**(i + random.random() * i)
            it.skipto(int(p1))
            p1 = it.next_prime()
            
            p2 = 2**(log_max_p + 0.0555 - 1.5554*random.random())
            # int(23.688 + rand.rand() * (46.185 / 1.9292 - log(5689912.8277, 2)))
            # int(23.688 + rand.rand() * (23.940 - 22.440))
            # int(23.688 + rand.rand() * 1.5)
            maxi = int(math.log(13514455, 2) + random.random() * (log_max_p/1.9292 - 22.44))
            for i in [maxi/div(3), maxi/div(2), maxi/div(1), maxi]:
                p2 -= 2**(i + random.random() * i)
            it.skipto(int(p2)) 
            p2 = it.next_prime()
            
            log_p1 = math.log(p1, 2)
            log_p2 = math.log(p2, 2)
            if (log_p1 + log_p2)/2 < log_min_p:
                if p1 > p2:
                    it.skipto(int(2**(log_p1 + random.random() * maxi)))
                    p2 = it.next_prime()
                else:
                    it.skipto(int(2**(log_p2 - random.random() * maxi)))
                    p1 = it.next_prime()
            elif (log_p1 + log_p2)/2 > log_max_p:
                if p1 < p2:
                    it.skipto(int(2**(log_p1 - random.random() * maxi)))
                    p2 = it.next_prime()
                else:
                    it.skipto(int(2**(log_p2 + random.random() * maxi)))
                    p1 = it.next_prime()
            
            if log_p1 > log_min_p and log_p1 < log_max_p and log_p2 > log_min_p and log_p2 < log_max_p:
                bloop = False
        except OverflowError as oe:
            pass
    
    return min(p1, p2), max(p1, p2)


myepsilon1 = lambda n: (1 - (n + 1/2) * mpmath.log(1 + mpmath.fdiv(1, n))) / mpmath.log(1 + mpmath.fdiv(1, n))
mpmath.mp.prec = 1024
myepsilon(mpmath.power(2, mpmath.mp.prec - 1))

# (1/n - log(1 + 1/n)) / ((1/n) * log(1 + 1/n))
myepsilon2 = lambda n: mpmath.fdiv(mpmath.fsub(mpmath.fdiv(1, n), mpmath.log(1 + mpmath.fdiv(1, n))), mpmath.fmul(mpmath.fdiv(1, n), mpmath.log(mpmath.fadd(1, mpmath.fdiv(1, n)))))

# (pi - n * log(1 + pi/n)) / log(1 + pi/n)
myepsilon3 = lambda n, pi: mpmath.fdiv(mpmath.fsub(pi, n * mpmath.log(1 + mpmath.fdiv(pi, n))), mpmath.log(1 + mpmath.fdiv(pi, n)))

myepsilon(mpmath.power(2, mpmath.mp.prec - 1), mpmath.mpc(0, mpmath.pi()))
mpc(real='-3.68054362527387927561157333355611856398156129300990971971352507122843018606738411482232558236822226346033963359437860056156755054191903634596342731137677201e-154', imag='1.57079632679489661923132169163975144209858469968755291048747229615390820314310449931401741267105853399107404325664115332354692230477529111586267970406424057')
myepsilon(mpmath.power(2, mpmath.mp.prec - 1), mpmath.mpc(0, mpmath.pi())).imag / mpmath.pi()
mpf('0.5')

mpmath.mp.prec = 8192
func(mpmath.power(2, mpmath.mp.prec - 1) + mpmath.power(2, mpmath.mp.prec - 2))

1 + 1/2 + 1/3 + 1/4 = (4! + 4*3 + 4*2 + 3*2)/(4!)

(mpmath.factorial(4) + 4*3 + 4*2 + mpmath.factorial(3))/mpmath.factorial(4)

(mpmath.factorial(6) + 6*5*4*3 + 6*5*4*2 + 6*5*3*2 + 6*4*3*2 + mpmath.factorial(5))/mpmath.factorial(6)


p1 = []
p2 = []
p1p2 = []
p1.append(mpmath.mpf('35734127902841'))
p2.append(mpmath.mpf('70366596694033'))
p1p2.append(mpmath.fmul(p1[0], p2[0]))

it = primesieve.Iterator()
for i in range(0, 63):
    rand1 = 44 + random.random() * (53 - 44)
    rand2 = 40 + random.random() * (rand1 - 1 - 40)
    rand3 = 30 + random.random() * (rand2 - 1 - 30)
    rand4 = 10 + random.random() * (rand3 - 1 - 10)
    it.skipto(int(2**rand1 + 2**rand2 + 2**rand3 + 2**rand4))
    p1.append(it.next_prime())
    rand1 = 46 + random.random() * (53 - 46)
    rand2 = 40 + random.random() * (rand1 - 1 - 40)
    rand3 = 30 + random.random() * (rand2 - 1 - 30)
    rand4 = 10 + random.random() * (rand3 - 1 - 10)
    it.skipto(int(2**rand1 - 2**rand2 - 2**rand3 - 2*rand4))
    p2.append(it.next_prime())
    p1p2.append(mpmath.fmul(p1[-1], p2[-1]))


m*n + 1/2 = (2*m*n + 1)/2


(1 + 1/m)^((2*m + 1)/2) * (1 + 1/n)^((2*n + 1)/2) = e^2 = (1 + 1/(m*n))^((2*m*n + 1)/2)^2

((2*m + 1)/2) * log((m + 1)/m) + ((2*n + 1)/2) * log((n + 1)/n) = 2 = 2 * ((2*m*n + 1)/2) * log((m*n + 1)/(m*n))

(2*m + 1) * log((m + 1)/m) + (2*n + 1) * log((n + 1)/n) = 2 = 2 * (2*m*n + 1) * log((m*n + 1)/(m*n))

((2*m + 1)/(2*m*n + 1)) * (log(m + 1) - log(m)) + ((2*n + 1)/(2*m*n + 1)) * (log(n + 1) - log(n)) = 2 = 2 * (log(m*n + 1) - log(m) - log(n))

((2 + 1/m)/(2 + 1/p1p2)) * (log(m + 1) - 0log(m)) + ((2 + 1/n)/(2 + 1/p1p2)) * (log(n + 1) - log(n)) = 2 = 2 * (log(p1p2 + 1) - log(p1p2))

((2 + 1/m)/(2 + 1/p1p2)) * (log(m + 1) - log(m)) + ((2 + m/p1p2)/(2 + 1/p1p2)) * (log(p1p2/m + 1) - log(p1p2/m)) = 2 = 2 * (log(p1p2 + 1) - log(p1p2))

((2 + 1/m)/(2 + 1/p1p2)) * (log(m + 1) - log(m)) + ((2 + m/p1p2)/(2 + 1/p1p2)) * (log(p1p2 + m) - log(m) - log(p1p2) + log(m)) = 2 = 2 * (log(p1p2 + 1) - log(p1p2))

((2 + 1/m)/(2 + 1/p1p2)) * (log(m + 1) - log(m)) + ((2 + m/p1p2)/(2 + 1/p1p2)) * (log(p1p2 + m) - log(p1p2)) = 2 = 2 * (log(p1p2 + 1) - log(p1p2))

(2 + 1/m) * (log(m + 1) - log(m)) + (2 + m/p1p2) * (log(p1p2 + m) - log(p1p2)) = 2 = 2 * (2 + 1/p1p2) * (log(p1p2 + 1) - log(p1p2))

(2 + 1/m) * (log(m + 1) - log(m)) + (2 + m/p1p2) * (log(p1p2 + m)) = 2 = (4 + 2/p1p2) * (log(p1p2 + 1) - log(p1p2)) + (2 + m/p1p2) * log(p1p2)

(2 + 1/m) * (log(m + 1) - log(m)) + (2 + m/p1p2) * (log(p1p2 + m)) = 2 = (4 + 2/p1p2) * log(p1p2 + 1) - (2/p1p2 + m/p1p2 - 2) * log(p1p2)

(1 + 1/(2*m)) * (log(m + 1) - log(m)) + (1 + m/(2*p1p2)) * (log(p1p2 + m)) - (m/(2*p1p2)) * log(p1p2) = 1 = (2 + 1/p1p2) * log(p1p2 + 1) - (1/p1p2 - 1) * log(p1p2)


m*n = p1p2

log(m) + log(n) = log(p1p2)

n = p1p2/m

1/n = m/p1p2

((2 + 1/p1)/(2 + 1/p1p2)) * (mpmath.log(p1 + 1) - mpmath.log(p1)) + ((2 + 1/p2)/(2 + 1/p1p2)) * (mpmath.log(p2 + 1) - mpmath.log(p2))
mpf('0.00000000000004219574077145204540048978470421663804980911599806082367052854853450650959558638')
1 / mpf('23699074402233.50931393949880237002312323009821621190325021209837935619393248603')

2 * (mpmath.log(p1p2 + 1) - mpmath.log(p1p2))
mpf('7.953902469897974731934081089725653089741932330240661728488235180105592471485412e-28')
1 / mpf('1257244483176101945014223876.750000000000000000000253556957863914488796209423688')

mpmath.mpf('1257244483176101945014223876.75') / mpmath.mpf('23699074402233.50')
mpf('53050362298437.02084924737780827448609829331289408762249596782966153546707507556')

mpmath.sqrt(p1p2)
mpf('50144680339515.61536296168085736570931167898643947839816162358755528970998620334')

(1 + 1/(2*p1[0])) * (mpmath.log(p1[0] + 1) - mpmath.log(p1[0])) + (1 + p1[0]/(2*p1p2[0])) * (mpmath.log(p1p2[0] + p1[0])) - (p1[0]/(2*p1p2[0])) * mpmath.log(p1p2[0])
mpf('63.091867099450862556070804058693227149658')
mpf('69.779692434092661630172171411143176906082')

(1 + 1/(2*p2)) * (mpmath.log(p2 + 1) - mpmath.log(p2)) + (1 + p2/(2*p1p2)) * (mpmath.log(p1p2 + p2)) - (p2/(2*p1p2)) * mpmath.log(p1p2)
mpf('63.09186709945086255607080405869322714947')

(2 + 1/p1p2[0]) * mpmath.log(p1p2[0] + 1) - (1/p1p2[0]- 1) * mpmath.log(p1p2[0])
mpf('189.27560129835246108099009782073887022682')
mpf('209.33907730227790088403808197165517161749')

mpmath.mpf('189.27560129835246108099009782073887022682') / mpmath.mpf('63.091867099450862556070804058693227149658')
mpf('2.9999999999999979936047523396699799199036')

mpmath.mpf('209.33907730227790088403808197165517161749') / mpmath.mpf('69.779692434092661630172171411143176906082')
mpf('2.9999999999999987961185338899795595519661')


# 
# 
# https://en.wikipedia.org/wiki/RSA_numbers#RSA-260
# 
# 

# 
# rsa-260 is 861.5 bits
# 

mpmath.mp.prec = 862 + 64 # rsa-260
mpmath.mp.prec = int(2 * 2**mpmath.ceil(mpmath.log(mpmath.log(rsa[260], 2), 2))) # 2048
mpmath.mp.prec = 894 + 64 # rsa-270
mpmath.mp.prec = 1024
mpmath.mp.prec = 2048
mpmath.mp.prec = 8192
rsa = {}
rsa[260]  = mpmath.mpf('22112825529529666435281085255026230927612089502470015394413748319128822941402001986512729726569746599085900330031400051170742204560859276357953757185954298838958709229238491006703034124620545784566413664540684214361293017694020846391065875914794251435144458199')
rsa[270]  = mpmath.mpf('233108530344407544527637656910680524145619812480305449042948611968495918245135782867888369318577116418213919268572658314913060672626911354027609793166341626693946596196427744273886601876896313468704059066746903123910748277606548649151920812699309766587514735456594993207')
rsa[896]  = mpmath.mpf('412023436986659543855531365332575948179811699844327982845455626433876445565248426198098870423161841879261420247188869492560931776375033421130982397485150944909106910269861031862704114880866970564902903653658867433731720813104105190864254793282601391257624033946373269391')
rsa[280]  = mpmath.mpf('1790707753365795418841729699379193276395981524363782327873718589639655966058578374254964039644910359346857311359948708984278578450069871685344678652553655035251602806563637363071753327728754995053415389279785107516999221971781597724733184279534477239566789173532366357270583106789')
rsa[290]  = mpmath.mpf('30502351862940031577691995198949664002982179597487683486715266186733160876943419156362946151249328917515864630224371171221716993844781534383325603218163254920110064990807393285889718524383600251199650576597076902947432221039432760575157628357292075495937664206199565578681309135044121854119')
rsa[300]  = mpmath.mpf('276931556780344213902868906164723309223760836398395325400503672280937582471494739461900602187562551243171865731050750745462388288171212746300721613469564396741836389979086904304472476001839015983033451909174663464663867829125664459895575157178816900228792711267471958357574416714366499722090015674047')
rsa[309]  = mpmath.mpf('133294399882575758380143779458803658621711224322668460285458826191727627667054255404674269333491950155273493343140718228407463573528003686665212740575911870128339157499072351179666739658503429931021985160714113146720277365006623692721807916355914275519065334791400296725853788916042959771420436564784273910949')
rsa[1024] = mpmath.mpf('135066410865995223349603216278805969938881475605667027524485143851526510604859533833940287150571909441798207282164471551373680419703964191743046496589274256239341020864383202110372958725762358509643110564073501508187510676594629205563685529475213500852879416377328533906109750544334999811150056977236890927563')
rsa[310]  = mpmath.mpf('1848210397825850670380148517702559371400899745254512521925707445580334710601412527675708297932857843901388104766898429433126419139462696524583464983724651631481888473364151368736236317783587518465017087145416734026424615690611620116380982484120857688483676576094865930188367141388795454378671343386258291687641')
rsa[320]  = mpmath.mpf('21368106964100717960120874145003772958637679383727933523150686203631965523578837094085435000951700943373838321997220564166302488321590128061531285010636857163897899811712284013921068534616772684717323224436400485097837112174432182703436548357540610175031371364893034379963672249152120447044722997996160892591129924218437')
rsa[330]  = mpmath.mpf('121870863310605869313817398014332524915771068622605522040866660001748138323813524568024259035558807228052611110790898823037176326388561409009333778630890634828167900405006112727432172179976427017137792606951424995281839383708354636468483926114931976844939654102090966520978986231260960498370992377930421701862444655244698696759267')
rsa[340]  = mpmath.mpf('2690987062294695111996484658008361875931308730357496490239672429933215694995275858877122326330883664971511275673199794677960841323240693443353204889858591766765807522315638843948076220761775866259739752361275228111366001104150630004691128152106812042872285697735145105026966830649540003659922618399694276990464815739966698956947129133275233')
rsa[350]  = mpmath.mpf('26507199951735394734498120973736811015297864642115831624674545482293445855043495841191504413349124560193160478146528433707807716865391982823061751419151606849655575049676468644737917071142487312863146816801954812702917123189212728868259282632393834443989482096498000219878377420094983472636679089765013603382322972552204068806061829535529820731640151')
rsa[360]  = mpmath.mpf('218682020234317263146640637228579265464915856482838406521712186637422774544877649638896808173342116436377521579949695169845394824866781413047516721975240052350576247238785129338002757406892629970748212734663781952170745916609168935837235996278783280225742175701130252626518426356562342682345652253987471761591019113926725623095606566457918240614767013806590649')
rsa[370]  = mpmath.mpf('1888287707234383972842703127997127272470910519387718062380985523004987076701721281993726195254903980001896112258671262466144228850274568145436317048469073794495250347974943216943521462713202965796237266310948224934556725414915442700993152879235272779266578292207161032746297546080025793864030543617862620878802244305286292772467355603044265985905970622730682658082529621')
rsa[380]  = mpmath.mpf('30135004431202116003565860241012769924921679977958392035283632366105785657918270750937407901898070219843622821090980641477056850056514799336625349678549218794180711634478735831265177285887805862071748980072533360656419736316535822377792634235019526468475796787118257207337327341698664061454252865816657556977260763553328252421574633011335112031733393397168350585519524478541747311')
rsa[390]  = mpmath.mpf('268040194118238845450103707934665606536694174908285267872982242439770917825046230024728489676042825623316763136454136724676849961188128997344512282129891630084759485063423604911639099585186833094019957687550377834977803400653628695534490436743728187025341405841406315236881249848600505622302828534189804007954474358650330462487514752974123986970880843210371763922883127855444022091083492089')
rsa[400]  = mpmath.mpf('2014096878945207511726700485783442547915321782072704356103039129009966793396141985086509455102260403208695558793091390340438867513766123418942845301603261911930567685648626153212566300102683464717478365971313989431406854640516317519403149294308737302321684840956395183222117468443578509847947119995373645360710979599471328761075043464682551112058642299370598078702810603300890715874500584758146849481')
rsa[410]  = mpmath.mpf('19653601479938761414239452741787457079262692944398807468279711209925174217701079138139324539033381077755540830342989643633394137538983355218902490897764441296847433275460853182355059915490590169155909870689251647778520385568812706350693720915645943335281565012939241331867051414851378568457417661501594376063244163040088180887087028771717321932252992567756075264441680858665410918431223215368025334985424358839')
rsa[420]  = mpmath.mpf('209136630247651073165255642316333073700965362660524505479852295994129273025818983735700761887526097496489535254849254663948005091692193449062731454136342427186266197097846022969248579454916155633686388106962365337549155747268356466658384680996435419155013602317010591744105651749369012554532024258150373034059528878269258139126839427564311148202923131937053527161657901326732705143817744164107601735413785886836578207979')
rsa[430]  = mpmath.mpf('3534635645620271361541209209607897224734887106182307093292005188843884213420695035531516325888970426873310130582000012467805106432116010499008974138677724241907444538851271730464985654882214412422106879451855659755824580313513382070785777831859308900851761495284515874808406228585310317964648830289141496328996622685469256041007506727884038380871660866837794704723632316890465023570092246473915442026549955865931709542468648109541')
rsa[440]  = mpmath.mpf('26014282119556025900707884873713205505398108045952352894235085896633912708374310252674800592426746319007978890065337573160541942868114065643853327229484502994233222617112392660635752325773689366745234119224790516838789368452481803077294973049597108473379738051456732631199164835297036074054327529666307812234597766390750441445314408171802070904072739275930410299359006059619305590701939627725296116299946059898442103959412221518213407370491')
rsa[450]  = mpmath.mpf('198463423714283662349723072186113142778946286925886208987853800987159869256900787915916842423672625297046526736867114939854460034942655873583931553781158032447061155145160770580926824366573211993981662614635734812647448360573856313224749171552699727811551490561895325344395743588150359341484236709604618276434347948498243152515106628556992696242074513657383842554978233909962839183287667419172988072221996532403300258906083211160744508191024837057033')
rsa[460]  = mpmath.mpf('1786856020404004433262103789212844585886400086993882955081051578507634807524146407881981216968139444577147633460848868774625431829282860339614956262303635645546753552581286559710032014178315212224644686666427660441466419337888368932452217321354860484353296131403821175862890998598653858373835628654351880480636223164308238684873105235011577671552114945370886842810830301698313339004163655154668570049008475016448080768256389182668489641536264864604484300734909')
rsa[1536] = mpmath.mpf('1847699703211741474306835620200164403018549338663410171471785774910651696711161249859337684305435744585616061544571794052229717732524660960646946071249623720442022269756756687378427562389508764678440933285157496578843415088475528298186726451339863364931908084671990431874381283363502795470282653297802934916155811881049844908319545009848393775227257052578591944993870073695755688436933812779613089230392569695253261620823676490316036551371447913932347169566988069')
rsa[470]  = mpmath.mpf('17051473784681185209081599238887028025183255852149159683588918369809675398036897711442383602526314519192366612270595815510311970886116763177669964411814095748660238871306469830461919135901638237924444074122866545522954536883748558744552128950445218096208188788876324395049362376806579941053305386217595984047709603954312447692725276887594590658792939924609261264788572032212334726855302571883565912645432522077138010357669555555071044090857089539320564963576770285413369')
rsa[480]  = mpmath.mpf('302657075295090869739730250315591803589112283576939858395529632634305976144571441696598170401251852159138533455982172343712313383247732107268535247763784105186549246199888070331088462855743520880671299302895546822695492968577380706795842802200829411198422297326020823369315258921162990168697393348736236081296604185145690639952829781767901497605213955485328141965346769742597479306858645849268328985687423881853632604706175564461719396117318298679820785491875674946700413680932103')
rsa[490]  = mpmath.mpf('1860239127076846517198369354026076875269515930592839150201028353837031025971373852216474332794920643399906822553185507255460678213880084116286603739332465781718042017172224499540303152935478714013629615010650024865526886634157459758925793594165651020789220067311416926076949777767604906107061937873540601594274731617619377537419071307115490065850326946551649682856865437718319058695376406980449326388934924579147508558589808491904883853150769224537555274811376719096144119390052199027715691')
rsa[500]  = mpmath.mpf('18971941337486266563305347433172025272371835919534283031845811230624504588707687605943212347625766427494554764419515427586743205659317254669946604982419730160103812521528540068803151640161162396312837062979326593940508107758169447860417214110246410380402787011098086642148000255604546876251377453934182215494821277335671735153472656328448001134940926442438440198910908603252678814785060113207728717281994244511323201949222955423789860663107489107472242561739680319169243814676235712934292299974411361')
rsa[617]  = mpmath.mpf('22701801293785014193580405120204586741061235962766583907094021879215171483119139894870133091111044901683400949483846818299518041763507948922590774925466088171879259465921026597046700449819899096862039460017743094473811056991294128542891880855362707407670722593737772666973440977361243336397308051763091506836310795312607239520365290032105848839507981452307299417185715796297454995023505316040919859193718023307414880446217922800831766040938656344571034778553457121080530736394535923932651866030515041060966437313323672831539323500067937107541955437362433248361242525945868802353916766181532375855504886901432221349733')
rsa[2048] = mpmath.mpf('25195908475657893494027183240048398571429282126204032027777137836043662020707595556264018525880784406918290641249515082189298559149176184502808489120072844992687392807287776735971418347270261896375014971824691165077613379859095700097330459748808428401797429100642458691817195118746121515172654632282216869987549182422433637259085141865462043576798423387184774447920739934236584823824281198163815010674810451660377306056201619676256133844143603833904414952634432190114657544454178424020924616515723350778707749817125772467962926386356373289912154831438167899885040445364023527381951378636564391212010397122822120720357')


one = (1 + 1/(2*p1[0])) * (mpmath.log(p1[0] + 1) - mpmath.log(p1[0])) + (1 + p1[0]/(2*p1p2[0])) * (mpmath.log(p1p2[0] + p1[0])) - (p1[0]/(2*p1p2[0])) * mpmath.log(p1p2[0])
two = (2 + 1/p1p2[0]) * mpmath.log(p1p2[0] + 1) - (1/p1p2[0] - 1) * mpmath.log(p1p2[0])
twoone = mpmath.fdiv(two, one)
frac = fractions.Fraction(float(3 - twoone))
stars = " ***" if round(twoone, 14) in [mpmath.mpf('2.99999999999999'), mpmath.mpf('3.0')] else ""
sfrac = " * ".join([str(x) for x in factors(frac.numerator)]) + "/" + ("2^" + str(int(math.log(frac.denominator, 2))) if mpmath.log(frac.denominator, 2) % 1 == 0 else str(frac.denominator))
print("one " + str(one) + ", twoone " + str(twoone) + "  " + sfrac)
print("")
for i in range(0, len(p1p2) - 1):
    if type(p1[i]) is not mpmath.mpf:
        p1[i] = mpmath.mpf(p1[i])
    if type(p2[i]) is not mpmath.mpf:
        p2[i] = mpmath.mpf(p2[i])
    if type(p1p2[i]) is not mpmath.mpf:
        p1p2[i] = mpmath.mpf(p1p2[i])
    #one = (1 + mpmath.fdiv(1, 2*p1[i])) * (mpmath.log(p1[i] + 1) - mpmath.log(p1[i])) + mpmath.fdiv(1 + p1[i], 2*p1p2[i]) * (mpmath.log(p1p2[i] + p1[i])) - mpmath.fdiv(p1[i], 2*p1p2[i]) * mpmath.log(p1p2[i])
    #two = (2 + mpmath.fdiv(1, p1p2[i])) * mpmath.log(p1p2[i] + 1) - (mpmath.fdiv(1, p1p2[i]) - 1) * mpmath.log(p1p2[i])
    lognewp1 = mpmath.log(abs(p1[i - 1]), 10)
    newp1 = mpmath.floor(p1[i - 1] + 10**(6.28 + random.random() * (lognewp1 - 6.28)) + 10**(3.14 + random.random() * (lognewp1 - 3.14)))
    newp2 = 1
    if newp1 > mpmath.sqrt(p1p2[i]):
        newp2 = newp1
        newp1 = round(p1p2[i] / newp2, 0)
    else:
        newp2 = round(p1p2[i] / newp1, 0)
    newp1p2 = mpmath.fmul(newp1, newp2)
    one = (1 + 1/(2*newp1)) * (mpmath.log(newp1 + 1) - mpmath.log(newp1)) + (1 + newp1/(2*newp1p2)) * (mpmath.log(newp1p2 + newp1)) - (newp1/(2*newp1p2)) * mpmath.log(newp1p2)
    two = (1 + 1/(2*newp2)) * (mpmath.log(newp2 + 1) - mpmath.log(newp2)) + (1 + newp2/(2*newp1p2)) * (mpmath.log(newp1p2 + newp2)) - (newp2/(2*newp1p2)) * mpmath.log(newp1p2)
    #one = (1 + 1/(2*p1[i - 1])) * (mpmath.log(p1[i - 1] + 1) - mpmath.log(p1[i - 1])) + (1 + p1[i - 1]/(2*p1p2[i])) * (mpmath.log(p1p2[i] + p1[i - 1])) - (p1[i - 1]/(2*p1p2[i])) * mpmath.log(p1p2[i])
    #one = (1 + 1/(2*p1[i])) * (mpmath.log(p1[i] + 1) - mpmath.log(p1[i])) + (1 + p1[i]/(2*p1p2[i])) * (mpmath.log(p1p2[i] + p1[i])) - (p1[i]/(2*p1p2[i])) * mpmath.log(p1p2[i])
    twoone = (2 + 1/p1p2[i]) * mpmath.log(p1p2[i] + 1) - (1/p1p2[i] - 1) * mpmath.log(p1p2[i])
    twoonedivone = mpmath.fdiv(twoone, one)
    if type(twoonedivone) is mpmath.mpc:
        twoonedivone = twoonedivone.real
    frac1 = fractions.Fraction(float(one - mpmath.floor(one) if one - mpmath.floor(one) < 0.5 else mpmath.ceil(one) - one))
    sfrac1 = (" * ".join([str(x) for x in factors(frac1.numerator)])) + " / " + ("2^" + str(int(math.log(frac1.denominator, 2))) if mpmath.log(frac1.denominator, 2) % 1 == 0 else str(frac1.denominator))
    frac2 = fractions.Fraction(float(two - mpmath.floor(two) if two - mpmath.floor(two) < 0.5 else mpmath.ceil(two) - two))
    sfrac2 = (" * ".join([str(x) for x in factors(frac2.numerator)])) + " / " + ("2^" + str(int(math.log(frac2.denominator, 2))) if mpmath.log(frac2.denominator, 2) % 1 == 0 else str(frac2.denominator))
    frac21 = fractions.Fraction(float(twoone - mpmath.floor(twoone) if twoone - mpmath.floor(twoone) < 0.5 else mpmath.ceil(twoone) - twoone))
    sfrac21 = (" * ".join([str(x) for x in factors(frac21.numerator)])) + " / " + ("2^" + str(int(math.log(frac21.denominator, 2))) if mpmath.log(frac21.denominator, 2) % 1 == 0 else str(frac21.denominator))
    frac21div1 = fractions.Fraction(float(3 - twoonedivone))
    sfrac21div1 = (" * ".join([str(x) for x in factors(frac21div1.numerator)])) + " / " + ("2^" + str(int(math.log(frac21div1.denominator, 2))) if mpmath.log(frac21div1.denominator, 2) % 1 == 0 else str(frac21div1.denominator))
    stars = " ***" if round(twoone, 14) in [mpmath.mpf('2.99999999999999'), mpmath.mpf('3.0')] else ""
    print("one " + str(one) + ", " + sfrac1)
    print("two " + str(two) + ", " + sfrac2)
    print("twoone " + str(twoone) + ", " + sfrac21)
    print("twoonedivone " + str(twoonedivone) + ",  " + sfrac21div1)
    print("")


p1p2 = [rsa[260]]
p1p2 = [rsa[270]]
p1 = [mpmath.mpf(10396522617497)]
p2 = [mpmath.mpf(51022627941473)]
p1p2 = [mpmath.fmul(p1[-1], p2[-1])]
p1 = [mpmath.mpf('35734127902841')]
p2 = [mpmath.mpf('70366596694033')]
p1p2 = [mpmath.fmul(p1[-1], p2[-1])]

p1 = [mpmath.sqrt(p1p2[-1])]
p2 = [mpmath.sqrt(p1p2[-1])]
aryprimes = primesieve.primes(int(5.5 * 10**5 + 4.5*10**4 + 3.25*10**7))
aryprimes = primesieve.primes(int(5.8 * 10**5.2 + 4.9*10**4.5 + 3.25*10**7))

bits1, bits2 = get_bits(mpmath.mp.prec, aryprimes)

def get_bits(prec, aryprimes):
    bits1 = 0
    bits2 = 0
    while bits1 == 0:
        ifind = int(1.25 * prec)
        idx = 0
        while idx <= 0:
            try:
                idx = aryprimes.index(ifind)
                if idx > 0:
                    mingap = aryprimes[idx + 1] - aryprimes[idx]
                    for i in range(idx + 1, idx + 24 + 1):
                        if aryprimes[i + 1] - aryprimes[i] < mingap:
                            idx = i
                            mingap = aryprimes[i + 1] - aryprimes[i]
                    bits1 = aryprimes[idx + 1]
                    bits2 = aryprimes[idx]
                else:
                    ifind += 1
            except ValueError as ve:
                ifind += 1
                pass
    return bits1, bits2


it = primesieve.Iterator()
for i in range(0, 128):
    it.skipto(int(2**(32 + random.random() * 20)))
    p = it.next_prime()
    if not is_prime_miller_rabin(p, 40):
        print(str(p) + " is not prime")


def is_prime_miller_rabin(n, k):
    # Implementation uses the Miller-Rabin Primality Test
    # The optimal number of rounds for this test is 40
    # See http://stackoverflow.com/questions/6325576/how-many-iterations-of-rabin-miller-should-i-use-for-cryptographic-safe-primes
    # for justification
    if mpmath.fmod(n, 2) == 0:
        return False
    
    r, s = 0, n - 1
    while mpmath.fmod(s, 2) == 0:
        r += 1
        s = mpmath.floor(mpmath.fdiv(s, 2))
    
    _i = 0
    # for _ in xrange(k):
    while _i < k:
        _i += 1
        # a = random.randrange(2, n - 1)
        a = mpmath.floor(2 + mpmath.fmul(random.random(), n - 1))
        # x = pow(a, s, n)
        x = mpmath.fmod(mpmath.power(a, s), n)
        if x == 1 or x == n - 1:
            continue
        _j = 0
        # for _ in xrange(r - 1):
        while _j < r - 1:
            _j += 1
            # x = pow(x, 2, n)
            x = mpmath.fmod(mpmath.power(x, 2), n)
            if x == n - 1:
                break
        else:
            return False
    return True


def is_prime(n, aryprimes):
    smallprimes = [2, 3, 5, 7, 11, 13]
    if type(n) is not mpmath.mpf:
        n = mpmath.mpf(n)
    if mpmath.fmod(n, 1) != 0:
        return False
    for i in range(0, len(smallprimes)):
        if mpmath.fmod(n, smallprimes[i]) == 0:
            return False
    for ap1 in range(6, len(aryprimes)):
        if mpmath.fmod(n, aryprimes[ap1]) == 0:
            return False
    return True


# 
# n = mpmath.mpf(("".join([str(1 + random.random()*10) for i in range(0, 7)])).replace(".", ""))
# make_prime(n, aryprimes, 6, 1)
# 
def make_prime(n, aryprimes, iplus, iter):
    p_ary = [3, 5, 7, 11, 13]
    inc_ary = [2*3, 2*3*5, 2*3*5*7, 2*3*5*11, 2*3*7*11, 2*3*5*7*13*17, 2*3*5*7*11*17*23, 2*3*5*7*11*13*23*29, 11*13*23*29, 2*3*5*11*13*29, 43*13*17, 41*7*11]
    if abs(iplus) >= 0 and abs(iplus) < 2:
        iplus = 2 if iplus >= 0 else -2
    if type(n) is not mpmath.mpf:
        n = mpmath.mpf(n)
    if mpmath.fmod(n, 1) != 0:
        n = mpmath.floor(n)
    if type(iplus) is not mpmath.mpf:
        iplus = mpmath.mpf(iplus)
    if mpmath.fmod(iplus, 1) != 0:
        iplus = mpmath.floor(iplus)
    if mpmath.fmod(n, 2) == 0:
        n += (1 if iplus > 0 else -1)
    for i in range(0, len(p_ary)):
        while mpmath.fmod(n, p_ary[i]) == 0:
            this_inc = inc_ary[int(random.random() * (i + 4))] if iter <= 2 else inc_ary[int(random.random() * (i + 5))]
            while mpmath.fmod(this_inc, p_ary[i]) == 0:
                this_inc = mpmath.fdiv(this_inc, p_ary[i])
            n += (this_inc if iplus > 0 else -this_inc)
    j = 0
    while j < 2:
        j += 1
        iter += 1
        for ap1 in range(9 if j % 2 == 0 else 5, len(aryprimes)):
            while mpmath.fmod(n, 2) == 0 or mpmath.fmod(n, 3) == 0 or mpmath.fmod(n, 5) == 0 or mpmath.fmod(n, 7) == 0 or mpmath.fmod(n, 11) == 0 or mpmath.fmod(n, aryprimes[ap1]) == 0 or mpmath.fmod(n, aryprimes[ap1 - 1]) == 0 or mpmath.fmod(n, aryprimes[ap1 - 2]) == 0 or mpmath.fmod(n, aryprimes[ap1 - 3]) == 0 or mpmath.fmod(n, aryprimes[ap1 - 4]) == 0:
                this_inc = iplus * (1 if iter <=2 else inc_ary[int(random.random()*6)])
                for ap2 in [0, 1, 2, 3, 4, 5] + [x for x in range(ap1 - 4, ap1 + 1) if x not in [0, 1, 2, 3, 4, 5]]:
                    while mpmath.fmod(this_inc, aryprimes[ap2]) == 0:
                        this_inc = mpmath.fdiv(this_inc, aryprimes[ap2])
                n += this_inc
        if mpmath.fmod(n, 1) != 0:
            j -= 1
            n = mpmath.floor(n) + inc_ary[int(random.random()*6)]
    #try:
    #    while not gmpy2.is_prime(n):
    #        n += iplus
    #except:
    #    pass
    return n



mpmath.mp.prec = 2048
p1p2 = [rsa[260]]
sqrt_p1p2 = mpmath.sqrt(p1p2)
p1 = [sqrt_p1p2]
p2 = [sqrt_p1p2]
aryprimes = primesieve.primes(int(5 * 10**5.4 + 3 * 10**4.75 + 7 * 10**3.67))
aryprimes = primesieve.primes(int(4 * 10**5.2 + 3 * 9**4.66 + 5 * 10**3.67))
len(aryprimes)
bits1, bits2 = get_bits(2048, aryprimes)
# rsa260, j = 968
jnumerator = 968
jplusminus = 0.511
random_amount = max(mpmath.fdiv(970, bits2) - mpmath.fdiv(969, bits2), mpmath.fdiv(967, bits2) - mpmath.fdiv(966, bits2)) / 2
lessthanj2, morethanj2, objary2, pary2 = find_it(p1, p2, p1p2, True, "RSA-260", None, 1000, 968, 0.511, bits2, random_amount, {}, {}, [], [])

for pa in range(0, len(pary2)):
    if pa < len(pary2) and mpmath.fmod(pary2[pa], 1) != 0:
        pary2.remove(pary2[pa])

# 967.27000004
# 967.27200002
# 967.27500004
# 967.27700005
# 967.28400002
# 967.30200005
# 967.30900002
# 967.31600004
jnumerator = (967.27 + 967.316) / 2
jplusminus = (jnumerator - 967.25) / 3.11
random_amount = (mpmath.fdiv(967.316, bits2) - mpmath.fdiv(967.27, bits2)) / 4
imult = 16326 # imult = 200 = 15 rows in 5.88 minutes, imult = 16326 = 1175 rows in 
mpmath.mp.prec = 8192
# bits1, bits2 = get_bits(mpmath.mp.prec, aryprimes)
bits1, bits2 = get_bits(2048, aryprimes)
lessthanj2, morethanj2, objary2, pary2 = find_it(p1, p2, p1p2, False, "RSA-260", None, 16326, jnumerator, jplusminus, bits2, random_amount, {}, {}, [], [])
lessthanj2, morethanj2, objary2, pary2 = find_it(p1, p2, p1p2, True, "RSA-260", None, imult, jnumerator, jplusminus, bits2, random_amount, lessthanj2, morethanj2, objary2, pary2)

jnumerator = (967.286 + 967.279) / 2
jplusminus = (jnumerator - 967.279) / 3.14159
random_amount = (mpmath.fdiv(967.286, bits2) - mpmath.fdiv(967.279, bits2)) / 6
imult = 26400 # imult = 200 = 15 rows in 5.88 minutes, imult = 16326 = 1175 rows in 175 minutes

jnumerator = (967.284 + 967.281) / 2
jplusminus = (jnumerator - 967.281) / (4 * 6.2831853)
random_amount = (mpmath.fdiv(967.284, bits2) - mpmath.fdiv(967.281, bits2)) / 20
imult = 138482

jnumerator = (967.284 + 967.283) / 2
jplusminus = (jnumerator - 967.2835) / (5 * 6.2831853)
random_amount = (mpmath.fdiv(967.284, bits2) - mpmath.fdiv(967.281, bits2)) / 30
imult = 276964/2

mpmath.mp.prec = 12288
lessthanj2, morethanj2, objary2, pary2 = find_it(p1, p2, p1p2, True, "RSA-260", None, imult, jnumerator, jplusminus, bits2, random_amount, lessthanj2, morethanj2, objary2, pary2)

# 967.281  % 0.3917474066949976 # 0.05665287005092473

# 967.6161 % 0.3917474066949976 # 0.00000552335603984781
# 968.0162 % 0.3917474066949976 # 0.00835805666106054030
# 968.3993 % 0.3917474066949976 # 0.00028931003400587641
#                               # 0.00288429668370208818
bits1, bits2 = get_bits(2048, aryprimes)
jnum_points = [967.2815, 967.6161, 968.0162 - 0.008358 +  2.5*0.0028843, 968.3993]
random_amount = 0.0028843
jplusminus = 0.0028843/16
imult = int(276964/len(jnum_points)/4.5) # 2593 rows

jnum_points = [(967.280901 + 967.281389)/2]
random_amount = (967.280695/967.280901) * 0.000244/2
jplusminus = abs(967.280901 - 967.281389)/2 # 0.000244
imult = int(276964*12.7) # 3168 rows in 1571.13 minutes (26.19 hours)
imult = int(276964*4.6) # 

jnum_points = [(967.2807256047798 + 967.2807833369052 + 967.2807841974586)/3, (967.2809297690677 + 967.2809581923657)/2, 967.2812319783807, 967.2813138406725, 967.2813323358569, 967.2813598993547, 967.2814099135197]
random_amount = (967.2809581923657/967.2809297690677) * 0.0000284/2 # 1/70422.533142
random_amount = (967.2807841974586/967.2807256047798) * 0.0000284/2 # 1/70422.530945
jplusminus = abs(967.2809582- 967.2809298)/2 # 0.0000142 or 1/70422.54
imult = int(276964/len(jnum_points)/9) # 

mpmath.mp.prec = 16384
lessthanj2, morethanj2, objary2, pary2 = find_it(p1, p2, p1p2, True, "RSA-260", None, imult, jnum_points, jplusminus, bits2, random_amount, lessthanj2, morethanj2, objary2, pary2)




mpmath.fmod(pary2[0], 1)
is_prime(pary2[0])
aryprimes = primesieve.primes(int(4 * 10**4.75 + 3 * 9**4.26 + 5 * 10**3.67))
aryprimes = primesieve.primes(int(5.75 * 10**5.85 + 3 * 9**4.86 + 5 * 10**3.87))
conn = sqlite3.connect("pary.db")
curs = conn.cursor()
iremoved = 0
len_pary2 = len(pary2)
for pa in range(0, len_pary2):
    if pa == 0:
        print("len(pary2) " + str(len_pary2))
    if pa < len(pary2) and (mpmath.fmod(pary2[pa], 1) != 0 or not is_prime(pary2[pa], aryprimes)):
        pary2.remove(pary2[pa])
        _ = curs.execute("DELETE FROM pary WHERE p1='" + str(pary2[pa]) + "' or p2='" + str(pary2[pa]) + "' or p1p2='" + str(pary2[pa]) + "'")
        iremoved += 1
        conn.commit()
    elif pa >= len_pary2 - 1:
        print("len(pary2) " + str(len(pary2)))
        print("removed " + str(iremoved))

curs.close()
conn.close()



arykeys = sorted([x for x in morethanj2.keys()])






def loop(thisp, thisp1, thisp1p2, aryprimes, thispary, inc, log10_lower_bound, log10_upper_bound, inum, iden, random_amount, iter):
    icount = 0
    bloop = True
    while bloop:
        icount += 2
        # make_prime(n, aryprimes, iplus, iter)
        thisp = make_prime(mpmath.floor(thisp), aryprimes, inc, max(iter, icount))
        if mpmath.fmod(thisp, 1) == 0 and thisp not in thispary:
            bloop = False
        else:
            inc = 6
            dir = 1 if iter % 2 == 1 else -1
            if icount > 2:
                random_amount *= 1004/1000
            if thisp1 == 0:
                thisp = mpmath.power(10, log10_lower_bound - random_amount * random.random() + random_amount * random.random() + mpmath.fdiv(inum + dir * random_amount * random.random() / 23, iden) * (log10_upper_bound - log10_lower_bound))
            else:
                thisp = mpmath.fdiv(thisp1p2, thisp1 + dir * 210 * icount * random.random())
    return thisp



# 
# obj = ptuple(967.2825, 43, 57, 43*57, False)
# obj.str_p1
# 
class ptuple:
    def __init__(self, j, p1, p2, p1p2, exists_in_db):
        self.exists_in_db = False
        self.j = j
        self.p1 = mpmath.mpf(p1)
        self.p2 = mpmath.mpf(p2)
        self.p1p2 = mpmath.mpf(p1p2)
        self.strp1 = ""
        self.strp2 = ""
        self.strp1p2 = ""
    
    @property
    def str_j(self):
        return str(float(self.j))
    
    @property
    def str_p1(self):
        self.strp1 = str(self.p1)
        idx = self.strp1.find(".")
        #if mpmath.fmod(self.p1, 1) != 0:
        #    print("p1 is not int, " + str(self.p1))
        return self.strp1[:idx] if idx > 0 else self.strp1
    
    @property
    def str_p2(self):
        self.strp2 = str(self.p2)
        idx = self.strp2.find(".")
        #if mpmath.fmod(self.p2, 1) != 0:
        #    print("p2 is not int, " + str(self.p2))
        return self.strp2[:idx] if idx > 0 else self.strp2
    
    @property
    def str_p1p2(self):
        #mul = mpmath.fmul(self.p1, self.p2)
        #if self.p1p2 != mul:
        #    print("correcting from 2^" + str(round(mpmath.log(self.p1p2, 2), 16)) + " to 2^" + str(round(mpmath.log(mul, 2), 16)))
        #    self.p1p2 = mul
        #if mpmath.fmod(self.p1p2, 1) != 0:
        #    print("p1p2 is not int, " + str(self.p1p2))
        self.strp1p2 = str(self.p1p2)
        idx = self.strp1p2.find(".")
        return self.strp1p2[:idx] if idx > 0 else self.strp1p2


def insert_tuples(pary_tgt_id, objary, bprint=False):
    if type(pary_tgt_id) is int:
        pary_tgt_id = str(pary_tgt_id)
    conn = sqlite3.connect("pary.db")
    curs = conn.cursor()
    for tuple in objary:
        if not tuple.exists_in_db:
            if bprint:
                print("INSERT INTO pary (tgt_id, j_num, p1, p2, p1p2) SELECT " + pary_tgt_id + ", " + tuple.str_j + ", '" + tuple.str_p1 + "', '" + tuple.str_p2 + "', '" + tuple.str_p1p2 + "' WHERE NOT EXISTS (SELECT 1 FROM pary WHERE p1p2='" + tuple.str_p1p2 + "')")
            _ = curs.execute("INSERT INTO pary (tgt_id, j_num, p1, p2, p1p2) SELECT " + pary_tgt_id + ", " + tuple.str_j + ", '" + tuple.str_p1 + "', '" + tuple.str_p2 + "', '" + tuple.str_p1p2 + "' WHERE NOT EXISTS (SELECT 1 FROM pary WHERE p1p2='" + tuple.str_p1p2 + "')")
    conn.commit()
    curs.close()
    conn.close()


conn = sqlite3.connect("pary.db")
curs = conn.cursor()
_ = curs.execute("SELECT * FROM pary_target LIMIT 5")
row = curs.fetchone()
while row is not None:
    s = ""
    for i in range(0, len(row)):
        s += str(row[i]) + ", "
    s = s[:-2] + "\n"
    row = curs.fetchone()



aryprimes = primesieve.primes(int(5 * 10**5.6 + 6 * 10**4.75 + 7 * 10**3.67))
# removedobjhsh = {}
for o in range(0, len(objary2)):
    if (objary[o].j in lessthanj2 or objary[o].j in morethanj2)
        for ap in range(0, len(aryprimes)):
            if (mpmath.fmod(ary[o].p1, aryprimes[ap]) == 0 or mpmath.fmod(ary[o].p2, aryprimes[ap]) == 0):
                removedobjhsh[objary[o].j] = obj
                if (objary[o].j in lessthanj2):
                    _ = lessthanj2.pop(objary[o].j)
                if (objary[o].j in morethanj2):
                    _ = morethanj2.pop(objary[o].j)
                break 




mpmath.mp.prec = 128
nary = [66152457549107, 10396522617497]
iterate(0.5, 0.5, nary)
iterate(2, 2, nary)
iterate(0.5, mpmath.e(), nary)

def iterate(real, base, nary):
    e = mpmath.e()
    sbase = "e" if base == e else str(base)
    print("# ------------------------------------")
    print("# base " + sbase)
    print("# ------------------------------------")
    for n in nary:
        this_n = mpmath.mpc(real, n)
        iter = 0
        prev_n = mpmath.mpc(-1, -1)
        while abs(this_n.real) != abs(prev_n.real) and abs(this_n.imag) != abs(prev_n.imag):
            iter += 1
            prev_n = this_n
            if base == e:
                #this_n = eval(("mpmath.log(" * 8) + "this_n" + (")" * 8))
                this_n = mpmath.log(this_n)
            else:
                #this_n = eval(("mpmath.log(" * 8) + "this_n" + (", " + str(base) + ")" * 8))
                this_n = mpmath.log(this_n, base)
        
        #iter += 1
        #while this_n.real == prev_n.real and this_n.imag == prev_n.imag:
        #    iter -= 1
        #    prev_n = this_n
        #    if base == e:
        #        this_n = mpmath.exp(this_n)
        #    else:
        #        this_n = mpmath.power(0.5, this_n)
        
        print("# ")
        print("# prec " + str(mpmath.mp.prec) + ", n " + str(n) + ", iter " + str(iter - 1))
        print("# this_n mpc(real='" + str(this_n.real) + "', imag='" + str(this_n.imag) + "') = mpf('" + str(mpmath.fabs(this_n)) + "') * mpc(real='" + str(this_n.real/mpmath.fabs(this_n)) + "', imag='" + str(this_n.imag/mpmath.fabs(this_n)) + "')")
        print("# prev_n mpc(real='" + str(prev_n.real) + "', imag='" + str(prev_n.imag) + "') = mpf('" + str(mpmath.fabs(prev_n)) + "') * mpc(real='" + str(prev_n.real/mpmath.fabs(prev_n)) + "', imag='" + str(prev_n.imag/mpmath.fabs(prev_n)) + "')")
        
        print("# ")
        z = mpmath.fdiv(mpmath.mpc(real, n), prev_n)
        abs_z = mpmath.fabs(z)
        unit_z = mpmath.fdiv(z, abs_z)
        print("# mpmath.fdiv(n, prev_n) mpc(real='" + str(z.real) + "', imag='" + str(z.imag) + "') = mpf('" + str(abs_z) + "') * mpc(real='" + str(mpmath.fdiv(z.real, abs_z)) + "', imag='" + str(mpmath.fdiv(z.imag, abs_z)) + "')")
        print("# mpmath.mpf('" + str(n) + "') / mpmath.mpf('" + str(abs_z) + "') = mpf('" + str(mpmath.fdiv(n, abs_z)) + "')") 
        z = mpmath.fdiv(mpmath.mpf(n), unit_z)
        print("# mpmath.fdiv(n, prev_unit_n) mpc(real='" + str(z.real) + "', imag='" + str(z.imag) + "') = mpf('" + str(mpmath.fabs(z)) + "') * mpc(real='" + str(mpmath.fdiv(z.real, mpmath.fabs(z))) + "', imag='" + str(mpmath.fdiv(z.imag, mpmath.fabs(z))) + "')")
        z = mpmath.fdiv(mpmath.mpc(real, n), unit_z)
        print("# mpmath.fdiv(mpmath.mpc(" + str(real) + ", n), prev_unit_n) mpc(real='" + str(z.real) + "', imag='" + str(z.imag) + "') = mpf('" + str(mpmath.fabs(z)) + "') * mpc(real='" + str(mpmath.fdiv(z.real, mpmath.fabs(z))) + "', imag='" + str(mpmath.fdiv(z.imag, mpmath.fabs(z))) + "')")
        z = mpmath.log(mpmath.mpf(n), unit_z)
        print("# mpmath.log(n, prev_unit_n) mpc(real='" + str(z.real) + "', imag='" + str(z.imag) + "') = mpf('" + str(mpmath.fabs(z)) + "') * mpc(real='" + str(mpmath.fdiv(z.real, mpmath.fabs(z))) + "', imag='" + str(mpmath.fdiv(z.imag, mpmath.fabs(z))) + "')")
        z = mpmath.log(mpmath.mpc(real, n), unit_z)
        print("# mpmath.log(mpmath.mpc(" + str(real) + ", n), prev_unit_n) mpc(real='" + str(z.real) + "', imag='" + str(z.imag) + "') = mpf('" + str(mpmath.fabs(z)) + "') * mpc(real='" + str(mpmath.fdiv(z.real, mpmath.fabs(z))) + "', imag='" + str(mpmath.fdiv(z.imag, mpmath.fabs(z))) + "')")
        z = mpmath.log(mpmath.mpc(real, n), prev_n)
        abs_z = mpmath.fabs(z)
        unit_z = mpmath.fdiv(z, abs_z)
        print("# mpmath.log(mpmath.mpc(" + str(real) + ", n), prev_n) mpc(real='" + str(z.real) + "', imag='" + str(z.imag) + "') = mpf('" + str(abs_z) + "') * mpc(real='" + str(mpmath.fdiv(z.real, abs_z)) + "', imag='" + str(mpmath.fdiv(z.imag, abs_z)) + "')")
        print("# mpmath.mpf('" + str(n) + "') / mpmath.mpf('" + str(abs_z) + "') = mpf('" + str(mpmath.fdiv(n, abs_z)) + "')") 
        
        print("# ")
        z = mpmath.fdiv(mpmath.mpc(real, n), this_n)
        abs_z = mpmath.fabs(z)
        unit_z = mpmath.fdiv(z, abs_z)
        print("# mpmath.fdiv(n, this_n) mpc(real='" + str(z.real) + "', imag='" + str(z.imag) + "') = mpf('" + str(mpmath.fabs(z)) + "') * mpc(real='" + str(unit_z.real) + "', imag='" + str(unit_z.imag) + "')")
        print("# mpmath.mpf('" + str(n) + "') / mpmath.mpf('" + str(abs_z) + "') = mpf('" + str(mpmath.fdiv(n, abs_z)) + "')") 
        z = mpmath.fdiv(mpmath.mpf(n), unit_z)
        print("# mpmath.fdiv(n, this_unit_n) mpc(real='" + str(z.real) + "', imag='" + str(z.imag) + "') = mpf('" + str(mpmath.fabs(z)) + "') * mpc(real='" + str(mpmath.fdiv(z.real, mpmath.fabs(z))) + "', imag='" + str(mpmath.fdiv(z.imag, mpmath.fabs(z))) + "')")
        z = mpmath.fdiv(mpmath.mpc(real, n), unit_z)
        print("# mpmath.fdiv(mpmath.mpc(" + str(real) + ", n), this_unit_n) mpc(real='" + str(z.real) + "', imag='" + str(z.imag) + "') = mpf('" + str(mpmath.fabs(z)) + "') * mpc(real='" + str(mpmath.fdiv(z.real, mpmath.fabs(z))) + "', imag='" + str(mpmath.fdiv(z.imag, mpmath.fabs(z))) + "')")
        z = mpmath.log(mpmath.mpf(n), unit_z)
        print("# mpmath.log(n, this_unit_n) mpc(real='" + str(z.real) + "', imag='" + str(z.imag) + "') = mpf('" + str(mpmath.fabs(z)) + "') * mpc(real='" + str(mpmath.fdiv(z.real, mpmath.fabs(z))) + "', imag='" + str(mpmath.fdiv(z.imag, mpmath.fabs(z))) + "')")
        z = mpmath.log(mpmath.mpc(real, n), unit_z)
        print("# mpmath.log(mpmath.mpc(" + str(real) + ", n), this_unit_n) mpc(real='" + str(z.real) + "', imag='" + str(z.imag) + "') = mpf('" + str(mpmath.fabs(z)) + "') * mpc(real='" + str(mpmath.fdiv(z.real, mpmath.fabs(z))) + "', imag='" + str(mpmath.fdiv(z.imag, mpmath.fabs(z))) + "')")
        z = mpmath.log(mpmath.mpc(real, n), this_n)
        abs_z = mpmath.fabs(z)
        unit_z = mpmath.fdiv(z, abs_z)
        print("# mpmath.log(mpmath.mpc(" + str(real) + ", n), this_n) mpc(real='" + str(z.real) + "', imag='" + str(z.imag) + "') = mpf('" + str(abs_z) + "') * mpc(real='" + str(unit_z.real) + "', imag='" + str(unit_z.imag) + "')")
        print("# mpmath.mpf('" + str(n) + "') / mpmath.mpf('" + str(abs_z) + "') = mpf('" + str(mpmath.fdiv(n, abs_z)) + "')") 
        print("# ")


mpmath.log(66152457549107, x) = mpmath.mpf('136.2514897677412906227546715205301284')
mpmath.power(x, mpmath.mpf('136.2514897677412906227546715205301284')) = mpmath.mpf(66152457549107)
x = mpmath.power(mpmath.mpf(66152457549107), mpmath.fdiv(1, mpmath.mpf('136.2514897677412906227546715205301284'))
#   x = mpf('1.263089400824700062348313637707623730837')
# 1/x = mpf('0.79170959660264510676761307749400019979109')

x = mpmath.power(mpmath.mpf(10396522617497), mpmath.fdiv(1, mpmath.mpf('21.835125888852983046825501728989441327')))
#   x = mpf('3.9458848164772312835940735287436769818879')
# 1/x = mpf('0.25342858357755366160689676937076706690821')


# 
# base 2
# 
x = mpmath.power(mpmath.mpf(66152457549107), mpmath.fdiv(1, mpmath.mpf('65.70446493581859618712131773513480761')))
#   x = mpf('1.6230955665092298225596332898113774820949')
# 1/x = mpf('0.61610666718207282145521307801385319789657')
x = mpmath.power(mpmath.mpf(10396522617497), mpmath.fdiv(1, mpmath.mpf('61.88378295506152807029161141696481938')))
#   x = mpf('1.6230955665089666557568493424214850562683')
# 1/x = mpf('0.61610666718217271626431844435977319267639')

# x = mpmath.mpf('1.6230955665089666557568493424214850562683')
# mpmath.exp(mpmath.power(x, 1/x) - 1)**2
# mpf('2.0045252586355450923514482964221813616472')
# 1 / (mpmath.exp(mpmath.power(x, 1/x) - 1)**2 - 2)
# mpf('220.98184447297220322719650598290414039249')
# 1 / (mpmath.exp(mpmath.power(x, 1/x) - 1)**2 - 2) / 221
# mpf('0.9999178482939918698063190315968513139938')
# 1/(221 - 1 / (mpmath.exp(mpmath.power(x, 1/x) - 1)**2 - 2)) / mpmath.pi()**3.5
# mpf('1.0022281233028506673234021014016100971808')
# 1/(1/(221 - 1 / (mpmath.exp(mpmath.power(x, 1/x) - 1)**2 - 2)) / mpmath.pi()**3.5 - 1)
# mpf('448.80819599193506984588542303298721716058')
# 1/(1/(221 - 1 / (mpmath.exp(mpmath.power(x, 1/x) - 1)**2 - 2)) / mpmath.pi()**3.5 - 1) / mpmath.pi()**(16/3)
# mpf('1.0013704964654984795067765254620506663288')
# 1/(1/(1/(221 - 1 / (mpmath.exp(mpmath.power(x, 1/x) - 1)**2 - 2)) / mpmath.pi()**3.5 - 1) / mpmath.pi()**(16/3) - 1)
# mpf('729.66258956113261645099119394735412873714')
# 1/(1/(1/(1/(221 - 1 / (mpmath.exp(mpmath.power(x, 1/x) - 1)**2 - 2)) / mpmath.pi()**(7/2) - 1) / mpmath.pi()**(16/3) - 1) / mpmath.pi()**(23/4) - 1)
# mpf('95.79009446391176530235533025472509153138')
# 1/(1 - 1/(1/(1/(1/(221 - 1 / (mpmath.exp(mpmath.power(x, 1/x) - 1)**2 - 2)) / mpmath.pi()**(7/2) - 1) / mpmath.pi()**(16/3) - 1) / mpmath.pi()**(23/4) - 1) / mpmath.pi()**4)
# mpf('60.166335638714193951177244604632644865379')
# 1/(1 - 1/(1 - 1/(1/(1/(1/(221 - 1 / (mpmath.exp(mpmath.power(x, 1/x) - 1)**2 - 2)) / mpmath.pi()**(7/2) - 1) / mpmath.pi()**(16/3) - 1) / mpmath.pi()**(23/4) - 1) / mpmath.pi()**4) / mpmath.pi()**(18/5))
# mpf('42.317449697925018704827026041399261482999')
# 1/(1/(1 - 1/(1 - 1/(1/(1/(1/(221 - 1 / (mpmath.exp(mpmath.power(x, 1/x) - 1)**2 - 2)) / mpmath.pi()**(7/2) - 1) / mpmath.pi()**(16/3) - 1) / mpmath.pi()**(23/4) - 1) / mpmath.pi()**4) / mpmath.pi()**(18/5)) / mpmath.pi()**(13/4) - 1)
# mpf('39.78015789730438716562775875851588735983')
# 1/(1/(1/(1 - 1/(1 - 1/(1/(1/(1/(221 - 1 / (mpmath.exp(mpmath.power(x, 1/x) - 1)**2 - 2)) / mpmath.pi()**(7/2) - 1) / mpmath.pi()**(16/3) - 1) / mpmath.pi()**(23/4) - 1) / mpmath.pi()**4) / mpmath.pi()**(18/5)) / mpmath.pi()**(13/4) - 1) / mpmath.pi()**(16/5) - 1)
# mpf('48.926851683036882728017707599852936058385')
# 1/(1 - 1/(1/(1/(1 - 1/(1 - 1/(1/(1/(1/(221 - 1 / (mpmath.exp(mpmath.power(x, 1/x) - 1)**2 - 2)) / mpmath.pi()**(7/2) - 1) / mpmath.pi()**(16/3) - 1) / mpmath.pi()**(23/4) - 1) / mpmath.pi()**4) / mpmath.pi()**(18/5)) / mpmath.pi()**(13/4) - 1) / mpmath.pi()**(16/5) - 1) / mpmath.pi()**(17/5))
# mpf('570.21892892471012199551735891037698666747')
# mpmath.power(1 + mpmath.log(mpmath.power(2 + mpmath.fdiv(1, 221), 1/2)), x)
# mpf('1.6230953852446657138630590529000269102771')
# (1 / (mpmath.exp(mpmath.power(x, 1/x) - 1)**2 - 2) / mpmath.pi() - 1/mpmath.e()) / mpmath.pi()**4 / (mpmath.e() - 2)
# mpf('1.0000806993402661794263225005268025462878')

# ------------------------------------
# base 0.5
# ------------------------------------
# 
# prec 128, n 66152457549107, iter 100
# this_n mpc(real='-1.8291539180547072134028075589790592599', imag='-3.0463156695969859653546180956808518645') = mpf('3.553286255674740809511145559561608519') * mpc(real='-0.51477809172663051518560475296493440889', imag='-0.85732346070680276207142033597545711926')
# prev_n mpc(real='-1.8291539180547072134028075589790592599', imag='3.0463156695969859653546180956808518645') = mpf('3.553286255674740809511145559561608519') * mpc(real='-0.51477809172663051518560475296493440889', imag='0.85732346070680276207142033597545711926')
# 
# mpmath.fdiv(n, prev_n) mpc(real='15961014609978.409284151325028871335632', imag='-9583758079094.055567927193840980195426') = mpf('18617260977344.245589711567660181036046') * mpc(real='0.85732346070679887122510261226749895408', imag='-0.51477809172663699509196401696728443124')
# mpmath.mpf('66152457549107') / mpmath.mpf('18617260977344.245589711567660181036046') = mpf('3.5532862556747408095111455594601126787')
# mpmath.fdiv(n, prev_unit_n) mpc(real='-34053835860156.234524438467742503026658', imag='56714053840260.272863741208978913363154') = mpf('66152457549107.000000000000001889574547') * mpc(real='-0.51477809172663051518560475296493440889', imag='0.85732346070680276207142033597545711926')
# mpmath.log(n, prev_unit_n) mpc(real='-2.9048540724690899561353753162838357531', imag='58.849846186121120815447678596942595644') = mpf('58.921495002354233257584164747270493682') * mpc(real='-0.049300413581716235863815826516894901127', imag='0.99878399527659218960117593673375893222')
# mpmath.log(n, prev_n) mpc(real='7.1980562201216038809953302366580001401', imag='-10.748888428149689366795600915557432743') = mpf('12.936406602640534324504831594364851477') * mpc(real='0.55641852032173769795513328045321115273', imag='-0.83090217850416541825065327493318588829')
# mpmath.mpf('66152457549107') / mpmath.mpf('12.936406602640534324504831594364851477') = mpf('5113665609088.3994350612151429295555963')
#
# mpmath.fdiv(n, this_n) mpc(real='-15961014609978.55415795396463023616167', imag='-9583758079093.8142917115954993675400703') = mpf('18617260977344.245589711567660181036046') * mpc(real='-0.85732346070680665291773805963443821996', imag='-0.51477809172662403527924548893317620987')
# mpmath.mpf('66152457549107') / mpmath.mpf('18617260977344.245589711567660181036046') = mpf('3.5532862556747408095111455594601126787')
# mpmath.fdiv(n, this_unit_n) mpc(real='-34053835860156.234524438467742503026658', imag='-56714053840260.272863741208978913363154') = mpf('66152457549107.000000000000001889574547') * mpc(real='-0.51477809172663051518560475296493440889', imag='-0.85732346070680276207142033597545711926')
# mpmath.log(n, this_unit_n) mpc(real='-0.60395641168501562528134996376428313681', imag='12.235637675449191921206909521471247407') = mpf('12.250534383123339689072945003105187722') * mpc(real='-0.049300413581716235863815826516894901126', imag='0.99878399527659218960117593673375893222')
# mpmath.log(n, this_n) mpc(real='-0.60395641168501562528134996376428313681', imag='12.235637675449191921206909521471247407') = mpf('12.250534383123339689072945003105187722') * mpc(real='-0.049300413581716235863815826516894901126', imag='0.99878399527659218960117593673375893222')
# mpmath.mpf('66152457549107') / mpmath.mpf('12.250534383123339689072945003105187722') = mpf('5399965052972.7401842892793611969046038')
# 
# 
# prec 128, n 10396522617497, iter 100
# this_n mpc(real='-1.8291539180547072134028075589790592599', imag='-3.0463156695969859653546180956808518645') = mpf('3.553286255674740809511145559561608519') * mpc(real='-0.51477809172663051518560475296493440889', imag='-0.85732346070680276207142033597545711926')
# prev_n mpc(real='-1.8291539180547072134028075589790592599', imag='3.0463156695969859653546180956808518645') = mpf('3.553286255674740809511145559561608519') * mpc(real='-0.51477809172663051518560475296493440889', imag='0.85732346070680276207142033597545711926')
#
# mpmath.fdiv(n, prev_n) mpc(real='2508433632532.1686059147154394886687552', imag='-1506183765825.5328072976560205148333702') = mpf('2925889407557.1130737973227109065562398') * mpc(real='0.8573234607067780048467854231050738231', imag='-0.5147780917266717464459140386707239562')
# mpmath.mpf('10396522617497') / mpmath.mpf('2925889407557.1130737973227109065562398') = mpf('3.5532862556747408095111455554523448959')
# mpmath.fdiv(n, prev_unit_n) mpc(real='-5351902073627.8594439176371392591901109', imag='8913182749749.0754816048722753398896816') = mpf('10396522617497.000000000000012023250908') * mpc(real='-0.51477809172663051518560475296493440889', imag='0.85732346070680276207142033597545711926')
# mpmath.log(n, prev_unit_n) mpc(real='-2.9048540724687972470024895397193074428', imag='55.427756878875948182720640784283204377') = mpf('55.503823380071021455746679329614642054') * mpc(real='-0.052336107597081364531627153965652760416', imag='0.99862952682242813918333880345351270636')
# mpmath.log(n, prev_n) mpc(real='6.8112875433027805124028904814816432428', imag='-10.10475483771054025371613721394751108') = mpf('12.186045639492172598426575159440119394') * mpc(real='0.5589415750445709277754791322483710267', imag='-0.82920704030217585089884673580057604401')
# mpmath.mpf('10396522617497') / mpmath.mpf('12.186045639492172598426575159440119394') = mpf('853149817837.89321628910771497906629669')
#
# mpmath.fdiv(n, this_n) mpc(real='-2508433632532.3134797173550408534947935', imag='-1506183765825.2915310820576789021780144') = mpf('2925889407557.1130737973227109065562398') * mpc(real='-0.85732346070682751929605524686290526363', imag='-0.51477809172658928392529546606849556731')
# mpmath.mpf('10396522617497') / mpmath.mpf('2925889407557.1130737973227109065562398') = mpf('3.5532862556747408095111455554523448959')
# mpmath.fdiv(n, this_unit_n) mpc(real='-5351902073627.8594439176371392591901109', imag='-8913182749749.0754816048722753398896816') = mpf('10396522617497.000000000000012023250908') * mpc(real='-0.51477809172663051518560475296493440889', imag='-0.85732346070680276207142033597545711926')
# mpmath.log(n, this_unit_n) mpc(real='-0.60395641168499062727911693071189901212', imag='11.524141425756098207652666918496721235') = mpf('11.539956626783447571357625506980140708') * mpc(real='-0.052336107597081364531627153965652760416', imag='0.99862952682242813918333880345351270636')
# mpmath.log(n, this_n) mpc(real='-0.60395641168499062727911693071189901212', imag='11.524141425756098207652666918496721235') = mpf('11.539956626783447571357625506980140708') * mpc(real='-0.052336107597081364531627153965652760416', imag='0.99862952682242813918333880345351270636')
# mpmath.mpf('10396522617497') / mpmath.mpf('11.539956626783447571357625506980140708') = mpf('900915224704.34458244785016228822729874')
#
# 

# ------------------------------------
# base 2
# ------------------------------------
#
# prec 128, n 66152457549107, iter 423
# this_n mpc(real='0.82467854614207422231406459438160324002', imag='1.5674321238496478610585743911929869276') = mpf('1.7711403578889006483857478581858282676') * mpc(real='0.46562009750884142703605071137662578295', imag='0.88498470314229556264575550834523088283')
# prev_n mpc(real='0.82467854614207422231406459438160323988', imag='1.5674321238496478610585743911929869276') = mpf('1.7711403578889006483857478581858282676') * mpc(real='0.46562009750884142703605071137662578289', imag='0.88498470314229556264575550834523088286')
#
# mpmath.fdiv(n, prev_n) mpc(real='33054361132627.421506491298796934816288', imag='17391006645671.53073559816885095833589') = mpf('37350206184650.998557265869878377062257') * mpc(real='0.88498470314230963982791198934843474233', imag='0.4656200975088146711229393851257859593')
# mpmath.mpf('66152457549107') / mpmath.mpf('37350206184650.998557265869878377062257') = mpf('1.7711403578889006483857478573763764375')
# mpmath.fdiv(n, prev_unit_n) mpc(real='58543913006230.698717765654672142056044', imag='-30801913734462.924535202087004443872212') = mpf('66152457549107.0') * mpc(real='0.88498470314230963982791198934843474233', imag='-0.4656200975088146711229393851257859593')
# mpmath.fdiv(mpmath.mpc(2, n), prev_unit_n) mpc(real='30801913734464.694504608371623723528036', imag='58543913006229.767477570637042799810166') = mpf('66152457549107.000000000000030233192751') * mpc(real='0.46562009750884142703605071137662578289', imag='0.88498470314229556264575550834523088286')
# mpmath.log(n, prev_unit_n) mpc(real='-1.0218277535623964119246153519040253093e-37', imag='-65.70446493581859618712131773513480761') = mpf('65.70446493581859618712131773513480761') * mpc(real='-1.555187694718369149372132944484426678e-39', imag='-1.0')
# mpmath.log(mpmath.mpc(2, n), prev_unit_n) mpc(real='3.243201043288782845914071654248084053', imag='-65.704464935818596187121317736078416501') = mpf('65.784459148870448493858980819498174676') * mpc(real='0.049300413581715525927960351476801467296', imag='-0.99878399527659222464391936967813605487')
# mpmath.log(mpmath.mpc(2, n), prev_n) mpc(real='13.201976736039294681613355415988062897', imag='-22.344491013708975640590726801935617596') = mpf('25.953197652710232354786650875090665874') * mpc(real='0.50868401314936399795858029656354694508', imag='-0.8609532941839863099386960286092017466')
# mpmath.mpf('66152457549107') / mpmath.mpf('25.953197652710232354786650875090665874') = mpf('2548913564883.9345230701072133364429635')
#
# mpmath.fdiv(n, this_n) mpc(real='33054361132627.421506491298796934816285', imag='17391006645671.530735598168850958335892') = mpf('37350206184650.998557265869878377062256') * mpc(real='0.8849847031423096398279119893484347423', imag='0.46562009750881467112293938512578595936')
# mpmath.mpf('66152457549107') / mpmath.mpf('37350206184650.998557265869878377062256') = mpf('1.7711403578889006483857478573763764376')
# mpmath.fdiv(n, this_unit_n) mpc(real='58543913006230.698717765654672142056042', imag='-30801913734462.924535202087004443872216') = mpf('66152457549107.0') * mpc(real='0.8849847031423096398279119893484347423', imag='-0.46562009750881467112293938512578595936')
# mpmath.fdiv(mpmath.mpc(2, n), this_unit_n) mpc(real='30801913734464.69450460837162372352804', imag='58543913006229.767477570637042799810163') = mpf('66152457549107.00000000000003023319275') * mpc(real='0.46562009750884142703605071137662578295', imag='0.88498470314229556264575550834523088283')
# mpmath.log(n, this_unit_n) mpc(real='2.6784924447146750453297140666393126462e-37', imag='-65.704464935818596187121317735134807601') = mpf('65.704464935818596187121317735134807601') * mpc(real='4.0765759942358236170541560853436781384e-39', imag='-1.0')
# mpmath.log(mpmath.mpc(2, n), this_unit_n) mpc(real='3.2432010432887828459140716542480840529', imag='-65.704464935818596187121317736078416492') = mpf('65.784459148870448493858980819498174667') * mpc(real='0.049300413581715525927960351476801467301', imag='-0.99878399527659222464391936967813605487')
# mpmath.log(mpmath.mpc(2, n), this_n) mpc(real='13.201976736039294681613355415988062899', imag='-22.344491013708975640590726801935617596') = mpf('25.953197652710232354786650875090665875') * mpc(real='0.50868401314936399795858029656354694512', imag='-0.86095329418398630993869602860920174658')
# mpmath.mpf('66152457549107') / mpmath.mpf('25.953197652710232354786650875090665875') = mpf('2548913564883.9345230701072133364429634')
#
#
# prec 128, n 10396522617497, iter 423
# this_n mpc(real='0.82467854614207422231406459438160324002', imag='1.5674321238496478610585743911929869276') = mpf('1.7711403578889006483857478581858282676') * mpc(real='0.46562009750884142703605071137662578295', imag='0.88498470314229556264575550834523088283')
# prev_n mpc(real='0.82467854614207422231406459438160323988', imag='1.5674321238496478610585743911929869276') = mpf('1.7711403578889006483857478581858282676') * mpc(real='0.46562009750884142703605071137662578289', imag='0.88498470314229556264575550834523088286')
#
# mpmath.fdiv(n, prev_n) mpc(real='5194824589354.0962763319799044995936539', imag='2733171232504.7205685572588236463309535') = mpf('5869959752873.0406371023197830129057388') * mpc(real='0.88498470314238513492191737293751078498', imag='0.46562009750867118074588193115789336506')
# mpmath.mpf('10396522617497') / mpmath.mpf('5869959752873.0406371023197830129057388') = mpf('1.7711403578889006483857478254135397638')
# mpmath.fdiv(n, prev_unit_n) mpc(real='9200763482358.675424002075908806247538', imag='-4840829874910.0584727024660037253786876') = mpf('10396522617497.0') * mpc(real='0.88498470314238513492191737293751078498', imag='-0.46562009750867118074588193115789336506')
# mpmath.fdiv(mpmath.mpc(2, n), prev_unit_n) mpc(real='4840829874911.8284421087507739952225224', imag='9200763482357.7441838070585664447557741') = mpf('10396522617497.000000000000192372014527') * mpc(real='0.46562009750884142703605071137662578289', imag='0.88498470314229556264575550834523088286')
# mpmath.log(n, prev_unit_n) mpc(real='4.2729663040142503430119347189241398579e-37', imag='-61.88378295506152807029161141696481938') = mpf('61.88378295506152807029161141696481938') * mpc(real='6.9048240103827730484956975169769112242e-39', imag='-1.0')
# mpmath.log(mpmath.mpc(2, n), prev_unit_n) mpc(real='3.2432010432895337927730300586356143888', imag='-61.883782955061528070291611455168726828') = mpf('61.968709409155505115964275263627843823') * mpc(real='0.052336107597076570581577074827362803612', imag='-0.99862952682242839042434349745670492931')
# mpmath.log(mpmath.mpc(2, n), prev_n) mpc(real='12.50013341180432831531827259520385852', imag='-21.010526673953307377395260226173744218') = mpf('24.447813121623176104043885696098319655') * mpc(real='0.51129863229968933079520756785139952942', imag='-0.85940311182149386384648771272201820296')
# mpmath.mpf('10396522617497') / mpmath.mpf('24.447813121623176104043885696098319655') = mpf('425253684891.00829565439294948472695716')
#
# mpmath.fdiv(n, this_n) mpc(real='5194824589354.0962763319799044995936536', imag='2733171232504.7205685572588236463309538') = mpf('5869959752873.0406371023197830129057386') * mpc(real='0.88498470314238513492191737293751078494', imag='0.46562009750867118074588193115789336512')
# mpmath.mpf('10396522617497') / mpmath.mpf('5869959752873.0406371023197830129057386') = mpf('1.7711403578889006483857478254135397639')
# mpmath.fdiv(n, this_unit_n) mpc(real='9200763482358.6754240020759088062475377', imag='-4840829874910.0584727024660037253786883') = mpf('10396522617497.0') * mpc(real='0.88498470314238513492191737293751078494', imag='-0.46562009750867118074588193115789336512')
# mpmath.fdiv(mpmath.mpc(2, n), this_unit_n) mpc(real='4840829874911.8284421087507739952225231', imag='9200763482357.7441838070585664447557738') = mpf('10396522617497.000000000000192372014527') * mpc(real='0.46562009750884142703605071137662578295', imag='0.88498470314229556264575550834523088282')
# mpmath.log(n, this_unit_n) mpc(real='2.3799887440453488945178733319179638341e-38', imag='-61.883782955061528070291611416964819371') = mpf('61.883782955061528070291611416964819371') * mpc(real='3.8459005419459211632306704723770393891e-40', imag='-1.0')
# mpmath.log(mpmath.mpc(2, n), this_unit_n) mpc(real='3.2432010432895337927730300586356143879', imag='-61.883782955061528070291611455168726819') = mpf('61.968709409155505115964275263627843814') * mpc(real='0.052336107597076570581577074827362803606', imag='-0.99862952682242839042434349745670492931')
# mpmath.log(mpmath.mpc(2, n), this_n) mpc(real='12.500133411804328315318272595203858521', imag='-21.010526673953307377395260226173744218') = mpf('24.447813121623176104043885696098319656') * mpc(real='0.51129863229968933079520756785139952947', imag='-0.85940311182149386384648771272201820293')
# mpmath.mpf('10396522617497') / mpmath.mpf('24.447813121623176104043885696098319656') = mpf('425253684891.00829565439294948472695715')
#

# ------------------------------------
# base e
# ------------------------------------
# 
# prec 128, n 66152457549107, iter 278
# this_n mpc(real='0.31813150520476413531265425158766451721', imag='1.3372357014306894089011621431937106126') = mpf('1.3745570107437074865300930567696626724') * mpc(real='0.23144293231798242682076394698568503567', imag='0.97284848207727281498557654919425743842')
# prev_n mpc(real='0.31813150520476413531265425158766451718', imag='1.3372357014306894089011621431937106126') = mpf('1.3745570107437074865300930567696626724') * mpc(real='0.23144293231798242682076394698568503564', imag='0.97284848207727281498557654919425743843')
#
# mpmath.fdiv(n, prev_n) mpc(real='46819678928784.439434637400519381106567', imag='11138511269839.50735439202801277524105') = mpf('48126383287161.7659930460398378973193') * mpc(real='0.97284848207727456430027242554591633565', imag='0.23144293231797507374184503381910539053')
# mpmath.mpf('66152457549107') / mpmath.mpf('48126383287161.7659930460398378973193') = mpf('1.3745570107437074865300930567303999142')
# mpmath.fdiv(n, prev_unit_n) mpc(real='64356317912330.087740073510898441622693', imag='-15310518755205.690629105571517545216111') = mpf('66152457549107.0') * mpc(real='0.97284848207727456430027242554591633564', imag='-0.23144293231797507374184503381910539053')
# mpmath.fdiv(mpmath.mpc(0.5, n), prev_unit_n) mpc(real='15310518755206.177053346610154827366247', imag='64356317912329.972018607351910904751771') = mpf('66152457549107.000000000000001889574547') * mpc(real='0.23144293231798242682076394698568503564', imag='0.97284848207727281498557654919425743843')
# mpmath.log(n, prev_unit_n) mpc(real='1.6572606334932650035636824678819176775e-36', imag='-136.25148976774129062275467152053012841') = mpf('136.25148976774129062275467152053012841') * mpc(real='1.2163247802415116634601448777684233978e-38', imag='-1.0')
# mpmath.log(mpmath.mpc(0.5, n), prev_unit_n) mpc(real='6.7254329549147623619727035172535298187', imag='-136.25148976774129062275467152065242615') = mpf('136.41737393880576797326231638972216176') * mpc(real='0.049300413581716235863815826516894901138', imag='-0.99878399527659218960117593673375893222')
# mpmath.log(mpmath.mpc(0.5, n), prev_n) mpc(real='6.4699763557389333108602395521394377058', imag='-22.258364631173276293679380598171968781') = mpf('23.179633088081577917558804658587569892') * mpc(real='0.27912332913783881076966483859782808335', imag='-0.96025526144406504028981669818243311217')
# mpmath.mpf('66152457549107') / mpmath.mpf('23.179633088081577917558804658587569892') = mpf('2853904429709.0723828679304877752116814')
#
# mpmath.fdiv(n, this_n) mpc(real='46819678928784.439434637400519381106566', imag='11138511269839.507354392028012775241051') = mpf('48126383287161.7659930460398378973193') * mpc(real='0.97284848207727456430027242554591633564', imag='0.23144293231797507374184503381910539056')
# mpmath.mpf('66152457549107') / mpmath.mpf('48126383287161.7659930460398378973193') = mpf('1.3745570107437074865300930567303999142')
# mpmath.fdiv(n, this_unit_n) mpc(real='64356317912330.087740073510898441622693', imag='-15310518755205.690629105571517545216113') = mpf('66152457549107.0') * mpc(real='0.97284848207727456430027242554591633564', imag='-0.23144293231797507374184503381910539056')
# mpmath.fdiv(mpmath.mpc(0.5, n), this_unit_n) mpc(real='15310518755206.177053346610154827366249', imag='64356317912329.972018607351910904751771') = mpf('66152457549107.000000000000001889574547') * mpc(real='0.23144293231798242682076394698568503566', imag='0.97284848207727281498557654919425743843')
# mpmath.log(n, this_unit_n) mpc(real='-3.7035389418873318911884142182412582237e-37', imag='-136.2514897677412906227546715205301284') = mpf('136.2514897677412906227546715205301284') * mpc(real='-2.7181639982069220029672637815677180751e-39', imag='-1.0')
# mpmath.log(mpmath.mpc(0.5, n), this_unit_n) mpc(real='6.725432954914762361972703517253529816', imag='-136.25148976774129062275467152065242613') = mpf('136.41737393880576797326231638972216175') * mpc(real='0.049300413581716235863815826516894901123', imag='-0.99878399527659218960117593673375893222')
# mpmath.log(mpmath.mpc(0.5, n), this_n) mpc(real='6.4699763557389333108602395521394377061', imag='-22.258364631173276293679380598171968781') = mpf('23.179633088081577917558804658587569892') * mpc(real='0.27912332913783881076966483859782808336', imag='-0.96025526144406504028981669818243311217')
# mpmath.mpf('66152457549107') / mpmath.mpf('23.179633088081577917558804658587569892') = mpf('2853904429709.0723828679304877752116813')
#
#
# prec 128, n 10396522617497, iter 278
# this_n mpc(real='0.31813150520476413531265425158766451721', imag='1.3372357014306894089011621431937106126') = mpf('1.3745570107437074865300930567696626724') * mpc(real='0.23144293231798242682076394698568503567', imag='0.97284848207727281498557654919425743842')
# prev_n mpc(real='0.31813150520476413531265425158766451718', imag='1.3372357014306894089011621431937106126') = mpf('1.3745570107437074865300930567696626724') * mpc(real='0.23144293231798242682076394698568503564', imag='0.97284848207727281498557654919425743843')
#
# mpmath.fdiv(n, prev_n) mpc(real='7358182431328.7464288599973305678477188', imag='1750528833432.2079886386779074664875713') = mpf('7563544135482.5549227244081078868848937') * mpc(real='0.97284848207728394577136104065082751693', imag='0.23144293231793563961518234189648647129')
# mpmath.mpf('10396522617497') / mpmath.mpf('7563544135482.5549227244081078868848937') = mpf('1.3745570107437074865300930551800307891')
# mpmath.fdiv(n, prev_unit_n) mpc(real='10114241247314.107379735366691047351117', imag='-2406201680503.2452493716184069945938956') = mpf('10396522617497.0') * mpc(real='0.97284848207728394577136104065082751693', imag='-0.23144293231793563961518234189648647129')
# mpmath.fdiv(mpmath.mpc(0.5, n), prev_unit_n) mpc(real='2406201680503.7316736126570489674795761', imag='10114241247313.991658269207723227543526') = mpf('10396522617497.000000000000012023250908') * mpc(real='0.23144293231798242682076394698568503564', imag='0.97284848207727281498557654919425743843')
# mpmath.log(n, prev_unit_n) mpc(real='-4.994162962463401277286231291864926714e-38', imag='-128.32853335501072534413817965172380141') = mpf('128.32853335501072534413817965172380141') * mpc(real='-3.8917011142389081338604376641127705182e-40', imag='-1.0')
# mpmath.log(mpmath.mpc(0.5, n), prev_unit_n) mpc(real='6.7254329549157560172089201004084927935', imag='-128.32853335501072534413817965667527171') = mpf('128.50464552489597513531100692570444061') * mpc(real='0.052336107597081364531627153965652760416', imag='-0.99862952682242813918333880345351270636')
# mpmath.log(mpmath.mpc(0.5, n), prev_n) mpc(real='6.1583974398001483986013898732317938986', imag='-20.948672119146854185914750040168320604') = mpf('21.835125888852983046825501728989441327') * mpc(real='0.28204084882075548380025951441363458176', imag='-0.95940239711836646527004606992903806501')
# mpmath.mpf('10396522617497') / mpmath.mpf('21.835125888852983046825501728989441327') = mpf('476137516697.55716731040582143484392919')
#
# mpmath.fdiv(n, this_n) mpc(real='7358182431328.7464288599973305678477187', imag='1750528833432.2079886386779074664875715') = mpf('7563544135482.5549227244081078868848936') * mpc(real='0.97284848207728394577136104065082751692', imag='0.23144293231793563961518234189648647132')
# mpmath.mpf('10396522617497') / mpmath.mpf('7563544135482.5549227244081078868848936') = mpf('1.3745570107437074865300930551800307891')
# mpmath.fdiv(n, this_unit_n) mpc(real='10114241247314.107379735366691047351117', imag='-2406201680503.2452493716184069945938958') = mpf('10396522617497.0') * mpc(real='0.97284848207728394577136104065082751692', imag='-0.23144293231793563961518234189648647132')
# mpmath.fdiv(mpmath.mpc(0.5, n), this_unit_n) mpc(real='2406201680503.7316736126570489674795763', imag='10114241247313.991658269207723227543525') = mpf('10396522617497.000000000000012023250908') * mpc(real='0.23144293231798242682076394698568503567', imag='0.97284848207727281498557654919425743843')
# mpmath.log(n, this_unit_n) mpc(real='-3.8882074688401783904568502418670160693e-37', imag='-128.3285333550107253441381796517238014') = mpf('128.3285333550107253441381796517238014') * mpc(real='-3.0298853787129011522263655932064041472e-39', imag='-1.0')
# mpmath.log(mpmath.mpc(0.5, n), this_unit_n) mpc(real='6.7254329549157560172089201004084927925', imag='-128.3285333550107253441381796566752717') = mpf('128.5046455248959751353110069257044406') * mpc(real='0.052336107597081364531627153965652760414', imag='-0.99862952682242813918333880345351270636')
# mpmath.log(mpmath.mpc(0.5, n), this_n) mpc(real='6.1583974398001483986013898732317938988', imag='-20.948672119146854185914750040168320605') = mpf('21.835125888852983046825501728989441327') * mpc(real='0.28204084882075548380025951441363458177', imag='-0.95940239711836646527004606992903806501')
# mpmath.mpf('10396522617497') / mpmath.mpf('21.835125888852983046825501728989441327') = mpf('476137516697.55716731040582143484392918')
#



# 
# iterate_log(66152457549107, 0.5, 66152457549107)
# 
iterate_log(n, base, max_iter):
    # 
    # base 0.5, mpc(real='-1.8291539180547072134028075589790592599', imag='-3.0463156695969859653546180956808518645')
    # base e,   mpc(real='0.31813150520476413531265425158766451721', imag='1.3372357014306894089011621431937106126')
    # 
    iter = 0
    if type(n) is not mpmath.mpc:
        n = mpmath.mpc(base, n)
    min_n = mpmath.mpc()
    while n.real != min_n.real and n.imag != min_n.imag:
        n = mpmath.log(n, base)







iprec = 384
eps_real2 = myepsilon2(mpmath.power(2, iprec))
eps_real3 = myepsilon3(sqrt_p1p2, two)
eps_complex3 = myepsilon3(mpmath.mpc(0, mpmath.sqrt(p1p2[thisi])*mpmath.pi()), two)
eps_real4 = myepsilon4(mpmath.sqrt(p1p2[thisi]), two)
eps_complex4 = myepsilon4(mpmath.mpc(0, mpmath.sqrt(p1p2[thisi])*mpmath.pi()), two)

ls1c = lambda p1, p1p2, pi, eps: p1*mpmath.log(mpmath.fadd(1, mpmath.fdiv(pi, p1))) + mpmath.fdiv(p1p2, p1)*mpmath.log(1 + mpmath.fdiv(pi*p1, p1p2)) + eps*mpmath.log(1 + mpmath.fdiv(pi, p1) + mpmath.fdiv(pi*p1, p1p2) - mpmath.fdiv(pi**2, p1p2))
rs12c = lambda p1p2, pi: mpmath.fadd(p1p2, mpmath.fdiv(pi, 2))*mpmath.log(1 + mpmath.fdiv(pi, p1p2))

(1 / (1/log(1 + ln(p1)/2^64) - 1/2)) + (1 / (1/log(1 + ln(p1p2/p1)/2^64) - 1/2)) = (1 / (1/log(1 + ln(p1p2)/2^64) - 1/2))
inv_log = lambda x, prec: mpmath.fdiv(1, mpmath.fdiv(1, mpmath.log(1 + mpmath.fdiv(mpmath.log(x), mpmath.power(2, prec)))) - 1/2)
ls1d = lambda p1, p1p2, prec: inv_log(p1, prec) + inv_log(mpmath.fdiv(p1p2, p1), prec)
rs12d = lambda p1p2, prec: inv_log(p1p2, prec)

e^(2^64 / (1/log(1 + ln(p1p2)/2^64) - 1/2)) % e^(2^64 / (1/log(1 + ln(p1)/2^64) - 1/2)) = e^(2^64 / (1/log(1 + ln(p1p2/p1)/2^64) - 1/2))
e^(2^64 / (1/log(1 + ln(p1p2)/2^64) - 1/2)) % e^(2^64 / (1/log(1 + ln(p2)/2^64) - 1/2)) = e^(2^64 / (1/log(1 + ln(p1p2/p2)/2^64) - 1/2))
my_exp = lambda x, prec: mpmath.exp(mpmath.fmul(mpmath.power(2, prec), inv_log(x, prec)))
my_mod_real = lambda p1p2, p, prec: mpmath.fmod(my_exp(p1p2, prec), my_exp(p, prec)) 
def my_mod_complex(p1p2, p, prec):
    z1 = my_exp(mpmath.mpc(0, p1p2*mpmath.pi()), prec)
    z2 = my_exp(mpmath.mpc(0, p*mpmath.pi()), prec)
    z3 = z1 / z2
    return z1 - mpmath.mpc(mpmath.floor(z3.real), mpmath.floor(z3.imag)) * z2

# eps_real2
# eps_real3
# eps_complex3
# eps_real4
# eps_complex4

ls1_p1p2 = ls1(p1, p1p2, pi, eps)
ls1_real2_true = ls1(p1, p1p2, pi, eps_real2)
ls1_real3_true = ls1(p1, p1p2, pi, eps_real3)
ls1_complex3_true = ls1(p1, p1p2, pi, eps_complex3)
ls1_real3_true = ls1(p1, p1p2, pi, eps_real4)
ls1_complex3_true = ls1(p1, p1p2, pi, eps_complex4)
ls1_complex1_true = ls1(p1, p1p2, pi, eps_complex1)
rs1_true = rs1(p1p2, pi)
ls2_real2_true = ls2(p1, p1p2, iprec)
rs2_real2_true = rs2(p1p2, iprec)
ls2_complex2_true = ls2(mpmath.mpc(0, p1*mpmath.pi()), mpmath.mpc(0, p1p2*mpmath.pi()), iprec)
rs2_complex2_true = rs2(mpmath.mpc(0, p1p2*mpmath.pi()), iprec)
mod_real_p1 = my_mod_real(p1p2, p1, iprec)
mod_real_p2 = my_mod_real(p1p2, p2, iprec)
mod_complex_p1 = my_mod_complex(p1p2, p1, iprec)
mod_complex_p2 = my_mod_complex(p1p2, p2, iprec)
logp1_epsreal2 = mpmath.power(1 + mpmath.fdiv(pi, p1), p1 + eps_real2)
logp1_epsreal3 = mpmath.power(1 + mpmath.fdiv(pi, p1), p1 + eps_real3)
logp1_epscomplex3 = mpmath.power(1 + mpmath.fdiv(pi, p1), p1 + eps_complex3)
logp1_epsreal4 = mpmath.power(1 + mpmath.fdiv(pi, p1), p1 + eps_real4)
logp1_epscomplex4 = mpmath.power(1 + mpmath.fdiv(pi, p1), p1 + eps_complex4)
logp2_epsreal2 = mpmath.power(1 + mpmath.fdiv(pi, p2), p2 + eps_real2)
logp2_epsreal3 = mpmath.power(1 + mpmath.fdiv(pi, p2), p2 + eps_real3)
logp2_epscomplex3 = mpmath.power(1 + mpmath.fdiv(pi, p2), p2 + eps_complex3)
logp2_epsreal4 = mpmath.power(1 + mpmath.fdiv(pi, p2), p2 + eps_real4)
logp2_epscomplex4 = mpmath.power(1 + mpmath.fdiv(pi, p2), p2 + eps_complex4)
logp1p2 = mpmath.power(1 + mpmath.fdiv(pi, p1p2), p1p2 + 0.5)


mpmath.mp.prec = 192
p1, p2, p1p2 = [mpmath.mpf(13860658187287)], [mpmath.mpf(44038395018313)], [mpmath.fmul(13860658187287, 44038395018313)]
thisi = -1
newp1, newp2 = 10396522617497, 51022627941473
newp1, newp2 = 14011402254263, 20852450975261
newp1, newp2 = 15053428029503, 66152457549107

mpmath.mp.prec = 192
for i in range(0, 8):
    p1, p2 = generate_primes(13, -1, -1)
    print("p1, p2, p1p2 = [mpmath.mpf(" + str(p1) + ")], [mpmath.mpf(" + str(p2) + ")], [mpmath.fmul(" + str(p1) + ", " + str(p2) + ")]")
p1, p2, p1p2 = [mpmath.mpf(25437975264101)], [mpmath.mpf(25534248091031)], [mpmath.fmul(25437975264101, 25534248091031)]
p1, p2, p1p2 = [mpmath.mpf(17777242415791)], [mpmath.mpf(32443897622537)], [mpmath.fmul(17777242415791, 32443897622537)]
p1, p2, p1p2 = [mpmath.mpf(9484021274029)], [mpmath.mpf(24953208848681)], [mpmath.fmul(9484021274029, 24953208848681)]
p1, p2, p1p2 = [mpmath.mpf(13860658187287)], [mpmath.mpf(44038395018313)], [mpmath.fmul(13860658187287, 44038395018313)]
p1, p2, p1p2 = [mpmath.mpf(15053428029503)], [mpmath.mpf(66152457549107)], [mpmath.fmul(15053428029503, 66152457549107)]
p1, p2, p1p2 = [mpmath.mpf(18927228154031)], [mpmath.mpf(71478878188507)], [mpmath.fmul(18927228154031, 71478878188507)]
thisi = -1
log_p1p2 = mpmath.log(p1p2[thisi])
sqrt_p1p2 = mpmath.sqrt(p1p2[thisi])
vars = []

rsp1p2_mod_lsp1_p1p2a = {}
rsp1p2_mod1_lsnewp1_p1p2a = {}
rsp1p2_mod1_lsnewp2_p1p2a = {}
rsp1p2_div_lsnewp2_p1p2a = {}
rsp1p2_mod1_lsnewp1_newp1p2a = {}
rsp1p2_mod1_lsnewp2_newp1p2a = {}

rsp1p2_mod1_lsnewp1_p1p2b = {}
rsp1p2_mod1_lsnewp2_p1p2b = {}
rsp1p2_div_lsnewp2_p1p2b = {}
rsp1p2_mod1_lsnewp1_newp1p2b = {}
rsp1p2_mod1_lsnewp2_newp1p2b = {}

rsnewp1p2_mod1_lsnewp1_newp1p2a = {}
rsnewp1p2_mod1_lsnewp2_newp1p2a = {}
rsnewp1p2_div_lsnewp2_newp1p2a = {}
rsnewp1p2_mod1_lsnewp1_newp1p2b = {}
rsnewp1p2_mod1_lsnewp2_newp1p2b = {}
rsnewp1p2_div_lsnewp2_newp1p2b = {}

rsp1p2_mod2_lsnewp1_p1p2a = {}
rsp1p2_mod2_lsnewp2_p1p2a = {}
rsp1p2_mod2_lsnewp1_newp1p2a = {}
rsp1p2_mod2_lsnewp2_newp1p2a = {}

rsp1p2_mod2_lsnewp1_p1p2b = {}
rsp1p2_mod2_lsnewp2_p1p2b = {}
rsp1p2_mod2_lsnewp1_newp1p2b = {}
rsp1p2_mod2_lsnewp2_newp1p2b = {}

rsnewp1p2_mod2_lsnewp1_newp1p2a = {}
rsnewp1p2_mod2_lsnewp2_newp1p2a = {}
rsnewp1p2_mod2_lsnewp1_newp1p2b = {}
rsnewp1p2_mod2_lsnewp2_newp1p2b = {}


mma_rsp1p2_lsp1_p1p2a = minmaxavg()
mma_rsp1p2_lsnewp1_p1p2a = minmaxavg()
mma_rsp1p2_lsnewp2_p1p2a = minmaxavg()
mma_rsp1p2_div_lsnewp2_p1p2a = minmaxavg()
mma_rsp1p2_lsnewp1_newp1p2a = minmaxavg()
mma_rsp1p2_lsnewp2_newp1p2a = minmaxavg()

mma_rsp1p2_lsnewp1_p1p2b = minmaxavg()
mma_rsp1p2_lsnewp2_p1p2b = minmaxavg()
mma_rsp1p2_div_lsnewp2_p1p2b = minmaxavg()
mma_rsp1p2_lsnewp1_newp1p2b = minmaxavg()
mma_rsp1p2_lsnewp2_newp1p2b = minmaxavg()

mma_rsnewp1p2_lsnewp1_newp1p2a = minmaxavg()
mma_rsnewp1p2_lsnewp2_newp1p2a = minmaxavg()
mma_rsnewp1p2_div_lsnewp2_newp1p2a = minmaxavg()
mma_rsnewp1p2_lsnewp1_newp1p2b = minmaxavg()
mma_rsnewp1p2_lsnewp2_newp1p2b = minmaxavg()
mma_rsnewp1p2_div_lsnewp2_newp1p2b = minmaxavg()

str_sqrt_p1p2 = str(sqrt_p1p2)
str_sqrt_p1p2 = str_sqrt_p1p2[0:str_sqrt_p1p2.find(".")]
generate_primes(13)
generate_primes(13, min_log, max_log)


# 
# 13860658187287, 44038395018313
# 
log_points = []
log_points.append((30.006181636133306, 30.009476361191233, 30.011365775439582))
log_points.append((30.126744615006018, 30.1295778303441))
log_points.append((30.170729534716283, 30.17391246023876))
log_points.append((30.246442633888435, 30.24999677785281))
log_points.append((30.340027316899164, 30.343665260648592))
log_points.append((30.409878903873675, 30.413036501809785))
log_points.append((30.883205852734612, 30.888820168604767))
log_points.append((31.680359697580105, 31.680973243897323))
log_points.append((31.811833241339507, 31.817189469181468, 31.818961264964805, 31.824720663597766))
log_points.append((31.867574898227392, 31.871921625925207))
log_points.append((29.982292244018687, 29.984456168240808, 29.985614679267396, 29.986372851727875, 29.988604200864888, 29.989057922272423))
log_points.append((29.99679936822036, 29.99723976967141))
log_points.append((30.00701628877449, 30.01027072192703, 30.015812789180394))
log_points.append((30.030929828466864, 30.034587264857212))
log_points.append((30.070943376651492, 30.0721063624645))
log_points.append((30.57247113631629, 30.577637941623287, 30.582223674838456, 30.583730714881785))
log_points.append((30.601027029013228, 30.60421265061285, 30.604629753472956, 30.608760651026746))
log_points.append((30.617932585561483, 30.622119209418745, 30.625215270959142, 30.630123747561893))
log_points.append((30.64968076987701, 30.653810018594005, 30.655936483644883))
log_points.append((30.692612825491604, 30.69367763917068, 30.696291812353223, 30.698981387457536, 30.701572587858024, 30.701930430407614, 30.702634303558394, 30.705007996224353, 30.708983506236322))
log_points.append((30.71600361939353, 30.718784041826993, 30.719605826584946, 30.721294346851085))
log_points.append((30.814637416938858, 30.81609513912481, 30.816283424619094, 30.81850744058829, 30.821772755554253, 30.82537279344448, 30.831000944772406))
log_points.append((30.866749350504087, 30.868528512918026))
log_points.append((30.876923458167127, 30.877893937430798))
log_points.append((30.888869590561505, 30.892015823531526))
log_points.append((30.948791183197645, 30.949930050599992))
log_points.append((30.963304469788685, 30.965792553714905))
log_points.append((30.98092501951426, 30.9824799206375, 30.984046655591868, 30.988562880720792, 30.991623966874673, 30.99246482033029))
log_points.append((30.9996529290344, 31.002813357612084, 31.00398247659408))
log_points.append((31.011690977342244, 31.01466056142998, 31.0191006167636))
log_points.append((31.027609542301054, 31.028931110581887))
log_points.append((31.047217048580144, 31.050575446784713))
log_points.append((31.060331037716253, 31.061576890070743, 31.06598210046071, 31.06748034556389, 31.070028805131322))
log_points.append((31.09366471030981, 31.098390537976467))
log_points.append((31.107192325805798, 31.11005301183554))
log_points.append((31.138078730359165, 31.13966977529667, 31.142138489311762))
log_points.append((31.211665235102252, 31.212297861589946))
log_points.append((31.402869380132543, 31.405612424363675))
log_points.append((31.50500392026898, 31.507397972024588))
log_points.append((31.5546216466151, 31.55845778343663, 31.561131681937706, 31.562339720310764, 31.56474240108113))
log_points.append((31.571346900488, 31.571486021005505))
log_points.append((31.589849658115533, 31.593923021424434, 31.5953536992783))
log_points.append((31.601197343243633, 31.603186363495773))
log_points.append((31.632437076414206, 31.637115052695208))
log_points.append((31.647235235795517, 31.648431891964343, 31.649384159994106, 31.650312759932483, 31.651178938451103))
log_points.append((31.66135891978045, 31.66475833857161, 31.664852179801468, 31.667522761943935))
log_points.append((31.885319548604098, 31.889087514445816))


# 
# 17777242415791, 32443897622537
# 
log_points = []
log_points.append((29.957039043140625, 29.957079943298044, 29.96081282665765, 29.962846841711762))
log_points.append((29.97138548806567, 29.9765892288644))
log_points.append((30.299697047136792, 30.30424896416299))
log_points.append((30.29863575784357, 30.302288167073684))
log_points.append((30.49472040840873, 30.4990265623345))
log_points.append((30.555304531102777, 30.560673133638765, 30.561224767317043))
log_points.append((30.575457348828532, 30.579088880794117))
log_points.append((30.638270296066857, 30.64042221079712))
log_points.append((30.947529765682834, 30.95220297288727, 30.95647413786994, 30.95798873276421, 30.95957588723284))
log_points.append((30.999036860827566, 31.002184358224145, 31.004327923371854))
log_points.append((31.013864575267785, 31.01760708565776))
log_points.append((31.043513605698717, 31.04507139942614, 31.045357802500842, 31.048604517048712, 31.053693502165128, 31.058161031020006, 31.0636072034241))
log_points.append((31.08790314042484, 31.091795648688304))
log_points.append((31.141166779838443, 31.141836466183275))
log_points.append((31.190475274835464, 31.190645518339764))
log_points.append((31.319618004220697, 31.325210429798666))
log_points.append((31.410590149335412, 31.411153631575203, 31.416862093519086))
log_points.append((31.45409931401861, 31.45744763283018))
log_points.append((31.530332655846266, 31.534893263241294, 31.53572786507842))
log_points.append((31.57216728118011, 31.572873167147684, 31.575980585580297, 31.577742123763127, 31.580550839361674))
log_points.append((31.588127744614198, 31.593570387615237, 31.59533970314156))
log_points.append((31.62124108895765, 31.625554766092236, 31.628328865007123))
log_points.append((31.798442657251254, 31.80219821755969))
log_points.append((31.882762844164194, 31.88487696295223))
log_points.append((31.89683969414157, 31.898081079479326))


# 25437975264101, 25534248091031
# spikes
# true values are 30.867264262557846, 30.869152995971294, 30.87104172938474
log_points = []
log_points.append((30.018609946251807, 30.02044965143376))
log_points.append((30.05334141254131, 30.056902704337976, 30.060154770451028, 30.065734231461164))
log_points.append((30.174219943004307, 30.175275413048166))
log_points.append((30.460693202882513, 30.464506844463507))
log_points.append((30.496591057009578, 30.49843826913139))
log_points.append((30.62048879016802, 30.621254389294645, 30.627031065467943))
log_points.append((30.696750835000145, 30.697766913916887, 30.7003069960591, 30.702311542889138, 30.702587017915185))
log_points.append((30.723861253775098, 30.72855394189076))
log_points.append((30.92021425099886, 30.92342280452412))
log_points.append((31.00039035900107, 31.001752177809603))
log_points.append((31.035547524315206, 31.041162445548625))
log_points.append((31.07648784762361, 31.07886201107368, 31.079211101411737))
log_points.append((31.11505143204221, 31.11585019570438))
log_points.append((31.133430629587448, 31.138034391913816, 31.14031772737621, 31.142556172727257))
log_points.append((31.152382552966188, 31.155357037053125))
log_points.append((31.169187787230765, 31.16971761228882))
log_points.append((31.197461944369643, 31.199955341202845))
log_points.append((31.216435322237384, 31.21947610688246))
log_points.append((31.27690484316648, 31.278111962491117, 31.278790423058446))
log_points.append((31.447726161983784, 31.4482154785527))
log_points.append((31.486837821786143, 31.489392333912082))
log_points.append((31.517320129581048, 31.519030792747294))
log_points.append((31.56252877912696, 31.563625608335048))
log_points.append((31.61515029084168, 31.620712408974928))

# 25437975264101, 25534248091031
# crossovers
# true values are 30.867264262557846, 30.869152995971294, 30.87104172938474
# (30.726274926592808 + 30.918866031685493)/2 # 30.822570479139152
log_points = []
log_points.append((30.061533750668506))
log_points.append((30.46083689126695))
log_points.append((30.49721800449007))
log_points.append((30.620483363042997))
log_points.append((30.69417893243157, 30.6997078656751, 30.70045481622942))
log_points.append((30.721981258970235, 30.724418218658954, 30.726274926592808))
log_points.append((30.918866031685493))
log_points.append((31.00034615494269, 31.001184777682205))
log_points.append((31.042337474024354))
log_points.append((31.075553470018292, 31.07597709619999))
log_points.append((31.115686826641802, 31.11586503392497))
log_points.append((31.130454485916047))
log_points.append((31.15182274587182, 31.15355290490428, 31.155436180271387))
log_points.append((31.169925962094773))
log_points.append((31.198406930905627, 31.19952144875403, 31.200904441950478))
log_points.append((31.217179839225782, 31.217193721640832, 31.22053743209768))
log_points.append((31.27883342346088))
log_points.append((31.44800481518154))
log_points.append((31.48951436820579))
log_points.append((31.56297948708919))
log_points.append((31.615728220442733))

log_points = []
log_points.append(["rsp1p2_mod1_lsnewp1_p1p2b pos_spikes", [[30.581699721625718, 30.654644498707132], [30.86083795002577, 31.210051818247127]]])
log_points.append(["rsp1p2_mod1_lsnewp1_p1p2b neg_spikes", [[30.002973077633076, 30.64211547249739], [31.19218999421702, 31.26650034065512]]])
log_points.append(["rsp1p2_mod1_lsnewp2_p1p2b pos_spikes", [[30.070280117156866, 31.293063881756193], [31.305249207342136, 31.451613911969787], [31.49560112108257, 31.579011030996835]]])
log_points.append(["rsp1p2_mod1_lsnewp2_p1p2b neg_spikes", [[30.070280117156866, 31.238620418457902], [31.250184408002518, 31.414049746493642]]])
log_points.append(["rsp1p2_mod1_lsnewp1_newp1p2a pos_spikes", [[30.407485168055302, 30.482799285886816], [30.482799285886816, 31.26650034065512]]])
log_points.append(["rsp1p2_mod1_lsnewp1_newp1p2a neg_spikes", [[30.02914911159876, 30.102776261691382], [30.814661685464543, 31.26650034065512]]])
log_points.append(["rsp1p2_mod1_lsnewp1_newp1p2b pos_spikes", [[30.581699721625718, 30.654644498707132], [30.86083795002577, 31.210051818247127]]])
log_points.append(["rsp1p2_mod1_lsnewp1_newp1p2b neg_spikes", [[30.002973077633076, 30.30957166765058], [30.30957166765058, 30.62412414912074]]])

sum_ary = []
for ary in log_points:
    if len(ary) >= 3:
        sum_ary.append(sum(ary)/len(ary))
        print(str(sum_ary[-1]))

# 30.869152995971294
sum_ary.append((30.867264262557846 + 30.869152995971294 + 30.87104172938474)/3)

mods = []
for sa1 in range(1, len(sum_ary)):
    for sa2 in range(0, sa1):
        if sa1 != sa2:
            mods.append((str(sum_ary[sa1]) + " % " + str(sum_ary[sa2]), sum_ary[sa1] % sum_ary[sa2]))
            #print(str(mods[-1][0]))
            #print(mods[-1][1])

mods_divided = []
for m1 in range(1, len(mods)):
    for m2 in range(0, m1):
        if m1 != m2:
            if mods[m1][1]/mods[m2][1] not in [x[5] for x in mods_divided] and mods[m2][1]/mods[m1][1] not in [x[5] for x in mods_divided]:
                if mods[m1][1] > mods[m2][1]:
                    mods_divided.append((mods[m1][0], mods[m1][1], mods[m2][0], mods[m2][1], str(mods[m1][1]) + " / " + str(mods[m2][1]), mods[m1][1]/mods[m2][1]))
                    #print(str(mods_divided[-1][5]))
                    #print(mods_divided[-1][4])
                else:
                    mods_divided.append((mods[m1][0], mods[m1][1], mods[m2][0], mods[m2][1], str(mods[m2][1]) + " / " + str(mods[m1][1]), mods[m2][1]/mods[m1][1]))
                    #print(str(mods_divided[-1][5]))
                    #print(str(mods_divided[-1][4])


def print_mods_divided(md_ary, print_bar):
    print(str(md_ary[5]))
    print(md_ary[4])
    print(str(md_ary[3]))
    print(str(md_ary[2]))
    print(str(md_ary[1]))
    print(str(md_ary[0]))
    if print_bar:
        print("--------------------------------------")
        #      31.277935742905346 % 31.13858473040118


printed = []
for md1 in range(1, len(mods_divided)):
    for md2 in range(0, md1):
        if md1 != md2 and mods_divided[md1][5] % 1 == mods_divided[md2][5] % 1 and md1 not in printed and md2 not in printed:
            print("")
            for md3 in range(0, md1):
                if md1 != md3 and md2 != md3 and mods_divided[md1][5] % 1 == mods_divided[md3][5] % 1 and mods_divided[md2][5] % 1 == mods_divided[md3][5] % 1:
                    printed.append(md3)
                    print_mods_divided(mods_divided[md3], True)
            printed.append(md1)
            printed.append(md2)
            print_mods_divided(mods_divided[md2], True)
            print_mods_divided(mods_divided[md1], False)
            print("")


x = 740.8523566063558
(x % 31.238987740468971)/(x % 30.547636610655307) = 2.8999
(x % log(sqrt(p1p2)))/(x % log(p2)) = 2.9077

31.822983156957505 % 31.082805007095313 = 0.7401781498621922
31.082805007095313 % 30.342626857233117 = 0.7401781498621958
31.238987740468971 % 30.547636610655307 = 0.6913511298136648
0.7401781498621958 / 0.6913511298136648 = 1.0706255012003685 = 1 + 1/14.159191552679307

log(p1) 30.867264262557846
log(sqrt(p1p2)) 30.869152995971294
log(p2) 30.87104172938474
(x % 30.869152995971294)/(x % 30.87104172938474) = 2.9
(x % 30.869152995971294) = 2.9 * (x % 30.87104172938474)
30.87104172938474 % 30.869152995971294 = 0.0018887334134447542 = 1/529.4553444554975

x = 740
dx = 1000
while (x % 30.869152995971294)/(x % 30.87104172938474) < 2.9:
    x += dx
    if (x % 30.869152995971294)/(x % 30.87104172938474) > 2.9:
        x -= dx
        dx /= 2
        if dx < 2**-53:
            break


30.05903327969787
30.6229247483102
30.699944661156092
31.078186986703013
31.13858473040118
31.277935742905346

7.3213724578034345
0.5638914686123293 / 0.07701991284589127
0.5638914686123293
30.6229247483102 % 30.05903327969787
0.07701991284589127
30.699944661156092 % 30.6229247483102
--------------------------------------
8.321372457803434
0.6409113814582206 / 0.07701991284589127
0.6409113814582206
30.699944661156092 % 30.05903327969787
0.07701991284589127
30.699944661156092 % 30.6229247483102


5.910967976602937
0.45526223839281243 / 0.07701991284589127
0.07701991284589127
30.699944661156092 % 30.6229247483102
0.45526223839281243
31.078186986703013 % 30.6229247483102
--------------------------------------
4.910967976602937
0.37824232554692117 / 0.07701991284589127
0.07701991284589127
30.699944661156092 % 30.6229247483102
0.37824232554692117
31.078186986703013 % 30.699944661156092


1.6944464914958735
0.6409113814582206 / 0.37824232554692117
0.6409113814582206
30.699944661156092 % 30.05903327969787
0.37824232554692117
31.078186986703013 % 30.699944661156092
--------------------------------------
2.6944464914958735
1.0191537070051417 / 0.37824232554692117
1.0191537070051417
31.078186986703013 % 30.05903327969787
0.37824232554692117
31.078186986703013 % 30.699944661156092


1.0935335069550525
0.5638914686123293 / 0.5156599820909804
0.5638914686123293
30.6229247483102 % 30.05903327969787
0.5156599820909804
31.13858473040118 % 30.6229247483102
--------------------------------------
2.0935335069550525
1.0795514507033097 / 0.5156599820909804
1.0795514507033097
31.13858473040118 % 30.05903327969787
0.5156599820909804
31.13858473040118 % 30.6229247483102


6.695151461970124
0.5156599820909804 / 0.07701991284589127
0.07701991284589127
30.699944661156092 % 30.6229247483102
0.5156599820909804
31.13858473040118 % 30.6229247483102
--------------------------------------
5.695151461970124
0.43864006924508914 / 0.07701991284589127
0.07701991284589127
30.699944661156092 % 30.6229247483102
0.43864006924508914
31.13858473040118 % 30.699944661156092


1.4611327746716016
0.6409113814582206 / 0.43864006924508914
0.6409113814582206
30.699944661156092 % 30.05903327969787
0.43864006924508914
31.13858473040118 % 30.699944661156092
--------------------------------------
2.4611327746716016
1.0795514507033097 / 0.43864006924508914
1.0795514507033097
31.13858473040118 % 30.05903327969787
0.43864006924508914
31.13858473040118 % 30.699944661156092


16.8740360914518
1.0191537070051417 / 0.06039774369816797
1.0191537070051417
31.078186986703013 % 30.05903327969787
0.06039774369816797
31.13858473040118 % 31.078186986703013
--------------------------------------
17.8740360914518
1.0795514507033097 / 0.06039774369816797
1.0795514507033097
31.13858473040118 % 30.05903327969787
0.06039774369816797
31.13858473040118 % 31.078186986703013


6.262524100853031
0.37824232554692117 / 0.06039774369816797
0.37824232554692117
31.078186986703013 % 30.699944661156092
0.06039774369816797
31.13858473040118 % 31.078186986703013
--------------------------------------
7.262524100853031
0.43864006924508914 / 0.06039774369816797
0.43864006924508914
31.13858473040118 % 30.699944661156092
0.06039774369816797
31.13858473040118 % 31.078186986703013


1.108860329675923
0.6409113814582206 / 0.5779910817492535
0.6409113814582206
30.699944661156092 % 30.05903327969787
0.5779910817492535
31.277935742905346 % 30.699944661156092
--------------------------------------
2.108860329675923
1.218902463207474 / 0.5779910817492535
1.218902463207474
31.277935742905346 % 30.05903327969787
0.5779910817492535
31.277935742905346 % 30.699944661156092


5.102177987895986
1.0191537070051417 / 0.19974875620233234
1.0191537070051417
31.078186986703013 % 30.05903327969787
0.19974875620233234
31.277935742905346 % 31.078186986703013
--------------------------------------
6.102177987895986
1.218902463207474 / 0.19974875620233234
1.218902463207474
31.277935742905346 % 30.05903327969787
0.19974875620233234
31.277935742905346 % 31.078186986703013


2.2791743340402166
0.45526223839281243 / 0.19974875620233234
0.45526223839281243
31.078186986703013 % 30.6229247483102
0.19974875620233234
31.277935742905346 % 31.078186986703013
--------------------------------------
3.2791743340402166
0.6550109945951448 / 0.19974875620233234
0.6550109945951448
31.277935742905346 % 30.6229247483102
0.19974875620233234
31.277935742905346 % 31.078186986703013


3.307222157181201
0.19974875620233234 / 0.06039774369816797
0.06039774369816797
31.13858473040118 % 31.078186986703013
0.19974875620233234
31.277935742905346 % 31.078186986703013
--------------------------------------
2.307222157181201
0.13935101250416437 / 0.06039774369816797
0.06039774369816797
31.13858473040118 % 31.078186986703013
0.13935101250416437
31.277935742905346 % 31.13858473040118


3.147735071045722
0.43864006924508914 / 0.13935101250416437
0.43864006924508914
31.13858473040118 % 30.699944661156092
0.13935101250416437
31.277935742905346 % 31.13858473040118
--------------------------------------
4.147735071045722
0.5779910817492535 / 0.13935101250416437
0.5779910817492535
31.277935742905346 % 30.699944661156092
0.13935101250416437
31.277935742905346 % 31.13858473040118

1.9436699111444256 # 2 - 1/17.75250173249176 # 2 - 2/35.50500346498352
0.5638914686123293/0.290116889384943

2.290116889384943
0.5638914686123293 / 0.24622824766109375
0.5638914686123293
30.6229247483102 % 30.05903327969787
0.24622824766109375
30.869152995971294 % 30.6229247483102  # log(sqrt(p1p2)) % 30.6229247483102
--------------------------------------
2.7923907428860915
0.810119716273423/0.290116889384943

3.290116889384943
0.810119716273423 / 0.24622824766109375
0.810119716273423
30.869152995971294 % 30.05903327969787 # log(sqrt(p1p2)) % 30.05903327969787
0.24622824766109375
30.869152995971294 % 30.6229247483102  # log(sqrt(p1p2)) % 30.6229247483102

1.0224071972279625 # 1 + 1/44.62851778499433
47.07666765885961/(0.5*(61.1743378382382 + 30.915521831173137))
1.9787580546854657 # 2 - 1/47.07666765885961
61.1743378382382/30.915521831173137

1.0163467237298796 # 1 + 1/61.1743378382382
0.250253272800102/0.24622824766109375
1.250253272800102
0.24622824766109375/0.1969426939468306

1.0323462112482173 # 1 + 1/30.915521831173137
0.16920833481520248/0.1639065780176705
1.1639065780176705
0.1969426939468306/0.16920833481520248

1.0163467237298796 = 1 + 1/61.1743378382382
0.250253272800102/0.24622824766109375

1.250253272800102 = 1 + 1/3.9959517364585384
0.24622824766109375/0.1969426939468306

3.1969426939468306
0.24622824766109375 / 0.07701991284589127
0.07701991284589127
30.699944661156092 % 30.6229247483102
0.24622824766109375
30.869152995971294 % 30.6229247483102 # log(sqrt(p1p2)) % 30.6229247483102
--------------------------------------
1.1639065780176705 = 1 + 1/6.101036408021352
0.1969426939468306/0.16920833481520248

2.1969426939468306
0.16920833481520248 / 0.07701991284589127
0.07701991284589127
30.699944661156092 % 30.6229247483102
0.16920833481520248
30.869152995971294 % 30.699944661156092 # log(sqrt(p1p2)) % 30.699944661156092

1.0284547548217793 = 1 + 1/35.14351138371429
0.810119716273423/0.787705742498909

4.787705742498909
0.810119716273423 / 0.16920833481520248
0.810119716273423
30.869152995971294 % 30.05903327969787
0.16920833481520248
30.869152995971294 % 30.699944661156092 # log(sqrt(p1p2)) % 30.699944661156092
--------------------------------------
1.229040028446207 = 1 + 1/4.366049056070838
0.7877057424989093/0.6409113814582206

3.7877057424989093
0.6409113814582206 / 0.16920833481520248
0.6409113814582206
30.699944661156092 % 30.05903327969787
0.16920833481520248
30.869152995971294 % 30.699944661156092 # log(sqrt(p1p2)) % 30.699944661156092



15053428029503, 66152457549107
true value is 30.342626857233117

13860658187287, 44038395018313
true value is 30.260075596823018
log_points = []
log_points.append((30.18285195989194, 30.184155673445193))
log_points.append((30.430525650622766, 30.431258349754014, 30.434049879386215))
log_points.append((30.25917297886415, 30.2605276937453))

log_points.append((30.18285195989194 + mpmath.mpf('0.0763465196361585') * mpmath.mpf('1.25412096193883823353402'), 30.184155673445193 + mpmath.mpf('0.0763465196361585') * mpmath.mpf('1.25412096193883823353402')))
log_points.append((30.18285195989194 + mpmath.mpf('0.0763465196361585') * mpmath.mpf('3.25412096193883823353402'), 30.184155673445193 + mpmath.mpf('0.0763465196361585') * mpmath.mpf('3.25412096193883823353402')))
log_points.append((30.18285195989194 + 0.577 * mpmath.mpf('0.0763465196361585') * 1.23, 30.184155673445193 + 0.577 * mpmath.mpf('0.0763465196361585') * 1.23))
log_points.append((30.18285195989194 + 0.577 * mpmath.mpf('0.0763465196361585') * 3.23, 30.184155673445193 + 0.577 * mpmath.mpf('0.0763465196361585') * 3.23))

0.17209429028294/0.0763465196361585 = 2.2541209619388382335340210810705
0.2484408099190985/0.0763465196361585 = 3.2541209619388382335340210810705

0.17397428256319714/0.07591992337782472 = 2.2915497648409495
0.24989420594102185/0.07591992337782472 = 3.2915497648409495
426559250/186144441
(92122101*pi)/126294493

0.07591992337782472
30.260075596823018 - 30.184155673445193
0.17397428256319714
30.434049879386215 - 30.260075596823018
0.24989420594102185
30.434049879386215 - 30.184155673445193

0.0763465196361585
(30.25917297886415 + 30.2605276937453)/2 - (30.18285195989194 + 30.184155673445193)/2
0.17209429028294
(30.430525650622766 + 30.431258349754014 + 30.434049879386215)/3 - (30.25917297886415 + 30.2605276937453)/2
0.2484408099190985
(30.430525650622766 + 30.431258349754014 + 30.434049879386215)/3 - (30.18285195989194 + 30.184155673445193)/2


def check_vars(vars, newp1, newp2):
    # 
    # return True to continue loop, False to stop looping
    # 
    if mpmath.fmod(newp1, 1) != 0:
        return True
    if mpmath.fmod(newp2, 1) != 0:
        return True
    for v in range(0, len(vars)):
        if newp1 == vars[v][0] or newp2 == vars[v][1]:
            return True
    return False

def return_primes(it, min_log, max_log):
    it.skipto(int(math.exp(min_log + random.random() * (max_log - min_log))))
    newp1 = it.next_prime()
    it.skipto(int(p1p2[thisi]/newp1))
    newp2 = it.next_prime()
    newp1, newp2 = mpmath.mpf(newp1), mpmath.mpf(newp2)
    return newp1, newp2, mpmath.fmul(newp1, newp2)

str_sqrt_p1p2 = str(sqrt_p1p2)
min_log = math.log(int("1" + "5" * (len(str_sqrt_p1p2) - 1)), 2)
max_log = math.log(int("7" + "9" * (len(str_sqrt_p1p2) - 1)), 2)
min_log, max_log = 0.5 * mpmath.log(p1p2[thisi], 2) - 1.25, 0.5 * mpmath.log(p1p2[thisi], 2) + 1.65

# 
# must define class minmaxavg
# must define function generate_primes()
# 
# 
# doit([], min_log, max_log, 8192, 384, False)
# doit([], min_log, max_log, 8192, 384, True)
# doit(log_points, min_log, max_log, 8192, 384, False)
# 
def doit(log_points, min_log, max_log, num_new, prec, bfuzzy):
    
    global p1
    global p2
    global p1p2
    
    global sorted_vars_idx3
    global sorted_vars_idx4
    
    global vars
    
    global rsp1p2_mod_lsp1_p1p2a
    global rsp1p2_mod1_lsnewp1_p1p2a
    global rsp1p2_mod1_lsnewp2_p1p2a
    global rsp1p2_div_lsnewp2_p1p2a
    global rsp1p2_mod1_lsnewp1_newp1p2a
    global rsp1p2_mod1_lsnewp2_newp1p2a
    
    global rsp1p2_mod1_lsnewp1_p1p2b
    global rsp1p2_mod1_lsnewp2_p1p2b
    global rsp1p2_div_lsnewp2_p1p2b
    global rsp1p2_mod1_lsnewp1_newp1p2b
    global rsp1p2_mod1_lsnewp2_newp1p2b
    
    global rsnewp1p2_mod1_lsnewp1_newp1p2a
    global rsnewp1p2_mod1_lsnewp2_newp1p2a
    global rsnewp1p2_div_lsnewp2_newp1p2a
    global rsnewp1p2_mod1_lsnewp1_newp1p2b
    global rsnewp1p2_mod1_lsnewp2_newp1p2b
    global rsnewp1p2_div_lsnewp2_newp1p2b
    
    global rsp1p2_mod2_lsnewp1_p1p2a
    global rsp1p2_mod2_lsnewp2_p1p2a
    global rsp1p2_mod2_lsnewp1_newp1p2a
    global rsp1p2_mod2_lsnewp2_newp1p2a
    
    global rsp1p2_mod2_lsnewp1_p1p2b
    global rsp1p2_mod2_lsnewp2_p1p2b
    global rsp1p2_mod2_lsnewp1_newp1p2b
    global rsp1p2_mod2_lsnewp2_newp1p2b
    
    global rsnewp1p2_mod2_lsnewp1_newp1p2a
    global rsnewp1p2_mod2_lsnewp2_newp1p2a
    global rsnewp1p2_mod2_lsnewp1_newp1p2b
    global rsnewp1p2_mod2_lsnewp2_newp1p2b
    
    global mma_rsp1p2_lsp1_p1p2a
    global mma_rsp1p2_lsnewp1_p1p2a
    global mma_rsp1p2_lsnewp2_p1p2a
    global mma_rsp1p2_div_lsnewp2_p1p2a
    global mma_rsp1p2_lsnewp1_newp1p2a
    global mma_rsp1p2_lsnewp2_newp1p2a
    
    global mma_rsp1p2_lsnewp1_p1p2b
    global mma_rsp1p2_lsnewp2_p1p2b
    global mma_rsp1p2_div_lsnewp2_p1p2b
    global mma_rsp1p2_lsnewp1_newp1p2b
    global mma_rsp1p2_lsnewp2_newp1p2b
    
    global mma_rsnewp1p2_lsnewp1_newp1p2a
    global mma_rsnewp1p2_lsnewp2_newp1p2a
    global mma_rsnewp1p2_div_lsnewp2_newp1p2a
    global mma_rsnewp1p2_lsnewp1_newp1p2b
    global mma_rsnewp1p2_lsnewp2_newp1p2b
    global mma_rsnewp1p2_div_lsnewp2_newp1p2b
    
    global hsh_ary
    global mma_ary
    
    global sorted_vars_idx3
    global sorted_vars_idx4
    
    it = primesieve.Iterator()
    t1 = time.time()
    i = -1
    inumexceptions = 0
    while i < num_new and len(vars) < num_new:
        i += 1
        bloop = True
        iter = 0
        while bloop:
            iter += 1
            if iter > 6:
                print("too many iterations? " + str(iter))
                break
            try:
                if len(log_points) > 0:
                    ary_points = log_points[i % len(log_points)]
                    min_log = 31
                    max_log = 31
                    if (type(ary_points) is tuple or type(ary_points) is list) and len(ary_points) > 1:
                        if type(ary_points[0]) is float and type(ary_points[1]) is float:
                            for ap in range(0, len(ary_points) - 1, 2):
                                if bfuzzy:
                                    #min_log = min(ary_points) - (mpmath.fsum(ary_points)/len(ary_points) - min(ary_points))/1.125
                                    #max_log = max(ary_points) + (max(ary_points) - mpmath.fsum(ary_points)/len(ary_points))/1.125
                                    #stdev = (max(ary_points) + min(ary_points))/2 - mpmath.fsum(ary_points)/len(ary_points)
                                    adj_min, adj_max = 0.99999, 1.00001
                                    if max(ary_points) - min(ary_points) > 0.0101:
                                        adj_min, adj_max = 1.000012 * (1000.01515 + max(ary_points) - min(ary_points))/1000.01515, 0.999998 * (1000.01515 + max(ary_points) - min(ary_points))/1000.01515
                                    newp1, newp2, newp1p2 = return_primes(it, adj_min * min(ary_points), adj_max * max(ary_points))
                                else:
                                    newp1, newp2, newp1p2 = return_primes(it, ary_points[ap], ary_points[ap + 1])
                                bloop = check_vars(vars, newp1, newp2)
                                vars.append((newp1, newp2, newp1p2, mpmath.log(newp1), mpmath.log(newp2), mpmath.log(newp1p2)))
                                if newp1p2 == p1p2[thisi]:
                                    print("Found factorization " + str(int(newp1)) + " * " + str(int(newp1)))
                                    break
                        else:
                            for pair in ary_points[1]:
                                #min_log = min(ary_points) - (mpmath.fsum(ary_points)/len(ary_points) - min(ary_points))/1.125
                                #max_log = max(ary_points) + (max(ary_points) - mpmath.fsum(ary_points)/len(ary_points))/1.125
                                newp1, newp2, newp1p2 = return_primes(it, pair[0], pair[1])
                                bloop = check_vars(vars, newp1, newp2)
                                vars.append((newp1, newp2, newp1p2, mpmath.log(newp1), mpmath.log(newp2), mpmath.log(newp1p2)))
                                if newp1p2 == p1p2[thisi]:
                                    print("Found factorization " + str(int(newp1)) + " * " + str(int(newp1)))
                                    break
                    else:
                        newp1, newp2, newp1p2 = return_primes(it, float(ary_points) - 0.0025, float(ary_points) + 0.0025)
                        bloop = check_vars(vars, newp1, newp2)
                        vars.append((newp1, newp2, newp1p2, mpmath.log(newp1), mpmath.log(newp2), mpmath.log(newp1p2)))
                        if newp1p2 == p1p2[thisi]:
                            print("Found factorization " + str(int(newp1)) + " * " + str(int(newp1)))
                            break
                else:
                    newp1, newp2 = generate_primes(13, min_log, max_log)
                    newp1, newp2, newp1p2 = mpmath.mpf(newp1), mpmath.mpf(newp2), mpmath.fmul(newp1, newp2)
                    bloop = check_vars(vars, newp1, newp2)
                    vars.append((newp1, newp2, newp1p2, mpmath.log(newp1), mpmath.log(newp2), mpmath.log(newp1p2)))
                    if newp1p2 == p1p2[thisi]:
                        print("Found factorization " + str(int(newp1)) + " * " + str(int(newp1)))
                        break
            except NameError as ne:
                inumexceptions += 1
                print("NameError " + str(ne))
                bloop = False
                if inumexceptions > 10:
                    print("Too many excecptions " + str(ex))
                    return
                break
            except Exception as ex:
                inumexceptions += 1
                if inumexceptions > 10:
                    print("Too many excecptions " + str(ex))
                    return
                pass
    
    
    ls1a = lambda p1, p1p2: (1 + mpmath.fdiv(1, 2*p1)) * (mpmath.log(p1 + 1) - mpmath.log(p1)) + (1 + mpmath.fdiv(p1, 2*p1p2)) * (mpmath.log(p1p2 + p1)) - (mpmath.fdiv(p1, 2*p1p2)) * mpmath.log(p1p2)
    rs12a = lambda p1p2 : (2 + mpmath.fdiv(1, p1p2)) * mpmath.log(p1p2 + 1) - (mpmath.fdiv(1, p1p2) - 1) * mpmath.log(p1p2)
    
    ls1b = lambda p1, p1p2, n: mpmath.fdiv(1, mpmath.fdiv(1, mpmath.log(1 + mpmath.fdiv(mpmath.log(p1), n)) - 0.5)) + mpmath.fdiv(1, mpmath.fdiv(1, mpmath.log(1 + mpmath.fdiv(mpmath.log(p1/p1p2), n)) - 0.5))
    rs12b = lambda p1p2, n: mpmath.fdiv(1, mpmath.fdiv(1, mpmath.log(1 + mpmath.fdiv(mpmath.log(p1p2), n)) - 0.5))
    
    mpmath.mp.prec = prec
    log2 = 4 * (mpmath.log(p1p2[thisi], 2) - 1)
    # global_n = int(mpmath.power(2, 0.125 * (mpmath.ceil(log2) if log2 % 1 > 0.5 else mpmath.floor(log2))))
    global_n = mpmath.power(2, best_n(p1p2[thisi])[0])
    global_n = mpmath.floor(global_n) if mpmath.fmod(global_n, 1) < 0.5 else mpmath.ceil(global_n)
    for v in range(0, len(vars)):
        newp1, newp2, newp1p2 = vars[v][0], vars[v][1], vars[v][2]
        log2 = 16 * (mpmath.log(newp1p2, 2) - 1)
        local_n = int(mpmath.power(2, 0.03125 * (mpmath.ceil(log2) if log2 % 1 > 0.5 else mpmath.floor(log2))))
        
        rsp1p2_mod_lsp1_p1p2a[newp1p2] = rs12a(p1p2[thisi]) % ls1a(p1[thisi], p1p2[thisi])
        rsp1p2_mod1_lsnewp1_p1p2a[newp1p2] = rs12a(p1p2[thisi]) % ls1a(newp1, p1p2[thisi])
        rsp1p2_mod1_lsnewp2_p1p2a[newp1p2] = rs12a(p1p2[thisi]) % ls1a(mpmath.fdiv(p1p2[thisi], newp2), p1p2[thisi])
        rsp1p2_div_lsnewp2_p1p2a[newp1p2] = rs12a(p1p2[thisi]) / ls1a(mpmath.fdiv(p1p2[thisi], newp2), p1p2[thisi])
        rsp1p2_mod1_lsnewp1_newp1p2a[newp1p2] = rs12a(p1p2[thisi]) % ls1a(newp1, newp1p2)
        rsp1p2_mod1_lsnewp2_newp1p2a[newp1p2] = rs12a(p1p2[thisi]) % ls1a(newp2, newp1p2)
        
        rsp1p2_mod1_lsnewp1_p1p2b[newp1p2] = rs12b(p1p2[thisi], local_n) % ls1b(newp1, p1p2[thisi], local_n)
        rsp1p2_mod1_lsnewp2_p1p2b[newp1p2] = rs12b(p1p2[thisi], local_n) % ls1b(newp2, p1p2[thisi], local_n)
        rsp1p2_div_lsnewp2_p1p2b[newp1p2] = rs12b(p1p2[thisi], local_n) / ls1b(newp2, p1p2[thisi], local_n)
        rsp1p2_mod1_lsnewp1_newp1p2b[newp1p2] = rs12b(p1p2[thisi], local_n) % ls1b(newp1, newp1p2, local_n)
        rsp1p2_mod1_lsnewp2_newp1p2b[newp1p2] = rs12b(p1p2[thisi], local_n) % ls1b(newp2, newp1p2, local_n)
        
        rsnewp1p2_mod1_lsnewp1_newp1p2a[newp1p2] = rs12a(newp1p2) % ls1a(newp1, newp1p2)
        rsnewp1p2_mod1_lsnewp2_newp1p2a[newp1p2] = rs12a(newp1p2) % ls1a(newp2, newp1p2)
        rsnewp1p2_div_lsnewp2_newp1p2a[newp1p2] = rs12a(newp1p2) / ls1a(newp2, newp1p2)
        rsnewp1p2_mod1_lsnewp1_newp1p2b[newp1p2] = rs12b(newp1p2, global_n) % ls1b(newp1, newp1p2, global_n)
        rsnewp1p2_mod1_lsnewp2_newp1p2b[newp1p2] = rs12b(newp1p2, global_n) % ls1b(newp2, newp1p2, global_n)
        rsnewp1p2_div_lsnewp2_newp1p2b[newp1p2] = rs12b(newp1p2, global_n) / ls1b(newp2, newp1p2, global_n)
        
        mma_rsp1p2_lsp1_p1p2a.set(rsp1p2_mod_lsp1_p1p2a[newp1p2])
        mma_rsp1p2_lsnewp1_p1p2a.set(rsp1p2_mod1_lsnewp1_p1p2a[newp1p2])
        mma_rsp1p2_lsnewp2_p1p2a.set(rsp1p2_mod1_lsnewp2_p1p2a[newp1p2])
        mma_rsp1p2_div_lsnewp2_p1p2a.set(rsp1p2_div_lsnewp2_p1p2a[newp1p2])
        mma_rsp1p2_lsnewp1_newp1p2a.set(rsp1p2_mod1_lsnewp1_newp1p2a[newp1p2])
        mma_rsp1p2_lsnewp2_newp1p2a.set(rsp1p2_mod1_lsnewp2_newp1p2a[newp1p2])
        
        mma_rsp1p2_lsnewp1_p1p2b.set(rsp1p2_mod1_lsnewp1_p1p2b[newp1p2])
        mma_rsp1p2_lsnewp2_p1p2b.set(rsp1p2_mod1_lsnewp2_p1p2b[newp1p2])
        mma_rsp1p2_div_lsnewp2_p1p2b.set(rsp1p2_div_lsnewp2_p1p2b[newp1p2])
        mma_rsp1p2_lsnewp1_newp1p2b.set(rsp1p2_mod1_lsnewp1_newp1p2b[newp1p2])
        mma_rsp1p2_lsnewp2_newp1p2b.set(rsp1p2_mod1_lsnewp2_newp1p2b[newp1p2])
        
        mma_rsnewp1p2_lsnewp1_newp1p2a.set(rsnewp1p2_mod1_lsnewp1_newp1p2a[newp1p2])
        mma_rsnewp1p2_lsnewp2_newp1p2a.set(rsnewp1p2_mod1_lsnewp2_newp1p2a[newp1p2])
        mma_rsnewp1p2_div_lsnewp2_newp1p2a.set(rsnewp1p2_div_lsnewp2_newp1p2a[newp1p2])
        mma_rsnewp1p2_lsnewp1_newp1p2b.set(rsnewp1p2_mod1_lsnewp1_newp1p2b[newp1p2])
        mma_rsnewp1p2_lsnewp2_newp1p2b.set(rsnewp1p2_mod1_lsnewp2_newp1p2b[newp1p2])
        mma_rsnewp1p2_div_lsnewp2_newp1p2b.set(rsnewp1p2_div_lsnewp2_newp1p2b[newp1p2])
    
    idx = 3
    vars_copy_sorted = sorted([ary[idx] for ary in vars])
    sorted_vars_idx3 = []
    for vcs in range(0, len(vars_copy_sorted)):
        minary = []
        for ary in vars:
            if ary[idx] == vars_copy_sorted[vcs]:
                minary = ary
                break
        sorted_vars_idx3.append(minary)
    
    idx = 4
    vars_copy_sorted = sorted([ary[idx] for ary in vars])
    sorted_vars_idx4 = []
    for vcs in range(0, len(vars_copy_sorted)):
        minary = []
        for ary in vars:
            if ary[idx] == vars_copy_sorted[vcs]:
                minary = ary
                break
        sorted_vars_idx4.append(minary)
    
    hsh_ary = [rsp1p2_mod_lsp1_p1p2a, rsp1p2_mod1_lsnewp1_p1p2a, rsp1p2_mod1_lsnewp2_p1p2a, rsp1p2_div_lsnewp2_p1p2a,     rsp1p2_mod1_lsnewp1_newp1p2a, rsp1p2_mod1_lsnewp2_newp1p2a, rsp1p2_mod1_lsnewp1_p1p2b, rsp1p2_mod1_lsnewp2_p1p2b, rsp1p2_div_lsnewp2_p1p2b,     rsp1p2_mod1_lsnewp1_newp1p2b, rsp1p2_mod1_lsnewp2_newp1p2b, rsnewp1p2_mod1_lsnewp1_newp1p2a, rsnewp1p2_mod1_lsnewp2_newp1p2a, rsnewp1p2_div_lsnewp2_newp1p2a,     rsnewp1p2_mod1_lsnewp1_newp1p2b, rsnewp1p2_mod1_lsnewp2_newp1p2b, rsnewp1p2_div_lsnewp2_newp1p2b]
    mma_ary = [mma_rsp1p2_lsp1_p1p2a, mma_rsp1p2_lsnewp1_p1p2a,  mma_rsp1p2_lsnewp2_p1p2a,  mma_rsp1p2_div_lsnewp2_p1p2a, mma_rsp1p2_lsnewp1_newp1p2a,  mma_rsp1p2_lsnewp2_newp1p2a,  mma_rsp1p2_lsnewp1_p1p2b,  mma_rsp1p2_lsnewp2_p1p2b,  mma_rsp1p2_div_lsnewp2_p1p2b, mma_rsp1p2_lsnewp1_newp1p2b,  mma_rsp1p2_lsnewp2_newp1p2b,  mma_rsnewp1p2_lsnewp1_newp1p2a,  mma_rsnewp1p2_lsnewp2_newp1p2a,  mma_rsnewp1p2_div_lsnewp2_newp1p2a, mma_rsnewp1p2_lsnewp1_newp1p2b,  mma_rsnewp1p2_lsnewp2_newp1p2b,  mma_rsnewp1p2_div_lsnewp2_newp1p2b]
    
    # 6, 7, 9, 10
    #mma_ary[6].neg_range
    #min([x for x in hsh_ary[6].values()])
    #max([x for x in hsh_ary[6].values()])
    #min([x for x in rsp1p2_mod1_lsnewp1_p1p2b.values()])
    #max([x for x in rsp1p2_mod1_lsnewp1_p1p2b.values()])
    
    icount = 0
    for ha in range(0, len(hsh_ary)):
        lenall = len(hsh_ary[ha])
        lenpos = len([hsh_ary[ha][x] for x in hsh_ary[ha].keys() if hsh_ary[ha][x] >= mpmath.mpf(0)])
        lenneg = len([hsh_ary[ha][x] for x in hsh_ary[ha].keys() if hsh_ary[ha][x] <= mpmath.mpf(0)])
        if lenall == lenpos and mma_ary[ha].pos_range > mpmath.mpf(0):
            icount += 1
            for key in hsh_ary[ha].keys():
                hsh_ary[ha][key] = mpmath.fdiv(mpmath.fsub(hsh_ary[ha][key], mma_ary[ha].min_pos), mma_ary[ha].pos_range)
        elif lenall == lenneg and mma_ary[ha].neg_range > mpmath.mpf(0):
            icount += 1
            for key in hsh_ary[ha].keys():
                hsh_ary[ha][key] = mpmath.fdiv(mpmath.fsub(hsh_ary[ha][key], mma_ary[ha].min_neg), mma_ary[ha].neg_range)
        else:
            print("pos_range for ha " + str(ha) + ", " + str(mma_ary[ha].pos_range))
            print("neg_range for ha " + str(ha) + ", " + str(mma_ary[ha].neg_range))
            print("lenall for ha " + str(ha) + ", " + str(lenall))
            print("lenpos for ha " + str(ha) + ", " + str(lenpos))
            print("lenneg for ha " + str(ha) + ", " + str(lenneg))
    
    #len(rsp1p2_mod2_lsnewp1_p1p2a)
    for smod2 in "rsp1p2_mod2_lsnewp1_p1p2a, rsp1p2_mod2_lsnewp2_p1p2a, rsp1p2_mod2_lsnewp1_newp1p2a, rsp1p2_mod2_lsnewp2_newp1p2a, rsp1p2_mod2_lsnewp1_p1p2b, rsp1p2_mod2_lsnewp2_p1p2b, rsp1p2_mod2_lsnewp1_newp1p2b, rsp1p2_mod2_lsnewp2_newp1p2b, rsnewp1p2_mod2_lsnewp1_newp1p2a, rsnewp1p2_mod2_lsnewp2_newp1p2a, rsnewp1p2_mod2_lsnewp1_newp1p2b, rsnewp1p2_mod2_lsnewp2_newp1p2b".split(", "):
        omod2 = eval(smod2)
        omod1 = eval(smod2.replace("_mod2_", "_mod1_"))
        for k in omod1.keys():
            omod2[k] = 1 - omod1[k]
    
    t2 = time.time()
    #  512 in 0.54 minutes
    # 2048 in 1.77 minutes
    # 8192 in 9.94-11.36 minutes with 384 bits precision
    print(str(len(vars)) + " rows in " + str(round((t2 - t1)/60, 2)) + " minutes")



f = open("C:\\Users\\djaxl\\OneDrive\\Desktop\\Python\\13860658187287x44038395018313.1.bin", "wb")
f = open("C:\\Users\\djaxl\\OneDrive\\Desktop\\Python\\13860658187287x44038395018313.2.bin", "wb")
pickle.dump(([vars, sorted_vars_idx3, sorted_vars_idx4], [rsp1p2_mod_ls1p1_p1p2, rsp1p2_mod_ls1newp1_p1p2, rsp1p2_mod_ls1newp2_p1p2, rsp1p2_div_ls1newp2_p1p2,     rsp1p2_mod_ls1newp1_newp1p2, rsp1p2_mod_ls1newp2_newp1p2, rsp1p2_mod_ls2newp1_p1p2, rsp1p2_mod_ls2newp2_p1p2, rsp1p2_div_ls2newp2_p1p2,     rsp1p2_mod_ls2newp1_newp1p2, rsp1p2_mod_ls2newp2_newp1p2, rsnewp1p2_mod_ls1newp1_newp1p2, rsnewp1p2_mod_ls1newp2_newp1p2, rsnewp1p2_div_ls1newp2_newp1p2,     rsnewp1p2_mod_ls2newp1_newp1p2, rsnewp1p2_mod_ls2newp2_newp1p2, rsnewp1p2_div_ls2newp2_newp1p2], [mma_rsp1p2_ls1p1_p1p2, mma_rsp1p2_ls1newp1_p1p2, mma_rsp1p2_ls1newp2_p1p2, mma_rsp1p2_div_ls1newp2_p1p2, mma_rsp1p2_ls1newp1_newp1p2, mma_rsp1p2_ls1newp2_newp1p2, mma_rsp1p2_ls2newp1_p1p2, mma_rsp1p2_ls2newp2_p1p2, mma_rsp1p2_div_ls2newp2_p1p2, mma_rsp1p2_ls2newp1_newp1p2, mma_rsp1p2_ls2newp2_newp1p2, mma_rsnewp1p2_ls1newp1_newp1p2, mma_rsnewp1p2_ls1newp2_newp1p2, mma_rsnewp1p2_div_ls1newp2_newp1p2, mma_rsnewp1p2_ls2newp1_newp1p2, mma_rsnewp1p2_ls2newp2_newp1p2, mma_rsnewp1p2_div_ls2newp2_newp1p2]), f)
f.close()

f = open("C:\\Users\\djaxl\\OneDrive\\Desktop\\Python\\25437975264101x25534248091031.1.bin", "wb")
f = open("C:\\Users\\djaxl\\OneDrive\\Desktop\\Python\\25437975264101x25534248091031.2.bin", "wb")
f = open("C:\\Users\\djaxl\\OneDrive\\Desktop\\Python\\25437975264101x25534248091031.3.bin", "wb")
f = open("C:\\Users\\djaxl\\OneDrive\\Desktop\\Python\\9484021274029x24953208848681.1.bin", "wb")
pickle.dump(([vars, sorted_vars_idx3, sorted_vars_idx4], [rsp1p2_mod_lsp1_p1p2a, rsp1p2_mod1_lsnewp1_p1p2a, rsp1p2_mod1_lsnewp2_p1p2a, rsp1p2_div_lsnewp2_p1p2a,     rsp1p2_mod1_lsnewp1_newp1p2a, rsp1p2_mod1_lsnewp2_newp1p2a, rsp1p2_mod1_lsnewp1_p1p2b, rsp1p2_mod1_lsnewp2_p1p2b, rsp1p2_div_lsnewp2_p1p2b,     rsp1p2_mod1_lsnewp1_newp1p2b, rsp1p2_mod1_lsnewp2_newp1p2b, rsnewp1p2_mod1_lsnewp1_newp1p2a, rsnewp1p2_mod1_lsnewp2_newp1p2a, rsnewp1p2_div_lsnewp2_newp1p2a,     rsnewp1p2_mod1_lsnewp1_newp1p2b, rsnewp1p2_mod1_lsnewp2_newp1p2b, rsnewp1p2_div_lsnewp2_newp1p2b], [mma_rsp1p2_lsp1_p1p2a, mma_rsp1p2_lsnewp1_p1p2a, mma_rsp1p2_lsnewp2_p1p2a, mma_rsp1p2_div_lsnewp2_p1p2a, mma_rsp1p2_lsnewp1_newp1p2a, mma_rsp1p2_lsnewp2_newp1p2a, mma_rsp1p2_lsnewp1_p1p2b, mma_rsp1p2_lsnewp2_p1p2b, mma_rsp1p2_div_lsnewp2_p1p2b, mma_rsp1p2_lsnewp1_newp1p2b, mma_rsp1p2_lsnewp2_newp1p2b, mma_rsnewp1p2_lsnewp1_newp1p2a, mma_rsnewp1p2_lsnewp2_newp1p2a, mma_rsnewp1p2_div_lsnewp2_newp1p2a, mma_rsnewp1p2_lsnewp1_newp1p2b, mma_rsnewp1p2_lsnewp2_newp1p2b, mma_rsnewp1p2_div_lsnewp2_newp1p2b]), f)
f.close()

f = open("C:\\Users\\djaxl\\OneDrive\\Desktop\\Python\\17777242415791x32443897622537.1.bin", "wb")
f = open("C:\\Users\\djaxl\\OneDrive\\Desktop\\Python\\13860658187287x44038395018313.1.bin", "wb")
pickle.dump(([log_points], [vars, sorted_vars_idx3, sorted_vars_idx4], [rsp1p2_mod_lsp1_p1p2a, rsp1p2_mod1_lsnewp1_p1p2a, rsp1p2_mod1_lsnewp2_p1p2a, rsp1p2_div_lsnewp2_p1p2a,     rsp1p2_mod1_lsnewp1_newp1p2a, rsp1p2_mod1_lsnewp2_newp1p2a, rsp1p2_mod1_lsnewp1_p1p2b, rsp1p2_mod1_lsnewp2_p1p2b, rsp1p2_div_lsnewp2_p1p2b,     rsp1p2_mod1_lsnewp1_newp1p2b, rsp1p2_mod1_lsnewp2_newp1p2b, rsnewp1p2_mod1_lsnewp1_newp1p2a, rsnewp1p2_mod1_lsnewp2_newp1p2a, rsnewp1p2_div_lsnewp2_newp1p2a,     rsnewp1p2_mod1_lsnewp1_newp1p2b, rsnewp1p2_mod1_lsnewp2_newp1p2b, rsnewp1p2_div_lsnewp2_newp1p2b], [mma_rsp1p2_lsp1_p1p2a, mma_rsp1p2_lsnewp1_p1p2a, mma_rsp1p2_lsnewp2_p1p2a, mma_rsp1p2_div_lsnewp2_p1p2a, mma_rsp1p2_lsnewp1_newp1p2a, mma_rsp1p2_lsnewp2_newp1p2a, mma_rsp1p2_lsnewp1_p1p2b, mma_rsp1p2_lsnewp2_p1p2b, mma_rsp1p2_div_lsnewp2_p1p2b, mma_rsp1p2_lsnewp1_newp1p2b, mma_rsp1p2_lsnewp2_newp1p2b, mma_rsnewp1p2_lsnewp1_newp1p2a, mma_rsnewp1p2_lsnewp2_newp1p2a, mma_rsnewp1p2_div_lsnewp2_newp1p2a, mma_rsnewp1p2_lsnewp1_newp1p2b, mma_rsnewp1p2_lsnewp2_newp1p2b, mma_rsnewp1p2_div_lsnewp2_newp1p2b]), f)
f.close()

f = open("C:\\Users\\djaxl\\OneDrive\\Desktop\\Python\\17777242415791x32443897622537.2.bin", "wb")
pickle.dump(([plot_x, plot_y, true_x, freqs], [vars, sorted_vars_idx3, sorted_vars_idx4], [rsp1p2_mod_lsp1_p1p2a, rsp1p2_mod1_lsnewp1_p1p2a, rsp1p2_mod1_lsnewp2_p1p2a, rsp1p2_div_lsnewp2_p1p2a,     rsp1p2_mod1_lsnewp1_newp1p2a, rsp1p2_mod1_lsnewp2_newp1p2a, rsp1p2_mod1_lsnewp1_p1p2b, rsp1p2_mod1_lsnewp2_p1p2b, rsp1p2_div_lsnewp2_p1p2b,     rsp1p2_mod1_lsnewp1_newp1p2b, rsp1p2_mod1_lsnewp2_newp1p2b, rsnewp1p2_mod1_lsnewp1_newp1p2a, rsnewp1p2_mod1_lsnewp2_newp1p2a, rsnewp1p2_div_lsnewp2_newp1p2a,     rsnewp1p2_mod1_lsnewp1_newp1p2b, rsnewp1p2_mod1_lsnewp2_newp1p2b, rsnewp1p2_div_lsnewp2_newp1p2b], [mma_rsp1p2_lsp1_p1p2a, mma_rsp1p2_lsnewp1_p1p2a, mma_rsp1p2_lsnewp2_p1p2a, mma_rsp1p2_div_lsnewp2_p1p2a, mma_rsp1p2_lsnewp1_newp1p2a, mma_rsp1p2_lsnewp2_newp1p2a, mma_rsp1p2_lsnewp1_p1p2b, mma_rsp1p2_lsnewp2_p1p2b, mma_rsp1p2_div_lsnewp2_p1p2b, mma_rsp1p2_lsnewp1_newp1p2b, mma_rsp1p2_lsnewp2_newp1p2b, mma_rsnewp1p2_lsnewp1_newp1p2a, mma_rsnewp1p2_lsnewp2_newp1p2a, mma_rsnewp1p2_div_lsnewp2_newp1p2a, mma_rsnewp1p2_lsnewp1_newp1p2b, mma_rsnewp1p2_lsnewp2_newp1p2b, mma_rsnewp1p2_div_lsnewp2_newp1p2b]), f)
f.close()

f = open("C:\\Users\\djaxl\\OneDrive\\Desktop\\Python\\13860658187287x44038395018313.2.bin", "wb")
pickle.dump(([log_points, plot_x, plot_y, true_x, min_freqs, max_freqs, dists, dists1, lines], [vars, sorted_vars_idx3, sorted_vars_idx4], [rsp1p2_mod_lsp1_p1p2a, rsp1p2_mod1_lsnewp1_p1p2a, rsp1p2_mod1_lsnewp2_p1p2a, rsp1p2_div_lsnewp2_p1p2a,     rsp1p2_mod1_lsnewp1_newp1p2a, rsp1p2_mod1_lsnewp2_newp1p2a, rsp1p2_mod1_lsnewp1_p1p2b, rsp1p2_mod1_lsnewp2_p1p2b, rsp1p2_div_lsnewp2_p1p2b,     rsp1p2_mod1_lsnewp1_newp1p2b, rsp1p2_mod1_lsnewp2_newp1p2b, rsnewp1p2_mod1_lsnewp1_newp1p2a, rsnewp1p2_mod1_lsnewp2_newp1p2a, rsnewp1p2_div_lsnewp2_newp1p2a,     rsnewp1p2_mod1_lsnewp1_newp1p2b, rsnewp1p2_mod1_lsnewp2_newp1p2b, rsnewp1p2_div_lsnewp2_newp1p2b], [mma_rsp1p2_lsp1_p1p2a, mma_rsp1p2_lsnewp1_p1p2a, mma_rsp1p2_lsnewp2_p1p2a, mma_rsp1p2_div_lsnewp2_p1p2a, mma_rsp1p2_lsnewp1_newp1p2a, mma_rsp1p2_lsnewp2_newp1p2a, mma_rsp1p2_lsnewp1_p1p2b, mma_rsp1p2_lsnewp2_p1p2b, mma_rsp1p2_div_lsnewp2_p1p2b, mma_rsp1p2_lsnewp1_newp1p2b, mma_rsp1p2_lsnewp2_newp1p2b, mma_rsnewp1p2_lsnewp1_newp1p2a, mma_rsnewp1p2_lsnewp2_newp1p2a, mma_rsnewp1p2_div_lsnewp2_newp1p2a, mma_rsnewp1p2_lsnewp1_newp1p2b, mma_rsnewp1p2_lsnewp2_newp1p2b, mma_rsnewp1p2_div_lsnewp2_newp1p2b]), f)
f.close()

f = open("C:\\Users\\djaxl\\OneDrive\\Desktop\\Python\\25437975264101x25534248091031.4.bin", "wb")
pickle.dump(([plot_x, plot_y, plot_xf, freqs], [vars, sorted_vars_idx3, sorted_vars_idx4], [rsp1p2_mod_lsp1_p1p2a, rsp1p2_mod1_lsnewp1_p1p2a, rsp1p2_mod1_lsnewp2_p1p2a, rsp1p2_div_lsnewp2_p1p2a,     rsp1p2_mod1_lsnewp1_newp1p2a, rsp1p2_mod1_lsnewp2_newp1p2a, rsp1p2_mod1_lsnewp1_p1p2b, rsp1p2_mod1_lsnewp2_p1p2b, rsp1p2_div_lsnewp2_p1p2b,     rsp1p2_mod1_lsnewp1_newp1p2b, rsp1p2_mod1_lsnewp2_newp1p2b, rsnewp1p2_mod1_lsnewp1_newp1p2a, rsnewp1p2_mod1_lsnewp2_newp1p2a, rsnewp1p2_div_lsnewp2_newp1p2a,     rsnewp1p2_mod1_lsnewp1_newp1p2b, rsnewp1p2_mod1_lsnewp2_newp1p2b, rsnewp1p2_div_lsnewp2_newp1p2b], [mma_rsp1p2_lsp1_p1p2a, mma_rsp1p2_lsnewp1_p1p2a, mma_rsp1p2_lsnewp2_p1p2a, mma_rsp1p2_div_lsnewp2_p1p2a, mma_rsp1p2_lsnewp1_newp1p2a, mma_rsp1p2_lsnewp2_newp1p2a, mma_rsp1p2_lsnewp1_p1p2b, mma_rsp1p2_lsnewp2_p1p2b, mma_rsp1p2_div_lsnewp2_p1p2b, mma_rsp1p2_lsnewp1_newp1p2b, mma_rsp1p2_lsnewp2_newp1p2b, mma_rsnewp1p2_lsnewp1_newp1p2a, mma_rsnewp1p2_lsnewp2_newp1p2a, mma_rsnewp1p2_div_lsnewp2_newp1p2a, mma_rsnewp1p2_lsnewp1_newp1p2b, mma_rsnewp1p2_lsnewp2_newp1p2b, mma_rsnewp1p2_div_lsnewp2_newp1p2b]), f)
f.close()

f = open("C:\\Users\\djaxl\\OneDrive\\Desktop\\Python\\log.points.25437975264101x25534248091031.bin", "wb")
pickle.dump((log_points, mods_divided), f)
f.close()

f = open("C:\\Users\\djaxl\\OneDrive\\Desktop\\Python\\25437975264101x25534248091031.2.bin", "rb")
[vars, sorted_vars_idx3, sorted_vars_idx4], [rsp1p2_mod_lsp1_p1p2a, rsp1p2_mod1_lsnewp1_p1p2a, rsp1p2_mod1_lsnewp2_p1p2a, rsp1p2_div_lsnewp2_p1p2a,     rsp1p2_mod1_lsnewp1_newp1p2a, rsp1p2_mod1_lsnewp2_newp1p2a, rsp1p2_mod1_lsnewp1_p1p2b, rsp1p2_mod1_lsnewp2_p1p2b, rsp1p2_div_lsnewp2_p1p2b,     rsp1p2_mod1_lsnewp1_newp1p2b, rsp1p2_mod1_lsnewp2_newp1p2b, rsnewp1p2_mod1_lsnewp1_newp1p2a, rsnewp1p2_mod1_lsnewp2_newp1p2a, rsnewp1p2_div_lsnewp2_newp1p2a,     rsnewp1p2_mod1_lsnewp1_newp1p2b, rsnewp1p2_mod1_lsnewp2_newp1p2b, rsnewp1p2_div_lsnewp2_newp1p2b], [mma_rsp1p2_lsp1_p1p2a, mma_rsp1p2_lsnewp1_p1p2a, mma_rsp1p2_lsnewp2_p1p2a, mma_rsp1p2_div_lsnewp2_p1p2a, mma_rsp1p2_lsnewp1_newp1p2a, mma_rsp1p2_lsnewp2_newp1p2a, mma_rsp1p2_lsnewp1_p1p2b, mma_rsp1p2_lsnewp2_p1p2b, mma_rsp1p2_div_lsnewp2_p1p2b, mma_rsp1p2_lsnewp1_newp1p2b, mma_rsp1p2_lsnewp2_newp1p2b, mma_rsnewp1p2_lsnewp1_newp1p2a, mma_rsnewp1p2_lsnewp2_newp1p2a, mma_rsnewp1p2_div_lsnewp2_newp1p2a, mma_rsnewp1p2_lsnewp1_newp1p2b, mma_rsnewp1p2_lsnewp2_newp1p2b, mma_rsnewp1p2_div_lsnewp2_newp1p2b] = pickle.load(f)
f.close()

min([x for x in rsp1p2_mod1_lsnewp1_newp1p2a.values()])
max([x for x in rsp1p2_mod1_lsnewp1_newp1p2a.values()])
p1, p2, p1p2 = [mpmath.mpf(25437975264101)], [mpmath.mpf(25534248091031)], [mpmath.fmul(25437975264101, 25534248091031)]
thisi = -1
log_p1p2 = mpmath.log(p1p2[thisi])
sqrt_p1p2 = mpmath.sqrt(p1p2[thisi])


hsh_ary = [rsp1p2_mod_ls1p1_p1p2, rsp1p2_mod_ls1newp1_p1p2, rsp1p2_mod_ls1newp2_p1p2, rsp1p2_div_ls1newp2_p1p2,     rsp1p2_mod_ls1newp1_newp1p2, rsp1p2_mod_ls1newp2_newp1p2, rsp1p2_mod_ls2newp1_p1p2, rsp1p2_mod_ls2newp2_p1p2, rsp1p2_div_ls2newp2_p1p2,     rsp1p2_mod_ls2newp1_newp1p2, rsp1p2_mod_ls2newp2_newp1p2, rsnewp1p2_mod_ls1newp1_newp1p2, rsnewp1p2_mod_ls1newp2_newp1p2, rsnewp1p2_div_ls1newp2_newp1p2,     rsnewp1p2_mod_ls2newp1_newp1p2, rsnewp1p2_mod_ls2newp2_newp1p2, rsnewp1p2_div_ls2newp2_newp1p2]
mma_ary = [mma_rsp1p2_ls1p1_p1p2, mma_rsp1p2_ls1newp1_p1p2, mma_rsp1p2_ls1newp2_p1p2, mma_rsp1p2_div_ls1newp2_p1p2, mma_rsp1p2_ls1newp1_newp1p2, mma_rsp1p2_ls1newp2_newp1p2, mma_rsp1p2_ls2newp1_p1p2, mma_rsp1p2_ls2newp2_p1p2, mma_rsp1p2_div_ls2newp2_p1p2, mma_rsp1p2_ls2newp1_newp1p2, mma_rsp1p2_ls2newp2_newp1p2, mma_rsnewp1p2_ls1newp1_newp1p2, mma_rsnewp1p2_ls1newp2_newp1p2, mma_rsnewp1p2_div_ls1newp2_newp1p2, mma_rsnewp1p2_ls2newp1_newp1p2, mma_rsnewp1p2_ls2newp2_newp1p2, mma_rsnewp1p2_div_ls2newp2_newp1p2]

[hsh_ary[ha][x] for x in hsh_ary[ha].keys() if hsh_ary[ha][x] <= 0]
[rsp1p2_mod_ls1newp1_p1p2[x] for x in rsp1p2_mod_ls1newp1_p1p2.keys() if rsp1p2_mod_ls1newp1_p1p2[x] <= 0]
mma_rsp1p2_ls1newp1_p1p2.pos_range

mma_rsp1p2_ls1p1_p1p2.pos_range
1802480111882396.36985367504
1802480111882396 + math.exp(-0.99464782442874849)
1802480111882396 + math.exp(-1 + 1/186.839909619438614115)
2^2*277*2909*559225543
719005279249981.66058429055691984105023369
1/mma_rsp1p2_div_ls1newp2_p1p2.pos_range
1802480111882396.36985367504
719005279249981.66058430271079302036680097
1/mma_rsp1p2_div_ls2newp2_p1p2.pos_range

42535295865117307932921825928971026432.0
2**125
1/abs(mma_rsp1p2_div_ls2newp2_p1p2.pos_range - mma_rsp1p2_div_ls1newp2_p1p2.pos_range)




#min_hsh, max_hsh = min([hsh[x] for x in hsh.keys() if hsh[x] < max_hsh_val]), max([hsh[x] for x in hsh.keys() if hsh[x] < max_hsh_val])
#print("min_hsh " + str(float(min_hsh)) + ", max_hsh " + str(float(max_hsh)))
#plot_x, plot_y = plot_hsh(False, False, rsp1p2_div_lsnewp2_p1p2b, sorted_vars_idx4, 4, 28, 1.01, True, 16, 0, 0, 0, 0, 1)
def plot_hsh(bplot_all, bplot_spikes, hsh, sorted_vars, vars_idx, min_vars_val, max_hsh_val, plot_target_values, num_pos_spikes, num_neg_spikes, num_square_peaks, num_zeros, num_ones, tweak):
    if type(p1) is not list or len(p1) == 0:
        print("p1 is not array type")
        return [], []
    if type(p2) is not list or len(p2) == 0:
        print("p2 is not array type")
        return [], []
    if type(p1p2) is not list or len(p1p2) == 0:
        print("p1p2 is not array type")
        return [], []
    plot_x_all, plot_y_all = [], []
    plot_x_spikes, plot_y_spikes = [], []
    dic_pos, dic_pos_sq = {}, {}
    dic_neg, dic_neg_sq = {}, {}
    dic_zeros, dic_ones = {}, {}
    len_sorted_vars = len(sorted_vars)
    if num_pos_spikes > 0:
        sv = 3
        while sv < len_sorted_vars - 5:
            sv += 1
            if sorted_vars[sv][vars_idx] > min_vars_val and hsh[sorted_vars[sv][2]] < max_hsh_val:
                lstx1 = [sorted_vars[i][vars_idx] for i in range(max(0, sv - 6), min(sv + 6, len_sorted_vars))]
                lsty1 = [hsh[sorted_vars[i][2]] for i in range(max(0, sv - 6), min(sv + 6, len_sorted_vars))]
                avg1 = mpmath.fsum(lstx1)/len(lstx1)
                #dist_pos_sq[mpmath.fsum(lsty)/len(lsty) > tweak*avg1 and (max(lsty) - min(lsty)) > 1/80 and (max(lsty) - min(lsty)) < 1/28 and (max(lstx) - min(lstx)) > 1/700] = plot_x.append(sorted_vars[sv - 1][vars_idx]), plot_y.append(hsh[sorted_vars[sv - 1][2]]), plot_x.append(sorted_vars[sv + 1][vars_idx]),  plot_y.append(hsh[sorted_vars[sv + 1][2]]))
                #avg1 = mpmath.fsum([(0.9 + hsh[sorted_vars[i][2]])**2 for i in range(max(0, sv - 5), min(sv + 5, len_sorted_vars))])/10
                lstx2 = [sorted_vars[i][vars_idx] for i in range(max(0, sv - 1), min(sv + 2, len_sorted_vars))]
                lsty2 = [hsh[sorted_vars[i][2]] for i in range(max(0, sv - 1), min(sv + 2, len_sorted_vars))]
                if num_square_peaks > 0:
                    # if ((0.9 + hsh[sorted_vars[sv][2]])**2 + (0.9 + hsh[sorted_vars[sv + 1][2]])**2)/2 > tweak*avg2:
                    # [float(rsp1p2_mod1_lsnewp1_newp1p2a[sorted_vars_idx3[i][2]]) for i in range(max(0, 100 - 2), min(100 + 2, 1000))]
                    avg2 = mpmath.fsum(lsty2)/len(lsty2)
                    # x > 0.001498623 or 1/667.28 (len(lstx2) == 3)
                    # x > 0.00133477  or 1/749.2  (len(lstx2) == 4)
                    # 0.013054060 < y < 0.031278215 or 1/76.6 < y < 1/32 (len(lsty2) == 3)
                    # y < 0.02435792  or 1/41.05  (len(lsty2) == 4)
                    dic_pos_sq[avg2 - tweak*avg1] = (max(lsty2) - min(lsty2), sorted_vars[sv - 1][vars_idx], hsh[sorted_vars[sv - 1][2]], sorted_vars[sv + 1][vars_idx], hsh[sorted_vars[sv + 1][2]]) 
                    if avg2 > tweak*avg1 and (max(lsty2) - min(lsty2)) > 1/80 and (max(lsty2) - min(lsty2)) < 1/28 and (max(lstx2) - min(lstx2)) > 1/700:
                        #plot_x.append(sorted_vars[sv - 1][vars_idx])
                        #plot_y.append(hsh[sorted_vars[sv - 1][2]])
                        #plot_x.append(sorted_vars[sv + 1][vars_idx])
                        #plot_y.append(hsh[sorted_vars[sv + 1][2]])
                        sv += 1
                else:
                    dic_pos[hsh[sorted_vars[i][2]] - tweak*avg1] = (max(lsty2) - min(lsty2), sorted_vars[sv][vars_idx], hsh[sorted_vars[sv][2]])
                    #if hsh[sorted_vars[sv][2]] > tweak*avg1:
                    #    plot_x.append(sorted_vars[sv][vars_idx])
                    #    plot_y.append(hsh[sorted_vars[sv][2]])
    if num_neg_spikes > 0:
        sv = 3
        while sv < len_sorted_vars - 5:
            sv += 1
            if sorted_vars[sv][vars_idx] > min_vars_val and hsh[sorted_vars[sv][2]] < max_hsh_val:
                lstx1 = [sorted_vars[i][vars_idx] for i in range(max(0, sv - 6), min(sv + 6, len_sorted_vars))]
                lsty1 = [hsh[sorted_vars[i][2]] for i in range(max(0, sv - 6), min(sv + 6, len_sorted_vars))]
                avg1 = mpmath.fsum(lsty1)/len(lsty1)
                lstx2 = [sorted_vars[i][vars_idx] for i in range(max(0, sv - 1), min(sv + 2, len_sorted_vars))]
                lsty2 = [hsh[sorted_vars[i][2]] for i in range(max(0, sv - 1), min(sv + 2, len_sorted_vars))]
                if num_square_peaks > 0:
                    avg2 = mpmath.fsum(lsty2)/len(lsty2)
                    dic_neg_sq[avg1/tweak - avg2] = (max(lsty2) - min(lsty2), sorted_vars[sv - 1][vars_idx], hsh[sorted_vars[sv - 1][2]], sorted_vars[sv + 1][vars_idx], hsh[sorted_vars[sv + 1][2]]) 
                    #0 x > 0.001498623 or 1/667.28 (len(lstx) == 3)
                    # x > 0.00133477  or 1/749.2  (len(lstx) == 4)
                    # y < 0.013054060 or 1/76.6   (len(lsty) == 3)
                    # y < 0.02435792  or 1/41.05  (len(lsty) == 4)
                    if avg2 < avg1/tweak and (max(lsty2) - min(lsty2)) < 1/70 and (max(lstx2) - min(lstx2)) > 1/700:
                        #plot_x.append(sorted_vars[sv - 1][vars_idx])
                        #plot_y.append(hsh[sorted_vars[sv - 1][2]])
                        #plot_x.append(sorted_vars[sv + 1][vars_idx])
                        #plot_y.append(hsh[sorted_vars[sv + 1][2]])
                        sv += 1
                else:
                    dic_neg[avg1/tweak - hsh[sorted_vars[i][2]]] = (max(lsty2) - min(lsty2), sorted_vars[sv][vars_idx], hsh[sorted_vars[sv][2]])
                    #if hsh[sorted_vars[sv][2]] < avg/tweak:
                    #    plot_x.append(sorted_vars[sv][vars_idx])
                    #    plot_y.append(hsh[sorted_vars[sv][2]])
    if num_zeros > 0:
        for sv in range(0, len_sorted_vars):
            if sorted_vars[sv][vars_idx] > min_vars_val and hsh[sorted_vars[sv][2]] - 0.05*tweak < max_hsh_val:
                dic_zeros[0.05*tweak - hsh[sorted_vars[sv][2]]] = (sorted_vars[sv][vars_idx], hsh[sorted_vars[sv][2]])
                #if hsh[sorted_vars[sv][2]] < 0.05*tweak:
                #    plot_x.append(sorted_vars[sv][vars_idx])
                #    plot_y.append(hsh[sorted_vars[sv][2]])
    if num_ones > 0:
        for sv in range(0, len_sorted_vars):
            if sorted_vars[sv][vars_idx] > min_vars_val and hsh[sorted_vars[sv][2]] - 0.05*tweak < max_hsh_val:
                dic_ones[hsh[sorted_vars[sv][2]] - 0.95*tweak] = (sorted_vars[sv][vars_idx], hsh[sorted_vars[sv][2]])
                #if hsh[sorted_vars[sv][2]] > 0.95*tweak:
                #    plot_x.append(sorted_vars[sv][vars_idx])
                #    plot_y.append(hsh[sorted_vars[sv][2]])
    if bplot_all or (num_pos_spikes <= 0 and num_neg_spikes <= 0 and num_zeros <= 0 and num_ones <= 0):
        plot_x_all = [sorted_vars[sv][vars_idx] for sv in range(0, len_sorted_vars) if sorted_vars[sv][vars_idx] > min_vars_val and hsh[sorted_vars[sv][2]] < max_hsh_val]
        plot_y_all = [hsh[sorted_vars[sv][2]] for sv in range(0, len_sorted_vars) if sorted_vars[sv][vars_idx] > min_vars_val and hsh[sorted_vars[sv][2]] < max_hsh_val]
    if num_pos_spikes > 0 or num_neg_spikes > 0 or num_zeros > 0 or num_ones > 0:
        if num_pos_spikes > 0:
            if num_square_peaks > 0:
                arykeys = sorted([k for k in dic_pos_sq.keys()])
                icount, fminmax, fmaxmax, fmin = 0, 1/70, 1/28, 1/700
                while icount < num_square_peaks:
                    for k in arykeys:
                        if dic_pos_sq[k][0] < fminmax and dic_pos_sq[k][0] < fmaxmax and dic_pos_sq[k][0] > fmin:
                            icount += 1
                            plot_x_spikes.append(dic_pos_sq[k][1])
                            plot_y_spikes.append(dic_pos_sq[k][2])
                            plot_x_spikes.append(dic_pos_sq[k][3])
                            plot_y_spikes.append(dic_pos_sq[k][4])
                            if icount >= num_square_peaks:
                                break
                    if icount < num_square_peaks:
                        icount, fminmax, fmaxmax, fmin = 0, fminmax / 1.25, fmaxmax * 1.25, fmin / 1.5 
            else:
                arykeys = sorted([k for k in dic_pos.keys()])
                icount, fmax = 0, 1/28
                while icount < num_pos_spikes:
                    for k in arykeys:
                        if dic_pos[k][0] > fmax:
                            icount += 1
                            plot_x_spikes.append(dic_pos[k][1])
                            plot_y_spikes.append(dic_pos[k][2])
                            if icount >= num_pos_spikes:
                                break
                    if icount < num_pos_spikes:
                         icount, fmax = 0, fmax / 1.25
        if num_neg_spikes > 0:
            if num_square_peaks > 0:
                arykeys = sorted([k for k in dic_neg_sq.keys()])
                icount, fmax, fmin = 0, 1/70, 1/700
                while icount < num_square_peaks:
                    for k in arykeys:
                        if dic_neg_sq[k][0] < fmax and dic_neg_sq[k][0] > fmin:
                            icount += 1
                            plot_x_spikes.append(dic_neg_sq[k][1])
                            plot_y_spikes.append(dic_neg_sq[k][2])
                            plot_x_spikes.append(dic_neg_sq[k][3])
                            plot_y_spikes.append(dic_neg_sq[k][4])
                            if icount >= num_square_peaks:
                                break
                    if icount < num_square_peaks:
                        icount, fmax, fmin = 0, fmax * 1.5, fmin / 1.5 
            else:
                arykeys = sorted([k for k in dic_neg.keys()])
                icount, fmax = 0, 1/28
                while icount < num_neg_spikes:
                    for k in arykeys:
                        if dic_neg[k][0] > fmax:
                            icount += 1
                            plot_x_spikes.append(dic_neg[k][1])
                            plot_y_spikes.append(dic_neg[k][2])
                            if icount >= num_neg_spikes:
                                break
                    if icount < num_neg_spikes:
                         icount, fmax = 0, fmax / 1.25
        if num_zeros > 0:
            arykeys = sorted([k for k in dic_zeros.keys()])[::-1]
            for k in arykeys[0:num_zeros]:
                plot_x_spikes.append(dic_zeros[k][0])
                plot_y_spikes.append(dic_zeros[k][1])
        if num_ones > 0:
            arykeys = sorted([k for k in dic_ones.keys()])[::-1]
            for k in arykeys[0:num_ones]:
                plot_x_spikes.append(dic_ones[k][0])
                plot_y_spikes.append(dic_ones[k][1])
    min_plot_y, max_plot_y = 0, 0
    if len(plot_y_all) + len(plot_y_spikes) > 0:
        if num_pos_spikes > 0 or num_neg_spikes > 0 or num_zeros > 0 or num_ones > 0:
            min_plot_y = min([max(0, y - 0.1) for y in plot_y_spikes])
            max_plot_y = max([min(y + 0.1, 1) for y in plot_y_spikes])
        if len(plot_y_all) > 0:
            min_plot_y = min(plot_y_all) if min_plot_y == 0 else min(min_plot_y, min(plot_y_all))
            max_plot_y = max(plot_y_all) if max_plot_y == 0 else max(max_plot_y, max(plot_y_all))
    if bplot_all or bplot_spikes:
        print("plotting " + str(len(plot_x_all) + len(plot_x_spikes)) + " values")
    if len(plot_x_all) == 1:
        print(str(plot_x_all[0]) + ", " + str(plot_y_all[0]))
    if len(plot_x_spikes) == 1:
        print(str(plot_x_spikes[0]) + ", " + str(plot_y_spikes[0]))
    if bplot_all or (num_pos_spikes <= 0 and num_neg_spikes <= 0 and num_zeros <= 0 and num_ones <= 0):
        _ = plt.plot(plot_x_all, plot_y_all)
    if num_pos_spikes > 0 or num_neg_spikes > 0 or num_zeros > 0 or num_ones > 0:
        print("number of  " + ("spikes " if num_pos_spikes > 0 or num_neg_spikes > 0 else "zeros " if num_zeros > 0 else "ones ") + str(len(plot_x_spikes)) + " out of " + str(len(sorted_vars)))
        if bplot_spikes and len(plot_x_spikes) > 0 and len(plot_y_spikes) > 0:
            for x in range(0, len(plot_x_spikes)):
                _ = plt.plot([plot_x_spikes[x], plot_x_spikes[x]], [max(0, plot_y_spikes[x] - 0.1), min(plot_y_spikes[x] + 0.1, 1)], "b")
    #print("bplot_all " + str(bplot_all) + ", bplot_spikes " + str(bplot_spikes) + ", plot_target_values " + str(plot_target_values))
    if (bplot_all or bplot_spikes) and plot_target_values:
        _ = plt.plot([mpmath.log(p1[thisi]), mpmath.log(p1[thisi])], [min_plot_y, max_plot_y])
        _ = plt.plot([mpmath.log(p2[thisi]), mpmath.log(p2[thisi])], [min_plot_y, max_plot_y])
        _ = plt.plot([0.5*mpmath.log(p1p2[thisi]), 0.5*mpmath.log(p1p2[thisi])], [min_plot_y, max_plot_y])
    if bplot_all or bplot_spikes:
        plt.grid()
        plt.show()
    #if (num_pos_spikes > 0 or num_neg_spikes > 0 or num_zeros > 0 or num_ones > 0) and (len(plot_x)/len(sorted_vars) < (198/4096)):
    if (num_pos_spikes > 0 or num_neg_spikes > 0 or num_zeros > 0 or num_ones > 0):
        return plot_x_spikes, plot_y_spikes
    else:
        return [], []

plot_hsh(rsp1p2_mod_ls1newp1_p1p2, sorted_vars_idx3, 3, 0)
plot_hsh(rsp1p2_mod_ls2newp1_p1p2, sorted_vars_idx3, 3, 0)

30.182527452629014
min([sorted_vars_idx3[sv][3] for sv in range(0, len(sorted_vars_idx3))])
0.00000734432348002
min([val for val in rsp1p2_mod_ls1newp2_p1p2.values() if val > 0])
mpf('610401140465658695924937473.0')
[x for x in rsp1p2_mod_ls1newp2_p1p2.keys() if round(rsp1p2_mod_ls1newp2_p1p2[x], 12) == round(0.00000734432348, 12)]
[x for x in rsp1p2_mod_ls1newp2_p1p2.keys() if round(rsp1p2_mod_ls1newp2_p1p2[x], 12) == round(0.00000734432348, 12)]


2.61861541542619232 close to 3/2 + (1/2)*sqrt(5)
186.839909619438614115/71.35064909446793094

2.60959410015978941
186.839909619438614115/71.597306879256863175



30.260074173636344
sorted_vars_idx3[2163][3]
0.3627594670862983
math.exp(-1.0140152894569467)
math.exp(-1 - 1/71.35064909446793094)
math.exp(-1) - math.exp(-5.274605901438837)
math.exp(-1) - math.exp(-4**1.199531652570598)
math.exp(-1) - math.exp(-5) + math.exp(-6.4265812009424215)
881180/447497 = 1 + 433683/447497
1.9691305193113605101735883897799
get_e4(0.3627594670862983, 0.5)
rsp1p2_div_ls1newp2_p1p2[sorted_vars_idx3[2163][2]]
0.3627769828650854
math.exp(-1.0139670057937573)
math.exp(-1 - 1/71.597306879256863175)
math.exp(-1) - math.exp(-5.2780328345322935)
math.exp(-1) - math.exp(-4**1.200000162833944)
math.exp(-1) - math.exp(-5) + math.exp(-6.415813624657819)
1.97328887761169831734
get_e4(0.3627769828650854, 0.5)
rsp1p2_div_ls1newp2_p1p2[sorted_vars_idx3[2164][2]]

0.3627594670862984
math.exp(-1.0140152894569465)
rsp1p2_div_ls1newp2_p1p2[sorted_vars_idx3[3466][2]]
0.3627769828650854459
math.exp(-1.0139670057937573)
rsp1p2_div_ls1newp2_p1p2[sorted_vars_idx3[3467][2]]

3.1204378028759003
math.pi**0.9940976709693012
math.pi**(1 - 0.005902329030698761)
math.pi**(1 / 1.0059373733618586)
0.043583172871827/0.0139670057937573

2.3523879908716325
0.0139670057937573/0.0059373733618586
2.366354996665407
2 + math.exp(-1.004152479420705)
0.0139670057937573/0.005902329030698761


0.3521904590482101
math.exp(-1.043583172871827)
(math.log(p1[thisi]) - sorted_vars_idx3[3466][3])/(sorted_vars_idx3[3467][3] - sorted_vars_idx3[3466][3])


30.260075596823018
tgt = math.log(p1[thisi])
for sv in range(0, len(sorted_vars_idx3) - 1):
    if sorted_vars_idx3[sv][3] <= tgt and sorted_vars_idx3[sv + 1][3] >= tgt:
        print("found at index " + str(sv))
        break

def find_spikes(hsh, sorted_vars, sorted_vars_idx, min_vars_val, max_hsh_val, plot_target_values, pos_spikes, neg_spikes, square_peaks, bln_zeros, bln_ones, starting_f, max_len):
    if pos_spikes or neg_spikes or bln_zeros or bln_ones:
        plot_x, plot_y = [], []
        saved_plot_x, saved_plot_y = [], []
        iter, max_iter = 0, 16
        f, df = -6, 8
        if starting_f > 0:
           df = starting_f / 8
           f = starting_f - df
        else:
           starting_f = 2
        dfwas512 = False
        while (len(plot_x) == 0 or len(plot_x) < int(0.75*max_len) or len(plot_x) > int(1.2*max_len)) and iter < max_iter:
            iter += 1
            if iter >= 4 and len(plot_x) > 32*max_len and not dfwas512:
                df = 512
                dfwas512 = True
            f += df
            if f < 1:
                f = 1
            # print("try with tweak " + str(f))
            # plot_hsh(bplot, hsh, sorted_vars, vars_idx, min_vars_val, max_hsh_val, plot_target_values, pos_spikes, neg_spikes, bln_zeros, bln_ones, tweak)
            plot_x, plot_y = plot_hsh(False, hsh, sorted_vars, sorted_vars_idx, min_vars_val, max_hsh_val, plot_target_values, pos_spikes, neg_spikes, square_peaks, bln_zeros, bln_ones, f)
            # print("len(plot_x) " + str(len(plot_x)))
            if len(plot_x) == 0:
                if f == starting_f:
                    df = -0.5
                elif f > starting_f:
                    f -= df
                    df /= 2
                elif f < starting_f:
                    f -= df
                    df /= 2
            elif len(plot_x) < int(0.75*max_len):
                f -= df
                df /= 2
                if len(plot_x) > int(0.25*max_len):
                    saved_plot_x, saved_plot_y = [x for x in plot_x], [y for y in plot_y]
            elif len(plot_x) > max_len:
                f -= abs(df)
                df = abs(df)/2
                if df >= 2:
                    df = 0.5
                if len(plot_x) < int(3.5*max_len):
                    saved_plot_x, saved_plot_y = [x for x in plot_x], [y for y in plot_y] 
            elif len(plot_x) > max_len:
                if f < starting_f:
                    f -= df
                    df = abs(df)/2
                elif f > 100:
                    df = 500
            if f == 0:
                f += abs(df)
                df /= 2
        if iter < max_iter:
            print("tweak is " + str(f))
            return plot_x, plot_y 
        else:
            print("returning any saved lists for tweak " + str(f))
            return saved_plot_x, saved_plot_y
    else:
        print("returning empty lists for pos_spikes, " + str(pos_spikes) + ", neg_spikes " + str(neg_spikes) + ", bln_zeros " + str(bln_zeros) + ", bln_ones " + str(bln_ones))
        return [], []


find_intersection(rsp1p2_div_lsnewp2_p1p2b, sorted_vars_idx3, 3)
def find_intersection(hsh, sorted_vars, sorted_vars_idx):
    plot_x = [sorted_vars[sv][sorted_vars_idx] for sv in range(0, len(sorted_vars)) if hsh[sorted_vars[sv][2]] < 1]
    plot_y = [hsh[sorted_vars[sv][2]] for sv in range(0, len(sorted_vars)) if hsh[sorted_vars[sv][2]] < 1]
    log_p1 = math.log(p1[thisi])
    log_p2 = math.log(p2[thisi])
    rslt_x = []
    rslt_y = []
    bfound_p1 = False
    bfound_p2 = False
    for i in range(0, len(plot_x)):
        if plot_x[i] < log_p1 and plot_x[i + 1] > log_p1:
             bfound_p1 = True
             rslt_x.append(plot_x[i])
             rslt_x.append(plot_x[i + 1])
             rslt_y.append(plot_y[i])
             rslt_y.append(plot_y[i + 1])
             if bfound_p1 and bfound_p2:
                 break
        elif plot_x[i] < log_p2 and plot_x[i + 1] > log_p2:
             bfound_p2 = True
             rslt_x.append(plot_x[i])
             rslt_x.append(plot_x[i + 1])
             rslt_y.append(plot_y[i])
             rslt_y.append(plot_y[i + 1])
             if bfound_p1 and bfound_p2:
                 break
    return rslt_x, rslt_y


aryprimes = primesieve.primes(10**6)
p1, p2, p1p2 = 167777, 422291, 167777*422291
log2 = round(math.log(math.sqrt(p1p2), 2), 2)
mpmath.power(1 + mpmath.fdiv(p1p2, 2**18), 2**18 + 0.5) % mpmath.power(1 + mpmath.fdiv(p1, 2**18), 2**18 + 0.5)

math.log(1/(p1p2 - 1/((1 + mpmath.fdiv(1, p1p2)) % (1 + mpmath.fdiv(1, p1)) - 1)), p1p2)
math.log(1/(p1p2 - 1/((1 + mpmath.fdiv(1, p1p2)) % (1 + mpmath.fdiv(1, p1)) - 1)), p1)
math.log(1/(p1p2 - 1/((1 + mpmath.fdiv(1, p1p2)) % (1 + mpmath.fdiv(1, p1)) - 1)), p2)
3.3807719494481123
7.020941265947454
6.5206311099463825

math.log(1/(1 - (1 + mpmath.fdiv(1, p1p2)) / (1 + mpmath.fdiv(1, p2))), p1p2)
math.log(1/(1 - (1 + mpmath.fdiv(1, p1p2)) / (1 + mpmath.fdiv(1, p2))), p1)
math.log(1/(1 - (1 + mpmath.fdiv(1, p1p2)) / (1 + mpmath.fdiv(1, p2))), p2)
0.5184734523531302
1.0767279518864223
1.0000006429439916 1 + 1/1555345.431429334

math.log(1/(1 - (1 + mpmath.fdiv(1, p1p2)) / (1 + mpmath.fdiv(1, p1))), p1p2)
math.log(1/(1 - (1 + mpmath.fdiv(1, p1p2)) / (1 + mpmath.fdiv(1, p1))), p1)
math.log(1/(1 - (1 + mpmath.fdiv(1, p1p2)) / (1 + mpmath.fdiv(1, p1))), p2)
0.48152721434402573
1.0000006922728353 1 + 1/1444517.1744557114
0.9287409446975667

math.log(1444517.1744557114, p1p2)
math.log(1444517.1744557114, p1)
math.log(1444517.1744557114, p2)
0.5676983667652065
1.1789546734980043
1.0949427192210472

math.log(p1p2) % (1 + mpmath.fdiv(1, p1))


plot_x, plot_y = find_spikes(rsp1p2_mod1_lsnewp1_p1p2b, sorted_vars_idx3, 3, 28, 1, True, True, False, 15)
plot_x, plot_y = find_spikes(rsp1p2_mod2_lsnewp1_p1p2b, sorted_vars_idx3, 3, 28, 1, True, False, True, 15)
[30.041081772371157, 30.077746845352046, 30.080677852133608, 30.09228342273197, 30.10437375010653, 30.20736821927998, 30.220621442895233, 30.256823543583398, 30.304955109166567, 30.319887576210164, 30.40518446572496, 30.463575233904344, 30.654644498707132, 30.724977811170554, 30.76125627338168]
[30.018609946251807, 30.02044965143376, 30.03451524838004, 30.041081772371157, 30.043643050162746, 30.05334141254131, 30.056902704337976, 30.060154770451028, 30.065734231461164, 30.077746845352046, 30.080677852133608, 30.090371101586946, 30.10437375010653]

#                plot_hsh(bplot, hsh, sorted_vars, vars_idx, min_vars_val, max_hsh_val, plot_target_values, pos_spikes, neg_spikes, square_peaks, bln_zeros, bln_ones, tweak)

# find_multiple(rsp1p2_div_lsnewp2_p1p2b, sorted_vars_idx4, 4)
def find_multiple(hsh, sorted_vars, vars_idx):
    global p1
    global p2
    global p1p2
    global thisi
    log_p1 = float(mpmath.log(p1[thisi]))
    log_p2 = float(mpmath.log(p2[thisi]))
    log_p1p2 = float(mpmath.log(p1p2[thisi]))
    thisary = []
    thisary.append(["pos_spikes", [20, 0, 0, 0, 0]])
    thisary.append(["neg_spikes", [0, 20, 0, 0, 0]])
    thisary.append(["pos_spikes squared", [16, 0, 1, 0, 0]])
    thisary.append(["neg_spikes squared", [0, 16, 1, 0, 0]])
    thisary.append(["zeros", [0, 0, 0, 20, 0]])
    thisary.append(["ones", [0, 0, 0, 0, 20]])
    for i in range(0, 6):
        # plot_hsh(bplot_all, bplot_spikes, hsh, sorted_vars, vars_idx, min_vars_val, max_hsh_val, plot_target_values, num_pos_spikes, num_neg_spikes, num_square_peaks, num_zeros, num_ones, tweak)
        plot_x, plot_y = plot_hsh(False, False, hsh, sorted_vars, vars_idx, 28, 1.01, False, thisary[i][1][0], thisary[i][1][1], thisary[i][1][2], thisary[i][1][3], thisary[i][1][4], 1)
        for x in [x for x in plot_x if round(2 * (abs(x - log_p1) - abs(log_p2 - log_p1)), 2) % 1 in [0, 0.5]]
            print("x (" + str(x) + ") found for " + thisary[i][0] + " with dist " + str(abs(x - log_p1)) + " or " + str(abs(log_p1p2 - x)) + " or " + str(abs(log_p2 - x)))

# positive spikes, square, 46 results
# plot_hsh(bplot_all, bplot_spikes, hsh, sorted_vars, vars_idx, min_vars_val, max_hsh_val, plot_target_values, num_pos_spikes, num_neg_spikes, num_square_peaks, num_zeros, num_ones, tweak)
plot_x, plot_y = plot_hsh(False, True, rsp1p2_div_lsnewp2_p1p2b, sorted_vars_idx4, 4, 30, 1, True, 0, 0, 0, 0, 0, 1.26)
# 31.33253511354052 - 30.84802354102595  # 0.48451157251457033
# 30.84802354102595 - 30.364326534152273 # 0.4836970068736761
[float(x) for x in plot_x if abs(x - math.log(p2[thisi])) / float(0.5*mpmath.log(p1p2[thisi]) - math.log(p1[thisi])) > 0.99  and abs(x - math.log(p2[thisi])) / float(0.5*mpmath.log(p1p2[thisi]) - math.log(p1[thisi])) < 1.01]
[float(x) for x in plot_x if abs(x - math.log(p2[thisi])) / float(math.log(p2[thisi]) - 0.5*mpmath.log(p1p2[thisi])) > 0.99  and abs(x - math.log(p2[thisi])) / float(math.log(p2[thisi]) - 0.5*mpmath.log(p1p2[thisi])) < 1.01]
# (30.84802354102595 - 30.364326534152273)/2 # 0.24184850343683806
# 30.364326534152273 - 30.11369875803778     # 0.2506277761144915
[float(x) for x in plot_x if abs(x - math.log(p1[thisi])) / abs(math.log(p2[thisi]) - 0.5*mpmath.log(p1p2[thisi])) > 0.48 and abs(x - math.log(p1[thisi])) / abs(math.log(p2[thisi]) - 0.5*mpmath.log(p1p2[thisi])) < 0.52]
plot_x, plot_y = plot_hsh(True, rsp1p2_div_lsnewp2_p1p2b, sorted_vars_idx4, 4, 30, 1, True, False, False, False, False, False, 1.26)
# positive spikes, square, 50 results
plot_x, plot_y = plot_hsh(True, rsp1p2_mod1_lsnewp1_p1p2b, sorted_vars_idx3, 3, 30, 1, True, True, False, False, False, False, 2)
# negative spikes, square, 46 results
plot_x, plot_y = plot_hsh(True, rsp1p2_mod1_lsnewp1_p1p2b, sorted_vars_idx3, 3, 30, 1, True, False, True, False, False, False, 2.7)
# positive spikes
plot_x, plot_y = plot_hsh(True, rsp1p2_mod2_lsnewp1_p1p2b, sorted_vars_idx3, 3, 30, 1, True, True, False, False, False, False, 1.38)
# positive spikes, square, 50 results
plot_x, plot_y = plot_hsh(True, rsp1p2_mod1_lsnewp2_p1p2b, sorted_vars_idx4, 4, 30, 1, True, True, False, False, False, False, 1.65)
# negative spikes, square, 52 results
plot_x, plot_y = plot_hsh(True, rsp1p2_mod1_lsnewp2_p1p2b, sorted_vars_idx4, 4, 30, 1, True, False, True, False, False, False, 2.8)
# positive spikes, square, 52 results
plot_x, plot_y = plot_hsh(True, rsp1p2_mod1_lsnewp1_newp1p2a, sorted_vars_idx3, 3, 30, 1, True, True, False, False, False, True, 4.74)
# negative spikes, square, 55 results
plot_x, plot_y = plot_hsh(True, rsp1p2_mod1_lsnewp1_newp1p2a, sorted_vars_idx3, 3, 30, 1, True, False, True, False, False, True, 1600)
# positive spikes
plot_x, plot_y = plot_hsh(True, rsp1p2_mod2_lsnewp1_newp1p2a, sorted_vars_idx3, 3, 30, 1, True, True, False, False, False, False, 1600)
# positive spikes, square, 50 results
plot_x, plot_y = plot_hsh(True, rsp1p2_mod1_lsnewp1_newp1p2b, sorted_vars_idx3, 3, 30, 1, True, True, False, False, False, True, 2)
# negative spikes, square, 54 results
plot_x, plot_y = plot_hsh(True, rsp1p2_mod1_lsnewp1_newp1p2b, sorted_vars_idx3, 3, 30, 1, True, False, True, False, False, True, 2.8)
# positive and negative spikes # rectangle wave
plot_x, plot_y = plot_hsh(True, rsp1p2_mod1_lsnewp2_newp1p2a, sorted_vars_idx4, 4, 30, 1, True, False, False, False, False, False, 10.2)
plot_x, plot_y = plot_hsh(True, rsp1p2_mod2_lsnewp2_newp1p2a, sorted_vars_idx4, 4, 30, 1, True, True, False, False, False, False, 10.2)
# negative spikes
plot_x, plot_y = plot_hsh(True, rsp1p2_mod1_lsnewp2_newp1p2b, sorted_vars_idx4, 4, 30, 1, True, False, True, False, False, False, 10.2)



[float(x) for x in plot_x]
[float(x) for x in plot_x if x > math.log(p1[thisi]) - 0.001 and x < math.log(p2[thisi]) + 0.001]
[float(x) for x in plot_x if x > math.log(p1[thisi]) and x < math.log(p2[thisi])]
30.869272193847173 - 30.867586670940277 # 0.0016855229068966082
30.8689214426288 - 30.867586670940277 # 0.0013347716885228067
0.9988495458610266 - 0.9744916243059994 # 0.02435792155502714
lstx = [30.867586670940277, 30.867652383246817, 30.8689214426288, 30.86915100661702, 30.869272193847173]
lsty = [0.9675713307874532, 0.9969857014068613, 0.9988495458610266, 0.9857954857212955, 0.9744916243059994]
[float(plot_y[i]) for i in range(0, len(plot_x)) if plot_x[i] > math.log(p1[thisi]) - 0.001 and plot_x[i] < math.log(p2[thisi]) + 0.001]
[[float(plot_x[i]), float(plot_x[i + 1])] for i in range(0, len(plot_x) - 1) if plot_x[i + 1] - plot_x[i] > 0.005]
# 
# these ones for second go-round (with log_points)
# 
plot_x, plot_y = plot_hsh(True, rsp1p2_mod1_lsnewp1_newp1p2a, sorted_vars_idx3, 3, 30, 1, True, False, False, False, False, False, 1.008)
plot_x, plot_y = plot_hsh(True, rsp1p2_mod1_lsnewp2_newp1p2a, sorted_vars_idx4, 4, 30, 1, True, False, False, False, False, False, 1.28)
_ = plt.plot([sorted_vars_idx3[sv][3] for sv in range(0, len(sorted_vars_idx3))], [rsp1p2_mod1_lsnewp1_newp1p2a[sorted_vars_idx3[sv][2]] for sv in range(0,  len(sorted_vars_idx3))])
_ = plt.plot([sorted_vars_idx4[sv][4] for sv in range(0, len(sorted_vars_idx4))], [rsp1p2_mod1_lsnewp2_newp1p2a[sorted_vars_idx4[sv][2]] for sv in range(0,  len(sorted_vars_idx4))])
_ = plt.plot([math.log(p1[thisi]), math.log(p1[thisi])], [0, 1])
_ = plt.plot([math.log(p2[thisi]), math.log(p1[thisi])], [0, 1])
plt.grid()
plt.show()

saved_plot_x = [x for x in plot_x]

plot_x, plot_y = plot_hsh(True, rsp1p2_mod1_lsnewp1_newp1p2b, sorted_vars_idx3, 3, 30, 1, True, False, False, False, False, 1.3)
plot_x, plot_y = plot_hsh(True, rsp1p2_mod1_lsnewp2_newp1p2b, sorted_vars_idx4, 4, 30, 1, True, False, False, False, False, 1.3)

# 25437975264101x25534248091031
# crossovers
plot_x = []
for sv in range(1, len(sorted_vars_idx3) - 1):
    p1y1 = rsp1p2_mod1_lsnewp1_newp1p2a[sorted_vars_idx3[sv - 1][2]]
    p1y2 = rsp1p2_mod1_lsnewp2_newp1p2a[sorted_vars_idx4[sv - 1][2]]
    p2y1 = rsp1p2_mod1_lsnewp1_newp1p2a[sorted_vars_idx3[sv + 1][2]]
    p2y2 = rsp1p2_mod1_lsnewp2_newp1p2a[sorted_vars_idx4[sv + 1][2]]
    if (p1y1 > 0.75 and p1y1 < 0.92 and p1y2 > 0.75 and p1y2 < 0.92 and p2y1 > 0.75 and p2y1 < 0.92 and p2y2 > 0.75 and p2y2 < 0.92) and ((p1y1 < p1y2 and p2y1 > p2y2) or (p1y1 > p1y2 and p2y1 < p2y2)):
        plot_x.append(sorted_vars_idx3[sv][3])


math.log(p1[thisi])
math.log(p2[thisi])
0.5*math.log(p1p2[thisi])

# 30.87104172938474 % 30.869152995971294  # 0.0018887334134447542
# 30.87104172938474 % 30.867264262557846  # 0.003777466826893061
# 30.869152995971294 % 30.867264262557846 # 0.001888733413448307
plot_x = [float(x) for x in plot_x]
plot_x = [30.80981229099101, 30.812308145201502, 30.82869994914794, 30.830572819965514, 31.21961356058783, 31.22763619682614]
plot_x = [30.764400049946698, 30.76683010861547, 30.779330232009098, 30.78100951236961, 30.78606348327427, 30.78781115654942, 30.794252435073265, 30.796297898054917, 30.798941193523486, 30.800471583340407, 30.804151183653374, 30.805770454877525, 30.82133689506941, 30.82353986698438, 30.82869994914794, 30.830572819965514, 30.83499937409936, 30.838836907246453, 30.846964416314368, 30.848660020211753]
true_x = [30.867264262557846, 30.869152995971294, 30.87104172938474]

# 30.809736862939825 % 30.508940239260962 # 0.3007966236788633
# 31.110533486618692 % 30.809736862939825 # 0.30079662367886684
# 31.110533486618692 % 30.508940239260962 # 0.6015932473577301
plot_x = [30.302288167073684, 30.310214098255273, 30.525529577074906, 30.53084980531631, 30.586669293707978, 30.588484594730392, 30.59801994863584, 30.600106060921267, 30.669920473373704, 30.671741195485012, 30.710426811352832, 30.71248209177103]
plot_x = [30.72280839535128, 30.72426438479203, 30.73586464218053, 30.737380263776043, 30.741752408032323, 30.74522338554274]
true_x = [mpmath.log(p1[thisi]), mpmath.log(p2[thisi]), 0.5*mpmath.log(p1p2[thisi])]
true_x = [mpmath.log(mpmath.mpf('17777242415791.0')), mpmath.log(mpmath.mpf('32443897622537.0')), mpmath.log(mpmath.mpf('576763032948945539326281767.0'))]

# 30.83807929010805 % 30.260075596823018  # 0.5780036932850301
# 31.416082983393075 % 30.83807929010805  # 0.5780036932850265
# 31.416082983393075 % 30.260075596823018 # 1.1560073865700566
plot_x = [30.763377277125358, 30.764808917358042, 30.778367255920884, 30.780197246404718, 30.898831899383953, 30.901863034039007, 30.91012622973847, 30.913110711926645, 30.936614120010802, 30.940790867840878, 30.970703023385145, 30.972415414687156, 31.05515181888627, 31.05739374058139, 31.17065368634629, 31.18808691308122, 30.625971210982026, 30.628522177438057, 30.690200207962977, 30.691654295093002, 30.747681721623533, 30.750918182269924, 30.755532853363547, 30.758453319502152, 30.77734099476161, 30.77914465661436, 30.783129469342803, 30.785641404272194, 30.785641404272194, 30.788490769157644, 30.791293681672254, 30.79364243650583]
true_x = [mpmath.log(p1[thisi]), 0.5*mpmath.log(p1p2[thisi]), mpmath.log(p2[thisi])]
true_x = [mpmath.mpf('30.26007559682301895744278477066807518531440454046699579294440058933813896541720564772596921619399233993938766520610064'), mpmath.mpf('30.83807929010804740775436883152470248547172085040452247592409180289802199650627235520941612895233303371295041080018883'), mpmath.mpf('31.41608298339307585806595289238132978562903716034204915890378301645790502759533906269286304171067372748651315639427621')]

s = ""
s += str(p1[thisi]) + " * "
s += str(p2[thisi]) + " = "
s += str(p1p2[thisi])
s = s.replace(".0", "")
print(s)
min_freqs
max_freqs

min_freqs = [0.0024958542104906835, 0.016391803946436453, 0.0018728708175744396, 0.008022636238310213]
max_freqs = [0.38904074062231564]
min_freqs = [0.0024300586687706384, 0.0016792803605136819, 0.0017476732751513483, 0.002045462981653347, 0.0015303898169188245, 0.001619271224148064, 0.002202971914969611, 0.0018728708175744396, 0.00383753314708935, 0.0016956038973859253]

# 17777242415791 * 32443897622537 = 576763032948945539326281767
min_freqs = [0.0018153010224146726, 0.0018207221113080152, 0.0020552804181974693, 0.0020861122854256564, 0.005320228241405545, 0.007925931181588908, 0.009535353905448574, 0.038685615867819934, 0.05581948839166628, 0.06981441245243758]
max_freqs = [0.009535353905448574, 0.038685615867819934, 0.05581948839166628, 0.06981441245243758, 0.2153154788196332]
min_freqs = [0.0014559894407505346, 0.0015156215955135798, 0.003470977510417346, 0.011600257388501442, 0.004372144256278668]
max_freqs = [0.011600257388501442, 0.004372144256278668]

sorted([float(x) for x in dists])[0:4]
[float(1/x) for x in sorted(dists)[0:12]]

frequencies(true_x, False)


def frequencies(true_x, bprint): 
    global min_freqs
    global max_freqs
    global dists
    global dists1
    global lines
    global p1
    global p2
    global p1p2
    global plot_x
    
    min_freqs = []
    max_freqs = []
    add_freqs = []
    tru_freqs = []
    for px1 in range(1, len(plot_x) - 1):
        mod1 = abs(plot_x[px1] - plot_x[px1 - 1])
        mod2 = abs(plot_x[px1 + 1] - plot_x[px1])
        if px1 < len(plot_x) - 2:
            mod3 = abs(plot_x[px1 + 2] - plot_x[px1 + 1])
        mod4 = abs(true_x[1] - plot_x[px1])
        min_mod = min(mod1, mod2)
        if min_mod not in min_freqs and float(min_mod) != 0:
            min_freqs.append(min_mod)
            if bprint:
                print(str(float(min_freqs[-1])))
        max_mod = max(mod1, mod2)
        if max_mod not in max_freqs and float(max_mod) != 0:
            max_freqs.append(max_mod)
        #if mod1 + mod2 not in add_freqs:
        #    add_freqs.append(mod1 + mod2)
        #if mod1 + mod2 + mod3 not in add_freqs:
        #    add_freqs.append(mod1 + mod2 + mod3)
        if mod4 not in tru_freqs:
            tru_freqs.append(mod4)
    
    # plot_x[-1] - plot_x[-2]
    
    for px1 in range(1, len(plot_x)):
        for px2 in range(px1 - 1, px1):
            mod = abs(plot_x[px1] - plot_x[px2])
            if float(mod) != 0:
                if mod < 0.2:
                    if mod not in min_freqs:
                        min_freqs.append(mod)
                else:
                    if mod not in max_freqs:
                        max_freqs.append(mod)
                if bprint:
                    print(str(float(mod)))
        
    
    div2 = []
    dists, dists1 = [], []
    max_dist = 1/8000
    for i in range(0, 2):
        if (i == 0):
            max_dist = 1/8000
        else:
            icount = 0
            this_dist, prev_dist = 0, 0
            for this_dist in sorted(dists1):
                if this_dist != prev_dist:
                    icount += 1
                    if icount >= 3:
                        max_dist = this_dist + 0.000001
                        break
                prev_dist = this_dist
        div2 = []
        for tx in [1, 0, 2]:
            div2.append([])
        dists = []
        lines = [{}, {}, {}]
        for x in plot_x:
            for freq in min_freqs + max_freqs:
                if freq == 0:
                    freq = mpmath.power(2, -64)
                for tx in [1, 0, 2]:
                    thisdiv2 = mpmath.fdiv(true_x[tx], freq)
                    for add in [-2.5, -1.5, -0.5, 0.5, 1.5, 2.5]:
                        if mpmath.floor(add + thisdiv2) not in div2[tx]:
                            div2[tx].append(mpmath.floor(add + thisdiv2))
                        if mpmath.ceil(add + thisdiv2) not in div2[tx]:
                            div2[tx].append(mpmath.ceil(add + thisdiv2))
        for x in plot_x:
            for freq in min_freqs + max_freqs:
                if freq == 0:
                    freq = mpmath.power(2, -64)
                for tx in [1, 0, 2]:
                    lines_key = mpmath.fdiv(true_x[tx], freq)
                    if lines_key not in lines[tx]:
                        lines[tx][lines_key] = []
                    fmod = mpmath.fmod(abs(true_x[tx] - x), freq)
                    if fmod/freq > 0.5:
                        fmod = mpmath.fsub(freq, fmod)
                    if fmod not in dists:
                        dists.append(fmod)
                        if tx == 1 and dists[-1] not in dists1:
                            dists1.append(dists[-1])
                        # if dists[-1] < 1/8900:
                        # 0.000024607 or 1/40638
                        # 0.000033211 or 1/30110.5
                        # 0.000137498 or 1/8502
                        thisdiv2 = mpmath.fdiv(true_x[tx], freq)
                        bln_ok = False
                        if tx == 1 and (mpmath.floor(thisdiv2) in div2[0] or mpmath.floor(thisdiv2) in div2[2] or mpmath.ceil(thisdiv2) in div2[0] or mpmath.ceil(thisdiv2) in div2[2]):
                            bln_ok = True
                        elif tx != 1 and (mpmath.floor(thisdiv2) in div2[1] or mpmath.ceil(thisdiv2) in div2[1]):
                            bln_ok = True
                        if dists[-1] < max_dist or bln_ok:
                            smod = str(dists[-1])
                            #sdiv = str(mpmath.fdiv(true_x[tx], x))
                            sdiv1 = str(mpmath.fdiv(abs(true_x[tx] - x), freq))
                            sdiv2 = str(thisdiv2)
                            sfreq = str(freq)
                            sfreq = sfreq[:sfreq.find(".") + 17]
                            #lines_key = mpmath.fdiv(true_x[tx], freq)
                            lines_val = "abs(true_x[" + str(tx) + "] - " + str(float(x)) + ") % " + sfreq + " # " + smod[:smod.find(".") + 17] + " # 1/" + str(float(1/dists[-1]))
                            if lines_val not in lines[tx][lines_key]:
                                lines[tx][lines_key].append(lines_val)
                            lines_val = "abs(true_x[" + str(tx) + "] - " + str(float(x)) + ") / " + sfreq + " # " + sdiv1[:sdiv1.find(".") + 17]
                            if lines_val not in lines[tx][lines_key]:
                                lines[tx][lines_key].append(lines_val)
                            lines_val = "true_x[" + str(tx) + "] / " + sfreq + "                           # " + sdiv2[:sdiv2.find(".") + 17]
                            if lines_val not in lines[tx][lines_key]:
                                lines[tx][lines_key].append(lines_val)
                            lines_val = str(float(x)) + " / " + sfreq + "                 # " + str(float(x/freq))
                            if lines_val not in lines[tx][lines_key]:
                                lines[tx][lines_key].append(lines_val)
                    fmod = mpmath.fmod(true_x[tx], freq)
                    if fmod/freq > 0.5:
                        fmod = mpmath.fsub(freq, fmod)
                    if fmod not in dists:
                        dists.append(fmod)
                        if tx == 1 and dists[-1] not in dists1:
                            dists1.append(dists[-1])
                        thisdiv2 = mpmath.fdiv(true_x[tx], freq)
                        bln_ok = False
                        if tx == 1 and (mpmath.floor(thisdiv2) in div2[0] or mpmath.floor(thisdiv2) in div2[2] or mpmath.ceil(thisdiv2) in div2[0] or mpmath.ceil(thisdiv2) in div2[2]):
                            bln_ok = True
                        elif tx != 1 and (mpmath.floor(thisdiv2) in div2[1] or mpmath.ceil(thisdiv2) in div2[1]):
                            bln_ok = True
                        if dists[-1] < max_dist or bln_ok:
                            smod = str(dists[-1])
                            #sdiv = str(mpmath.fdiv(true_x[tx], x))
                            sdiv1 = str(mpmath.fdiv(abs(true_x[tx] - x), freq))
                            sdiv2 = str(thisdiv2)
                            sfreq = str(freq)
                            sfreq = sfreq[:sfreq.find(".") + 17]
                            #lines_key = mpmath.fdiv(true_x[tx], freq)
                            bln_added = False
                            lines_val = "true_x[" + str(tx) + "] % " + sfreq + "                           # " + smod[:smod.find(".") + 17]
                            if lines_val not in lines[tx][lines_key]:
                                bln_added = True
                                lines[tx][lines_key].append(lines_val)
                            lines_val = "abs(true_x[" + str(tx) + "] - " + str(float(x)) + ") / " + str(float(freq)) + " # " + sdiv1[:sdiv1.find(".") + 17]
                            if lines_val not in lines[tx][lines_key]:
                                bln_added = True
                                lines[tx][lines_key].append(lines_val)
                            lines_val = "true_x[" + str(tx) + "] / " + sfreq + "                           # " + sdiv2[:sdiv2.find(".") + 17]
                            if bln_added:
                                lines[tx][lines_key].append(lines_val)
                            lines_val = str(float(x)) + " / " + sfreq + "                 # " + str(float(x/freq))
                            if lines_val not in lines[tx][lines_key]:
                                lines[tx][lines_key].append(lines_val)
                if freq > 1/5:
                    lines_key = freq/(true_x[1] - true_x[0])
                    if lines_key not in lines[tx]:
                        lines[tx][lines_key] = []
                    lines_val = str(float(freq)) + " / (true_x[1] - true_x[0]) # " + str(float(freq/(true_x[1] - true_x[0])))
                    if lines_val not in lines[tx][lines_key]:
                        lines[tx][lines_key].append(lines_val)
                    lines_val = str(float(freq)) + " / (true_x[2] - true_x[0]) # " + str(float(freq/(true_x[2] - true_x[0])))
                    if lines_val not in lines[tx][lines_key]:
                        lines[tx][lines_key].append(lines_val)
                    lines_val = str(float(freq)) + " / (true_x[2] - true_x[1]) # " + str(float(freq/(true_x[2] - true_x[1])))
                    if lines_val not in lines[tx][lines_key]:
                        lines[tx][lines_key].append(lines_val)
    
    if bprint:
        for tx in range(0, 3):
            arykeys = sorted([x for x in lines[tx].keys()])
            for key in arykeys:
                if len(lines[tx][key]) > 0:
                    for line in lines[tx][key]:
                        print(line)


freqs = [mpmath.mpf('0.005053970904658658'), mpmath.mpf('0.0016956038973859253'), mpmath.mpf('0.002202971914969611')]
plot_xf = [30.78100951236961, 30.78606348327427, 30.82869994914794]
plot_xf = [mpmath.mpf('30.78100951236961125059178489736453858760398084987088022280968486703375146777021232228371147437696861576976072473626282'), mpmath.mpf('30.78606348327426990937363369249356169595195395787415899143659399834560616379979172855210842117962407135076460184445535'), mpmath.mpf('30.82869994914794004340442378567401772797657260114040804460609924669899541630998892650171571115734305849870010600671987')]
sqrt(p1p2)
30.82869994914794 / 0.005053970904658658  # 6099.896602240153
30.78100951236961 / 0.002202971914969611  # 13972.492932482173
30.78606348327427 / 0.0016956038973859253 # 18156.40051944706

abs(true_x[1] - 30.82869994914794) % 0.005053970904658658 # 0.0000212795860851
abs(true_x[1] - 30.82869994914794) / 0.005053970904658658 # 8.0042104686565463 # 8 + 1/237.50325238622366
true_x[1] / 0.005053970904658658                          # 6107.900812708809
abs(true_x[1] - 30.78100951236961) % 0.002202971914969611 # 0.0000246070028987
abs(true_x[1] - 30.78100951236961) / 0.002202971914969611 # 40.0111699122133917 # 40 + 1/89.52621837091
true_x[1] / 0.002202971914969611                          # 14012.504102394387  # 6.75**5 - math.exp(-2.2) + math.exp(-4.6) + math.exp(-8) + math.exp(-10.6) + math.exp(-13.6) - math.exp(-16.2) + math.exp(-19.8) - math.exp(-25.4)
                                                          # 14012.504102394387  # 14012.5 + 1/243.76008390828582 # 14012.5 + 1/(14012.5/57.484801347837454)
abs(true_x[1] - 30.78606348327427) % 0.0016956038973859253 # 0.0000049217251142 # *** closest distance # 1/203180.79063676938 # 1/(11.160468357562557*18205.4) # 1/(math.pi**2.107377428873601*18205.4)
abs(true_x[1] - 30.78606348327427) / 0.0016956038973859253 # 49.0029026384769534 # 49 + 1/344.5141404759427 # 49 + 1/49.0029026384769534**1.5011089333916736 # 49 + 1/49.1440979668**1.5 # 49 + 1/(49 + 1/math.sqrt(48.15975777719208))**1.5
true_x[1] / 0.0016956038973859253                          # 18205.403422085536 # 18205.4 + 1/292.21946384211014 # 18205.4 + 1/(5.061890556175851*57.72931291167141) # 18205.5 - 1/10.354334172004437 # 18205.5 - 1/(5.061890556175851*2.0455468282243765)
# p1
abs(true_x[0] - 30.798941193523486) % 0.002202971914969611 # 0.0000309396703011 # 1/32320.964970478268 # 1/(2.30674552835016*14011.5) # 1/(2.306721369572387*14011.646745384698)
abs(true_x[0] - 30.798941193523486) / 0.002202971914969611 # 31.0140445141814448
true_x[0] / 0.002202971914969611                           # 14011.646745384698  # mpmath.power(6.75, 5) - mpmath.exp(-0.5) - mpmath.exp(-1.0) + mpmath.exp(-4.0) - mpmath.exp(-6.4) + mpmath.exp(-11.6) + mpmath.exp(-16.8) - mpmath.exp(-22.4) # 14011.5 + 1/6.814524368572042 # 14011.6 + 1/21.392486262772888 # 14011.6 + 1/(6.814524368572042*3.1392486262772885) # 14012.504102394387 - 0.8573570096887124 # 14012.504102394387 - 1 + 1/7.010509228793617 # 14012.504102394387 - 1 + 1/2.3762312100162992**2.25 # 14012.504102394387 - 1 + 1/2.647736623758794**2
                                                           # 14012.504102394387  # mpmath.power(6.75, 5) - mpmath.exp(-2.2) + mpmath.exp(-4.6) + mpmath.exp(-8.0) + mpmath.exp(-10.6) + mpmath.exp(-13.6) - mpmath.exp(-16.2) + mpmath.exp(-19.8) - mpmath.exp(-25.4)
abs(true_x[0] - 30.82353986698438) % 0.0017476732751513483 # 0.0000325636946815
abs(true_x[0] - 30.82353986698438) / 0.0017476732751513483 # 25.0186325986353333
true_x[0] / 0.0017476732751513483                          # 17661.919250830648
abs(true_x[0] - 30.82353986698438) % 0.001619271224148064 # 0.0000040725214675
abs(true_x[0] - 30.82353986698438) / 0.001619271224148064 # 27.0025150335575885
true_x[0] / 0.001619271224148064                          # 19062.442290233266
abs(true_x[0] - 30.82133689506941) % 0.0015303898169188245 # 0.0000156729808701
abs(true_x[0] - 30.82133689506941) / 0.0015303898169188245 # 30.0102411690779087
true_x[0] / 0.0015303898169188245                          # 20169.54368182072 # 20169.5 + 1/22.892818648975013
# p2
abs(true_x[2] - 30.805770454877525) % 0.00383753314708935 # 0.0000332110066970
abs(true_x[2] - 30.805770454877525) / 0.00383753314708935 # 17.0086542592400239
true_x[2] / 0.00383753314708935                           # 8044.501648878126
abs(true_x[2] - 30.78100951236961) % 0.002045462981653347 # 0.0000318458223806
abs(true_x[2] - 30.78100951236961) / 0.002045462981653347 # 44.0155690045072134
true_x[2] / 0.002045462981653347                          # 15092.447043178305
abs(true_x[2] - 30.794252435073265) % 0.0018728708175744396 # 0.0000015907909222
abs(true_x[2] - 30.794252435073265) / 0.0018728708175744396 # 41.0008493863577444
true_x[2] / 0.0018728708175744396                           # 16483.273400226244
abs(true_x[2] - 30.764400049946698) % 0.0017476732751513483 # 0.0000336096538080
abs(true_x[2] - 30.764400049946698) / 0.0017476732751513483 # 61.0192310852869050
true_x[2] / 0.0017476732751513483                           # 17664.08067704263
abs(true_x[2] - 30.82353986698438) % 0.0016956038973859253 # 0.0000249532735524 # 1/40074.90231291999
abs(true_x[2] - 30.82353986698438) / 0.0016956038973859253 # 28.0147164521094360
true_x[2] / 0.0016956038973859253                          # 18206.517322222448 # 18206.5 + 1/57.72931291167141 # 18205.403422085536 + 1.1139001369119796 # 18205.403422085536 + 1.1138319869471593*(18206.517322222448/18205.403422085536) # 18205.4 + (18206.517322222448/18205.403422085536)**1763.0227805342565 #  18205.4 + (18206.517322222448/18205.403422085536)**(18205.4/10.326242066187675)
true_x[2] % 0.0015303898169188245                           # 0.000018342498210905
abs(true_x[2] - 30.764400049946698) / 0.0015303898169188245 # 69.6826901610891006
true_x[2] / 0.0015303898169188245                           # 20172.011985507226 # 20172 + 1/83.43409929541517

18206.517322222448 - 18205.403422085536 # 1.1139001369119796 / 0.0016956038973859253 # 656.9341687815502
18205.403422085536 / 656.9341687815502
18205.403422085536/6107.900812708809 # 2.980631804662783 # 3 - 1/51.631036479606415

(true_x[0] - 30.798941193523486) / 0.001516277414021006

(true_x[0] - 30.80981229099101) % 0.0024958542104906835 # 0.0000473247255475 # 1/21130.603261424018    # 1/(205.97969933302255*102.58585350811983)    # 1/(206*102.57574398749523) # 1/(103*205.15148797499046) # 1/(102.98984966660814*205.17170701604667)
(true_x[0] - 30.80981229099101) / 0.0024958542104906835 # 1.0018647296849527 # 1 + 1/536.2707571340914 # 1 + 1/(533.93965596362 + 2.3311011704713565) #  1 + 1/(5.2*103.12899175655603) # 1 + 1/(2.6*206.25798351311207) # 1 + 1/(5.2*103 + 1/7.75243338566082) # 1 + 1/(2.6*206 + 1/3.8762166928302597)
(true_x[0] - 30.812308145201502) % 0.0024958542104906835 # 0.0000473247255475
(true_x[0] - 30.812308145201502) / 0.0024958542104906835 # 1.0017835767803361 # 1 + 1/560.6711250252756
0.38904074062231564 / (true_x[1] - true_x[0]) # 205.97969933302255 # 206 - 1/49.25946527327857 # 206 - 1/(206/4.181937397354318) # 4.2 - 1/55.36300718208196 # 4.2 - 1/(206/4 + 3.863007182081958)    # 4.2 - 1/(205.97969933302255/4 + 3.86808234882632) 
0.38904074062231564 / (true_x[2] - true_x[0]) # 102.98984966660814 # 103 - 1/98.51893148668985 # 103 - 1/(103 - 4.481068513310149) # 4.5 - 1/52.82205335390131 # 4.5 - 1/(103/2 + 1.3220533539013104) # 4.5 - 1/(102.98984966660814/2 + 1.3271285205972418)
0.38904074062231564 / (true_x[2] - true_x[1]) # 205.97969933341    # 206 - 1/49.259466213411294
0.38904074062231564 / 206
21130.603261424018/30.87104172938474 # 684.4797608922526/30.87104172938474 # 22.172227516401
536.2707571340914/30.87104172938474  # 17.371320405544967
205.97969933302255/30.87104172938474 # 6.672262670584254
102.98984966660814/30.87104172938474 # 3.3361313352952644
98.51893148668985/30.87104172938474  # 3.191305701644469
49.25946527327857/30.87104172938474  # 1.5956528355954613


# 
# 17777242415791 * 32443897622537 = 576763032948945539326281767
# 30.508940239260962 + 31.110533486618692 = 2 * 30.809736862939825
# 
# p1p2
abs(true_x[1] - 30.74522338554274) % 0.0015156215955135798 # 0.0000452965571792
abs(true_x[1] - 30.74522338554274) / 0.0015156215955135798 # 241.0298864553747281
true_x[1] / 0.0015156215955135798                          # 20526.5836662063739979 # 7.25**5 + 3.25**5 + 2.5**5 + 2**5 + 1.25**5 + 1.25**-0.5 - mpmath.exp(-3.5) + mpmath.exp(-6.4) + mpmath.exp(-13.5) + mpmath.exp(-17.2) - mpmath.exp(-21) - mpmath.exp(-23.2) + mpmath.exp(-25.6)
# p1
true_x[0] % 0.004372144256278668                           # 0.0001176189484144
abs(true_x[0] - 30.72280839535128) / 0.004372144256278668  # 48.9160795148032201
true_x[0] / 0.004372144256278668                           # 6978.0269018910447790
abs(true_x[0] - 30.72426438479203) % 0.0015156215955135798 # 0.0001058789681397
abs(true_x[0] - 30.72426438479203) / 0.0015156215955135798 # 142.0698584451772984
                                                           # 20526.5836662063739979 # 7.25**5 + 3.25**5 + 2.5**5 + 2**5 + 1.25**5 + 1.25**-0.5 - mpmath.exp(-3.5)   + mpmath.exp(-6.4) + mpmath.exp(-13.5) + mpmath.exp(-17.2) - mpmath.exp(-21) - mpmath.exp(-23.2) + mpmath.exp(-25.6)
                                                           # 20526.5836662063739979 # 7.25**5 + 3.25**5 + 2.5**5 + 2**5 + 1.25**5              + mpmath.exp(-0.125) - mpmath.exp(-4) + mpmath.exp(-6.4) + mpmath.exp(-10) + mpmath.exp(-12.4) + mpmath.exp(-14.6) - mpmath.exp(-17.4) + mpmath.exp(-21) + mpmath.exp(-24.4)
                                                           # 20526.5836662063739979 # 7.25**5 + mpmath.exp(6.2) + mpmath.exp(1.2) + mpmath.exp(-2.4) + mpmath.exp(-5.4) + mpmath.exp(-8) - mpmath.exp(-11.8) + mpmath.exp(-14.8) + mpmath.exp(-18.2) - mpmath.exp(-21.4) - mpmath.exp(-25.2) - mpmath.exp(-28.2) + mpmath.exp(-31.2) - mpmath.exp(-35.8) - mpmath.exp(-40.2) - mpmath.exp(-44) - mpmath.exp(-47) - mpmath.exp(-51.6) - mpmath.exp(-57.2) - mpmath.exp(-61.4) + mpmath.exp(-64.5) - mpmath.exp(-68)
                                                           # 20129.6552711910755395 # 7.25**5 + mpmath.exp(4.6) - mpmath.exp(-1.4) - mpmath.exp(-6.6) - mpmath.exp(-10.4) - mpmath.exp(-13.2) - mpmath.exp(-15.8)                - mpmath.exp(-18.4) - mpmath.exp(-21.2) - mpmath.exp(-25) 
true_x[0] / 0.0015156215955135798                          # 20129.6552711910755395 # 7.25**5           + 2.5**5                               + mpmath.exp(0.5)    - mpmath.exp(-2.6) + mpmath.exp(-5.2) + mpmath.exp(-9) - mpmath.exp(-11.4) - mpmath.exp(-14.4) - mpmath.exp(-17.2) - mpmath.exp(-20.4) + mpmath.exp(-25)
                                                           #                        # 7.25**5           + 2.5**5 + 2**0.5                      + mpmath.exp(-1.8)   + mpmath.exp(-7.5) + mpmath.exp(-11.5) + mpmath.exp(-15.4) + mpmath.exp(-18.6) + mpmath.exp(-23) + mpmath.exp(-26.4)
                                                           #                        # 7.25**5           + 2.5**5 + 2**0.5 + 1.25**2            + mpmath.exp(-4)     - mpmath.exp(-7.2) + mpmath.exp(-11.8) - mpmath.exp(-14.2) + mpmath.exp(-20.2) + math.exp(-23.8)
abs(true_x[0] - 30.72426438479203) % 0.003470977510417346  # 0.0001235398851925
abs(true_x[0] - 30.72426438479203) / 0.003470977510417346  # 62.0355922459370073
true_x[0] / 0.003470977510417346                           # 8789.7257034064167956
# p2
abs(true_x[2] - 30.72426438479203) % 0.003470977510417346  # 0.0000385208628262
abs(true_x[2] - 30.72426438479203) / 0.003470977510417346  # 8901.0110979868670002
true_x[2] / 0.003470977510417346                           # 17752.7723936392208032


# 13860658187287 * 44038395018313 = 610401140465559117748786831
# p1
abs(true_x[0] - 30.763377277125358) % 0.5621157020991952 # 0.5033016803023368 # 1/1.986879915440165
abs(true_x[0] - 30.763377277125358) / 0.5621157020991952 # 0.8953702563774323
true_x[0] / 0.5621157020991952                           # 53.8324680912099739
30.763377277125358 / 0.5621157020991952                  # 54.72783834758741
true_x[0] % 0.5621157020991952                           # 0.4679433855656714
abs(true_x[0] - 30.763377277125358) / 0.5621157020991953 # 0.8953702563774323
true_x[0] / 0.5621157020991952                           # 53.8324680912099739
abs(true_x[0] - 30.764808917358042) % 0.5621157020991952 # 0.5047333205350233 # 1/1.9812442716085952
abs(true_x[0] - 30.764808917358042) / 0.5621157020991952 # 0.8979171345865628
30.764808917358042 / 0.5621157020991952                  # 54.73038522579654
abs(true_x[0] - 30.778367255920884) % 0.5621157020991952 # 0.5182916590978652 # 1/1.9294155760495795
abs(true_x[0] - 30.778367255920884) / 0.5621157020991952 # 0.9220373264122118
30.778367255920884 / 0.5621157020991952                  # 54.754505417622184 # 2.25**5 - mpmath.exp(1.0) - mpmath.exp(-1.6) + mpmath.exp(-4.6) - mpmath.exp(-7.8) + mpmath.exp(-12.8) - mpmath.exp(-15.6) + mpmath.exp(-18.6) - mpmath.exp(-21.5) + mpmath.exp(-24.5) - mpmath.exp(-27.6) + mpmath.exp(-30.4) - mpmath.exp(-34.2)
abs(true_x[0] - 30.780197246404718) % 0.5621157020991952 # 0.5201216495816989 # 1/1.9226271407933837
abs(true_x[0] - 30.780197246404718) / 0.5621157020991952 # 0.9252928670010969
30.780197246404718 / 0.5621157020991952                  # 54.75776095821107
abs(true_x[0] - 30.898831899383953) % 0.5621157020991952 # 0.0766406004617395 # 1/13.04791447320691
abs(true_x[0] - 30.898831899383953) / 0.5621157020991952 # 1.1363431054772687
30.898831899383953 / 0.5621157020991952                  # 54.96881119668724
abs(true_x[0] - 30.901863034039007) % 0.5621157020991952 # 0.0796717351167913 # 1/12.551502719679615
abs(true_x[0] - 30.901863034039007) / 0.5621157020991952 # 1.1417354733540815
30.901863034039007 / 0.5621157020991952                  # 54.97420356456406
abs(true_x[0] - 30.91012622973847) % 0.5621157020991952 # 0.0879349308162558 # 1/11.372045110145663
abs(true_x[0] - 30.91012622973847) / 0.5621157020991952 # 1.1564356421424751
30.91012622973847 / 0.5621157020991952                 # 54.98890373335245
abs(true_x[0] - 30.913110711926645) % 0.5621157020991952 # 0.0909194130044298 # 1/10.998751168260153
abs(true_x[0] - 30.913110711926645) / 0.5621157020991952 # 1.1617450155989157
30.913110711926645 / 0.5621157020991952                 # 54.99421310680889
abs(true_x[0] - 30.936614120010802) % 0.5621157020991952 # 0.1144228210885858 # 1/8.739515338691067
abs(true_x[0] - 30.936614120010802) / 0.5621157020991952 # 1.2035574182704363
30.936614120010802 / 0.5621157020991952                 # 55.03602550948041
abs(true_x[0] - 30.940790867840878) % 0.5621157020991952 # 0.1185995689186636 # 1/8.431733851290865
abs(true_x[0] - 30.940790867840878) / 0.5621157020991952 # 1.2109878241717123
30.940790867840878 / 0.5621157020991952                 # 55.043455915381685
abs(true_x[0] - 30.970703023385145) % 0.5621157020991952 # 0.1485117244629318 # 1/6.733475108556815
abs(true_x[0] - 30.970703023385145) / 0.5621157020991952 # 1.2642013448624930
30.970703023385145 / 0.5621157020991952                 # 55.09666943607247
abs(true_x[0] - 30.972415414687156) % 0.5621157020991952 # 0.1502241157649402 # 1/6.656720826133715
abs(true_x[0] - 30.972415414687156) / 0.5621157020991952 # 1.2672476773090223
30.972415414687156 / 0.5621157020991952                 # 55.099715768519
abs(true_x[0] - 31.05515181888627) % 0.5621157020991952 # 0.2329605199640558 # 1/4.292572836608936
abs(true_x[0] - 31.05515181888627) / 0.5621157020991952 # 1.4144351760573055
31.05515181888627 / 0.5621157020991952                 # 55.24690326726728
abs(true_x[0] - 31.05739374058139) % 0.5621157020991952 # 0.2352024416591759 # 1/4.251656542958286
abs(true_x[0] - 31.05739374058139) / 0.5621157020991952 # 1.4184235394614014
31.05739374058139 / 0.5621157020991952                 # 55.250891630671376
abs(true_x[0] - 31.17065368634629) % 0.5621157020991952 # 0.3484623874240759 # 1/2.8697501827736946
abs(true_x[0] - 31.17065368634629) / 0.5621157020991952 # 1.6199122104626488
31.17065368634629 / 0.5621157020991952                 # 55.452380301672626
abs(true_x[0] - 31.18808691308122) % 0.5621157020991952 # 0.3658956141590078 # 1/2.733019914158983
abs(true_x[0] - 31.18808691308122) / 0.5621157020991952 # 1.6509258019169141
31.18808691308122 / 0.5621157020991952                 # 55.48339389312689
abs(true_x[0] - 30.628522177438057) % 0.5621157020991952 # 0.3684465806150382 # 1/2.7140976538056782
abs(true_x[0] - 30.628522177438057) / 0.5621157020991952 # 0.6554639538427613
30.628522177438057 / 0.5621157020991952                 # 54.48793204505274
abs(true_x[0] - 30.690200207962977) % 0.5621157020991952 # 0.4301246111399595 # 1/2.3249076525746792
abs(true_x[0] - 30.690200207962977) / 0.5621157020991952 # 0.7651887494579478
30.690200207962977 / 0.5621157020991952                 # 54.59765684066792
abs(true_x[0] - 30.691654295093002) % 0.5621157020991952 # 0.4315786982699841 # 1/2.3170745080991613
abs(true_x[0] - 30.691654295093002) / 0.5621157020991952 # 0.7677755605443388
30.691654295093002 / 0.5621157020991952                 # 54.60024365175431
abs(true_x[0] - 30.747681721623533) % 0.5621157020991952 # 0.4876061248005120 # 1/2.050835600986589
abs(true_x[0] - 30.747681721623533) / 0.5621157020991952 # 0.8674479701946937
30.747681721623533 / 0.5621157020991952                 # 54.699916061404664
abs(true_x[0] - 30.750918182269924) % 0.5621157020991952 # 0.4908425854469033 # 1/2.037313040166468
abs(true_x[0] - 30.750918182269924) / 0.5621157020991952 # 0.8732056116096281
30.750918182269924 / 0.5621157020991952                 # 54.7056737028196
abs(true_x[0] - 30.755532853363547) % 0.5621157020991952 # 0.4954572565405286 # 1/2.0183375796781764
abs(true_x[0] - 30.755532853363547) / 0.5621157020991952 # 0.8814150800098027
30.755532853363547 / 0.5621157020991952                 # 54.71388317121978
abs(true_x[0] - 30.758453319502152) % 0.5621157020991952 # 0.4983777226791344 # 1/2.0065102320871997
abs(true_x[0] - 30.758453319502152) / 0.5621157020991952 # 0.8866105693506972
30.758453319502152 / 0.5621157020991952                 # 54.71907866056067
abs(true_x[0] - 30.77734099476161) % 0.5621157020991952 # 0.5172653979385900 # 1/1.9332435612070853
abs(true_x[0] - 30.77734099476161) / 0.5621157020991952 # 0.9202116148097024
30.77734099476161 / 0.5621157020991952                 # 54.75267970601968
abs(true_x[0] - 30.77914465661436) % 0.5621157020991952 # 0.5190690597913401 # 1/1.9265259239338761
abs(true_x[0] - 30.77914465661436) / 0.5621157020991952 # 0.9234203169434702
30.77914465661436 / 0.5621157020991952                 # 54.755888408153446
abs(true_x[0] - 30.783129469342803) % 0.5621157020991952 # 0.5230538725197841 # 1/1.9118489557921698
abs(true_x[0] - 30.783129469342803) / 0.5621157020991952 # 0.9305092716080755
30.783129469342803 / 0.5621157020991952                 # 54.76297736281805
abs(true_x[0] - 30.785641404272194) % 0.5621157020991952 # 0.5255658074491747 # 1/1.9027112986164074
abs(true_x[0] - 30.785641404272194) / 0.5621157020991952 # 0.9349779867142536
30.785641404272194 / 0.5621157020991952                 # 54.76744607792423
abs(true_x[0] - 30.788490769157644) % 0.5621157020991952 # 0.5284151723346238 # 1/1.8924513381813735
abs(true_x[0] - 30.788490769157644) / 0.5621157020991952 # 0.9400469874107442
30.788490769157644 / 0.5621157020991952                 # 54.77251507862072
abs(true_x[0] - 30.791293681672254) % 0.5621157020991952 # 0.5312180848492338 # 1/1.8824660314112087
abs(true_x[0] - 30.791293681672254) / 0.5621157020991952 # 0.9450333496563507
30.791293681672254 / 0.5621157020991952                 # 54.777501440866324
abs(true_x[0] - 30.79364243650583) % 0.5621157020991952 # 0.5335668396828127 # 1/1.8741794385019612
abs(true_x[0] - 30.79364243650583) / 0.5621157020991952 # 0.9492117684850858
30.79364243650583 / 0.5621157020991952                 # 54.78167985969506
abs(true_x[0] - 30.972415414687156) % 0.0030311346550517 # 0.0000231739269755 # 1/43151.94403850263
abs(true_x[0] - 30.972415414687156) / 0.0030311346550517 # 235.0076452977557094
true_x[0] / 0.0030311346550517                           # 9983.0852273062240833
30.972415414687156 / 0.0030311346550517                 # 10218.09287260398

# 13860658187287 * 44038395018313 = 610401140465559117748786831
# p1p2
true_x[1] % 0.5621157020991952                           # 0.4838313767515046
abs(true_x[1] - 30.763377277125358) / 0.5621157020991953 # 0.1328943715746071
true_x[1] / 0.5621157020991952                           # 54.8607327191620134 # 2.25**5 - mpmath.exp(1.0) - mpmath.exp(-2.4) + mpmath.exp(-5.4) + mpmath.exp(-8.6) - mpmath.exp(-11.8) + mpmath.exp(-15.2) + mpmath.exp(-19.0) + mpmath.exp(-22.4) - mpmath.exp(-25.4) + mpmath.exp(-35.4) 
                                                         #                     # mpmath.exp(4.0) + mpmath.exp(-1.4) + mpmath.exp(-4.2) + mpmath.exp(-7.0) + mpmath.exp(-9.4) - mpmath.exp(-12.4) - mpmath.exp(-14.8) + mpmath.exp(-17.2) - mpmath.exp(-19.8) + mpmath.exp(-23.4) - mpmath.exp(-26.5) + mpmath.exp(-30.0) + mpmath.power(2, -52.7886119137688507)
                                                         #                     # mpmath.exp(4.0) + mpmath.exp(-1.4) + mpmath.exp(-4.2) + mpmath.exp(-7.0) + mpmath.exp(-9.4) - mpmath.exp(-12.4) - mpmath.exp(-14.8) + mpmath.exp(-17.2) - mpmath.exp(-19.8) + mpmath.exp(-23.4) - mpmath.exp(-26.5) + mpmath.exp(-30.0) + mpmath.power(1.9483183594682465, -54.8607327191620134) 1.50143883103
                                                         #                     #                                                                                                                                                                                                                                           mpmath.power(2 - mpmath.power(0.2, 1.8407996065504961), -54.8607327191620134)
                                                         #                     #                                                                                                                                                                                                                                           mpmath.power(2 - mpmath.power(0.2, mpmath.power(1.501424231, 1.501424231)), -54.8607327191620134)
                                                         #                     # mpmath.exp(4.0) + mpmath.exp(-1.4) + mpmath.exp(-4.2) + mpmath.exp(-7.0) + mpmath.exp(-9.4) - mpmath.exp(-12.4) - mpmath.exp(-14.8) + mpmath.exp(-17.2) - mpmath.exp(-19.8) + mpmath.exp(-23.4) - mpmath.exp(-26.5) + mpmath.exp(-30.0) + mpmath.exp(-36.5) + mpmath.power(2, -56.19249007281655)
                                                         #                     # mpmath.exp(4.0) + mpmath.exp(-1.4) + mpmath.exp(-4.2) + mpmath.exp(-7.0) + mpmath.exp(-9.4) - mpmath.exp(-12.4) - mpmath.exp(-14.8) + mpmath.exp(-17.2) - mpmath.exp(-19.8) + mpmath.exp(-23.4) - mpmath.exp(-26.5) + mpmath.exp(-30.0) + mpmath.exp(-36.5) + mpmath.power(2.03393734529866, -54.8607327191620134)
                                                         #                     #                                                                                                                                                                                                                                                               mpmath.power(2 + mpmath.power(2*mpmath.pi(), 1.840840881880666), -54.8607327191620134)
                                                         #                     #                                                                                                                                                                                                                                                               mpmath.power(2 + mpmath.power(2*mpmath.pi(), mpmath.power(1.50144004844807102, 1.50144004844807102)), -54.8607327191620134)
30.763377277125358 / 0.5621157020991952                  # 54.72783834758741   # 2.25**5 - mpmath.exp(1.0) - mpmath.exp(-1.5) + mpmath.exp(-5.4) - mpmath.exp(-8.0) + mpmath.exp(-10.4) - mpmath.exp(-15.0) + mpmath.exp(-17.4) + mpmath.exp(-20.6) - mpmath.exp(-23.2) + mpmath.exp(-27.2) - mpmath.exp(-30.5) + mpmath.exp(-33.5)
abs(true_x[1] - 30.970703023385145) % 0.5621157020991952 # 0.1326237332770986 # 1/7.540128567415913
abs(true_x[1] - 30.970703023385145) / 0.5621157020991952 # 0.2359367169104535
30.970703023385145 / 0.5621157020991952                  # 55.09666943607247
abs(true_x[1] - 30.972415414687156) % 0.5621157020991952 # 0.1343361245791070 # 1/7.44401405901155
abs(true_x[1] - 30.972415414687156) / 0.5621157020991952 # 0.2389830493569828
30.972415414687156 / 0.5621157020991952                  # 55.099715768519
abs(true_x[1] - 31.05515181888627) % 0.5621157020991952  # 0.2170725287782226 # 1/4.60675519665445
abs(true_x[1] - 31.05515181888627) / 0.5621157020991952  # 0.3861705481052660
31.05515181888627 / 0.5621157020991952                   # 55.24690326726728
abs(true_x[1] - 31.05739374058139) % 0.5621157020991952  # 0.2193144504733427 # 1/4.55966306753484
abs(true_x[1] - 31.05739374058139) / 0.5621157020991952  # 0.3901589115093619
31.05739374058139 / 0.5621157020991952                   # 55.250891630671376
abs(true_x[1] - 31.17065368634629) % 0.5621157020991952  # 0.3325743962382427 # 1/3.006846020953582
abs(true_x[1] - 31.17065368634629) / 0.5621157020991952  # 0.5916475825106093
abs(true_x[0] - 31.17065368634629) % 0.5621157020991952  # 0.3484623874240774 # 1/2.8697501827736826959
abs(true_x[2] - 31.17065368634629) % 0.5621157020991952  # 0.2454292970467843 # 1/4.0744931922670077226
true_x[0] / mpmath.mpf('0.562115702099195236674574356')  # 53.83246809120997396432583444  
true_x[2] / mpmath.mpf('0.562115702099195236674574356')  # 55.88899734711405293338401726
1/(55.8889973471140529334 - 53.8324680912099739643 - 2)  # 17.689955121588675 # math.exp(2.8729969712317134)
31.17065368634629 / 0.5621157020991952                   # 55.452380301672626
abs(true_x[1] - 31.18808691308122) % 0.5621157020991952  # 0.3500076229731746 # 1/2.85708063014571
abs(true_x[1] - 31.18808691308122) / 0.5621157020991952  # 0.6226611739648746
31.18808691308122 / 0.5621157020991952                   # 55.48339389312689
abs(true_x[1] - 30.625971210982026) % 0.5621157020991952 # 0.2121080791260205 # 1/4.71457760647517
abs(true_x[1] - 30.625971210982026) / 0.5621157020991952 # 0.3773388260351253
30.625971210982026 / 0.5621157020991952                  # 54.48339389312689
abs(true_x[1] - 30.628522177438057) % 0.5621157020991952 # 0.2095571126699901 # 1/4.771968783396995
abs(true_x[1] - 30.628522177438057) / 0.5621157020991952 # 0.3728006741092781
30.628522177438057 / 0.5621157020991952                  # 54.48793204505274
abs(true_x[1] - 30.690200207962977) % 0.5621157020991952 # 0.1478790821450689 # 1/6.762281625598698
abs(true_x[1] - 30.690200207962977) / 0.5621157020991952 # 0.2630758784940916
30.690200207962977 / 0.5621157020991952                  # 54.59765684066792
abs(true_x[1] - 30.691654295093002) % 0.5621157020991952 # 0.1464249950150442 # 1/6.829435096769211
abs(true_x[1] - 30.691654295093002) / 0.5621157020991952 # 0.2604890674077006
30.691654295093002 / 0.5621157020991952                  # 54.60024365175431
abs(true_x[1] - 30.788490769157644) % 0.0082631956994645 # 0.0000093467536170 # 1/106989.01896491852
abs(true_x[1] - 30.788490769157644) / 0.0082631956994645 # 6.0011311306130269
true_x[1] / 0.0082631956994645                           # 3731.9797826047141282
30.788490769157644 / 0.0082631956994645                  # 3725.9786514741013
abs(true_x[1] - 30.778367255920884) % 0.0029844821881739 # 0.0000223904236843 # 1/44661.95075611823
abs(true_x[1] - 30.778367255920884) / 0.0029844821881739 # 20.0075022808891583
true_x[1] / 0.0029844821881739                           # 10332.8072830538091893
30.778367255920884 / 0.0029844821881739                  # 10312.79978077292
abs(true_x[1] - 30.901863034039007) % 0.0025509664560304 # 0.000009582530198070886802071471680040160 # this is the 5th closest dist1 1/104356.57173314368
abs(true_x[1] - 30.901863034039007) / 0.0025509664560304 # 25.00375643128329582664804478078613496434 # mpmath.power(5, 5) + mpmath.exp(-5.5) - mpmath.exp(-8.0) + mpmath.exp(-12.2) + mpmath.exp(-16.2) - mpmath.exp(-22.8) + mpmath.exp(-25.8) + mpmath.exp(-29.2) + mpmath.exp(-32.4)
                                                         # 25.00375643128329627984385297168046236038 # mpmath.power(mpmath.mpf('8514988941514031247617795324661855921319513961031.25'), mpmath.fdiv(1, 35)) 
                                                         # 25.00375643896367147955710629327391568685 # mpmath.power(mpmath.mpf('9772964'), mpmath.fdiv(1, 5))
                                                         # 25.00375643128329582664807647810103160706 # mpmath.power(mpmath.mpf('933423853409084089129.5'), mpmath.fdiv(1, 15))
                                                         # 25.00375643128329582664804478078613496464 # mpmath.power(mpmath.mpf('89152082362240760807358492089214807'), mpmath.fdiv(1, 25))
                                                         # 25.00375643128329582664804478078613496434 # mpmath.power(mpmath.mpf('83216680258006811073609796328217452211874278893369865352.5'), mpmath.fdiv(1, 40))
true_x[1] / mpmath.mpf('0.002550966456030401167892')     # 12088.78275024269244791436343262091751152 # mpmath.power(6.5, 5) + mpmath.exp(6.0) + mpmath.exp(4.4) + mpmath.exp(0.0) - mpmath.exp(-5.8) - mpmath.exp(-9.0) - mpmath.exp(-11.4) + mpmath.exp(-15.2) - mpmath.exp(-19.0) + mpmath.exp(-22.4) - mpmath.exp(-25.2) - mpmath.exp(-27.6) + mpmath.exp(-30.4) - mpmath.exp(-34.4)
                                                         #                                           # mpmath.exp(9.4)                                          + mpmath.exp(-1.0) + mpmath.exp(-3.4) + mpmath.exp(-7.2) + mpmath.exp(-10.8) + mpmath.exp(-15.0) + mpmath.exp(-17.5) - mpmath.exp(-20.2) - mpmath.exp(-23.4) + mpmath.exp(-26.2) + mpmath.exp(-31.4) - mpmath.exp(-34.2)
                                                         # 12088.78275024269244791436343262091751152 # mpmath.power(mpmath.mpf('1147002386805484836077074125766947921489352450591010527835305731937317038554909176880793207765172593147.4'), mpmath.fdiv(1, 25))
                                                         # 12088.78275024269244791436343262091751152 # mpmath.power(mpmath.mpf('296126440229541543879786685574046841164406409498753472296326034200507307918729709896398324548770752061584691246640004427134.2'), mpmath.fdiv(1, 30))
mpmath.mpf('30.901863034039005507838471438528921') / mpmath.mpf('0.002550966456030401167892021421301541341943') 
                                                         # 12113.78650667397574374101147740170364649 # mpmath.power(6.5, 5) + mpmath.exp(6.2) + mpmath.exp(2.8) + mpmath.exp(0.5) + mpmath.exp(-3.2) - mpmath.exp(-5.8) + mpmath.exp(-9.0) - mpmath.exp(-11.4) + mpmath.exp(-14.2) - mpmath.exp(-19.0) + mpmath.exp(-22.4) - mpmath.exp(-25.2) - mpmath.exp(-28.0) - mpmath.exp(-30.6) + mpmath.exp(-33.2)
                                                         #                                           # mpmath.exp(9.4) + mpmath.exp(3.2) + mpmath.exp(-0.2) + mpmath.exp(-2.8) - mpmath.exp(-5.0) + mpmath.exp(-7.8) + mpmath.exp(-10.2) - mpmath.exp(-12.5) + mpmath.exp(-15.4) + mpmath.exp(-18.8) + mpmath.exp(-21.2) + mpmath.exp(-25.0) - mpmath.exp(-27.4) - mpmath.exp(-30.2) + mpmath.exp(-33.0)
                                                         # 12113.78650667397574374101147740170364649 # mpmath.power(mpmath.mpf('315063041868513246574776793301780695048255700844263681488930100799527277731890553138881395877763974549416421204259190062821') + 2 * mpmath.exp(-1), mpmath.fdiv(1, 30))
                                                         #                                             (1 + mpmath.exp(-2.75) + mpmath.exp(-10.8) - mpmath.exp(-14.4) - mpmath.exp(-18.0)) - mpmath.fdiv(mpmath.mpf('315063041868513246574776793301780695048255700844263681488930100799527277731890553138881395877763974549416421204259190062821') + 2 * mpmath.exp(-1), mpmath.mpf('296126440229541543879786685574046841164406409498753472296326034200507307918729709896398324548770752061584691246640004427134.2'))
abs(true_x[1] - 30.913110711926645) % 0.0018299904838336 # 0.000001811981418212555070832043012875229 # *** this is the minimum dist1 1/551882.0391582485
abs(true_x[1] - mpmath.mpf('30.913110711926644031117571608553045489')) / mpmath.mpf('0.00182999048383361977580809621915439337491226')
                                                         # 41.00099015892936047526216789568066596745 # mpmath.power(2, 5) + mpmath.power(1.5, 5) + 1 + mpmath.exp(-1) + mpmath.exp(-3.2) - mpmath.exp(-6.5) + mpmath.exp(-9.2) + mpmath.exp(-13.8) - mpmath.exp(-16.0) + mpmath.exp(-18.4) + mpmath.exp(-22.0) - mpmath.exp(-25.0) + mpmath.exp(-28.5) - mpmath.exp(-30.8) + mpmath.exp(-35.0)  
true_x[1] / mpmath.mpf('0.0018299904838336197758080962191543933749122609043695173324739812205320708645167732613799225841')
                                                         # 16851.49707746338383116528707983482326730 #
                                                         # 16851.49707746338383116528707983482326730 # mpmath.power(mpmath.mpf('3410120990396206802858935819703850776766814276086082047393374354529545356364818267032') - math.log(0.8526055020137254/2), mpmath.fdiv(1, 20))
                                                         # 16851.49707746338383116528707983482326730 # mpmath.power(mpmath.mpf('6297304329237536803979763614502232470852934231590732673290659427740219020099315363630421547057414690114598668542620055689875009.6'), mpmath.fdiv(1, 30))
true_x[1] / mpmath.mpf('16852')                          # mpmath.mpf('0.00182993587052623115403242160168079174492474014')
true_x[1] / mpmath.mpf('16851.5')                        # mpmath.mpf('0.001829990166460436602543059598939245911964615663318')
true_x[1] / mpmath.mpf('16851')                          # mpmath.mpf('0.00183004446561676146268793358444749287789874315')
true_x[0] / (true_x[1] / mpmath.mpf('16852'))
mpmath.mpf('30.913110711926644031117571608553045489') / mpmath.mpf('0.00182999048383361977580809621915439337491226090437')
                                                         # 16892.49806762231319164054924773050393331 #
                                                         # 16892.49806762231319164054924773050393331 # mpmath.power(mpmath.mpf('3579954923648870916658080060929982493155920476885281599545786216761783699318264979286') + mpmath.exp(-1), mpmath.fdiv(1, 20))
                                                         # 16892.49806762231319164054924773050393331 # mpmath.power(mpmath.mpf('6773549946090487024017025260174624092630932967962963805290435221506069153501592130624923584857422063651884443671038202523542044'), mpmath.fdiv(1, 30))
                                                         #                                             (1 + mpmath.exp(-3.0) + mpmath.exp(-11.0) - mpmath.exp(-14.0) - mpmath.exp(-17.2) + mpmath.exp(-21.0) + mpmath.exp(-23.8) - mpmath.exp(-27.8) - mpmath.exp(-32.4)) - mpmath.fdiv(mpmath.mpf('3579954923648870916658080060929982493155920476885281599545786216761783699318264979286') + mpmath.exp(-1), mpmath.mpf('3410120990396206802858935819703850776766814276086082047393374354529545356364818267032') - math.log(0.8526055020137254/2))
                                                         #                                             (1 + mpmath.power(mpmath.pi(), -2.25)
                                                         #                                             (1 + mpmath.power(2 * mpmath.pi(), -1.4) - mpmath.power(2 * mpmath.pi(), -4) - mpmath.power(2 * mpmath.pi(), -5.6) - mpmath.power(2 * mpmath.pi(), -7.2) + mpmath.power(2 * mpmath.pi(), -9)) - (mpmath.mpf('6773549946090487024017025260174624092630932967962963805290435221506069153501592130624923584857422063651884443671038202523542044') / mpmath.mpf('6297304329237536803979763614502232470852934231590732673290659427740219020099315363630421547057414690114598668542620055689875009.6'))
0.5621157020991953 / (true_x[1] - true_x[0]) # 0.972512301616041
0.5621157020991953 / (true_x[2] - true_x[0]) # 0.4862561508080205
0.5621157020991953 / (true_x[2] - true_x[1]) # 0.972512301616041

# 13860658187287 * 44038395018313 = 610401140465559117748786831
# p2
abs(true_x[2] - 30.763377277125358) % 0.5621157020991952 # 0.0905900041685248 # 1/11.038745490503537
abs(true_x[2] - 30.763377277125358) / 0.5621157020991952 # 1.1611589995266466
true_x[2] / 0.5621157020991952                           # 55.8889973471140529
30.763377277125358 / 0.5621157020991952                  # 54.72783834758741
true_x[2] % 0.5621157020991952                           # 0.4997193679373378
abs(true_x[2] - 30.763377277125358) / 0.5621157020991953 # 1.1611589995266466
true_x[2] / 0.5621157020991952                           # 55.8889973471140529
abs(true_x[2] - 30.764808917358042) % 0.5621157020991952 # 0.0891583639358382 # 1/11.215997645713166
abs(true_x[2] - 30.764808917358042) / 0.5621157020991952 # 1.1586121213175160
30.764808917358042 / 0.5621157020991952                  # 54.73038522579654
abs(true_x[2] - 30.778367255920884) % 0.5621157020991952 # 0.0756000253729963 # 1/13.227508788074967
abs(true_x[2] - 30.778367255920884) / 0.5621157020991952 # 1.1344919294918671
30.778367255920884 / 0.5621157020991952                  # 54.754505417622184
abs(true_x[2] - 30.780197246404718) % 0.5621157020991952 # 0.0737700348891627 # 1/13.555639515454613
abs(true_x[2] - 30.780197246404718) / 0.5621157020991952 # 1.1312363889029819
30.780197246404718 / 0.5621157020991952                  # 54.75776095821107
abs(true_x[2] - 30.898831899383953) % 0.5621157020991952 # 0.5172510840091220 # 1/1.933297060006479
abs(true_x[2] - 30.898831899383953) / 0.5621157020991952 # 0.9201861504268101
30.898831899383953 / 0.5621157020991952                  # 54.96881119668724
abs(true_x[2] - 30.901863034039007) % 0.5621157020991952 # 0.5142199493540703 # 1/1.944693124520227
abs(true_x[2] - 30.901863034039007) / 0.5621157020991952 # 0.9147937825499974
30.901863034039007 / 0.5621157020991952                  # 54.97420356456406
abs(true_x[2] - 30.91012622973847) % 0.5621157020991952  # 0.5059567536546057 # 1/1.9764535067015938
abs(true_x[2] - 30.91012622973847) / 0.5621157020991952  # 0.9000936137616037
30.91012622973847 / 0.5621157020991952                   # 54.98890373335245
abs(true_x[2] - 30.913110711926645) % 0.5621157020991952 # 0.5029722714664318 # 1/1.9881811716667162
abs(true_x[2] - 30.913110711926645) / 0.5621157020991952 # 0.8947842403051631
30.913110711926645 / 0.5621157020991952                  # 54.99421310680889
abs(true_x[2] - 30.936614120010802) % 0.5621157020991952 # 0.4794688633822757 # 1/2.0856411674905986
abs(true_x[2] - 30.936614120010802) / 0.5621157020991952 # 0.8529718376336426

30.936614120010802 / 0.5621157020991952                  # 55.03602550948041
abs(true_x[2] - 30.940790867840878) % 0.5621157020991952 # 0.4752921155521980 # 1/2.1039692586488465
                                                                              # mpmath.power(41, -0.2) - mpmath.power(41, -2.0) + mpmath.power(41, -2.6) + mpmath.power(41, -3.5) + mpmath.power(41, -4.5) + mpmath.power(41, -5.125) - mpmath.power(41, -6)
                                                                              # 0.475292115543457293
                                                                              # mpmath.power(55, -0.2) + mpmath.power(55, -4.5/5) - mpmath.power(55, -5.7/3) - mpmath.power(55, -13/5) + mpmath.power(55, -10.2/3) - mpmath.power(55, -19.5/5) + mpmath.power(55, -13/3) - mpmath.power(55, -24.4/5) + mpmath.power(55, -19/3) - mpmath.power(55, -46.7/5)
abs(true_x[2] - 30.940790867840878) / 0.5621157020991952 # 0.8455414317323666

30.940790867840878 / 0.5621157020991952                  # 55.043455915381685
abs(true_x[2] - 30.970703023385145) % 0.5621157020991952 # 0.4453799600079297 # 1/2.2452739004740927
abs(true_x[2] - 30.970703023385145) / 0.5621157020991952 # 0.7923279110415859
30.970703023385145 / 0.5621157020991952                  # 55.09666943607247
abs(true_x[2] - 30.972415414687156) % 0.5621157020991952 # 0.4436675687059213 # 1/2.253939820115262
abs(true_x[2] - 30.972415414687156) / 0.5621157020991952 # 0.7892815785950566
30.972415414687156 / 0.5621157020991952                  # 55.099715768519
abs(true_x[2] - 31.05515181888627) % 0.5621157020991952  # 0.3609311645068057 # 1/2.7706114027766198
abs(true_x[2] - 31.05515181888627) / 0.5621157020991952  # 0.6420940798467734
31.05515181888627 / 0.5621157020991952                   # 55.24690326726728
abs(true_x[2] - 31.05739374058139) % 0.5621157020991952  # 0.3586892428116856 # 1/2.7879286040507405
abs(true_x[2] - 31.05739374058139) / 0.5621157020991952  # 0.6381057164426775
31.05739374058139 / 0.5621157020991952                   # 55.250891630671376
abs(true_x[2] - 31.17065368634629) % 0.5621157020991952  # 0.2454292970467857 # 1/4.074493192266985
abs(true_x[2] - 31.17065368634629) / 0.5621157020991952  # 0.4366170454414301
31.17065368634629 / 0.5621157020991952                   # 55.452380301672626
abs(true_x[2] - 31.18808691308122) % 0.5621157020991952  # 0.2279960703118537 # 1/4.3860405077692635
abs(true_x[2] - 31.18808691308122) / 0.5621157020991952  # 0.4056034539871648
31.18808691308122 / 0.5621157020991952                   # 55.48339389312689
abs(true_x[2] - 30.628522177438057) % 0.5621157020991952 # 0.2254451038558233 # 1/4.435669628201461
abs(true_x[2] - 30.628522177438057) / 0.5621157020991952 # 1.4010653020613176
30.628522177438057 / 0.5621157020991952                  # 54.48793204505274
abs(true_x[2] - 30.690200207962977) % 0.5621157020991952 # 0.1637670733309021 # 1/6.106233564908584
abs(true_x[2] - 30.690200207962977) / 0.5621157020991952 # 1.2913405064461311
30.690200207962977 / 0.5621157020991952                  # 54.59765684066792
abs(true_x[2] - 30.691654295093002) % 0.5621157020991952 # 0.1623129862008774 # 1/6.16093649316763
abs(true_x[2] - 30.691654295093002) / 0.5621157020991952 # 1.2887536953597401
30.691654295093002 / 0.5621157020991952                  # 54.60024365175431
abs(true_x[2] - 30.747681721623533) % 0.5621157020991952 # 0.1062855596703495 # 1/9.408615837387075
abs(true_x[2] - 30.747681721623533) / 0.5621157020991952 # 1.1890812857093851
30.747681721623533 / 0.5621157020991952                  # 54.699916061404664
abs(true_x[2] - 30.750918182269924) % 0.5621157020991952 # 0.1030490990239583 # 1/9.704112015258916
abs(true_x[2] - 30.750918182269924) / 0.5621157020991952 # 1.1833236442944507
30.750918182269924 / 0.5621157020991952                  # 54.7056737028196
abs(true_x[2] - 30.755532853363547) % 0.5621157020991952 # 0.0984344279303330 # 1/10.15904720559508
abs(true_x[2] - 30.755532853363547) / 0.5621157020991952 # 1.1751141758942761
30.755532853363547 / 0.5621157020991952                  # 54.71388317121978
abs(true_x[2] - 30.758453319502152) % 0.5621157020991952 # 0.0955139617917272 # 1/10.469673556003757
abs(true_x[2] - 30.758453319502152) / 0.5621157020991952 # 1.1699186865533817
30.758453319502152 / 0.5621157020991952                  # 54.71907866056067
abs(true_x[2] - 30.77734099476161) % 0.5621157020991952  # 0.0766262865322715 # 1/13.05035184732389
abs(true_x[2] - 30.77734099476161) / 0.5621157020991952  # 1.1363176410943765
30.77734099476161 / 0.5621157020991952                   # 54.75267970601968
abs(true_x[2] - 30.77914465661436) % 0.5621157020991952  # 0.0748226246795215 # 1/13.36494147703554
abs(true_x[2] - 30.77914465661436) / 0.5621157020991952  # 1.1331089389606087
30.77914465661436 / 0.5621157020991952                   # 54.755888408153446
abs(true_x[2] - 30.783129469342803) % 0.5621157020991952 # 0.0708378119510775 # 1/14.116754491098996
abs(true_x[2] - 30.783129469342803) / 0.5621157020991952 # 1.1260199842960034
30.783129469342803 / 0.5621157020991952                  # 54.76297736281805
abs(true_x[2] - 30.785641404272194) % 0.5621157020991952 # 0.0683258770216869 # 1/14.635743346296094
abs(true_x[2] - 30.785641404272194) / 0.5621157020991952 # 1.1215512691898253
30.785641404272194 / 0.5621157020991952                  # 54.76744607792423
abs(true_x[2] - 30.788490769157644) % 0.5621157020991952 # 0.0654765121362378 # 1/15.27265224389606
abs(true_x[2] - 30.788490769157644) / 0.5621157020991952 # 1.1164822684933347
30.788490769157644 / 0.5621157020991952                  # 54.77251507862072
abs(true_x[2] - 30.791293681672254) % 0.5621157020991952 # 0.0626735996216277 # 1/15.955681595395614
abs(true_x[2] - 30.791293681672254) / 0.5621157020991952 # 1.1114959062477281
30.791293681672254 / 0.5621157020991952                  # 54.777501440866324
abs(true_x[2] - 30.79364243650583) % 0.5621157020991952  # 0.0603248447880488 # 1/16.576917910249023
abs(true_x[2] - 30.79364243650583) / 0.5621157020991952  # 1.1073174874189931
30.79364243650583 / 0.5621157020991952                   # 54.78167985969506
abs(true_x[2] - 30.764808917358042) % 0.0029204661386057 # 0.0000101171259443 # 1/98842.30022426146
abs(true_x[2] - 30.764808917358042) / 0.0029204661386057 # 223.0034642161436595
true_x[2] / 0.0029204661386057                           # 10757.2152842665691316
30.764808917358042 / 0.0029204661386057                  # 10534.211820050425
abs(true_x[2] - 30.79364243650583) % 0.0025509664560304  # 0.0000047316158262 # 1/211344.2926737822
abs(true_x[2] - 30.79364243650583) / 0.0025509664560304  # 244.0018548326321778
true_x[2] / 0.0025509664560304                           # 12315.3649900517054777
30.79364243650583 / 0.0025509664560304                   # 12071.363135219073
abs(true_x[2] - 30.791293681672254) % 0.0023487548335789 # 0.0000205159888354 # 1/48742.47144607308
abs(true_x[2] - 30.791293681672254) / 0.0023487548335789 # 266.0087348362383959
true_x[2] / 0.0023487548335789                           # 13375.6331372921599924
30.791293681672254 / 0.0023487548335789                  # 13109.624402455922
abs(true_x[2] - 30.940790867840878) % 0.0022419216951200 # 0.0000047161867391 # 1/212035.7092082926
abs(true_x[2] - 30.940790867840878) / 0.0022419216951200 # 212.0021036358002341 # math.log(mpmath.power(mpmath.mpf('212.0021036358002341'), 25) / mpmath.power(mpmath.mpf('41.00099015892936047526216789568'), 25))
                                                         #                      # 41.074999520066875 # 41 + 40/13
true_x[2] / 0.0022419216951200                           # 14013.0152858484505264
30.940790867840878 / 0.0022419216951200                  # 13801.01318221265
abs(true_x[2] - 30.936614120010802) % 0.0018299904838336 # 0.0000113566178673 # 1/88054.38482448489
abs(true_x[2] - mpmath.mpf('30.93661412001080008430560643039549997043465393772912368463939')) / mpmath.mpf('0.0018299904838336197758080962191543933749122609043695173324739812205320708645167732613799225841')
                                                         # mpmath.mpf('262.00620583438423225524346439997980863031863806512674') / mpmath.mpf('41.00099015892936047526216789568066596745') = 6.3902409385428821745471049849328237999778667958478988158321
                                                         #                    # math.log(mpmath.power(mpmath.mpf('262.0062058343842322552434644'), 25) / mpmath.power(mpmath.mpf('41.00099015892936047526216789568'), 15))
                                                         #                    # 83.50526149732667 # 2*41 + 1.5 + 1/190.05996542677983 # 2*41 + 3/2 + 1/(190 + 3/(50 + 1/(104 + 1/(15 - 1/188.8))))
                                                         #                    # math.log(mpmath.power(mpmath.mpf('262.0062058343842322552434644'), 57.1) / mpmath.power(mpmath.mpf('41.00099015892936047526216789568'), 15))
                                                         #                    # 262.24988039219727
                                                         #                    # mpmath.log(mpmath.power(mpmath.mpf('262.0062058343842322552434644'), 25) / mpmath.power(mpmath.mpf('41.00099015892936047526216789568'), 25))
                                                         #                    # mpmath.exp(46 + mpmath.exp(-1) + mpmath.exp(-6.6) + mpmath.exp(-7 - mpmath.exp(1)))
true_x[2] / mpmath.mpf('0.0018299904838336197758080962191543933749122609043695173324739812205320708645167732613799225841')
                                                         # 17167.347732639566568698558886237953017464 # get_e4(0.3477326395665687, 0.5)  0.7783203025 or 7010486048627783/9007199254740992 = 37 * 189472595908859/2**53
                                                         # 17167.347732639566568698558886237953017464 # mpmath.power(mpmath.mpf('10992491084638809028870916016237035261514190411659058524929714321652946090355530520635929393655977488370839652287992285915855516.5'), mpmath.fdiv(1, 30))
30.936614120010802 / 0.0018299904838336                  # 
mpmath.mpf('30.936614120010800084305606430395499970434653937729123684639391383399682') / mpmath.mpf('0.0018299904838336197758080962191543933749122609043695173324739812205320708645167732613799225841')
                                                         # 16905.3415268051823364433154218379732088337739367281
                                                         # 16905.341526805183 # mpmath.power(mpmath.mpf('6929764376887160841916045516395642621917215130988452045222151321082120309995339159638671581889131043914556711074197213932765755'), mpmath.fdiv(1, 30))
                                                         #                    # mpmath.mpf('10992491084638809028870916016237035261514190411659058524929714321652946090355530520635929393655977488370839652287992285915855516.5') / mpmath.mpf('6929764376887160841916045516395642621917215130988452045222151321082120309995339159638671581889131043914556711074197213932765755')
abs(true_x[2] - 31.05739374058139) % 0.0018299904838336  # 0.0000111079802962 # 1/90025.36674839584
abs(true_x[2] - 31.05739374058139) / 0.0018299904838336  # 196.0060699661524671
31.05739374058139 / 0.0018299904838336                   # 16971.341662673414
abs(true_x[2] - 30.77734099476161) % 0.0017123913020083  # 0.0000200329823340 # 1/49917.67992018859
abs(true_x[2] - 30.77734099476161) / 0.0017123913020083  # 373.0116988344373135
true_x[2] / 0.0017123913020083                           # 18346.3224477643314444
30.77734099476161 / 0.0017123913020083                   # 17973.310748929893
abs(true_x[2] - 30.691654295093002) % 0.0014316402326865 # 0.0000187305606855 # 1/53388.68476975358
abs(true_x[2] - 30.691654295093002) / 0.0014316402326865 # 506.0130832874474140
true_x[2] / 0.0014316402326865                           # 21944.1185474645486453
30.691654295093002 / 0.0014316402326865                  # 21438.1054641771


freqs = [mpmath.mpf('0.005053970904658658'), mpmath.mpf('0.0016956038973859253'), mpmath.mpf('0.002202971914969611')]
plot_xf = [mpmath.mpf('30.78100951236961125059178489736453858760398084987088022280968486703375146777021232228371147437696861576976072473626282'), mpmath.mpf('30.78606348327426990937363369249356169595195395787415899143659399834560616379979172855210842117962407135076460184445535'), mpmath.mpf('30.82869994914794004340442378567401772797657260114040804460609924669899541630998892650171571115734305849870010600671987')]
log_points = []
log_points.append(["rsp1p2_mod1_lsnewp1_newp1p2a pos_spikes", []])
for x in plot_x[:-2]:
    for freq in freqs:
        if freq < 0.2 and freq < 1/80 and max(plot_x) - x > freq:
            # true_x[1] / 0.002202971914969611 # 14012.504102394387
            # true_x[0] / 0.002202971914969611 # 14011.646745384698 # 14012.504102394387 - 0.8573570096887124 # 14012.504102394387 - 1 + 1/7.010509228793617 # 14012.504102394387 - 1 + 1/2.3762312100162992**2.25 # 14012.504102394387 - 1 + 1/2.647736623758794**2
            divide_this = int((max(plot_x) - x)/freq)
            for i in range(1, divide_this + 1):
                if x + i*freq not in log_points[-1][1]:
                    log_points[-1][1].append(x + i*freq)
        elif freq > 0.2:
            for iden in range(80, 256 + 1):
                for inum in range(1, iden):
                    tpl = (x + (inum/iden)*freq - 1/40, x + (inum/iden)*freq + 1/40)
                    if tpl not in log_points[-1][1]:
                        log_points[-1][1].append(tpl)

# 2661
len(log_points[-1][1])


# 25437975264101x25534248091031
# 30.867264262557846, 30.87104172938474
log_points = []
log_points.append(["rsp1p2_mod1_lsnewp1_p1p2b pos_spikes", [[30.581699721625718, 30.654644498707132], [30.86083795002577, 31.210051818247127]]])
log_points.append(["rsp1p2_mod1_lsnewp1_p1p2b neg_spikes", [[30.002973077633076, 30.64211547249739], [31.19218999421702, 31.26650034065512]]])
log_points.append(["rsp1p2_mod1_lsnewp2_p1p2b pos_spikes", [[30.070280117156866, 31.293063881756193], [31.305249207342136, 31.451613911969787], [31.49560112108257, 31.579011030996835]]])
log_points.append(["rsp1p2_mod1_lsnewp2_p1p2b neg_spikes", [[30.070280117156866, 31.238620418457902], [31.250184408002518, 31.414049746493642]]])
log_points.append(["rsp1p2_mod1_lsnewp1_newp1p2a pos_spikes", [[30.407485168055302, 30.482799285886816], [30.482799285886816, 31.26650034065512]]])
log_points.append(["rsp1p2_mod1_lsnewp1_newp1p2a neg_spikes", [[30.02914911159876, 30.102776261691382], [30.814661685464543, 31.26650034065512]]])
log_points.append(["rsp1p2_mod1_lsnewp1_newp1p2b pos_spikes", [[30.581699721625718, 30.654644498707132], [30.86083795002577, 31.210051818247127]]])
log_points.append(["rsp1p2_mod1_lsnewp1_newp1p2b neg_spikes", [[30.002973077633076, 30.30957166765058], [30.30957166765058, 30.62412414912074]]])

log_points.append((30.061533750668506))
log_points.append((30.46083689126695))
log_points.append((30.49721800449007))
log_points.append((30.620483363042997))
log_points.append((30.69417893243157, 30.6997078656751, 30.70045481622942))
log_points.append((30.721981258970235, 30.724418218658954, 30.726274926592808))
log_points.append((30.918866031685493))
log_points.append((31.00034615494269, 31.001184777682205))
log_points.append((31.042337474024354))
log_points.append((31.075553470018292, 31.07597709619999))
log_points.append((31.115686826641802, 31.11586503392497))
log_points.append((31.130454485916047))
log_points.append((31.15182274587182, 31.15355290490428, 31.155436180271387))
log_points.append((31.169925962094773))
log_points.append((31.198406930905627, 31.19952144875403, 31.200904441950478))
log_points.append((31.217179839225782, 31.217193721640832, 31.22053743209768))
log_points.append((31.27883342346088))
log_points.append((31.44800481518154))
log_points.append((31.48951436820579))
log_points.append((31.56297948708919))
log_points.append((31.615728220442733))


# min sorted_vars 30.070280117156866
# max sorted_vars 31.974258409728346
# identify closets spikes and largest gaps
plot_x = [float(sorted_vars_idx3[0][3])] + plot_x + [float(sorted_vars_idx3[-1][3])]
plot_x = [float(sorted_vars_idx4[0][4])] + plot_x + [float(sorted_vars_idx4[-1][4])]

>>> float(sorted_vars_idx4[-1][4])
[[float(plot_x[px]), float(plot_x[px + 1])] for px in range(0, len(plot_x) - 1) if abs(plot_x[px + 1] - plot_x[px]) > 0.04]
[[float(plot_x[px]), float(plot_x[px + 1])] for px in range(0, len(plot_x) - 1) if abs(plot_x[px + 1] - plot_x[px]) > 0.075]
s = ""
for px in range(0, len(plot_x) - 1):
    if abs(plot_x[px] - plot_x[px + 1]) < 0.008:
        s += str(float(plot_x[px])) + ", "
    elif abs(plot_x[px] - plot_x[px + 1]) > 0.5:
    elif len(s) > 0:
        s += str(float(plot_x[px + 1])) + "\n"
        print("log_points.append((" + s + "))")
        s = ""
    


plot_x, plot_y = find_intersection(rsp1p2_div_lsnewp2_p1p2b, sorted_vars_idx3, 3)

plot_x, plot_y = plot_hsh(True, rsp1p2_div_lsnewp2_p1p2b, sorted_vars_idx4, 4, 30, 1, True, True, False, False, False, True, 1.26)
log_points.append(["rsp1p2_div_lsnewp2_p1p2b pos_spikes", [x for x in plot_x]])


ary = []
ary.append("rsp1p2_div_lsnewp2_p1p2b pos_spikes 1.26")
ary.append("rsp1p2_mod1_lsnewp1_p1p2b pos_spikes 2.7")
ary.append("rsp1p2_mod2_lsnewp1_p1p2b neg_spikes 1.38")
ary.append("rsp1p2_mod1_lsnewp2_p1p2b neg_spikes 3")
ary.append("rsp1p2_mod2_lsnewp2_p1p2b pos_spikes 1.31")
ary.append("rsp1p2_mod1_lsnewp1_newp1p2a neg_spikes 4400")
ary.append("rsp1p2_mod2_lsnewp1_newp1p2a pos_spikes 10")
ary.append("rsp1p2_mod1_lsnewp2_newp1p2a pos_spikes 10.2")
ary.append("rsp1p2_mod1_lsnewp2_newp1p2a neg_spikes 3600")
ary.append("rsp1p2_mod2_lsnewp2_newp1p2a pos_spikes 10.8")
ary.append("rsp1p2_mod2_lsnewp2_newp1p2a neg_spikes 5800")
ary.append("rsp1p2_mod1_lsnewp1_newp1p2b pos_spikes 2.7")
ary.append("rsp1p2_mod1_lsnewp2_newp1p2b neg_spikes 4")
a1, a2, len_ary = -1, -1, len(ary)
while a1 < len_ary - 1:
    a1 += 1
    a2 = -1
    while a2 < len_ary - 1:
        a2 += 1
        if a1 != a2 and ary[a1] == ary[a2]:
            print("removing duplicate " + str(ary[a1]))
            ary.remove(ary[a1])
            if a1 > 0:
                a1 -= 1
            if a2 > 0:
                a2 -= 1
            len_ary = len(ary)

for a1 in range(0, len(ary)):
    print("ary.append(\"" + ary[a1] + "\")")


s = ""
s += str(math.log(p1[thisi])) + ", "
s += str(math.log(p2[thisi])) + " # "
s += str(p1[thisi])[:-2] + " * "
s += str(p2[thisi])[:-2]
print(s)

# 
# 
# true values are 30.867264262557846, 30.87104172938474
# true values are 30.508940239260962, 31.110533486618692
# true values are 30.260075596823018, 31.416082983393075
# true values are 29.8806295272786,   30.84802354102595  # 9484021274029 * 24953208848681
# 
tgt_x = (30.867264262557846 + 30.87104172938474)/2
tgt_x = (30.508940239260962 + 31.110533486618692)/2
tgt_x = (30.260075596823018 + 31.416082983393075)/2
tgt_x = (29.8806295272786 + 30.84802354102595)/2
[float(x) for x in plot_x if x > tgt_x - 0.04 and x < tgt_x + 0.04]
#log_points.append(("rsp1p2_div_lsnewp2_p1p2b pos_spikes", [30.00783273557616, 30.007934591275497, 30.018664226455403, 30.01879574505358, 30.020646911850356, 30.020649205357465, 30.05278849632425, 30.053101418465605, 30.053682792226514, 30.053728505428985, 30.053829060024192, 30.05399932033052, 30.065086169617878, 30.065271298971663, 30.079979214709407, 30.080362934333543])
log_points = []
square_spikes = 0
for a in range(0, len(ary)):
    spl = ary[a].split(" ")
    hsh = eval(spl[0])
    sorted_vars, sorted_vars_idx = [], 0
    if spl[0].find("_lsnewp1_") > 0:
        sorted_vars, sorted_vars_idx = sorted_vars_idx3, 3
    if spl[0].find("_lsnewp2_") > 0:
        sorted_vars, sorted_vars_idx = sorted_vars_idx4, 4
    starting_f = 0
    if len(spl) >= 3:
        starting_f = float(spl[2])
    #plot_x, plot_y = find_spikes(hsh, sorted_vars, sorted_vars_idx, 28, 1, True, (spl[1] == "pos_spikes"), (spl[1] == "neg_spikes"), square_spikes, False, False, starting_f, 15)
    #                plot_hsh(bplot_all, bplot_spikes, hsh, sorted_vars, vars_idx, min_vars_val, max_hsh_val, plot_target_values, num_pos_spikes, num_neg_spikes, num_square_peaks, num_zeros, num_ones, tweak)
    plot_x, plot_y = plot_hsh(False, False, hsh, sorted_vars, sorted_vars_idx, 28, 1.01, True, 16 if (spl[1] == "pos_spikes") else 0, 16 if (spl[1] == "neg_spikes") else 0, square_spikes, 0, 0, 1)
    if len(plot_x) > 1:
        print("appending " + str(len(plot_x)) + " rows to log_points")
        log_points.append((ary[a], [x for x in plot_x]))

# plot_hsh(bplot, hsh, sorted_vars, vars_idx, min_vars_val, max_hsh_val, plot_target_values, pos_spikes, neg_spikes, tweak):
plot_x, plot_y = plot_hsh(False, rsp1p2_mod1_lsnewp1_newp1p2a, sorted_vars_idx3, 3, 30, 1, True, False, True, 5756)
plot_x, plot_y = plot_hsh(False, rsp1p2_mod1_lsnewp2_newp1p2a, sorted_vars_idx4, 4, 30, 1, True, True, False, 8.88)


rsp1p2_mod1_lsnewp1_p1p2a # useless
rsp1p2_mod1_lsnewp2_p1p2a # useless
rsp1p2_div_lsnewp2_p1p2a  # useless

rsnewp1p2_mod1_lsnewp1_newp1p2a
rsnewp1p2_mod1_lsnewp2_newp1p2a
rsnewp1p2_div_lsnewp2_newp1p2a
rsnewp1p2_mod1_lsnewp1_newp1p2b
rsnewp1p2_mod1_lsnewp2_newp1p2b
rsnewp1p2_div_lsnewp2_newp1p2b

plot_x, plot_y = plot_hsh(True, rsp1p2_mod1_lsnewp1_p1p2a, sorted_vars_idx3, 3, 30, 1, True, False, False, 1.3) # useless when plotting against sorted_vars_idx3
plot_x, plot_y = plot_hsh(True, rsp1p2_mod1_lsnewp1_p1p2b, sorted_vars_idx3, 3, 30, 1, True, False, False, 1.3)
plot_x, plot_y = plot_hsh(True, rsp1p2_mod1_lsnewp2_p1p2a, sorted_vars_idx4, 4, 30, 1, True, False, False, 1.3) # useless when plotting against sorted_vars_idx4
plot_x, plot_y = plot_hsh(True, rsp1p2_mod1_lsnewp2_p1p2b, sorted_vars_idx4, 4, 30, 1, True, False, False, 1.3)

plot_x, plot_y = plot_hsh(True, rsp1p2_div_lsnewp2_p1p2a, sorted_vars_idx4, 4, 30, 1, True, False, False, 1.3) # useless
plot_x, plot_y = plot_hsh(True, rsp1p2_div_lsnewp2_p1p2b, sorted_vars_idx4, 4, 30, 1, True, False, False, 1.3)
plot_x, plot_y = plot_hsh(True, rsp1p2_mod1_lsnewp1_newp1p2a, sorted_vars_idx3, 3, 30, 1, True, False, False, 1.3)
plot_x, plot_y = plot_hsh(True, rsp1p2_mod1_lsnewp2_newp1p2a, sorted_vars_idx4, 4, 30, 1, True, False, False, 1.3)
plot_x, plot_y = plot_hsh(True, rsp1p2_mod1_lsnewp1_newp1p2b, sorted_vars_idx3, 3, 30, 1, True, False, False, 1.3)
plot_x, plot_y = plot_hsh(True, rsp1p2_mod1_lsnewp2_newp1p2b, sorted_vars_idx4, 4, 30, 1, True, False, False, 1.3)

plot_x, plot_y = find_intersection(rsp1p2_div_lsnewp2_p1p2b, sorted_vars_idx3, 3)

hsh = rsp1p2_mod1_lsnewp1_newp1p2b
sorted_vars, sorted_vars_idx = sorted_vars_idx3, 3
min_vars_val, max_hsh_val = 28, 1
sv1, sv2 = 0, len(sorted_vars) - 1
plot_avg_x = [sorted_vars[sv][sorted_vars_idx] for sv in range(0, len(sorted_vars)) if sorted_vars[sv][sorted_vars_idx] > min_vars_val and hsh[sorted_vars[sv][2]] < max_hsh_val]
plot_avg_y = [hsh[sorted_vars[sv][2]] for sv in range(0, len(sorted_vars)) if sorted_vars[sv][sorted_vars_idx] > min_vars_val and hsh[sorted_vars[sv][2]] < max_hsh_val]
p_avg = numpy.polynomial.chebyshev.Chebyshev.fit(numpy.asarray([float(x) for x in plot_avg_x]), numpy.asarray([float(y) for y in plot_avg_y]), 1)
p_min = numpy.polynomial.chebyshev.Chebyshev.fit(numpy.asarray([float(sorted_vars[sv1][sorted_vars_idx]), float(sorted_vars[sv2][sorted_vars_idx])]), numpy.asarray([float(hsh[sorted_vars[sv1][2]]), float(hsh[sorted_vars[sv2][2]])]), 1)
p_max = p_min
plot_min_x, plot_max_x = [], []
plot_min_y, plot_max_y = [], []
maxiter = 2
for iter in range(0, maxiter + 1):
    plot_min_x, plot_max_x = [], []
    plot_min_y, plot_max_y = [], []
    len_sorted_vars = len(sorted_vars)
    sv1, inc = -1, 8
    #x_slope = (p(max(plot_x)) - p(min(plot_x))) / max(plot_x) - min(plot_x)
    x_slope = -30.0187709227077
    this_max, prev_max = -1, max([hsh[sorted_vars[sv][2]] for sv in range(0, int(len_sorted_vars/16)) if sorted_vars[sv][sorted_vars_idx] > min_vars_val and hsh[sorted_vars[sv][2]] < max_hsh_val])
    this_min, prev_min = -1, min([hsh[sorted_vars[sv][2]] for sv in range(0, int(len_sorted_vars/16)) if sorted_vars[sv][sorted_vars_idx] > min_vars_val and hsh[sorted_vars[sv][2]] < max_hsh_val])
    this_min_x, prev_min_x = 0, -1
    this_max_x, prev_max_x = 0, -1
    while sv1 < len_sorted_vars - inc:
        sv1 += inc
        if sorted_vars[sv1][sorted_vars_idx] > min_vars_val and hsh[sorted_vars[sv1][2]] < max_hsh_val:
            range_min, range_max = max(0, sv1 - inc), min(sv1 + inc, len_sorted_vars - 1)
            this_min = min([hsh[sorted_vars[i][2]] for i in range(range_min, range_max)])
            this_max = max([hsh[sorted_vars[i][2]] for i in range(range_min, range_max)])
            if this_min < prev_min:
                this_min_x = [sorted_vars[sv2][sorted_vars_idx] for sv2 in range(range_min, range_max) if hsh[sorted_vars[sv2][2]] == this_min][0]
                if this_min <= p_min(this_min_x):
                    plot_min_x.append(this_min_x)
                    plot_min_y.append(this_min)
                    sv1 += int(inc)
            if this_max < prev_max:
                this_max_x = [sorted_vars[sv2][sorted_vars_idx] for sv2 in range(range_min, range_max) if hsh[sorted_vars[sv2][2]] == this_max][0]
                if this_max >= p_max(this_max_x):
                    plot_max_x.append(this_max_x)
                    plot_max_y.append(this_max)
                    sv1 += int(1.5*inc)
            prev_min_x = this_min_x
            prev_max_x = this_max_x
        prev_min = this_min
        prev_max = this_max
    p_min = numpy.polynomial.chebyshev.Chebyshev.fit(numpy.asarray([float(x) for x in plot_min_x]), numpy.asarray([float(y) for y in plot_min_y]), 1)
    p_max = numpy.polynomial.chebyshev.Chebyshev.fit(numpy.asarray([float(x) for x in plot_max_x]), numpy.asarray([float(y) for y in plot_max_y]), 1)
    if iter >= maxiter:
        fmax_log = math.log(p1[thisi])
        df, iter = 0.5, 0
        while p_max(fmax_log) < 0:
            fmax_log -= df
        while p_max(fmax_log) > 0:
            iter += 1
            fmax_log += df
            if p_max(fmax_log) <= 0:
                fmax_log -= df
                df /= 2
                if df < 2**-53:
                    break
            if iter > 400:
                break
        
        df, iter = 0.5, 0
        fmin_log = math.log(p1[thisi])
        while p_min(fmin_log) < 0:
            fmin_log -= df
        while p_min(fmin_log) > 0:
            iter += 1
            fmin_log += df
            if p_min(fmin_log) <= 0:
                fmin_log -= df
                df /= 2
                if df < 2**-53:
                    break
            if iter > 400:
                break
        
        df, iter = 0.5, 0
        favg_log = math.log(p1[thisi])
        while p_avg(favg_log) < 0:
            favg_log -= df
        while p_avg(favg_log) > 0:
            iter += 1
            favg_log += df
            if p_avg(favg_log) <= 0:
                favg_log -= df
                df /= 2
                if df < 2**-53:
                    break
            if iter > 400:
                break
        
        sp1, sp2, sp1p2 = str(p1[thisi])[:-2], str(p2[thisi])[:-2], str(p1p2[thisi])[:-2]
        print("p_min(math.log(p1[thisi])) # p_min(math.log(" + sp1 + "))")
        print("p_min(0.5*math.log(p1p2[thisi])) # p_min(0.5*math.log(" + sp1p2 + "))")
        print("p_min(math.log(p2[thisi])) # p_min(math.log(" + sp2 + "))")
        print("x_intercept")
        print(str(p_min(math.log(p1[thisi]))) + " # 1/" + str(1/p_min(math.log(p1[thisi]))))
        print(str(p_min(0.5*math.log(p1p2[thisi]))) + " # 1/" + str(1/p_min(0.5*math.log(p1p2[thisi]))))
        print(str(p_min(math.log(p2[thisi]))) + " # 1/" + str(1/p_min(math.log(p2[thisi]))))
        print(str(fmin_log))
        print("")
        
        print("p_max(math.log(p1[thisi])) # p_max(math.log(" + sp1 + "))")
        print("p_max(0.5*math.log(p1p2[thisi])) # p_max(0.5*math.log(" + sp1p2 + "))")
        print("p_max(math.log(p2[thisi])) # p_max(math.log(" + sp2 + "))")
        print("x_intercept")
        print(str(p_max(math.log(p1[thisi]))) + " # 1/" + str(1/p_max(math.log(p1[thisi]))))
        print(str(p_max(0.5*math.log(p1p2[thisi]))) + " # 1/" + str(1/p_max(0.5*math.log(p1p2[thisi]))))
        print(str(p_max(math.log(p2[thisi]))) + " # 1/" + str(1/p_max(math.log(p2[thisi]))))
        print(str(fmax_log))
        print("")
        
        print("p_avg(math.log(p1[thisi])) # p_avg(math.log(" + sp1 + "))")
        print("p_avg(0.5*math.log(p1p2[thisi])) # p_avg(0.5*math.log(" + sp1p2 + "))")
        print("p_avg(math.log(p2[thisi])) # p_avg(math.log(" + sp2 + "))")
        print("x_intercept")
        print(str(p_avg(math.log(p1[thisi]))) + " # 1/" + str(1/p_avg(math.log(p1[thisi]))))
        print(str(p_avg(0.5*math.log(p1p2[thisi]))) + " # 1/" + str(1/p_avg(0.5*math.log(p1p2[thisi]))))
        print(str(p_avg(math.log(p2[thisi]))) + " # 1/" + str(1/p_avg(math.log(p2[thisi]))))
        print(str(favg_log))
        print("")
        


# 
# 
# 25437975264101, 25534248091031
# 
# 

p_min(math.log(p1[thisi])) # p_min(math.log(25437975264101))
p_min(0.5*math.log(p1p2[thisi])) # p_min(0.5*math.log(649539571327064757314378131))
p_min(math.log(p2[thisi])) # p_min(math.log(25534248091031))
x_intercept
0.031117019852476197 # 1/32.136753607541344
0.030738967104906215 # 1/32.53199746716249
0.030360914357337274 # 1/32.93708444450493
31.022723402850126

p_max(math.log(p1[thisi])) # p_max(math.log(25437975264101))
p_max(0.5*math.log(p1p2[thisi])) # p_max(0.5*math.log(649539571327064757314378131))
p_max(math.log(p2[thisi])) # p_max(math.log(25534248091031))
x_intercept
0.25564553557156633 # 1/3.911666197354956
0.2545015446503536 # 1/3.929249236478497
0.2533575537291408 # 1/3.9469910617667185
31.289336025610325

p_avg(math.log(p1[thisi])) # p_avg(math.log(25437975264101))
p_avg(0.5*math.log(p1p2[thisi])) # p_avg(0.5*math.log(649539571327064757314378131))
p_avg(math.log(p2[thisi])) # p_avg(math.log(25534248091031))
x_intercept
0.1418718376378646 # 1/7.04861526184325
0.14129608126547233 # 1/7.077337113979565
0.1407203248930828 # 1/7.106293996690137
31.33266611136588

p = numpy.polynomial.chebyshev.Chebyshev.fit(numpy.asarray([float(x) for x in plot_x]), numpy.asarray([float(y) for y in plot_y]), 1)
p(math.log(p1[thisi]))
p(0.5*math.log(p1p2[thisi]))
p(math.log(p2[thisi]))
x_slope = (p(max(plot_x)) - p(min(plot_x))) / max(plot_x) - min(plot_x)

min_plot_y, max_plot_y = min(min(plot_min_y), min(plot_max_y)), max(max(plot_min_y), max(plot_max_y))
avg_idx = [pax for pax in range(0, len(plot_avg_x)) if random.random() < 1/48]
_ = plt.scatter([plot_avg_x[avg_idx[ai]] for ai in range(0, len(avg_idx))] , [plot_avg_y[avg_idx[ai]] for ai in range(0, len(avg_idx))])
_ = plt.plot([min(plot_avg_x), max(plot_avg_x), favg_log], [p_avg(min(plot_avg_x)), p_avg(max(plot_avg_x)), p_avg(favg_log)])
_ = plt.scatter(plot_min_x, plot_min_y)
_ = plt.plot([min(plot_min_x), max(plot_min_x), fmin_log], [p_min(min(plot_min_x)), p_min(max(plot_min_x)), p_min(fmin_log)])
_ = plt.scatter(plot_max_x, plot_max_y)
_ = plt.plot([min(plot_max_x), max(plot_max_x), fmax_log], [p_max(min(plot_max_x)), p_max(max(plot_max_x)), p_max(fmax_log)])
_ = plt.plot([math.log(p1[thisi]), math.log(p1[thisi])], [min_plot_y, max_plot_y])
_ = plt.plot([math.log(p2[thisi]), math.log(p2[thisi])], [min_plot_y, max_plot_y])
_ = plt.plot([0.5*math.log(p1p2[thisi]), 0.5*math.log(p1p2[thisi])], [min_plot_y, max_plot_y])
plt.grid()
plt.show()




plot_x, plot_y = plot_hsh(True, rsp1p2_mod_lsnewp2_p1p2a, sorted_vars_idx3, 3, 30, 0.02, True, False, False, 1.3)
plot_hsh(True, rsp1p2_mod_lsnewp2_p1p2a, sorted_vars_idx3, 3, 31, 0.075, True)

plot_x, plot_y = plot_hsh(True, rsp1p2_mod_lsnewp1_p1p2b, sorted_vars_idx3, 3, 30, 1.00, True, False, False, 1.3)
plot_x, plot_y = find_spikes(rsp1p2_mod_lsnewp1_p1p2b, sorted_vars_idx3, 3, 30, 1, True, True, False, 16)

plot_x, plot_y = plot_hsh(True, rsp1p2_div_lsnewp2_p1p2a, sorted_vars_idx3, 3, 30, 0.05, True)
plot_x, plot_y = plot_hsh(True, rsp1p2_div_lsnewp2_p1p2b, sorted_vars_idx4, 4, 30, 1, True, False, False, 1.3)

plot_hsh(rsp1p2_mod_lsnewp2_p1p2a, sorted_vars_idx4, 4, 30, 1, True) # useless
plot_hsh(rsp1p2_mod_lsnewp2_p1p2b, sorted_vars_idx4, 4, 30, 1, True) 

plot_hsh(True, rsnewp1p2_div_ls1newp2_newp1p2, sorted_vars_idx4, 4, 30)
plot_hsh(True, rsnewp1p2_div_ls2newp2_newp1p2, sorted_vars_idx4, 4, 30)

# plotting newp1 and newp2 against newp1p2
plot_x, plot_y = plot_hsh(True, rsnewp1p2_mod_lsnewp1_newp1p2b, sorted_vars_idx3, 3, 30, 1, True, False, False, 1.3)
plot_x, plot_y = plot_hsh(True, rsnewp1p2_mod_lsnewp2_newp1p2b, sorted_vars_idx4, 4, 30, 1, True, False, False, 1.3)
plot_x, plot_y = plot_hsh(True, rsnewp1p2_div_lsnewp2_newp1p2b, sorted_vars_idx4, 4, 30, 1, True, False, False, 1.3)


[float(rsp1p2_mod_ls2newp2_p1p2[x]) for x in rsp1p2_mod_ls2newp2_p1p2.keys() if rsp1p2_mod_ls2newp2_p1p2[x] < 0.025 and rsp1p2_mod_ls2newp2_p1p2[x] > 0.015]
[float(math.log(x)) for x in rsp1p2_mod_ls2newp2_p1p2.keys() if rsp1p2_mod_ls2newp2_p1p2[x] < 0.025 and rsp1p2_mod_ls2newp2_p1p2[x] > 0.015]

hsh, min_log, max_log, min_hsh, max_hsh = rsp1p2_mod_ls2newp2_p1p2, 30.134, 30.6,   0.015, 0.025
hsh, min_log, max_log, min_hsh, max_hsh = rsp1p2_mod_ls1newp2_p1p2, 30.08,  30.6,   0.011, 0.020
hsh, min_log, max_log, min_hsh, max_hsh = rsp1p2_div_ls1newp2_p1p2, 30.0,   30.666, 0.03,   0.05
hsh, min_log, max_log, min_hsh, max_hsh = rsp1p2_div_ls2newp2_p1p2, 30.0,   30.6,   0.016,  0.025

hsh, min_log, max_log, min_hsh, max_hsh = rsp1p2_mod_ls1newp2_p1p2, 31.0, 31.3,   0.0, 0.035
hsh, min_log, max_log, min_hsh, max_hsh = rsp1p2_mod_ls1newp2_p1p2, 30.4, 30.8,    0.0, 0.070

sorted_vars, idx = sorted_vars_idx3, 3
[float(sorted_vars[i][idx]) for i in range(0, len(sorted_vars)) if sorted_vars[i][idx] > min_log and sorted_vars[i][idx] < max_log and hsh[sorted_vars[i][2]] > min_hsh and hsh[sorted_vars[i][2]] < max_hsh]
log_points = []
for i in range(0, 4):
    log_points.append([])

p1[thisi]
p2[thisi]
math.log(p1[thisi])
math.log(p2[thisi])
math.log(math.sqrt(p1p2[thisi]))
[float(x) for x in plot_x]

# 
# 25437975264101, 25534248091031
# true values are
# 30.867264262557846
# 30.869152995971294
# 30.87104172938474
# 

0.001888733413448307 # 1/529.4553444545016
30.869152995971294 - 30.867264262557846 log(sqrt(p1p2)) - log(p1)
0.5839954164885341
30.87104172938474 - 31.238987740468971 log(p2) - 31.238987740468971
1.275346546302199
30.87104172938474 - 30.547636610655307 log(p2) - 30.547636610655307



4.426552890194639
0.6913511298136648/0.15618273337365807
3.4265528901946385
0.5351683964400067/0.15618273337365807

true values are
30.342626857233117
31.822983156957505
sqrt p1p2 is
31.082805007095313

x = 0.739180406654574
31.082805007095313 - log(p1) = (4 + x) * 0.15618273337365807
log(p2) - 30.547636610655307 = (3 + x) * 0.15618273337365807
log(p1) + log(p2) = 2 * 31.082805007095313
31.082805007095313 - (2 * 31.082805007095313 - log(p2)) = (4 + x) * 0.15618273337365807
log(p2) = (4 + x) * 0.15618273337365807 - 31.082805007095313 + 2 * 31.082805007095313
log(p2) = (4 + x) * 0.15618273337365807 + 31.082805007095313
log(p2) = (3 + x) * 0.15618273337365807 + 30.547636610655307
(4 + x) * 0.15618273337365807 + 31.082805007095313 = (3 + x) * 0.15618273337365807 + 30.547636610655307
4 + x + 31.082805007095313/0.15618273337365807 = 3 + x + 30.547636610655307/0.15618273337365807
4 + x = 3 + x + 30.547636610655307/0.15618273337365807 - 31.082805007095313/0.15618273337365807

31.082805007095313 - log(p1) = (n1 + x) * 0.15618273337365807
log(p1) = 31.082805007095313 - (n1 + x) * 0.15618273337365807
log(p2) = (n2 + x) * 0.15618273337365807 + 30.547636610655307
2 * 31.082805007095313 - log(p2) = 31.082805007095313 - (n1 + x) * 0.15618273337365807
log(p2) = 31.082805007095313 + (n1 + x) * 0.15618273337365807
31.082805007095313 + (n1 + x) * 0.15618273337365807 = (n2 + x) * 0.15618273337365807 + 30.547636610655307
31.082805007095313/0.15618273337365807 + n1 + x = n2 + x + 30.547636610655307/0.15618273337365807
31.082805007095313/0.15618273337365807 + n1 = n2 + 30.547636610655307/0.15618273337365807
n1 + 199.01562954934025 = n2 + 195.5890766591456
n2 = n1 + 3.4265528901946425

x = 0.739180406654574
log(p2) - 31.238987740468971 = (3 + x) * 0.15618273337365807
(log(p2) - 31.238987740468971)/0.15618273337365807 = 3 + x 
x = (log(p2) - 31.238987740468971)/0.15618273337365807 - 3
log(sqrt(p1p2)) - log(p1) = (4 + x) * 0.15618273337365807
31.082805007095313 - log(p1) = (4 + x) * 0.15618273337365807
(31.082805007095313 - log(p1))/0.15618273337365807 = 4 + x
x = (31.082805007095313 - log(p1))/0.15618273337365807 - 4
(log(p2) - 31.238987740468971)/0.15618273337365807 - 3 = (31.082805007095313 - log(p1))/0.15618273337365807 - 4
log(p2) - 31.238987740468971 - 3*0.15618273337365807 = 31.082805007095313 - log(p1) - 4*0.15618273337365807
log(p2) - 31.238987740468971 - n1*0.15618273337365807 = 31.082805007095313 - log(p1) - n2*0.15618273337365807
log(p2) + log(p1) =  31.082805007095313 + 31.238987740468971 + (n1 - n2)*0.15618273337365807
log(p1p2) =  62.32179274756429 + (n1 - n2)*0.15618273337365807
62.16561001419063 = 62.32179274756429 + (n1 - n2)*0.15618273337365807
n1 - n2 = -0.15618273337366162/0.15618273337365807
n1 - n2 = -1

log(p2) = 31.238987740468971 + (3 + x) * 0.15618273337365807 = 31.82298315695751
log(p1) = 31.082805007095313 - (4 + x) * 0.15618273337365807 = 30.342626857233117
0.7401781498621958/0.426552890194639
1.7352552681672078
math.sqrt(3 + 1/90 + 1/465.14553725353197853)
math.sqrt(3 - 1/90 + 1/3767769 + 1/96575314069365.2)
math.sqrt(3 - 1/90 + 1/3767769 + 1/(5**20 + 4**20 + 3.5**20 + 3.25**20 + 3.125**20 + 2*3**20 + 2.5**20 + 3*2.25**20 + 3*2**20 + 8*1.75**20 + 7*1.5**20 + 36*1.25**20 + 7*1.125**20 + 0.5*1.125**-20 + 72*1.5**-20 + 12*1.75**-20 + 12*2**-20 + 9*2.25**-20 + 14*2.5**-20 + 9*2.75**-20 + 2**-5))

power_series(3767769, 2, 20, 2**-20, 4000)
power_series(3767769, 5, 9, 2**-9, 4000)
power_series(96575314069365.2, 5, 20, 2**-20, 4000)
def power_series(tgt, i, ipow, tol=2**-32, maxiter=2048):
    if type(tgt) is not mpmath.mpf:
        tgt = mpmath.mpf(tgt)
    total = mpmath.mpf(0)
    ary = []
    di = 0.5
    iter = 0
    while abs(tgt - total) > tol:
        iter += 1
        if iter > maxiter:
            break
        if tgt - total < 0:
            break
        thispow = mpmath.log(tgt - total, i)
        nextpow = mpmath.log(tgt - total, i + di) if i + di > 1 else 0 
        if thispow < 0:
            print("thispow " + str(thispow) + ", ipow " + str(ipow))
        if tgt - total > 1 and thispow > 0 and thispow >= ipow:
            if nextpow != 0 and nextpow < ipow:
                total += i**ipow
                if len(ary) > 0 and ary[-1][1] == i:
                    ary[-1][0] += 1
                else:
                    ary.append([1, i, ipow])
            else:
                i += di
                total += i**ipow
                ary.append([1, i, ipow])
        elif thispow < 0 and thispow >= -ipow:
            if nextpow != 0 and nextpow > ipow:
                total += i**ipow
                if len(ary) > 0 and ary[-1][1] == i:
                    ary[-1][0] += 1
                else:
                    ary.append([1, i, ipow])
            else:
                i += di
                total += i**ipow
                ary.append([1, i, ipow])
        else:
            i -= di
            if di > 0:
                if i <= 3.5:
                    di = 0.25
                if i <= 1.25:
                    di = 0.125
                if i <= 1.125:
                    di = 0.0625
                if i <= 1.0625:
                    di = 0.03125
                if i <= 1.03125:
                    di = -0.03125
            else:
                if i <= 1.03125:
                    i = 1.03125
                    di = -0.03125
                if i >= 1.0625:
                    di = -0.0625
                if i >= 1.125:
                    di = -0.125
                if i >= 1.25:
                    di = -0.25
                if i >= 1.5:
                    di = -0.5
    s = ""
    for i in range(0, len(ary)):
        if ary[i][0] == 1:
            s += str(ary[i][1]) + "**" + str(ary[i][2]) + " + "
        else:
            s += str(ary[i][0]) + "*" + str(ary[i][1]) + "**" + str(ary[i][2]) + " + "
    return s[:-2]


power_series(14011.646745384698, 6.75)
power_series(20526.5836662063739979, 7.25)
def power_series(tgt, i, tol=2**-32, maxiter=2048):
    ary = []
    thisipow = 0
    thisepow = 0
    di = 0.25
    iter = 0
    total = 0
    if round(mpmath.power(tgt, mpmath.fdiv(1, 5)), 2) >= round(i, 2):
        #i = round(8*mpmath.power(tgt, mpmath.fdiv(1, 5)), 2)/8
        frac = fractions.Fraction(round(4*mpmath.power(tgt, mpmath.fdiv(1, 5)), 2)/4).limit_denominator(6)
        if frac.denominator in [2, 4, 8]:
            thisipow = mpmath.fdiv(frac.numerator, frac.denominator)
            total = mpmath.power(i, thisipow)
            ary.append([1, i, thisipow])
    else:
        thisipow = round(8*mpmath.log(tgt, i), 3)/8
        if 8*thisipow % 1 in [0, 0.25, 0.5, 0.75]:
            total = mpmath.power(i, thisipow)
            ary.append([1, i, thisipow])
    while abs(tgt - total) > tol:
        iter += 1
        if iter > maxiter:
            break
        try:
            thisipow = round(8*mpmath.log(abs(tgt - total), i), 2)/8
        except ZeroDivisionError as zde:
            pass
            break
        if abs(tgt - total) < 1:
            while thisipow < -0.5 and i >= 1.25:
                i -= di
                try:
                    thisipow = round(8*mpmath.log(abs(tgt - total), i), 2)/8
                except ZeroDivisionError as zde:
                    pass
                    break
        else:
            while thisipow < 2 and i >= 2.125:
                i -= di
        try:
            thisepow = round(5*mpmath.log(abs(tgt - total)), 2)/5
        except ZeroDivisionError as zde:
            pass
            break
        if tgt - total < 0:
            if abs(tgt - total + mpmath.power(i, thisipow)) < abs(tgt - total + mpmath.exp(thisepow)):
                total -= mpmath.power(i, thisipow)
                ary.append([i, thisipow])
                if ary[-1][1] == i:
                    ary[-1][0] += 1
                else:
                    ary.append([1, i, thisipow])
            else:
                total -= mpmath.exp(thisepow)
                if ary[-1][1] == math.e:
                    ary[-1][0] += 1
                else:
                    ary.append([1, math.e, thisepow])
        else:
            if abs(tgt - total - mpmath.power(i, thisipow)) < abs(tgt - total - mpmath.exp(thisepow)):
                total += mpmath.power(i, if abs(tgt - total + mpmath.exp(thisepow) < abs(tgt - total + mpmath.exp(thisepow))
                if ary[-1][1] == i:
                    ary[-1][0] += 1
                else:
                    ary.append([1, i, thisipow])
            else:
                total += mpmath.exp(thisepow)
                if ary[-1][1] == math.e:
                    ary[-1][0] += 1
                else:
                    ary.append([1, math.e, thisepow])
    s = ""
    print(str(ary))
    for i in range(0, len(ary)):
        if ary[i][0] == 1:
            s += str(ary[i][1]) + "**" + str(ary[i][2]) + " + "
        else:
            s += str(ary[i][0]) + "*" + str(ary[i][1]) + "**" + str(ary[i][2]) + " + "
    return s[:-2]


power_series_e(54.754505417622184 - 2.25**5)
power_series_e(54.8607327191620134 - mpmath.exp(4))
def power_series_e(tgt, tol=mpmath.power(2, -53), maxiter=2048, maxprec=32):
    if type(tgt) is not mpmath.mpf:
        tgt = mpmath.mpf(tgt)
    ary = []
    thisepow = 0
    iter = 0
    total = mpmath.mpf(0)
    thisepow = int(10*mpmath.log(abs(tgt)) + 0.1)/10
    if round(abs(thisepow) % 1, 10) in [0.1, 0.3, 0.7, 0.9]:
        thisepow -= 0.1
    if abs(thisepow) % 1 in [0, 0.2, 0.4, 0.5, 0.6, 0.8]:
        total = mpmath.exp(round(thisepow, 10))
        if tgt > 0:
            ary.append([1, round(thisepow, 10)])
        else:
            total = -total
            ary.append([-1, round(thisepow, 10)])
    while abs(tgt - total) > tol and abs(thisepow) <= maxprec:
        iter += 1
        if iter > maxiter:
            break
        try:
            thisepow = int(10*mpmath.log(abs(tgt - total)) + 0.1)/10
            if round(abs(thisepow) % 1, 10) in [0.1, 0.3, 0.7, 0.9]:
                thisepow -= 0.1
        except ZeroDivisionError as zde:
            pass
            break
        if tgt - total < 0:
            if abs(tgt - (total - mpmath.exp(thisepow))) < abs(tgt - (total + mpmath.exp(thisepow))):
                total -= mpmath.exp(round(thisepow, 10))
                if len(ary) > 0 and ary[-1][1] == round(thisepow, 10):
                    ary[-1][0] -= 1
                else:
                    ary.append([-1, round(thisepow, 10)])
            else:
                total += mpmath.exp(round(thisepow, 10))
                if len(ary) > 0 and ary[-1][1] == round(thisepow, 10):
                    ary[-1][0] += 1
                else:
                    ary.append([1, round(thisepow, 10)])
        else:
            if abs(tgt - (total - mpmath.exp(thisepow))) < abs(tgt - (total + mpmath.exp(thisepow))):
                total -= mpmath.exp(round(thisepow, 10))
                if len(ary) > 0 and ary[-1][1] == round(thisepow, 10):
                    ary[-1][0] -= 1
                else:
                    ary.append([-1, round(thisepow, 10)])
            else:
                total += mpmath.exp(round(thisepow, 10))
                if len(ary) > 0 and ary[-1][1] == round(thisepow, 10):
                    ary[-1][0] += 1
                else:
                    ary.append([1, round(thisepow, 10)])
    s = ""
    if len(ary) > 0:
        if ary[0][0] == 1:
            s = "mpmath.exp(" + str(ary[0][1]) + ")"
        else:
            s = " - mpmath.exp(" + str(ary[0][1]) + ")"
    print(str(ary))
    for i in range(1, len(ary)):
        if abs(ary[i][0]) > 1:
            if ary[i][0] > 1:
                s += " + " + str(ary[i][0]) + "*mpmath.exp(" + str(ary[i][1]) + ")"
            else:
                s += " - " + str(abs(ary[i][0])) + "*mpmath.exp(" + str(ary[i][1]) + ")"
        else:
            if ary[i][0] > 0:
                s += " + mpmath.exp(" + str(ary[i][1]) + ")"
            else:
                s += " - mpmath.exp(" + str(ary[i][1]) + ")"
    return s


0.7401781498621958/0.739180406654574
1.0013497966107319
1 + 1/740.8523566063558

choose 740 such that
(740.8523566063558 % 31.238987740468971)/(740.8523566063558 % 30.547636610655307) = 2.8999
(740.8523566063558 % 31.082805007095313)/(740.8523566063558 % 31.822983156957505) = 2.9077

31.238987740468971 is a new point (spike)
31.082805007095313 is log(sqrt(p1p2))
30.547636610655307 is a new point (spike)
31.822983156957505 is log(p2)

(740.8523566063558 % 31.238987740468971)/(740.8523566063558 % 30.547636610655307) = 2.8999
(740.8523566063558 % log(sqrt(p1p2)))/(740.8523566063558 % log(p2)) = 2.9077



# 
# 15053428029503x66152457549107
# grid search
# note 0.852605502 = 2*math.exp(-0.852605502)
# 31.822983156957505 is log(p2) so is unknown
# 31.082805007095313 is log(sqrt(p1p2)) 
# 
greater_point1, lesser_point1 = 31.238987740468971, 30.547636610655307
greater_point2, lesser_point2 = 0, 31.082805007095313
plot_f, plot_i, plot_dist, plot_mod_ratio_i, plot_mod_ratio_dist = [], [], [], [], []
tgt_ratio = 1 + 2/740.8523566063558 - 1/(432.5203566549372*740.8523566063558) - 1/(278.3543566792279*740.8523566063558**2)
tgt_ratio = 1 + 2/740.8523566063558 - 1/(432.5203566549372*740.8523566063558) - 1/(278.3543566792279*740.8523566063558**2) - 0.75/740.8523566063558**2
tgt_ratio = 1.0026964792528943
tgt_mod_ratio = 2.9
200, 200 yields 6000 rows
f_mult, i_mult = 500, 500
for f in [0.7382 + x/(10000 * f_mult) for x in range(1, 30 * f_mult + 1)]:
    greater_point2 = (3 + f) * 0.15618273337365807 + 31.238987740468971
    min_dist, min_i = 2**32, 225
    min_mod_ratio_dist, min_mod_ratio_i = 2**32, 225
    for i in [min_i + x/i_mult for x in range(1, 925 * i_mult + 1)]:
        mod_ratio1 = (i % greater_point1) / (i % lesser_point1)
        mod_ratio2 = (i % greater_point2) / (i % lesser_point2)
        if mod_ratio1 < 1:
            mod_ratio1 = 1/mod_ratio1
        if mod_ratio2 < 1:
            mod_ratio2 = 1/mod_ratio2
        a = (0.8523566063558 + 0.8539566646535)/2
        b = (0.2*(i + a) + (i/2 + a))/(1 + 0.2)
        c = (-0.2*(i + a) + (i/2 + a))/(1 - 0.2)
        form1 = 1 + 2/i - 1/(b*i) - 1/(c*i*2) + 0.75/i**2
        form2 = 1 + 2/i - 1/(b*i) + 1/(c*i*2) - 0.75/i**2
        form3 = 1 + 2/i - 1/(b*i) + 1/(c*i**2)
        tgt_ratio = form3
        if abs(tgt_ratio - mod_ratio1/mod_ratio2) < min_dist:
            min_dist = abs(tgt_ratio - mod_ratio1/mod_ratio2)
            min_i = i
        elif abs(tgt_ratio - mod_ratio2/mod_ratio1) < min_dist:
            min_dist = abs(tgt_ratio - mod_ratio2/mod_ratio1)
            min_i = i
        if abs(tgt_mod_ratio - mod_ratio1) + abs(tgt_mod_ratio - mod_ratio2) < min_mod_ratio_dist:
            min_mod_ratio_dist = abs(tgt_mod_ratio - mod_ratio1) + abs(tgt_mod_ratio - mod_ratio2)
            min_mod_ratio_i= i
    plot_f.append(f)
    plot_i.append(min_i)
    plot_dist.append(min_dist)
    plot_mod_ratio_i.append(min_mod_ratio_i)
    plot_mod_ratio_dist.append(min_mod_ratio_dist)

icount, plot_idx = 0, []
for min_dist in sorted(plot_dist)[0:144]:
    idx = plot_dist.index(min_dist)
    plot_idx.append(idx)
    icount += 1
    if icount <= 16:
        print("dist " + str(min_dist) + ", plot_i[" + str(idx) + "]=" + str(plot_i[idx]) + ", plot_f[" + str(idx) + "]=" + str(plot_f[idx]))

true value is f=0.74017815, i=740.8523566
closest dist is at plot_i[11420]=740.374, plot_f[11420]=0.7404842
                   plot_i[1392] =740.438, plot_f[1392] =0.7384786
                   plot_i[10946]=740.81,  plot_f[10946]=0.7403894
                   plot_i[14955]=740.782, plot_f[14955]=0.7411912
                   plot_i[4667] =740.854, plot_f[4667] =0.7391336
                   plot_i[3528] =740.862, plot_f[3528] =0.7389058
                   plot_i[9231] =740.822, plot_f[9231] =0.7400464

min_dist is 1/4037274263.5582056

min_dist is 1/419271485.2328184
max_dist is 1/7640468.725135089
min_dist, max_dist = min([plot_dist[idx] for idx in sorted(plot_idx)]), max([plot_dist[idx] for idx in sorted(plot_idx)])
_ = plt.plot([plot_f[idx] for idx in sorted(plot_idx)], [plot_dist[idx] for idx in sorted(plot_idx)])
_ = plt.plot([0.73918041, 0.73918041], [min_dist, max_dist])
_ = plt.plot([0.74017815, 0.74017815], [min_dist, max_dist])

# find the neg spike square wave
max_is is 740.71
min_i, max_i = min([plot_i[idx] for idx in sorted(plot_idx)]), max([plot_i[idx] for idx in sorted(plot_idx)])
_ = plt.plot([plot_f[idx] for idx in sorted(plot_idx)], [plot_i[idx] for idx in sorted(plot_idx)])
_ = plt.plot([0.73918041, 0.73918041], [min_i, max_i])
_ = plt.plot([0.74017815, 0.74017815], [min_i, max_i])
# find the central neg spike (and possibly other spikes) 
min_i, max_i = min([plot_i[idx] for idx in sorted(plot_idx)]), max([plot_i[idx] for idx in sorted(plot_idx)])
_ = plt.plot([plot_f[idx] for idx in sorted(plot_idx)], [plot_i[idx] for idx in sorted(plot_idx)])
_ = plt.plot([0.73918041, 0.73918041], [min_i, max_i])
#_ = plt.plot([(0.73918041 + 0.74017815)/2, (0.73918041 + 0.74017815)/2], [min_i, max_i])
_ = plt.plot([0.7396792, 0.7396792], [min_i, max_i])
_ = plt.plot([0.74017815, 0.74017815], [min_i, max_i])
plt.grid()
plt.show()

# [[7225, 0.7396452, 344.434], [7226, 0.7396454, 344.434], [7227, 0.7396456, 344.434], [7228, 0.7396458, 344.434]]
# (0.7396452 + 0.7396454 + 0.7396456 + 0.7396458)/4 # 0.7396455
# (0.73918041 + 0.74017815)/2 # 0.73967928
# 0.73967928 - plot_f[7230]
[[idx, plot_f[idx], round(plot_i[idx], 4)] for idx in sorted(plot_idx) if plot_i[idx] < 425]

# 1/12499999.989232214
1/min([abs(0.73967928 - plot_f[i]) for i in range(7225, 7401)])
# [7395, 0.7396792, 602.154]
# 0.7396792 - 0.73967928
[[i, plot_f[i], plot_i[i]] for i in range(7225, 7401) if abs(0.73967928 - plot_f[i]) == 1/12499999.989232214]

[[idx, plot_f[idx], round(plot_i[idx], 4)] for idx in sorted(plot_idx) if plot_i[idx] < 605 and plot_i[idx] > 550]
# 1/19999999.988322657
1/min([abs(0.74017815 - plot_f[i]) for i in range(9067, 10051)])
# [9890, 0.7401782, 568.174]
[[i, plot_f[i], plot_i[i]] for i in range(9890 - 50, 9890 + 50 + 1) if round(abs(0.74017815 - plot_f[i]), 12) <= round(1/19999999.988322657, 10)]
[[idx, plot_f[idx], round(plot_i[idx], 4)] for idx in sorted(plot_idx) if idx > 9890 - 100 and idx < 9890 + 100 and plot_i[idx] < 650 and plot_i[idx] > 500]
[9779, 0.740156, 568.174], [9780, 0.7401562, 568.174], 
[10048, 0.7402098, 601.804], [10049, 0.74021, 601.804], [10050, 0.7402102, 601.804], [10088, 0.7402178, 740.816]
[[idx, round(plot_f[idx], 8), round(plot_i[idx], 8)] for idx in sorted(plot_idx) if plot_f[idx] > 0.7401782 - 0.00005 and plot_f[idx] < 0.7401782 + 0.00005]
[9779, 0.740156, 568.174], [9780, 0.7401562, 568.174], # 0.74017815 - 0.7401562 = 0.00002195
[10048, 0.7402098, 601.804], [10049, 0.74021, 601.804], [10050, 0.7402102, 601.804], [10088, 0.7402178, 740.816] # 0.7402098 - 0.74017815 = 0.00003165
[[idx, round(plot_f[idx], 8), round(plot_i[idx], 8)] for idx in sorted(plot_idx) if plot_f[idx] > 0.74017815 - 0.00005 and plot_f[idx] < 0.74017815 + 0.00005]
[9889, 0.740178, 568.174], [9890, 0.7401782, 568.174]
[[i, round(plot_f[i], 8), round(plot_i[i], 8)] for i in range(9780, 9780 + 50 + 1) if plot_f[i] > 0.74017815 - 0.00001 and plot_f[i] < 0.74017815 + 0.00003]
[9779, 0.740156, 568.174], [9780, 0.7401562, 568.174], 
[10048, 0.7402098, 601.804], [10049, 0.74021, 601.804], [10050, 0.7402102, 601.804]
(0.740156 + 0.7401562 + 0.7402098 + 0.74021 + 0.7402102)/5 # 0.74018844 # 0.74018844 - 0.74017815 = 0.00001029 = 1/97181.729834791
(0.7401562 + 0.7402098)/2 # 0.740183
(0.740156 + 0.74021)/2    # 0.740183
(0.740156 + 0.7402102)/2  # 0.7401831
# 0.74017815 is the target (closest approximation is 0.7391336)
# 0.7401719529411765
(1.125*0.740156 + 3.375*0.7401562 + 1.125*0.7402098 + 0.75*0.74021)/(3.375 + 0.75 + 2*1.125)
# 0.7401884404710086
(0.740156**2 + 0.7401562**2 + 0.7402098**2 + 0.74021**2 + 0.7402102**2)**0.5/math.sqrt(5)
# 0.7401884407065114
(0.740156**2.5 + 0.7401562**2.5 + 0.7402098**2.5 + 0.74021**2.5 + 0.7402102**2.5)**(1/2.5)/5**(1/2.5)
# 0.7401884400942021
(0.740156**1.2 + 0.7401562**1.2 + 0.7402098**1.2 + 0.74021**1.2 + 0.7402102**1.2)**(1/1.2)/5**(1/1.2)
[[idx, round(plot_f[idx], 8), round(plot_i[idx], 8)] for idx in sorted(plot_idx) if idx > 9889 - 160 and idx < 9890 + 160 + 1]
[[idx, round(plot_f[idx], 8), round(plot_i[idx], 8)] for idx in sorted(plot_idx) if idx > 9889 - 200 and idx < 9890 + 200 + 1 and plot_i[idx] < 740]



log(sqrt(p1p2)) - log(p1) between 0.7392 and 0.7402
log(p2) - 31.238987740468971 = (3 + log(sqrt(p1p2)) - log(p1)) * 0.15618273337365807
log(p2) = (3 + 0.7396) * 0.15618273337365807 + 31.238987740468971
--------------------------------------
math.log(p2[thisi]) 31.822983156957505
math.log(math.sqrt(p1p2[thisi])) - math.log(p1[thisi]) 0.7401781498621958

4.739180406654574
0.7401781498621958/0.15618273337365807
3.7391804066545515
0.5839954164885341/0.15618273337365807
1.3126275164599355
0.20500975342218908/0.15618273337365807
8.16573329684919
1.275346546302199/0.15618273337365807
------------------
0.7401781498621958
0.5839954164885341
31.822983156957505 - 31.238987740468971 


2.907730371223756/2.8999108218573744
(2.9 + 1/129.36)/(2.9 - 1/11213.5)
(2.9 + 1/127.88)/2.9
1.0026964792528943
1 + 2/740.8523566063558 - 1/(433.4650721834621*740.8523566063558)
1 + 2/740.8523566063558 - 1/(432.5203566549372*740.8523566063558) - 1/(267.8723796421032*740.8523566063558*2)
1 + 2/740.8523566063558 - 1/(432.5203566549372*740.8523566063558) - 1/(278.3543566792279*740.8523566063558*2)
form1 = 1 + 2/740.8523566063558 - 1/(432.5203566549372*740.8523566063558) - 1/(278.3543566792279*740.8523566063558*2) + 0.75/740.8523566063558**2
form2 = 1 + 2/740.8523566063558 - 1/(432.5203566549372*740.8523566063558) + 1/(278.3543566792279*740.8523566063558*2) - 0.75/740.8523566063558**2
1/(1.0026964792528943 - (form1 + form2)/2)
form3 = 1 + 2/740.8523566063558 - 1/(432.5203566549372*740.8523566063558) + 1/(278.3543566792279*740.8523566063558**2)
1.0026964789967683
1 + 2/740.8523566063558 - 1/(432.5203566549372*740.8523566063558) + 1/(278.3543566792279*740.8523566063558**2) + 1/(9.601762083825935*740.8523566063558**3)


(0.2*740.8523566063558 + 370.8539566646535)/1.2
432.5203566549372
(740.8523566063558**2 + 370.8539566646535**2)**0.5/2
414.2447559906521

(-0.2*740.8523566063558 + 370.8539566646535)/(1 - 0.2)
278.3543566792279

(1 - 0.5)/(-0.5*740.8523566063558 + 370.8539566646535)

f = 0.2
df = -0.0625
tgt = 267.872379642103
tgt = 1/9.601762083825935
while (f*740.8523566063558 + 370.8539566646535)/(1 + f) > tgt:
    f += df
    if (f*740.8523566063558 + 370.8539566646535)/(1 + f) < tgt:
        f -= df
        df /= 2
        if abs(df) <= 2**-53:
            break

24.416223423640407
740.8523566063558/30.342626857233117
23.280418210710145
740.8523566063558/31.822983156957505
23.834797291854464
740.8523566063558/31.082805007095313
24.252362500211863
740.8523566063558/30.547636610655307
23.71563261784595
740.8523566063558/31.238987740468971

740.8523566063558 % 31.082805007095313
25.94784144316358
740.8523566063558 % 31.822983156957505
8.923743996333158
25.94784144316358/8.923743996333158
2.907730371223756

740.8523566063558 % 31.238987740468971
22.355638575569444
740.8523566063558 % 30.547636610655307
7.709077950628426
22.355638575569444/7.709077950628426
2.8999108218573744

2.907730371223756/2.8999108218573744
1.0026964792528943
1 + 1/370.8539566646535
740.8523566063558/370.8539566646535
1.9976930090468878
2 - 1/433.4650721759399
(740.8523566063558 + 370.8539566646535)/2
555.8531566355047
(0.20368804658691042*740.8523566063558 + 370.8539566646535)/1.20368804658691042
433.4650721759399
(740.8523566063558**2 + 370.8539566646535**2)**0.5/2
414.2447559906521
433.4650721759399 - 414.2447559906521
19.2203161852878
433.4650721759399/414.2447559906521
1.0463984538303281
1 + 1/21.55244232182486
(740.8523566063558**1.705095747900951 + 370.8539566646535**1.705095747900951)**(1/1.705095747900951)/2
(740.8523566063558**1.9291691445098627 + 370.8539566646535**1.9291691445098627)**(1/1.9291691445098627)/1.9291691445098627

4.739180406654574
0.7401781498621958/0.15618273337365807
3.7391804066545515
0.5839954164885341/0.15618273337365807
1.3126275164599355
0.20500975342218908/0.15618273337365807
8.16573329684919
1.275346546302199/0.15618273337365807
------------------
0.7401781498621958
31.082805007095313 - 30.342626857233117 log(sqrt(p1p2)) - log(p1)
0.5839954164885341
31.822983156957505 - 31.238987740468971 log(p2) - 31.238987740468971
1.275346546302199
31.822983156957505 - 30.547636610655307 log(p2) - 30.547636610655307
0.20500975342218908
30.547636610655307 - 30.342626857233117

0.15618273337365807
31.238987740468971 - 31.082805007095313
0.6913511298136648
31.238987740468971 - 30.547636610655307
0.5351683964400067
31.082805007095313 - 30.547636610655307

30.547636610655307, 30.548283972041926
31.238987740468971

31.082805007095313
math.log(sqrt_p1p2)



log_points[0] = [30.18285195989194, 30.184155673445193, 30.258831860863044, 30.430525650622766, 30.431258349754014, 30.434049879386215, 30.471839442557204, 30.517695021708878]
log_points[1] = [30.092934235725842, 30.103235304026228, 30.18285195989194, 30.184155673445193, 30.2605276937453, 30.430525650622766, 30.434049879386215, 30.471839442557204, 30.496559976396966]
log_points[2] = [30.0302139112156, 30.131335795844855, 30.25917297886415, 30.339775439185427, 30.354016804914036, 30.3947115630925, 30.427240987427908, 30.52294351054921, 30.54278359358496, 30.551079056254082, 30.59732997966741]
log_points[3] = [30.103235304026228, 30.18285195989194, 30.258831860863044, 30.430525650622766, 30.431258349754014, 30.471839442557204, 30.517695021708878]

log_points_common = {}
log_points_uncommon = {}
bfloat, bmpf = True, False
for i in range(0, len(log_points)):
    for pt in log_points[i][1]:
        bexists = False
        for j in range(0, len(log_points)):
            if i != j and pt in log_points[j][1]:
                bexists = True
        if bexists:
            if pt in log_points_common:
                log_points_common[pt] += 1
            else:
                log_points_common[pt] = 1
        else:
            if pt in log_points_uncommon:
                log_points_uncommon[pt] += 1
            else:
                log_points_uncommon[pt] = 1
    if i == len(log_points) - 1:
        arykeys = sorted([x for x in log_points_common.keys()])
        ak = -1
        while ak < len(arykeys):
            ak += 1
            s = "log_points.append(("
            bfound = False
            while ak + 1 < len(arykeys) - 1 and arykeys[ak + 1] - arykeys[ak] < 0.005791:
                bfound = True
                if bfloat:
                    s += str(float(arykeys[ak])) + ", "
                elif bmpf:
                    s += str(arykeys[ak]) + ", "
                ak += 1
            if bfound:
                if bfloat:
                    s += str(float(arykeys[ak]))
                elif bmpf:
                    s += str(arykeys[ak])
                print(s + "))")
                s = ""
        if bfloat:
            print("log_points_common = {" + ", ".join([str(float(x)) + ": " + str(log_points_common[x]) for x in arykeys]) + "}") 
        if bmpf:
            print("log_points_common = {" + ", ".join([str(x) + ": " + str(log_points_common[x]) for x in arykeys]) + "}") 
        arykeys = sorted([x for x in log_points_uncommon.keys()])
        ak = -1
        while ak < len(arykeys):
            ak += 1
            s = "log_points.append(("
            bfound = False
            while ak + 1 < len(arykeys) - 1 and arykeys[ak + 1] - arykeys[ak] < 0.005791:
                bfound = True
                if bfloat:
                    s += str(float(arykeys[ak])) + ", "
                elif bmpf:
                    s += str(arykeys[ak]) + ", "
                ak += 1
            if bfound:
                if bfloat:
                    s += str(float(arykeys[ak]))
                elif bmpf:
                    s += str(arykeys[ak])
                print(s + "))")
                s = ""
        if bfloat:
            print("log_points_uncommon = {" + ", ".join([str(float(x)) + ": " + str(log_points_uncommon[x]) for x in arykeys]) + "}") 
        if bmpf:
            print("log_points_uncommon = {" + ", ".join([str(x) + ": " + str(log_points_uncommon[x]) for x in arykeys]) + "}") 


# 
# math.log(p1[thisi]) true value is 30.260075596823018
# 
log_points_common = {30.103235304026228: 2, 30.18285195989194: 3, 30.184155673445193: 2, 30.258831860863044: 2, 30.430525650622766: 3, 30.431258349754014: 2, 30.434049879386215: 2, 30.471839442557204: 3, 30.517695021708878: 2}
log_points_uncommon = {30.0302139112156: 1, 30.092934235725842: 1, 30.131335795844855: 1, 30.25917297886415: 1, 30.2605276937453: 1, 30.339775439185427: 1, 30.354016804914036: 1, 30.3947115630925: 1, 30.427240987427908: 1, 30.496559976396966: 1, 30.52294351054921: 1, 30.54278359358496: 1, 30.551079056254082: 1, 30.59732997966741: 1}


# 
# math.log(p1[thisi]) true value is 30.867264262557846
# math.log(p2[thisi]) true value is 30.87104172938474
# closest are 30.84424699865511, 30.92021425099886
# 
log_points_common = {30.041081772371157: 3, 30.077746845352046: 3, 30.080677852133608: 3, 30.09228342273197: 2, 30.10437375010653: 3, 30.20736821927998: 2, 30.220621442895233: 2, 30.256823543583398: 2, 30.304955109166567: 2, 30.319887576210164: 2, 30.40518446572496: 2, 30.463575233904344: 2, 30.654644498707132: 2, 30.724977811170554: 2, 30.76125627338168: 2, 31.011995133134896: 2, 31.261294078882074: 2, 31.636667338192666: 2, 31.638817246031888: 2, 31.673200160627825: 2, 31.67671521907984: 2, 31.73177471750089: 2, 31.762755966280896: 2, 31.829687953090644: 2, 31.833750385558957: 2, 31.84417948050605: 2, 31.862576070947863: 2, 31.90241008149482: 2, 31.905929833059556: 2, 31.93116060110662: 2, 31.953813470506176: 2, 31.965171641368364: 2}
log_points_uncommon = {30.018609946251807: 1, 30.02044965143376: 1, 30.03451524838004: 1, 30.043643050162746: 1, 30.05334141254131: 1, 30.056902704337976: 1, 30.060154770451028: 1, 30.065734231461164: 1, 30.090371101586946: 1, 30.174219943004307: 1, 30.175275413048166: 1, 30.22167794095879: 1, 30.289376126328822: 1, 30.30556236682276: 1, 30.385342867849854: 1, 30.43457006527718: 1, 30.460693202882513: 1, 30.464506844463507: 1, 30.474453474321876: 1, 30.496591057009578: 1, 30.49843826913139: 1, 30.532697304203786: 1, 30.542743856659076: 1, 30.61212328753815: 1, 30.62048879016802: 1, 30.621254389294645: 1, 30.627031065467943: 1, 30.680378698242638: 1, 30.696750835000145: 1, 30.697766913916887: 1, 30.7003069960591: 1, 30.702311542889138: 1, 30.702587017915185: 1, 30.714249250985162: 1, 30.723861253775098: 1, 30.72855394189076: 1, 30.73708160970419: 1, 30.77833423946834: 1, 30.793193745789893: 1, 30.807691983670185: 1, 30.814661685464543: 1, 30.831533626929193: 1, 30.84424699865511: 1, 30.92021425099886: 1, 30.92342280452412: 1, 31.00039035900107: 1, 31.001752177809603: 1, 31.01562039800286: 1, 31.035547524315206: 1, 31.041162445548625: 1, 31.07648784762361: 1, 31.07886201107368: 1, 31.079211101411737: 1, 31.088937797653333: 1, 31.09556709635728: 1, 31.11505143204221: 1, 31.11585019570438: 1, 31.133430629587448: 1, 31.138034391913816: 1, 31.14031772737621: 1, 31.142556172727257: 1, 31.152382552966188: 1, 31.155357037053125: 1, 31.169187787230765: 1, 31.16971761228882: 1, 31.197461944369643: 1, 31.199955341202845: 1, 31.216435322237384: 1, 31.21947610688246: 1, 31.23011157535452: 1, 31.24183703679565: 1, 31.253905909067672: 1, 31.262553224400104: 1, 31.27690484316648: 1, 31.278111962491117: 1, 31.278790423058446: 1, 31.305249207342136: 1, 31.351760083122358: 1, 31.435890855678043: 1, 31.447726161983784: 1, 31.4482154785527: 1, 31.46088092508071: 1, 31.471512523557145: 1, 31.486837821786143: 1, 31.489392333912082: 1, 31.517320129581048: 1, 31.519030792747294: 1, 31.53292218154044: 1, 31.544050984350246: 1, 31.556241672915817: 1, 31.56252877912696: 1, 31.563625608335048: 1, 31.602539417043534: 1, 31.61515029084168: 1, 31.620712408974928: 1, 31.64083760252302: 1, 31.67657263402135: 1, 31.69556201023764: 1, 31.708348454980857: 1, 31.71751237595496: 1}


# 
# math.log(p1[thisi]) true value is 30.508940239260962
# math.log(p2[thisi]) true value is 31.110533486618692
# closest are 30.4990265623345, 31.091795648688304
# 
log_points_common = {30.03439650858644: 3, 30.161200816936724: 2, 30.25568303829258: 2, 30.299697047136792: 2, 30.30424896416299: 2, 30.346057237221785: 2, 30.3764995598112: 2, 30.396905771360835: 2, 30.430108306892393: 3, 30.45379970399742: 2, 30.484157644797737: 2, 30.61168620216172: 2, 30.634868484051164: 2, 30.694274432003528: 2, 31.018761714018964: 2, 31.064885625366095: 2, 31.072839931065122: 2, 31.65610922719527: 2, 31.74393139217287: 2, 31.798442657251254: 2, 31.80219821755969: 2, 31.816860938305133: 2, 31.84305660867436: 2, 31.870362085595108: 2, 31.882762844164194: 2, 31.88487696295223: 2, 31.89683969414157: 2, 31.898081079479326: 2, 31.902817466289612: 2}
log_points_uncommon = {29.957039043140625: 1, 29.957079943298044: 1, 29.96081282665765: 1, 29.962846841711762: 1, 29.97138548806567: 1, 29.9765892288644: 1, 29.99039813216394: 1, 30.010161028110556: 1, 30.016458353572855: 1, 30.02636057941693: 1, 30.033684051984462: 1, 30.041218120596856: 1, 30.062567245248673: 1, 30.078510810084776: 1, 30.096765411667743: 1, 30.133970490710315: 1, 30.177546209782054: 1, 30.201222031168687: 1, 30.29863575784357: 1, 30.302288167073684: 1, 30.310382459676113: 1, 30.339584414828433: 1, 30.3651483850076: 1, 30.37214921235127: 1, 30.380000996358813: 1, 30.393893422407622: 1, 30.41057698957271: 1, 30.42877908308433: 1, 30.460326635038985: 1, 30.47660769116737: 1, 30.49472040840873: 1, 30.4990265623345: 1, 30.5156762531778: 1, 30.53985595477726: 1, 30.548129316675457: 1, 30.555304531102777: 1, 30.560673133638765: 1, 30.561224767317043: 1, 30.575457348828532: 1, 30.579088880794117: 1, 30.613791181036017: 1, 30.63173231392267: 1, 30.638270296066857: 1, 30.64042221079712: 1, 30.667216207398393: 1, 30.678070581036977: 1, 30.690900446276363: 1, 30.71826397438794: 1, 30.757357616524928: 1, 30.825739248461115: 1, 30.842644871454496: 1, 30.866209375062834: 1, 30.93372982243485: 1, 30.947529765682834: 1, 30.95220297288727: 1, 30.95647413786994: 1, 30.95798873276421: 1, 30.95957588723284: 1, 30.968543447038357: 1, 30.989963326380927: 1, 30.999036860827566: 1, 31.002184358224145: 1, 31.004327923371854: 1, 31.013864575267785: 1, 31.01760708565776: 1, 31.043513605698717: 1, 31.04507139942614: 1, 31.045357802500842: 1, 31.048604517048712: 1, 31.053693502165128: 1, 31.058161031020006: 1, 31.0636072034241: 1, 31.071462579816536: 1, 31.08790314042484: 1, 31.091795648688304: 1, 31.099930615233863: 1, 31.106018345272695: 1, 31.141166779838443: 1, 31.141836466183275: 1, 31.170768034352648: 1, 31.179201388227767: 1, 31.190475274835464: 1, 31.190645518339764: 1, 31.23679917225505: 1, 31.245798553574193: 1, 31.25828259317867: 1, 31.28049496824433: 1, 31.308295001194065: 1, 31.319618004220697: 1, 31.325210429798666: 1, 31.338560907204247: 1, 31.359274420915234: 1, 31.37215044973297: 1, 31.401373516602852: 1, 31.410590149335412: 1, 31.411153631575203: 1, 31.416862093519086: 1, 31.441337954349237: 1, 31.45409931401861: 1, 31.45744763283018: 1, 31.468483674869344: 1, 31.477210369374315: 1, 31.485332702087234: 1, 31.499135867618847: 1, 31.530332655846266: 1, 31.534893263241294: 1, 31.53572786507842: 1, 31.563845683399247: 1, 31.57216728118011: 1, 31.572873167147684: 1, 31.575980585580297: 1, 31.577742123763127: 1, 31.580550839361674: 1, 31.588127744614198: 1, 31.593570387615237: 1, 31.59533970314156: 1, 31.62124108895765: 1, 31.625554766092236: 1, 31.628328865007123: 1, 31.65441695724109: 1}

# 
# 17777242415791 * 32443897622537 = 576763032948945539326281767
# 
log_points = []
log_points.append((29.957039043140625, 29.957079943298044, 29.96081282665765, 29.962846841711762))
log_points.append((29.97138548806567, 29.9765892288644))
log_points.append((30.299697047136792, 30.30424896416299))
log_points.append((30.29863575784357, 30.302288167073684))
log_points.append((30.49472040840873, 30.4990265623345))
log_points.append((30.555304531102777, 30.560673133638765, 30.561224767317043))
log_points.append((30.575457348828532, 30.579088880794117))
log_points.append((30.638270296066857, 30.64042221079712))
log_points.append((30.947529765682834, 30.95220297288727, 30.95647413786994, 30.95798873276421, 30.95957588723284))
log_points.append((30.999036860827566, 31.002184358224145, 31.004327923371854))
log_points.append((31.013864575267785, 31.01760708565776))
log_points.append((31.043513605698717, 31.04507139942614, 31.045357802500842, 31.048604517048712, 31.053693502165128, 31.058161031020006, 31.0636072034241))
log_points.append((31.08790314042484, 31.091795648688304))
log_points.append((31.141166779838443, 31.141836466183275))
log_points.append((31.190475274835464, 31.190645518339764))
log_points.append((31.319618004220697, 31.325210429798666))
log_points.append((31.410590149335412, 31.411153631575203, 31.416862093519086))
log_points.append((31.45409931401861, 31.45744763283018))
log_points.append((31.530332655846266, 31.534893263241294, 31.53572786507842))
log_points.append((31.57216728118011, 31.572873167147684, 31.575980585580297, 31.577742123763127, 31.580550839361674))
log_points.append((31.588127744614198, 31.593570387615237, 31.59533970314156))
log_points.append((31.62124108895765, 31.625554766092236, 31.628328865007123))
log_points.append((31.798442657251254, 31.80219821755969))
log_points.append((31.882762844164194, 31.88487696295223))
log_points.append((31.89683969414157, 31.898081079479326))


# 
# math.log(p1[thisi]) true value is 30.260075596823018
# math.log(p2[thisi]) true value is 31.416082983393075
# closest are 30.24999677785281, 31.405612424363675
# 
log_points_common = {30.006181636133306: 3, 30.009476361191233: 3, 30.011365775439582: 3, 30.041373518200007: 2, 30.048395955680466: 3, 30.099089968843398: 3, 30.108274511838886: 3, 30.126744615006018: 2, 30.1295778303441: 3, 30.149855553250813: 2, 30.170729534716283: 2, 30.17391246023876: 2, 30.182853980436906: 2, 30.246442633888435: 2, 30.24999677785281: 2, 30.26025510673975: 2, 30.296237963234947: 2, 30.330487651971172: 2, 30.340027316899164: 2, 30.343665260648592: 2, 30.370378132649897: 2, 30.409878903873675: 2, 30.413036501809785: 2, 30.58919893968693: 2, 30.6357582921978: 2, 30.69523857237924: 2, 30.883205852734612: 2, 30.888820168604767: 3, 30.94698200427719: 2, 30.957803099730043: 2, 30.990639076762253: 2, 31.012303726126664: 2, 31.038875504887287: 2, 31.612008480901906: 2, 31.680359697580105: 2, 31.680973243897323: 2, 31.729968619478207: 2, 31.778675395649937: 2, 31.796100321882413: 2, 31.811833241339507: 2, 31.817189469181468: 2, 31.818961264964805: 2, 31.824720663597766: 2, 31.842021151111716: 2, 31.85859985559937: 2, 31.867574898227392: 2, 31.871921625925207: 2, 31.90061981769487: 2, 31.918222849942257: 2, 31.923719643236065: 2}
log_points_uncommon = {29.982292244018687: 1, 29.984456168240808: 1, 29.985614679267396: 1, 29.986372851727875: 1, 29.988604200864888: 1, 29.989057922272423: 1, 29.99679936822036: 1, 29.99723976967141: 1, 30.00701628877449: 1, 30.01027072192703: 1, 30.015812789180394: 1, 30.023444412127393: 1, 30.030929828466864: 1, 30.034587264857212: 1, 30.04348448400176: 1, 30.05533731388565: 1, 30.070943376651492: 1, 30.0721063624645: 1, 30.07926442779245: 1, 30.10945232399975: 1, 30.117786451279752: 1, 30.135434703711333: 1, 30.14285559183868: 1, 30.39492857310661: 1, 30.402368501026142: 1, 30.448317513721193: 1, 30.461189205732893: 1, 30.488715479535585: 1, 30.515698976304005: 1, 30.53933196561283: 1, 30.55741079787283: 1, 30.56546435254779: 1, 30.57247113631629: 1, 30.577637941623287: 1, 30.582223674838456: 1, 30.583730714881785: 1, 30.601027029013228: 1, 30.60421265061285: 1, 30.604629753472956: 1, 30.608760651026746: 1, 30.617932585561483: 1, 30.622119209418745: 1, 30.625215270959142: 1, 30.630123747561893: 1, 30.636191856757726: 1, 30.643672053646394: 1, 30.64968076987701: 1, 30.653810018594005: 1, 30.655936483644883: 1, 30.671257492175393: 1, 30.679232702778403: 1, 30.692612825491604: 1, 30.69367763917068: 1, 30.696291812353223: 1, 30.698981387457536: 1, 30.701572587858024: 1, 30.701930430407614: 1, 30.702634303558394: 1, 30.705007996224353: 1, 30.708983506236322: 1, 30.71600361939353: 1, 30.718784041826993: 1, 30.719605826584946: 1, 30.721294346851085: 1, 30.730656886197703: 1, 30.75301416271616: 1, 30.78188579635123: 1, 30.814637416938858: 1, 30.81609513912481: 1, 30.816283424619094: 1, 30.81850744058829: 1, 30.821772755554253: 1, 30.82537279344448: 1, 30.831000944772406: 1, 30.85468045984078: 1, 30.866749350504087: 1, 30.868528512918026: 1, 30.876923458167127: 1, 30.877893937430798: 1, 30.888869590561505: 1, 30.892015823531526: 1, 30.901282134035295: 1, 30.912183260134153: 1, 30.921926906722238: 1, 30.933410296805715: 1, 30.94093447690692: 1, 30.948791183197645: 1, 30.949930050599992: 1, 30.963304469788685: 1, 30.965792553714905: 1, 30.973624583480174: 1, 30.98092501951426: 1, 30.9824799206375: 1, 30.984046655591868: 1, 30.988562880720792: 1, 30.991623966874673: 1, 30.99246482033029: 1, 30.9996529290344: 1, 31.002813357612084: 1, 31.00398247659408: 1, 31.011690977342244: 1, 31.01466056142998: 1, 31.0191006167636: 1, 31.027609542301054: 1, 31.028931110581887: 1, 31.036818276521235: 1, 31.047217048580144: 1, 31.050575446784713: 1, 31.060331037716253: 1, 31.061576890070743: 1, 31.06598210046071: 1, 31.06748034556389: 1, 31.070028805131322: 1, 31.09366471030981: 1, 31.098390537976467: 1, 31.107192325805798: 1, 31.11005301183554: 1, 31.11619131011957: 1, 31.138078730359165: 1, 31.13966977529667: 1, 31.142138489311762: 1, 31.15914809638173: 1, 31.167533551698916: 1, 31.174813714449467: 1, 31.181323255000162: 1, 31.211665235102252: 1, 31.212297861589946: 1, 31.243140869383854: 1, 31.273529247513764: 1, 31.2806818112382: 1, 31.325605323162023: 1, 31.337746965512977: 1, 31.353271193742255: 1, 31.36147623676198: 1, 31.402869380132543: 1, 31.405612424363675: 1, 31.411938269853074: 1, 31.44284376864587: 1, 31.453417443132796: 1, 31.46779131756381: 1, 31.477660656178468: 1, 31.483743181674647: 1, 31.50500392026898: 1, 31.507397972024588: 1, 31.53426015490528: 1, 31.54463278951752: 1, 31.5546216466151: 1, 31.55845778343663: 1, 31.561131681937706: 1, 31.562339720310764: 1, 31.56474240108113: 1, 31.571346900488: 1, 31.571486021005505: 1, 31.589849658115533: 1, 31.593923021424434: 1, 31.5953536992783: 1, 31.601197343243633: 1, 31.603186363495773: 1, 31.617701712261937: 1, 31.632437076414206: 1, 31.637115052695208: 1, 31.647235235795517: 1, 31.648431891964343: 1, 31.649384159994106: 1, 31.650312759932483: 1, 31.651178938451103: 1, 31.66135891978045: 1, 31.66475833857161: 1, 31.664852179801468: 1, 31.667522761943935: 1, 31.684626526911487: 1, 31.744844281325587: 1, 31.789401290116114: 1, 31.82667021991721: 1, 31.87414332149089: 1, 31.885319548604098: 1, 31.889087514445816: 1, 31.889328448906124: 1}

# 
# 13860658187287 * 44038395018313 = 610401140465559117748786831
# 
log_points = []
log_points.append((30.006181636133306, 30.009476361191233, 30.011365775439582))
log_points.append((30.126744615006018, 30.1295778303441))
log_points.append((30.170729534716283, 30.17391246023876))
log_points.append((30.246442633888435, 30.24999677785281))
log_points.append((30.340027316899164, 30.343665260648592))
log_points.append((30.409878903873675, 30.413036501809785))
log_points.append((30.883205852734612, 30.888820168604767))
log_points.append((31.680359697580105, 31.680973243897323))
log_points.append((31.811833241339507, 31.817189469181468, 31.818961264964805, 31.824720663597766))
log_points.append((31.867574898227392, 31.871921625925207))
log_points.append((29.982292244018687, 29.984456168240808, 29.985614679267396, 29.986372851727875, 29.988604200864888, 29.989057922272423))
log_points.append((29.99679936822036, 29.99723976967141))
log_points.append((30.00701628877449, 30.01027072192703, 30.015812789180394))
log_points.append((30.030929828466864, 30.034587264857212))
log_points.append((30.070943376651492, 30.0721063624645))
log_points.append((30.57247113631629, 30.577637941623287, 30.582223674838456, 30.583730714881785))
log_points.append((30.601027029013228, 30.60421265061285, 30.604629753472956, 30.608760651026746))
log_points.append((30.617932585561483, 30.622119209418745, 30.625215270959142, 30.630123747561893))
log_points.append((30.64968076987701, 30.653810018594005, 30.655936483644883))
log_points.append((30.692612825491604, 30.69367763917068, 30.696291812353223, 30.698981387457536, 30.701572587858024, 30.701930430407614, 30.702634303558394, 30.705007996224353, 30.708983506236322))
log_points.append((30.71600361939353, 30.718784041826993, 30.719605826584946, 30.721294346851085))
log_points.append((30.814637416938858, 30.81609513912481, 30.816283424619094, 30.81850744058829, 30.821772755554253, 30.82537279344448, 30.831000944772406))
log_points.append((30.866749350504087, 30.868528512918026))
log_points.append((30.876923458167127, 30.877893937430798))
log_points.append((30.888869590561505, 30.892015823531526))
log_points.append((30.948791183197645, 30.949930050599992))
log_points.append((30.963304469788685, 30.965792553714905))
log_points.append((30.98092501951426, 30.9824799206375, 30.984046655591868, 30.988562880720792, 30.991623966874673, 30.99246482033029))
log_points.append((30.9996529290344, 31.002813357612084, 31.00398247659408))
log_points.append((31.011690977342244, 31.01466056142998, 31.0191006167636))
log_points.append((31.027609542301054, 31.028931110581887))
log_points.append((31.047217048580144, 31.050575446784713))
log_points.append((31.060331037716253, 31.061576890070743, 31.06598210046071, 31.06748034556389, 31.070028805131322))
log_points.append((31.09366471030981, 31.098390537976467))
log_points.append((31.107192325805798, 31.11005301183554))
log_points.append((31.138078730359165, 31.13966977529667, 31.142138489311762))
log_points.append((31.211665235102252, 31.212297861589946))
log_points.append((31.402869380132543, 31.405612424363675))
log_points.append((31.50500392026898, 31.507397972024588))
log_points.append((31.5546216466151, 31.55845778343663, 31.561131681937706, 31.562339720310764, 31.56474240108113))
log_points.append((31.571346900488, 31.571486021005505))
log_points.append((31.589849658115533, 31.593923021424434, 31.5953536992783))
log_points.append((31.601197343243633, 31.603186363495773))
log_points.append((31.632437076414206, 31.637115052695208))
log_points.append((31.647235235795517, 31.648431891964343, 31.649384159994106, 31.650312759932483, 31.651178938451103))
log_points.append((31.66135891978045, 31.66475833857161, 31.664852179801468, 31.667522761943935))
log_points.append((31.885319548604098, 31.889087514445816))


arykeys = sorted([x for x in log_points_common.keys()])
for ak in arykeys:
    



(0.002791529632201417 + 0.008295462669121179)/2
0.005543496150661298
(0.003284663194857984 + 0.008295462669121179)/2
0.005790062931989581

30.18285195989194, 30.184155673445193
0.001303713553252095

30.258831860863044, 30.25917297886415, 30.2605276937453
0.00034111800110636636
0.0013547148811490217

30.430525650622766, 30.431258349754014, 30.434049879386215
0.0007326991312481823
0.002791529632201417

30.54278359358496, 30.551079056254082
0.008295462669121179

30.18285195989194, 30.184155673445193
30.430525650622766, 30.431258349754014, 30.434049879386215
30.25917297886415, 30.2605276937453

log_points = []
log_points.append((30.18285195989194, 30.184155673445193))
log_points.append((30.430525650622766, 30.431258349754014, 30.434049879386215))
log_points.append((30.25917297886415, 30.2605276937453))

30.18285195989194, 30.184155673445193
30.430525650622766, 30.431258349754014, 30.434049879386215
30.258831860863044, 30.25917297886415, 30.2605276937453
30.427240987427908, 30.430525650622766, 30.431258349754014, 30.434049879386215
0.003284663194857984


13860658187287x44038395018313
rsp1p2_div_ls1newp2_p1p2
rsp1p2_div_ls2newp2_p1p2
rsnewp1p2_div_ls1newp2_newp1p2
rsnewp1p2_div_ls2newp2_newp1p2


new_rsp1p2_div_ls1newp2_p1p2 = {}
for key in rsp1p2_div_ls1newp2_p1p2.keys():
    if rsp1p2_div_ls1newp2_p1p2[key]

sorted_filtered_vars_idx3 = []
vars_copy = [x for x in vars]
idx = 4
while len(vars_copy) > 0:
    minval = min([vars_copy[i][idx] for i in range(0, len(vars_copy))])
    minidx = [i for i in range(0, len(vars_copy)) if vars_copy[i][idx] == minval][0]
    sorted_filtered_vars_idx4.append(vars_copy[minidx])
    vars_copy.remove(vars_copy[minidx])


sum = mpmath.mpf(0)
for key in rsp1p2_mod_ls1newp1_p1p2:
    sum += rsp1p2_mod_ls1newp1_p1p2[key]

avg = sum/len(rsp1p2_mod_ls1newp1_p1p2)
icount = 0
iroot = 4
for key in rsp1p2_mod_ls1newp1_p1p2:
    if rsp1p2_mod_ls1newp1_p1p2[key] != avg:
        icount += 1
        if round(rsp1p2_mod_ls1newp1_p1p2[key]/avg, 6) == 1:
            if rsp1p2_mod_ls1newp1_p1p2[key]/avg > 1:
                rsp1p2_mod_ls1newp1_p1p2[key] = mpmath.power(rsp1p2_mod_ls1newp1_p1p2[key]/avg - 1, mpmath.fdiv(1, iroot))
            else:
                rsp1p2_mod_ls1newp1_p1p2[key] = mpmath.power(1 - rsp1p2_mod_ls1newp1_p1p2[key]/avg, mpmath.fdiv(1, iroot)) 

minval = min([val for val in rsp1p2_mod_ls1newp1_p1p2.values()])
[key for key in rsp1p2_mod_ls1newp1_p1p2.keys() if rsp1p2_mod_ls1newp1_p1p2[key] == minval]
# 584348307719897070457370177
# p1, p2, p1p2 = 13860658187287, 44038395018313, 610401140465559117748786831
# mpmath.fmod(mpmath.log(610401140465559117748786831), mpmath.log(584348307719897070457370177))
# 0.043619125988309083075669567207564298850636
# mpmath.fmod(mpmath.log(610401140465559117748786831), mpmath.log(13860658187287))
# 1.1560073865700569006231681217132546003269
# mpmath.fmod(mpmath.log(610401140465559117748786831), mpmath.log(44038395018313))
# 30.260075596823018957442784770668075185309

plot_x = []
plot_y = {}
for i in range(0, len(vars)):
    plot_x.append(mpmath.power(log_p1p2 % vars[i][5], 1/16))
    plot_y[plot_x[-1]] = rsp1p2_mod_ls1newp1_p1p2[vars[i][2]]

_ = plt.plot(sorted(plot_x), [plot_y[x] for x in sorted(plot_x)])
plt.grid()
plt.show()

def get_index(vars, i2, lookup):
    for i1 in range(0, len(vars)):
        if vars[i1][i2] == lookup:
            return i1

plot_x = sorted([vars[i][3] for i in range(0, len(vars))])
_ = plt.plot(plot_x, [rsp1p2_mod_ls1newp1_p1p2[vars[get_index(vars, 3, x)][2]] for x in plot_x])
_ = plt.plot(plot_x, [rsp1p2_mod_ls1newp2_p1p2[vars[get_index(vars, 3, x)][2]] for x in plot_x])
plt.grid()
plt.show()



aryprimes = primesieve.primes(int(8 * 10**5.75 + 8 * 10**5.25 + 8 * 10**4.67))
conn = sqlite3.connect("pary.db")
curs = conn.cursor()
# removedobjhsh = {}
_ = curs.execute("SELECT tgt_id FROM pary_target WHERE p1p2='" + str(p1p2[thisi])[:-2] + "' AND j_den=" + str(bits2))
row = curs.fetchone()
if row is not None:
    pary_tgt_id = row[0]
    minj, maxj = 967.270, 967.316
    _ = curs.execute("SELECT j_num, p1, p2, p1p2 FROM pary WHERE tgt_id = " + str(pary_tgt_id) + " AND j_num >= " + str(minj) + " AND j_num <= " + str(maxj))
    row = curs.fetchone()
    thisi = -1
    exists_in_db = True
    icountadded, icountremoved = 0, 0
    while row is not None:
        obj = ptuple(float(row[0]), mpmath.mpf(str(row[1])), mpmath.mpf(str(row[2])), mpmath.mpf(str(row[3])), exists_in_db)
        newone = (1 + mpmath.fdiv(1, 2*obj.p1)) * (mpmath.log(obj.p1 + 1) - mpmath.log(obj.p1)) + (1 + mpmath.fdiv(obj.p1, 2*obj.p1p2)) * (mpmath.log(obj.p1p2 + obj.p1)) - (mpmath.fdiv(obj.p1, 2*obj.p1p2)) * mpmath.log(obj.p1p2)
        newtwo = (1 + mpmath.fdiv(1, 2*obj.p2)) * (mpmath.log(obj.p2 + 1) - mpmath.log(obj.p2)) + (1 + mpmath.fdiv(obj.p2, 2*obj.p1p2)) * (mpmath.log(obj.p1p2 + obj.p2)) - (mpmath.fdiv(obj.p2, 2*obj.p1p2)) * mpmath.log(obj.p1p2)
        twoone = (2 + mpmath.fdiv(1, p1p2[thisi])) * mpmath.log(p1p2[thisi] + 1) - (mpmath.fdiv(1, p1p2[thisi]) - 1) * mpmath.log(p1p2[thisi])
        twoonedivnewone = mpmath.fdiv(twoone, newone)
        if type(twoonedivnewone) is mpmath.mpc:
            twoonedivnewone = twoonedivnewone.real
        if obj.j in lessthanj2 or obj.j in morethanj2:
            if not is_prime(obj, aryprimes):
                icountremoved += 1
                removedobjhsh[obj.j] = obj
                if (obj.j in lessthanj2):
                    if len(lessthanj2[obj.j]) == 1:
                        _ = lessthanj2.pop(obj.j)
                    else:
                        for ltj in range(0, len(lessthanj2[obj.j])):
                            if lessthanj2[obj.j][ltj][0] == newone and lessthanj2[obj.j][ltj][1] == newone and lessthanj2[obj.j][ltj][2] == twoonedivnewone: 
                                lessthanj2[obj.j].remove(lessthanj2[obj.j][ltj])
                if (obj.j in morethanj2):
                    if len(morethanj2[obj.j]) == 1:
                        _ = morethanj2.pop(obj.j)
                    else:
                        for mtj in range(0, len(morethanj2[obj.j])):
                            if morethanj2[obj.j][mtj][0] == newone and morethanj2[obj.j][mtj][1] == newone and morethanj2[obj.j][mtj][2] == twoonedivnewone:
                                morethanj2[obj.j].remove(morethanj2[obj.j][mtj])
                _ = curs.execute("DELETE FROM pary WHERE tgt_id=" + str(pary_tgt_id) + " AND j_num=" + obj.str_j + " AND p1='" + obj.str_p1 + "' AND p2='" + obj.str_p2 + "' AND p1p2='" + obj.str_p1p2 + "'")
        elif is_prime(obj, aryprimes):
            icountadded += 1
            morethanj2[obj.j] = [(newone, newtwo, twoonedivnewone)]
        row = curs.fetchone()

curs.close()
conn.close()
icountaddedd
icountremoved
len(removedobjhsh)


def is_prime(obj, aryprimes):
    for ap in range(0, len(aryprimes)):
        if mpmath.fmod(obj.p1, aryprimes[ap]) == 0 or mpmath.fmod(obj.p2, aryprimes[ap]) == 0:
            return False
    return True


print(s)
curs.close()
conn.close()


def find_it(p1, p2, p1p2, db, db_search_descr, thisi, imult, jnum_points, jplusminus, iden, random_amount, lessthanj, morethanj, objary, pary):
    inc_ary = [2*3*5, 2*7*13, 23*5*31, 17*3*7, 41*5*11, 13*5*11, 37*5*7, 23*11*13]
    previ = -2
    if thisi is None:
        thisi = -1
    if type(p1[thisi]) is not mpmath.mpf:
        p1[thisi] = mpmath.mpf(p1[thisi])
    if type(p2[thisi]) is not mpmath.mpf:
        p2[thisi] = mpmath.mpf(p2[thisi])
    if type(p1p2[thisi]) is not mpmath.mpf:
        p1p2[thisi] = mpmath.mpf(p1p2[thisi])
    if type(jnum_points) is float:
        jnum_points = [jnum_points]
    jplusminus = abs(jplusminus)
    
    #  1/2591 = 0.00038595137012736397
    # 68/2591 = 0.026244693168660748
    # (10000 - 0.233)/10000 = 0.9999767
    # (10000 + 0.233)/10000 = 1.0000233
    # adjmin = (10000 - 0.233)/10000
    # adjmax = (10000 + 0.233)/10000
    # (100000 - 0.2131)/100000 = 0.999997869 * 967.282 = 967.279938722058
    # (100000 + 0.2131)/100000 = 1.000002131 * 967.282 = 967.284061277942
    adjmin = (100000 - 0.02131)/100000
    adjmax = (100000 + 0.02131)/100000
    # (1000 * 0.9999767) * (967.293 - (967.293 - 967.25)/3) # 967256.12907373 / 1000 = 967.25612907373
    # (1000 * 1.0000233) * (967.293 + (967.293 - 967.25)/3) # 967329.8715942 / 1000 = 967.3298715942
    
    if db:
        conn = sqlite3.connect("pary.db")
        curs = conn.cursor()
        # _ = curs.execute("DROP TABLE pary")
        # _ = curs.execute("DROP TABLE pary_target")
        _ = curs.execute("""CREATE TABLE IF NOT EXISTS pary (
            pary_id INTEGER PRIMARY KEY,
            tgt_id INTEGER,
            j_num REAL,
            p1 TEXT,
            p2 TEXT,
            p1p2 TEXT
        )""")
        _ = curs.execute("""CREATE TABLE IF NOT EXISTS pary_target (
            tgt_id INTEGER PRIMARY KEY,
            descr TEXT,
            j_den INTEGER,
            p1p2 TEXT        
        )""")
        conn.commit()
        sp1p2 = str(p1p2[thisi])
        sp1p2 = sp1p2[:sp1p2.index(".")]
        # _ = curs.execute("INSERT INTO pary_target (p1p2, descr, j_den) SELECT '22112825529529666435281085255026230927612089502470015394413748319128822941402001986512729726569746599085900330031400051170742204560859276357953757185954298838958709229238491006703034124620545784566413664540684214361293017694020846391065875914794251435144458199', 'RSA-260', 2591 WHERE NOT EXISTS (SELECT 1 FROM pary_target WHERE p1p2='22112825529529666435281085255026230927612089502470015394413748319128822941402001986512729726569746599085900330031400051170742204560859276357953757185954298838958709229238491006703034124620545784566413664540684214361293017694020846391065875914794251435144458199' AND j_den=2591)")
        _ = curs.execute("INSERT INTO pary_target (p1p2, descr, j_den) SELECT '" + sp1p2 + "', '" + db_search_descr + "', " + str(iden) + " WHERE NOT EXISTS (SELECT 1 FROM pary_target WHERE p1p2='" + sp1p2 + "' AND j_den=" + str(iden) + ")")
        conn.commit()
        # _ = curs.execute("SELECT tgt_id FROM pary_target WHERE p1p2='22112825529529666435281085255026230927612089502470015394413748319128822941402001986512729726569746599085900330031400051170742204560859276357953757185954298838958709229238491006703034124620545784566413664540684214361293017694020846391065875914794251435144458199' AND j_den=2591")
        # _ = curs.execute("SELECT tgt_id FROM pary_target WHERE p1p2='" + str(p1p2[thisi])[:-2] + "' AND j_den=" + str(bits2))
        _ = curs.execute("SELECT tgt_id FROM pary_target WHERE p1p2='" + sp1p2 + "' AND j_den=" + str(iden))
        pary_tgt_id = curs.fetchone()[0]
        
        if len(pary) == 0:
            for jnum in jnum_points:
                minj = int((imult * adjmin)*(jnum - jplusminus))
                maxj = int((imult * adjmax)*(jnum + jplusminus))
                if minj > maxj:
                    temp = minj
                    minj = maxj
                    maxj = temp
                _ = curs.execute("SELECT j_num, p1, p2, p1p2 FROM pary WHERE tgt_id = " + str(pary_tgt_id) + " AND j_num >= " + str(minj/imult) + " AND j_num <= " + str(maxj/imult))
                row = curs.fetchone()
                while row is not None:
                    if mpmath.mpf(str(row[1])) not in pary:
                        pary.append(mpmath.mpf(str(row[1])))
                        pary.append(mpmath.mpf(str(row[2])))
                        pary.append(mpmath.mpf(str(row[3])))
                    row = curs.fetchone()
        
        curs.close()
        conn.close()
    
    bprint = False
    #lessthanj = {}
    #morethanj = {}
    #jplusminus = 0.6
    
    sp1 = str(p1[thisi])
    sp1 = sp1[:sp1.find(".")]
    lower_bound = mpmath.mpf("8" + ("0" * (len(sp1) - 3)) + "1")
    # make_prime(n, aryprimes, iplus, iter)
    lower_bound = make_prime(lower_bound, aryprimes, inc_ary[int(random.random()*len(inc_ary))], 0)
    str_lower_bound = str(lower_bound)
    str_lower_bound = str_lower_bound[:str_lower_bound.find(".")]
    if len(str_lower_bound) != len(sp1) - 1:
        print("len(str_lower_bound) " + str(len(str_lower_bound)) + ", len(sp1) " + str(len(sp1)))
        #break
    
    sp2 = str(p2[thisi])
    sp2 = sp2[:sp2.find(".")]
    upper_bound = mpmath.mpf("91" + ("9" * (len(sp2) - 1)))
    # make_prime(n, aryprimes, iplus, iter)
    upper_bound = make_prime(upper_bound, aryprimes, -inc_ary[int(random.random()*len(inc_ary))], 0)
    str_upper_bound = str(upper_bound)
    str_upper_bound = str_upper_bound[:str_upper_bound.find(".")]
    if len(str_upper_bound) != len(sp2) + 1:
        print("len(str_upper_bound) " + str(len(str_upper_bound)) + ", len(sp2) " + str(len(sp2)))
        #break
    
    if bprint:
        print("")
        print("")
        print("lower_bound " + str(lower_bound))
        print("upper_bound " + str(upper_bound))
        print("")
    log2_lower_bound = mpmath.log(lower_bound, 2)
    log2_upper_bound = mpmath.log(upper_bound, 2)
    log10_lower_bound = mpmath.log(lower_bound, 10)
    log10_upper_bound = mpmath.log(upper_bound, 10)
    one = (1 + 1/(2*p1[thisi])) * (mpmath.log(p1[thisi] + 1) - mpmath.log(p1[thisi])) + (1 + p1[thisi]/(2*p1p2[thisi])) * (mpmath.log(p1p2[thisi] + p1[thisi])) - (p1[thisi]/(2*p1p2[thisi])) * mpmath.log(p1p2[thisi])
    two = (1 + 1/(2*p2[thisi])) * (mpmath.log(p2[thisi] + 1) - mpmath.log(p2[thisi])) + (1 + p2[thisi]/(2*p1p2[thisi])) * (mpmath.log(p1p2[thisi] + p2[thisi])) - (p2[thisi]/(2*p1p2[thisi])) * mpmath.log(p1p2[thisi])
    twoone = (2 + 1/p1p2[thisi]) * mpmath.log(p1p2[thisi] + 1) - (1/p1p2[thisi] - 1) * mpmath.log(p1p2[thisi])
    sqrt_p1p2 = mpmath.sqrt(p1p2[thisi])
    
    t1 = time.time()
    # imult = 10000
    # imult = 1000
    # objary = []
    jary = []
    if type(jnum_points) is float:
        point = jnum_points
        jnum_points = []
        jnum_points.append(point)
    if len(jnum_points) == 1:
        minj = int((imult * adjmin)*(jnum_points[0] - jplusminus))
        maxj = int((imult * adjmax)*(jnum_points[0] + jplusminus))
        if minj > maxj:
            temp = minj
            minj = maxj
            maxj = temp
        jary = [x/imult for x in range(minj, maxj + 1)]
    else:
        for jnum in jnum_points:
            minj = int((imult * adjmin)*(jnum - jplusminus))
            maxj = int((imult * adjmax)*(jnum + jplusminus))
            if minj > maxj:
                temp = minj
                minj = maxj
                maxj = temp
            for j in [x/imult for x in range(minj, maxj + 1)]:
                jary.append(j)
    minj = int(min(jary)*imult)
    maxj = int(max(jary)*imult)
    
    print("")
    #print("ready for " + str(maxj + 1 - minj) + " rows")
    print("ready for " + str(len(jary)) + " rows")
    #for j in [x/imult for x in range(minj, maxj + 1)]:
    for j in jary:
        newobj = ptuple(j, 2, 3, 6, False)
        newobj.p1 = 5
        newobj.p2 = 7
        newobj.p1p2 = 35
        bloop0 = True
        inc = 30
        iter = 0
        while bloop0:
            iter += 1
            if iter > 2:
                print("too many iterations? iteration number " + str(iter))
            
            newobj.p1 = mpmath.power(10, log10_lower_bound - random_amount * random.random() + random_amount * random.random() + mpmath.fdiv(j, iden) * (log10_upper_bound - log10_lower_bound))
            if newobj.p1 < 0:
                newobj.p1 = mpmath.power(10, log10_lower_bound - random_amount * random.random() + random_amount * random.random() + mpmath.fdiv(j, iden) * (log10_upper_bound - log10_lower_bound))
                if newobj.p1 < 0:
                    newobj.p1 = abs(newobj.p1)
            babove, bbelow = False, False
            while mpmath.log(newobj.p1, 2) < log2_lower_bound:
                bbelow = True
                newobj.p1 = mpmath.fmul(newobj.p1, 1.33)
            while mpmath.log(newobj.p1, 2) > log2_upper_bound:
                babove = True
                newobj.p1 = mpmath.fdiv(newobj.p1, 1.25)
            
            newobj.p1 = loop(newobj.p1, 0, p1p2[thisi], aryprimes, pary, -inc if babove else inc, log10_lower_bound, log10_upper_bound, j, iden, random_amount, iter)
            
            newobj.p2 = 1
            if newobj.p1 > sqrt_p1p2:
                newobj.p2 = newobj.p1
                newobj.p1 = mpmath.fdiv(p1p2[thisi], newobj.p2)
                newobj.p1 = loop(newobj.p1, newobj.p2, p1p2[thisi], aryprimes, pary, inc, log10_lower_bound, log10_upper_bound, j, iden, random_amount, iter)
            else:
                newobj.p2 = mpmath.fdiv(p1p2[thisi], newobj.p1)
                newobj.p2 = loop(newobj.p2, newobj.p1, p1p2[thisi], aryprimes, pary, -inc if newobj.p2 > newobj.p1 else inc, log10_lower_bound, log10_upper_bound, j, iden, random_amount, iter)
            
            newobj.p1p2 = mpmath.fmul(newobj.p1, newobj.p2)
            
            if mpmath.fmod(newobj.p1, 1) == 0 and mpmath.fmod(newobj.p2, 1) == 0 and mpmath.fmod(newobj.p1p2, 1) == 0 and newobj.p1 not in pary and newobj.p2 not in pary and newobj.p1p2 not in pary:
                objary.append(newobj)
                pary.append(newobj.p1)
                pary.append(newobj.p2)
                pary.append(newobj.p1p2)
                bloop0 = False
                if db and (len(objary) >= 10 or j >= maxj/imult):
                    insert_tuples(pary_tgt_id, objary, bprint)
                    objary = []
                #if newobj.p1p2 == p1p2[thisi]:
                #    print("found valid factorization")
                #    print("p1 mpmath.mpf('" + str(newobj.p1) + "')")
                #    print("p2 mpmath.mpf('" + str(newobj.p2) + "')")
                #    return lessthanj, morethanj, pary
            else:
                inc = inc_ary[int(random.random()*len(inc_ary))]
        
        if thisi != previ:
            one = (1 + mpmath.fdiv(1, 2*p1[thisi])) * (mpmath.log(p1[thisi] + 1) - mpmath.log(p1[thisi])) + (1 + mpmath.fdiv(p1[thisi], 2*p1p2[thisi])) * (mpmath.log(p1p2[thisi] + p1[thisi])) - (mpmath.fdiv(p1[thisi], 2*p1p2[thisi])) * mpmath.log(p1p2[thisi])
            two = (1 + mpmath.fdiv(1, 2*p2[thisi])) * (mpmath.log(p2[thisi] + 1) - mpmath.log(p2[thisi])) + (1 + mpmath.fdiv(p2[thisi], 2*p1p2[thisi])) * (mpmath.log(p1p2[thisi] + p2[thisi])) - (mpmath.fdiv(p2[thisi], 2*p1p2[thisi])) * mpmath.log(p1p2[thisi])
            #twoone = (2 + 1/p1p2[thisi]) * mpmath.log(p1p2[thisi] + 1) - (1/p1p2[thisi] - 1) * mpmath.log(p1p2[thisi])
        
        newone = (1 + mpmath.fdiv(1, 2*newobj.p1)) * (mpmath.log(newobj.p1 + 1) - mpmath.log(newobj.p1)) + (1 + mpmath.fdiv(newobj.p1, 2*newobj.p1p2)) * (mpmath.log(newobj.p1p2 + newobj.p1)) - (mpmath.fdiv(newobj.p1, 2*newobj.p1p2)) * mpmath.log(newobj.p1p2)
        newtwo = (1 + mpmath.fdiv(1, 2*newobj.p2)) * (mpmath.log(newobj.p2 + 1) - mpmath.log(newobj.p2)) + (1 + mpmath.fdiv(newobj.p2, 2*newobj.p1p2)) * (mpmath.log(newobj.p1p2 + newobj.p2)) - (mpmath.fdiv(newobj.p2, 2*newobj.p1p2)) * mpmath.log(newobj.p1p2)
        #newone = (1 + mpmath.fdiv(1, 2*newobj.p1)) * (mpmath.log(newobj.p1 + 1) - mpmath.log(newobj.p1)) + mpmath.fmul(1 + mpmath.fdiv(newobj.p1, 2*newobj.p1p2), mpmath.log(mpmath.fadd(newobj.p1p2, newobj.p1))) - mpmath.fmul(mpmath.fdiv(newobj.p1, 2*newobj.p1p2), mpmath.log(newobj.p1p2))
        #newtwo = (1 + mpmath.fdiv(1, 2*newobj.p2)) * (mpmath.log(newobj.p2 + 1) - mpmath.log(newobj.p2)) + mpmath.fmul(1 + mpmath.fdiv(newobj.p2, 2*newobj.p1p2), mpmath.log(mpmath.fadd(newobj.p1p2, newobj.p2))) - mpmath.fmul(mpmath.fdiv(newobj.p2, 2*newobj.p1p2), mpmath.log(newobj.p1p2))
        if thisi != previ:
            twoone = (2 + mpmath.fdiv(1, p1p2[thisi])) * mpmath.log(p1p2[thisi] + 1) - (mpmath.fdiv(1, p1p2[thisi]) - 1) * mpmath.log(p1p2[thisi])
        
        twoonedivone = mpmath.fdiv(twoone, one)
        if type(twoonedivone) is mpmath.mpc:
            twoonedivone = twoonedivone.real
        twoonedivnewone = mpmath.fdiv(twoone, newone)
        if type(twoonedivnewone) is mpmath.mpc:
            twoonedivnewone = twoonedivnewone.real
        
        if thisi != previ:
            frac1 = fractions.Fraction(float(one - mpmath.floor(one) if one - mpmath.floor(one) < 0.5 else mpmath.ceil(one) - one))
            frac2 = fractions.Fraction(float(two - mpmath.floor(two) if two - mpmath.floor(two) < 0.5 else mpmath.ceil(two) - two))
            frac21 = fractions.Fraction(float(twoone - mpmath.floor(twoone) if twoone - mpmath.floor(twoone) < 0.5 else mpmath.ceil(twoone) - twoone))
            if bprint:
                sfrac1 = (" * ".join([str(x) for x in factors(frac1.numerator)])) + " / " + ("2^" + str(int(math.log(frac1.denominator, 2))) if mpmath.log(frac1.denominator, 2) % 1 == 0 else str(frac1.denominator))
                sfrac2 = (" * ".join([str(x) for x in factors(frac2.numerator)])) + " / " + ("2^" + str(int(math.log(frac2.denominator, 2))) if mpmath.log(frac2.denominator, 2) % 1 == 0 else str(frac2.denominator))
                sfrac21 = (" * ".join([str(x) for x in factors(frac21.numerator)])) + " / " + ("2^" + str(int(math.log(frac21.denominator, 2))) if mpmath.log(frac21.denominator, 2) % 1 == 0 else str(frac21.denominator))
        
        fracnew1 = fractions.Fraction(float(newone - mpmath.floor(newone) if newone - mpmath.floor(newone) < 0.5 else mpmath.ceil(newone) - newone))
        fracnew2 = fractions.Fraction(float(newtwo - mpmath.floor(newtwo) if newtwo - mpmath.floor(newtwo) < 0.5 else mpmath.ceil(newtwo) - newtwo))
        if bprint:
            snewp1 = str(newobj.p1)
            sfracnew1 = (" * ".join([str(x) for x in factors(fracnew1.numerator)])) + " / " + ("2^" + str(int(math.log(fracnew1.denominator, 2))) if mpmath.log(fracnew1.denominator, 2) % 1 == 0 else str(fracnew1.denominator))
            sfracnew2 = (" * ".join([str(x) for x in factors(fracnew2.numerator)])) + " / " + ("2^" + str(int(math.log(fracnew2.denominator, 2))) if mpmath.log(fracnew2.denominator, 2) % 1 == 0 else str(fracnew2.denominator))
        
        if thisi != previ:
            frac21div1 = fractions.Fraction(float(3 - twoonedivone))
        frac21divnew1 = fractions.Fraction(float(3 - twoonedivnewone))
        if bprint:
            sfrac21div1 = (" * ".join([str(x) for x in factors(frac21div1.numerator)])) + " / " + ("2^" + str(int(math.log(frac21div1.denominator, 2))) if mpmath.log(frac21div1.denominator, 2) % 1 == 0 else str(frac21div1.denominator))
            sfrac21divnew1 = (" * ".join([str(x) for x in factors(frac21divnew1.numerator)])) + " / " + ("2^" + str(int(math.log(frac21divnew1.denominator, 2))) if mpmath.log(frac21divnew1.denominator, 2) % 1 == 0 else str(frac21divnew1.denominator))
            stars = " ***" if round(twoonedivnewone, 14) in [mpmath.mpf('2.99999999999999'), mpmath.mpf('3.0')] else ""
        
        if bprint and j == 0 and newobj.p1 > p1[thisi]:
            print("one " + str(one) + ", " + sfrac1)
            print("two " + str(two) + ", " + sfrac2)
            print("twoone " + str(twoone) + ", " + sfrac21)
            print("twoonedivone " + str(twoonedivone) + ",  " + sfrac21div1)
            print("")
        
        if (j < 0):
            if j not in lessthanj:
                lessthanj[j] = [(newone, newtwo, twoonedivnewone)]
            else:
                lessthanj[j].append((newone, newtwo, twoonedivnewone))
        elif (j > 0):
            if j not in morethanj:
                morethanj[j] = [(newone, newtwo, twoonedivnewone)]
            else:
                morethanj[j].append((newone, newtwo, twoonedivnewone))
        else:
            print("warning, j == 0")
        
        if bprint:
            print("newone " + str(newone) + ", " + sfracnew1)
            print("newtwo " + str(newtwo) + ", " + sfracnew2)
            print("twoone " + str(twoone) + ", " + sfrac21)
            print("twoonedivnewone " + str(twoonedivnewone) + ",  " + sfrac21divnew1)
            print("")
        
        if bprint and j == 0 and newobj.p1 < p1[thisi]:
            print("one " + str(one) + ", " + sfrac1)
            print("two " + str(two) + ", " + sfrac2)
            print("twoone " + str(twoone) + ", " + sfrac21)
            print("twoonedivone " + str(twoonedivone) + ",  " + sfrac21div1)
            print("")
        
        if newobj.p1p2 == p1p2[thisi]:
            print("found valid factorization")
            print("p1 mpmath.mpf('" + str(newobj.p1) + "')")
            print("p2 mpmath.mpf('" + str(newobj.p2) + "')")
            return lessthanj, morethanj, objary, pary
        
        previ = thisi
        t2 = time.time()
        pct = round(100 * (j * imult + 2/imult - minj) / (maxj + 1/imult - minj), 4) if (maxj + 1/imult - minj) > 0 else "0.0"
        pct = "0.0" if (str(pct) == "0.0" or pct < 0) else "100.0" if (pct > 100) else str(pct)
        print(str(j) if j % 1 == 0 else str(round(j, 12)) + " out of " + str(bits1) + " (" + pct + "%) in " + str(round((t2 - t1)/60, 2)) + " minutes")
        # 2048 bits (2593 j) in 419 minutes (7 hours)
    print("finished " + str(maxj + 1 - minj) + " rows")
    return lessthanj, morethanj, objary, pary







    for j in range(-bits1, bits1 + 1):
        #for j in range(0, bits1 + 1):
        newp1 = mpmath.power(10, log10_lower_bound - 0.1333 * random.random() + 0.1333 * random.random() + mpmath.fdiv(j, bits2) * (log10_upper_bound - log10_lower_bound))
        #newp1 = mpmath.power(10, log10_lower_bound - 0.1333 * random.random() + 0.1333 * random.random() + mpmath.fdiv(968, bits2) * (log10_upper_bound - log10_lower_bound))
        if newp1 < 0:
            newp1 = abs(newp1)
        babove, bbelow = False, False
        while mpmath.log(newp1, 2) < log2_lower_bound:
            bbelow = True
            newp1 = mpmath.fmul(newp1, 1.33)
        while mpmath.log(newp1, 2) > log2_upper_bound:
            babove = True
            newp1 = mpmath.fdiv(newp1, 1.25)
        # make_prime(n, aryprimes, iplus, iter)
        newp1 = make_prime(mpmath.floor(newp1), aryprimes, -30 if babove else 30, iter)
        newp2 = 1
        if newp1 > sqrt_p1p2:
            newp2 = newp1
            newp1 = mpmath.fdiv(p1p2[thisi], newp2)
        else:
            newp2 = mpmath.fdiv(p1p2[thisi], newp1)
        # make_prime(n, aryprimes, iplus, iter)
        newp2 = make_prime(mpmath.floor(newp2), aryprimes, -30 if newp2 > newp1 else 30, iter)
        newp1p2 = mpmath.fmul(newp1, newp2)
        
        if thisi != previ:
            one = (1 + 1/(2*p1[thisi])) * (mpmath.log(p1[thisi] + 1) - mpmath.log(p1[thisi])) + (1 + p1[thisi]/(2*p1p2[thisi])) * (mpmath.log(p1p2[thisi] + p1[thisi])) - (p1[thisi]/(2*p1p2[thisi])) * mpmath.log(p1p2[thisi])
            two = (1 + 1/(2*p2[thisi])) * (mpmath.log(p2[thisi] + 1) - mpmath.log(p2[thisi])) + (1 + p2[thisi]/(2*p1p2[thisi])) * (mpmath.log(p1p2[thisi] + p2[thisi])) - (p2[thisi]/(2*p1p2[thisi])) * mpmath.log(p1p2[thisi])
            #twoone = (2 + 1/p1p2[thisi]) * mpmath.log(p1p2[thisi] + 1) - (1/p1p2[thisi] - 1) * mpmath.log(p1p2[thisi])
        
        newone = (1 + 1/(2*newp1)) * (mpmath.log(newp1 + 1) - mpmath.log(newp1)) + (1 + newp1/(2*newp1p2)) * (mpmath.log(newp1p2 + newp1)) - (newp1/(2*newp1p2)) * mpmath.log(newp1p2)
        newtwo = (1 + 1/(2*newp2)) * (mpmath.log(newp2 + 1) - mpmath.log(newp2)) + (1 + newp2/(2*newp1p2)) * (mpmath.log(newp1p2 + newp2)) - (newp2/(2*newp1p2)) * mpmath.log(newp1p2)
        if thisi != previ:
            twoone = (2 + 1/p1p2[thisi]) * mpmath.log(p1p2[thisi] + 1) - (1/p1p2[thisi] - 1) * mpmath.log(p1p2[thisi])
        
        twoonedivone = mpmath.fdiv(twoone, one)
        if type(twoonedivone) is mpmath.mpc:
            twoonedivone = twoonedivone.real
        twoonedivnewone = mpmath.fdiv(twoone, newone)
        if type(twoonedivnewone) is mpmath.mpc:
            twoonedivnewone = twoonedivnewone.real
        
        if thisi != previ:
            frac1 = fractions.Fraction(float(one - mpmath.floor(one) if one - mpmath.floor(one) < 0.5 else mpmath.ceil(one) - one))
            frac2 = fractions.Fraction(float(two - mpmath.floor(two) if two - mpmath.floor(two) < 0.5 else mpmath.ceil(two) - two))
            frac21 = fractions.Fraction(float(twoone - mpmath.floor(twoone) if twoone - mpmath.floor(twoone) < 0.5 else mpmath.ceil(twoone) - twoone))
            if bprint:
                sfrac1 = (" * ".join([str(x) for x in factors(frac1.numerator)])) + " / " + ("2^" + str(int(math.log(frac1.denominator, 2))) if mpmath.log(frac1.denominator, 2) % 1 == 0 else str(frac1.denominator))
                sfrac2 = (" * ".join([str(x) for x in factors(frac2.numerator)])) + " / " + ("2^" + str(int(math.log(frac2.denominator, 2))) if mpmath.log(frac2.denominator, 2) % 1 == 0 else str(frac2.denominator))
                sfrac21 = (" * ".join([str(x) for x in factors(frac21.numerator)])) + " / " + ("2^" + str(int(math.log(frac21.denominator, 2))) if mpmath.log(frac21.denominator, 2) % 1 == 0 else str(frac21.denominator))
        
        fracnew1 = fractions.Fraction(float(newone - mpmath.floor(newone) if newone - mpmath.floor(newone) < 0.5 else mpmath.ceil(newone) - newone))
        fracnew2 = fractions.Fraction(float(newtwo - mpmath.floor(newtwo) if newtwo - mpmath.floor(newtwo) < 0.5 else mpmath.ceil(newtwo) - newtwo))
        if bprint:
            snewp1 = str(newp1)
            sfracnew1 = (" * ".join([str(x) for x in factors(fracnew1.numerator)])) + " / " + ("2^" + str(int(math.log(fracnew1.denominator, 2))) if mpmath.log(fracnew1.denominator, 2) % 1 == 0 else str(fracnew1.denominator))
            sfracnew2 = (" * ".join([str(x) for x in factors(fracnew2.numerator)])) + " / " + ("2^" + str(int(math.log(fracnew2.denominator, 2))) if mpmath.log(fracnew2.denominator, 2) % 1 == 0 else str(fracnew2.denominator))
        
        if thisi != previ:
            frac21div1 = fractions.Fraction(float(3 - twoonedivone))
        frac21divnew1 = fractions.Fraction(float(3 - twoonedivnewone))
        if bprint:
            sfrac21div1 = (" * ".join([str(x) for x in factors(frac21div1.numerator)])) + " / " + ("2^" + str(int(math.log(frac21div1.denominator, 2))) if mpmath.log(frac21div1.denominator, 2) % 1 == 0 else str(frac21div1.denominator))
            sfrac21divnew1 = (" * ".join([str(x) for x in factors(frac21divnew1.numerator)])) + " / " + ("2^" + str(int(math.log(frac21divnew1.denominator, 2))) if mpmath.log(frac21divnew1.denominator, 2) % 1 == 0 else str(frac21divnew1.denominator))
            stars = " ***" if round(twoonedivnewone, 14) in [mpmath.mpf('2.99999999999999'), mpmath.mpf('3.0')] else ""
        
        if bprint and j == 0 and newp1 > p1[thisi]:
            print("one " + str(one) + ", " + sfrac1)
            print("two " + str(two) + ", " + sfrac2)
            print("twoone " + str(twoone) + ", " + sfrac21)
            print("twoonedivone " + str(twoonedivone) + ",  " + sfrac21div1)
            print("")
        
        if (j < 0) or (j == 0 and newp1 < p1[thisi]):
            lessthanj.append((newone, newtwo, twoonedivnewone))
        elif (j > 0) or (j == 0 and newp1 > p1[thisi]):
            morethanj.append((newone, newtwo, twoonedivnewone))
        
        if bprint:
            print("newone " + str(newone) + ", " + sfracnew1)
            print("newtwo " + str(newtwo) + ", " + sfracnew2)
            print("twoone " + str(twoone) + ", " + sfrac21)
            print("twoonedivnewone " + str(twoonedivnewone) + ",  " + sfrac21divnew1)
            print("")
        
        if bprint and j == 0 and newp1 < p1[thisi]:
            print("one " + str(one) + ", " + sfrac1)
            print("two " + str(two) + ", " + sfrac2)
            print("twoone " + str(twoone) + ", " + sfrac21)
            print("twoonedivone " + str(twoonedivone) + ",  " + sfrac21div1)
            print("")
        

        

mpmath.mp.prec
f = open("H:\\DESKTOP\\Data\\lessthanj.morethanj.rsa260.926bits.bin", "wb")
f = open("H:\\DESKTOP\\Data\\lessthanj.morethanj.rsa260.2048bits.bin", "wb")
f = open("C:\\Users\\djaxl\\OneDrive\\Desktop\\Python\\morethanj2.rsa260.2048bits.20210616.bin", "wb")
f = open("C:\\Users\\djaxl\\OneDrive\\Desktop\\Python\\morethanj2.rsa260.8192bits.20210618.bin", "wb")
f = open("C:\\Users\\djaxl\\OneDrive\\Desktop\\Python\\morethanj2.rsa260.12288bits.20210619.bin", "wb")
f = open("C:\\Users\\djaxl\\OneDrive\\Desktop\\Python\\morethanj2.rsa260.12288bits.20210620.bin", "wb")
f = open("C:\\Users\\djaxl\\OneDrive\\Desktop\\Python\\morethanj2.rsa260.12288bits.20210621.bin", "wb")
f = open("C:\\Users\\djaxl\\OneDrive\\Desktop\\Python\\morethanj2.rsa260.12288bits.20210623.bin", "wb")
pickle.dump((lessthanj, morethanj), f)
pickle.dump(morethanj2, f)
f.close()

mpmath.mp.prec = 2048
f = open("H:\\DESKTOP\\Data\\lessthanj.morethanj.rsa260.2048bits.bin", "rb")
f = open("H:\\DESKTOP\\Data\\morethanj2.rsa260.2048bits.20210618.bin", "rb")
f = open("C:\\Users\\djaxl\\OneDrive\\Desktop\\Python\\morethanj2.rsa260.2048bits.20210616.bin", "rb")
lessthanj, morethanj = pickle.load(f)
morethanj2 = pickle.load(f)
f.close()



def get_fraction(f1, ifraciter):
    f2 = mpmath.fmod(f1, 1)
    iden = mpmath.mpf(1)
    i = 0
    while i < ifraciter:
        i += 1
        try:
            frac = fractions.Fraction(float(f2))
            iden = mpmath.fmul(iden, mpmath.mpf(frac.denominator))
            f2 = mpmath.fmod(mpmath.fmul(f2, iden), 1)
        except ValueError as ve:
            i = ifraciter
            pass
        except OverflowError as oe:
            i = ifraciter
            pass
        if f2 == 0 or f2 == 1:
            i = ifraciter
    f1 = mpmath.fmul(f1, iden)
    return mpmath.ceil(f1) if f1 > 0.5 else mpmath.floor(f1), iden
    


aryprimes = primesieve.primes(5 * 10**5)
bits1, bits2 = get_bits(mpmath.mp.prec, aryprimes)


mpmath.mp.prec = 8192
p1p2 = [rsa[260]]
thisi = -1
frac_ary = [(str(j) + "/" + str(bits2) if (j != 0) else "0") for j in range(-bits1, bits1 + 1)]
plot_x, plot_ya, plot_yb, plot_yc, plot_yd, plot_ye, plot_yf, plot_ylog = [], [], [], [], [], [], [], []
sqrt_p1p2 = mpmath.sqrt(p1p2[thisi])
log_p1p2 = mpmath.log(p1p2[thisi])
x = -len(lessthanj2) if len(lessthanj2) > len(morethanj2) else -len(lessthanj2) - 1
jmin, jmax = 967.2700, 967.3160
jmin, jmax = 967.2790, 967.2860
jmin, jmax = 967.2805, 967.2845
jmin, jmax = 967.280694607047, 967.281594977259
outer_ary = lessthanj2 if type(lessthanj2) is list else sorted([x for x in lessthanj2.keys() if x >= jmin and x <= jmax])
iroot = 12
ifraciter = 4
int_isnan = 0
int_ismpc = 0
twoonedivnewone_lt3 = 0
for i in range(0, len(outer_ary)):
    inner_ary = [outer_ary[i]] if type(lessthanj2) is list else lessthanj2[outer_ary[i]]
    for ary in inner_ary:
        x += 1
        newone = ary[0]
        newtwo = ary[1]
        twoonedivnewone = ary[2]
        fracnew1num, fracnew1den = get_fraction(newone - mpmath.floor(newone) if (newone - mpmath.floor(newone) < 0.5) else mpmath.ceil(newone) - newone, ifraciter)
        #sfracnew1 = (" * ".join([str(x) for x in factors(fracnew1.numerator)])) + " / " + ("2^" + str(int(math.log(fracnew1.denominator, 2))) if mpmath.log(fracnew1.denominator, 2) % 1 == 0 else str(fracnew1.denominator))
        fracnew1num, fracnew1den = get_fraction(newtwo - mpmath.floor(newtwo) if (newtwo - mpmath.floor(newtwo) < 0.5) else mpmath.ceil(newtwo) - newtwo, ifraciter)
        #sfracnew2 = (" * ".join([str(x) for x in factors(fracnew2.numerator)])) + " / " + ("2^" + str(int(math.log(fracnew2.denominator, 2))) if mpmath.log(fracnew2.denominator, 2) % 1 == 0 else str(fracnew2.denominator))
        frac21divnew1num, frac21divnew1den = get_fraction(3 - twoonedivnewone, ifraciter)
        #sfrac21divnew1 = (" * ".join([str(x) for x in factors(frac21divnew1.numerator)])) + " / " + ("2^" + str(int(math.log(frac21divnew1.denominator, 2))) if mpmath.log(frac21divnew1.denominator, 2) % 1 == 0 else str(frac21divnew1.denominator))
        if type(lessthanj2) is list:
            plot_x.append(x)
        else:
            plot_x.append(outer_ary[i] + random.random() * mpmath.power(2, -24))
        #plot_ya.append(mpmath.fdiv(fracnew1.numerator, fracnew2.numerator))
        #plot_yb.append(mpmath.fdiv(frac21divnew1.numerator, fracnew1.numerator))
        #plot_yc.append(mpmath.fdiv(frac21divnew1.numerator, fracnew2.numerator))
        plot_ya.append((fracnew1num, fracnew2num))
        plot_yb.append((frac21divnew1num, fracnew1num))
        plot_yc.append((frac21divnew1num, fracnew2num))
        if twoonedivnewone < 3:
            twoonedivnewone_lt3 += 1
            flog = mpmath.log(mpmath.fdiv(1, 3 - twoonedivnewone), sqrt_p1p2)
            #flog = (-1 if flog < 0 else 1) * mpmath.power(abs(flog), mpmath.fdiv(1, iroot))
            if flog < 0:
                flog = mpmath.fdiv(flog - mma_flog.min_neg, mma_flog.max_neg - mma_flog.min_neg)
            else:
                flog = mpmath.fdiv(flog - mma_flog.max_neg, mma_flog.max_pos - mma_flog.max_neg)
            plot_ylog.append(flog)
        else:
            plot_ylog.append(mpmath.log(mpmath.power(2, -(mpmath.mp.prec - 1)), sqrt_p1p2))


class minmaxavg:
    def __init__(self):
        self.min_neg = 0
        self.min_neg_real = 0
        self.min_neg_imag = 0
        self.min_pos = 2**64
        self.min_pos_real = 2**64
        self.min_pos_imag = 2**64
        self.min_abs = 2**64
        self.max_neg = -2**64
        self.max_neg_real = -2**64
        self.max_neg_imag = -2**64
        self.max_pos = 0
        self.max_pos_real = 0
        self.max_pos_imag = 0
        self.max_abs = 2**64
        self.log_neg = -1
        self.log_pos = -1
        self.neg_rng = -1
        self.pos_rng = -1
        self.neg_len = 0
        self.neg_sum = mpmath.mpf(0)
        self.pos_len = 0
        self.pos_sum = mpmath.mpf(0)
    
    @property
    def log_pos_range(self):
        if self.log_pos == -1:
            self.log_pos = mpmath.log(1 + mpmath.fabs(self.max_pos - self.min_pos))
        return self.log_pos
    
    @property
    def log_neg_range(self):
        if self.log_neg == -1:
            self.log_neg = mpmath.log(1 + mpmath.fabs(self.max_neg - self.min_neg))
        return self.log_neg
    
    @property
    def pos_range(self):
        if self.pos_rng == -1:
            self.pos_rng = self.max_pos - self.min_pos
        return self.pos_rng
    
    @property
    def neg_range(self):
        if self.neg_rng == -1:
            self.neg_rng = self.max_neg - self.min_neg
        return self.neg_rng
    
    @property
    def neg_avg(self):
        return mpmath.fdiv(self.neg_sum, self.neg_len) if self.neg_len > 0 else 0
    
    @property
    def pos_avg(self):
        return mpmath.fdiv(self.pos_sum, self.pos_len) if self.pos_len > 0 else 0
    
    def set(self, this_val):
        if type(this_val) is mpmath.mpc:
            if thisval.real < 0:
                if thisval.real > self.max_neg_real:
                    self.max_neg_real = thisval.real
                elif thisval.real < self.min_neg_real:
                    self.min_neg_real = thisval.real
            elif thisval.real > 0:
                if thisval.real > self.max_pos_real:
                    self.max_pos_real = thisval.real
                elif thisval.real < self.min_pos_real:
                    self.min_pos_real = thisval.real
            if thisval.imag < 0:
                if thisval.imag > self.max_neg_imag:
                    self.max_neg_imag = thisval.imag
                elif thisval.imag < self.min_neg_imag:
                    self.min_neg_imag = thisval.imag
            elif thisval.imag > 0:
                if thisval.imag > self.max_pos_imag:
                    self.max_pos_imag = thisval.imag
                elif thisval.imag < self.min_pos_imag:
                    self.min_pos_imag = thisval.imag
            if mpmath.fabs(this_val) > self.max_abs:
                self.max_abs = mpmath.fabs(this_val)
            elif mpmath.fabs(this_val) < self.min_abs:
                self.min_abs = mpmath.fabs(this_val)
        elif this_val < 0:
            self.neg_len += 1
            self.neg_sum = mpmath.fadd(self.neg_sum, this_val)
            if this_val > self.max_neg:
                self.max_neg = this_val
            elif this_val < self.min_neg:
                self.min_neg = this_val
        elif this_val > 0:
            self.pos_len += 1
            self.pos_sum = mpmath.fadd(self.pos_sum, this_val)
            if this_val < self.min_pos:
                self.min_pos = this_val
            elif this_val > self.max_pos:
                self.max_pos = this_val
        



x = -1 if len(morethanj) > len(lessthanj) else 0
x = 0
iroot = 12
ifraciter = 4
sqrt_p1p2 = mpmath.sqrt(p1p2[thisi])
jmin, jmax = 0, 0
jmin, jmax = 967.2700, 967.3160
jmin, jmax = 967.2790, 967.2860
jmin, jmax = 967.2805, 967.2845 # len(outer_ary) 1134
jmin, jmax = 967.2800, 967.2855 # len(outer_ary) 1134
jmin, jmax = 967.280901, 967.281389
outer_ary = morethanj2 if type(morethanj2) is list else sorted([x for x in morethanj2.keys() if (x >= jmin and x <= jmax) or (jmin == 0 and jmax == 0)])
mma_flog, mma_newone, mma_newtwo, mma_newtwoone, mma_twoonedivnewone = minmaxavg(), minmaxavg(), minmaxavg(), minmaxavg(), minmaxavg()
for i in range(0, len(outer_ary)):
    inner_ary = [outer_ary[i]] if type(morethanj2) is list else morethanj2[outer_ary[i]]
    for ary in inner_ary:
        #mma_flog.set(mpmath.log(mpmath.fdiv(1, 3 - ary[2]), sqrt_p1p2))
        mma_newone.set(ary[0])
        mma_newtwo.set(ary[1])
        mma_newtwoone.set(ary[2])

for i in range(0, len(outer_ary)):
    inner_ary = [outer_ary[i]] if type(morethanj2) is list else morethanj2[outer_ary[i]]
    for ary in inner_ary:
        if ary[2] < 0:
            mma_twoonedivnewone.set(mpmath.fdiv(ary[2] - mma_newtwoone.min_neg, mma_newtwoone.max_neg - mma_newtwoone.min_neg)) 
        else:
            mma_twoonedivnewone.set(mpmath.fdiv(ary[2] - mma_newtwoone.min_pos, mma_newtwoone.max_pos - mma_newtwoone.min_pos))

for i in range(0, len(outer_ary)):
    inner_ary = [outer_ary[i]] if type(morethanj2) is list else morethanj2[outer_ary[i]]
    for ary in inner_ary:
        if ary[2] < 0:
            twoonedivnewone = mpmath.fdiv(ary[2] - mma_newtwoone.min_neg, mma_newtwoone.max_neg - mma_newtwoone.min_neg)
        else:
            twoonedivnewone = mpmath.fdiv(ary[2] - mma_newtwoone.min_pos, mma_newtwoone.max_pos - mma_newtwoone.min_pos)
        mma_flog.set(mpmath.log(7.5 + mpmath.fdiv(twoonedivnewone - mma_twoonedivnewone.min_pos, mma_twoonedivnewone.max_pos - mma_twoonedivnewone.min_pos)))

ifraciter = 4
ifraciter = 1
sqrt_p1p2 = mpmath.sqrt(p1p2[thisi])
log_p1p2 = mpmath.log(p1p2[thisi])
int_isnan = 0
int_ismpc = 0
twoonedivnewone_lt3 = 0
newone, newtwo, twoonedivnewone = mpmath.mpf(0), mpmath.mpf(0), mpmath.mpf(0)
for i in range(0, len(outer_ary)):
    inner_ary = [outer_ary[i]] if type(morethanj2) is list else morethanj2[outer_ary[i]]
    for ary in inner_ary:
        bln_isnan = False
        bln_ismpc = False
        x += 1
        
        if ary[0] < 0:
            if mma_newone.log_neg_range > 8:
                newone = mpmath.fdiv(-mpmath.fabs(mpmath.log(mpmath.fabs(1 + ary[0] - mma_newone.min_neg))), mma_newone.log_neg_range)
            else:
                newone = mpmath.fdiv(mpmath.fabs(ary[0]) - mma_newone.min_neg, mma_newone.neg_range)
        elif ary[0] > 0:
            if mma_newone.log_pos_range > 8:
                newone = mpmath.fdiv(mpmath.fabs(mpmath.log(1 + ary[0] - mma_newone.min_pos)), mma_newone.log_pos_range)
            else:
                newone = mpmath.fdiv(mpmath.fabs(ary[0]) - mma_newone.min_pos, mma_newone.pos_range)
        if mpmath.isnan(newone) or mpmath.isinf(newone):
            bln_isnan = True
        elif type(newone) is mpmath.mpc:
            bln_ismpc = True 
        
        if ary[1] < 0:
            if mma_newone.log_neg_range > 8:
                newtwo = mpmath.fdiv(-mpmath.fabs(mpmath.log(mpmath.fabs(1 + ary[1] - mma_newtwo.min_neg))), mma_newtwo.log_neg_range)
            else:
                newtwo = mpmath.fdiv(mpmath.fabs(ary[1]) - mma_newtwo.min_neg, mma_newtwo.neg_range)
        elif ary[1] > 0:
            if mma_newtwo.log_pos_range > 8:
                newtwo = mpmath.fdiv(mpmath.fabs(mpmath.log(1 + ary[1] - mma_newtwo.min_pos)), mma_newtwo.log_pos_range)
            else:
                newtwo = mpmath.fdiv(mpmath.fabs(ary[1]) - mma_newtwo.min_pos, mma_newtwo.pos_range)
        #newtwo = mpmath.fdiv(ary[1] - mma_newtwo.min_neg, mma_newtwo.max_neg - mma_newtwo.min_neg) if ary[1] < 0 else mpmath.fdiv(ary[1] - mma_newtwo.min_pos, mma_newtwo.max_pos - mma_newtwo.min_pos)
        if mpmath.isnan(newtwo) or mpmath.isinf(newtwo):
            bln_isnan = True
        elif type(newtwo) is mpmath.mpc:
            bln_ismpc = True
        
        if ary[2] < 0:
            if mma_newtwo.log_neg_range > 8:
                twoonedivnewone = mpmath.fdiv(-mpmath.fabs(mpmath.log(1 + mpmath.fabs(ary[2]) - mpmath.fabs(mma_newtwoone.min_neg))), mma_newtwoone.log_neg_range)
            else:
                twoonedivnewone = mpmath.fdiv(mpmath.fabs(ary[2]) - mma_newtwoone.min_neg, mma_newtwoone.neg_range)
        else:
            if mma_newtwo.log_pos_range > 8:
                twoonedivnewone = mpmath.fdiv(mpmath.fabs(mpmath.log(mpmath.fabs(1 + ary[2] - mma_newtwoone.min_pos))), mma_newtwoone.log_pos_range)
            else:
                twoonedivnewone = mpmath.fdiv(mpmath.fabs(ary[2]) - mma_newtwoone.min_pos, mma_newtwoone.pos_range)
        if mpmath.isnan(twoonedivnewone) or mpmath.isinf(twoonedivnewone):
            bln_isnan = True
        elif type(twoonedivnewone) is mpmath.mpc:
            bln_ismpc = True 
        
        floatnew1 = newone - mpmath.floor(newone) if (newone - mpmath.floor(newone) < 0.5) else mpmath.ceil(newone) - newone
        if not mpmath.isnan(floatnew1) and not mpmath.isinf(floatnew1):
            fracnew1num, fracnew1den = get_fraction(floatnew1, ifraciter)
        else:
            bln_isnan = True
        #sfracnew1 = (" * ".join([str(x) for x in factors(fracnew1.numerator)])) + " / " + ("2^" + str(int(math.log(fracnew1.denominator, 2))) if mpmath.log(fracnew1.denominator, 2) % 1 == 0 else str(fracnew1.denominator))
        
        floatnew2 = newtwo - mpmath.floor(newtwo) if (newtwo - mpmath.floor(newtwo) < 0.5) else mpmath.ceil(newtwo) - newtwo
        if not mpmath.isnan(floatnew2) and not mpmath.isinf(floatnew2):
            fracnew2num, fracnew2den = get_fraction(floatnew2, ifraciter)
        else:
            bln_isnan = True
        #sfracnew2 = (" * ".join([str(x) for x in factors(fracnew2.numerator)])) + " / " + ("2^" + str(int(math.log(fracnew2.denominator, 2))) if mpmath.log(fracnew2.denominator, 2) % 1 == 0 else str(fracnew2.denominator))
        
        #frac21divnewtwo = mpmath.power(2, mpmath.floor(mpmath.log(3 - twoonedivnewone, 2) + 1))
        frac21divnewtwo = mpmath.log(abs(1 + twoonedivnewone)) if twoonedivnewone > 0 else 0
        #frac21divnew1num, frac21divnew1den = get_fraction(mpmath.fdiv(3 - twoonedivnewone, frac21divnewtwo), ifraciter)
        if not mpmath.isnan(frac21divnewtwo) and not mpmath.isinf(frac21divnewtwo):
            frac21divnew1num, frac21divnew1den = get_fraction(frac21divnewtwo, ifraciter)
        else:
            bln_isnan = True
        frac21divnew1den = mpmath.fmul(frac21divnew1den, frac21divnewtwo)
        #sfrac21divnew1 = (" * ".join([str(x) for x in factors(frac21divnew1.numerator)])) + " / " + ("2^" + str(int(math.log(frac21divnew1.denominator, 2))) if mpmath.log(frac21divnew1.denominator, 2) % 1 == 0 else str(frac21divnew1.denominator))
        
        if not bln_isnan and not bln_ismpc:
            if type(morethanj2) is list:
                plot_x.append(x)
            else:
                plot_x.append(outer_ary[i] + random.random() * mpmath.power(2, -24))
            #plot_ya.append(mpmath.fdiv(fracnew1.numerator, fracnew2.numerator))
            #plot_yb.append(mpmath.fdiv(frac21divnew1.numerator, fracnew1.numerator))
            #plot_yc.append(mpmath.fdiv(frac21divnew1.numerator, fracnew2.numerator))
            #plot_ya.append((fracnew1num, fracnew2num))
            #mpmath.log(floatnew1 - floatnew2, 2)
            #plot_ya.append(mpmath.log(mpmath.power(floatnew1, mpmath.fdiv(1, 512)) / mpmath.power(floatnew2, mpmath.fdiv(1, 512)) - 1, p1p2[thisi]**4))
            plot_ya.append(newone)
            plot_yb.append(newtwo)
            plot_yc.append(twoonedivnewone)
            plot_yd.append((floatnew1, floatnew2))
            #plot_ye.append((frac21divnew1num, fracnew1num))
            #plot_yf.append((frac21divnew1num, fracnew2num))
            plot_ye.append(frac21divnewtwo)
            plot_yf.append(mpmath.log(frac21divnew1den))
            if twoonedivnewone < 3:
                twoonedivnewone_lt3 += 1
                flog = mpmath.log(7.5 + mpmath.fdiv(mpmath.fabs(twoonedivnewone) - mma_twoonedivnewone.min_pos, mma_twoonedivnewone.pos_range))
                #flog = (-1 if flog < 0 else 1) * mpmath.power(abs(flog), mpmath.fdiv(1, iroot) if abs(flog) < 1 else iroot)
                if flog < 0:
                    plot_ylog.append(mpmath.fdiv(flog - mma_flog.min_neg, mma_flog.neg_range))
                else:
                    plot_ylog.append(mpmath.fdiv(flog - mma_flog.min_pos, mma_flog.pos_range))
            else:
                plot_ylog.append(mpmath.log(mpmath.power(2, -(mpmath.mp.prec - 1)), sqrt_p1p2))
        else:
            if bln_isnan:
                int_isnan += 1
            if bln_ismpc:
                int_ismpc += 1


# twoonedivnewone = ary[2]
len([ary[2] for ary in lessthanj + morethanj if ary[2] != 3]) 
len([ary[2] for ary in lessthanj + morethanj if ary[2] == 3])

len([x for x in plot_ylog if round(x, 12) not in [round(plot_ylog[0], 12), round(plot_ylog[1], 12)]])
len([x for x in plot_ylog if round(x, 12) in [round(plot_ylog[0], 12), round(plot_ylog[1], 12)]])

one = (1 + 1/(2*p1[thisi])) * (mpmath.log(p1[thisi] + 1) - mpmath.log(p1[thisi])) + (1 + p1[thisi]/(2*p1p2[thisi])) * (mpmath.log(p1p2[thisi] + p1[thisi])) - (p1[thisi]/(2*p1p2[thisi])) * mpmath.log(p1p2[thisi])
frac1 = fractions.Fraction(float(one - mpmath.floor(one) if one - mpmath.floor(one) < 0.5 else mpmath.ceil(one) - one))
two = (1 + 1/(2*p2[thisi])) * (mpmath.log(p2[thisi] + 1) - mpmath.log(p2[thisi])) + (1 + p2[thisi]/(2*p1p2[thisi])) * (mpmath.log(p1p2[thisi] + p2[thisi])) - (p2[thisi]/(2*p1p2[thisi])) * mpmath.log(p1p2[thisi])
frac2 = fractions.Fraction(float(two - mpmath.floor(two) if two - mpmath.floor(two) < 0.5 else mpmath.ceil(two) - two))
plot_ya.index(mpmath.fdiv(frac1.numerator, frac2.numerator))
plot_ya.index(mpmath.mpf('1.0'))

# 2593
plot_x.index(0)
plot_ylog[plot_x.index(0)]
round(plot_ylog[plot_x.index(0)], 12) in [round(plot_ylog[0], 12), round(plot_ylog[1], 12)]
ilen = len([x for x in plot_ylog if round(x, 12) not in [round(plot_ylog[0], 12), round(plot_ylog[1], 12)]])
ylog_avg = mpmath.fsum([x for x in plot_ylog if round(x, 12) not in [round(plot_ylog[0], 12), round(plot_ylog[1], 12)]]) / ilen
round(ylog_avg, 12) in [round(plot_ylog[0], 12), round(plot_ylog[1], 12)]
plot_ylog[plot_x.index(0)] = ylog_avg

# 3561
plot_ylog.index(tempy[660])
# 968
plot_x[3561]


# 
# when p1[thisi] == p2[thisi], p1[thisi] = p2[thisi] = sqrt_p1p2
# 
if 0 not in plot_x and p1[thisi] != p2[thisi]:
    idx = -1
    try:
        idx = plot_x.index(1)
    catch:
        pass
    if idx == -1:
        idx = 0
    plot_x.insert(idx, 0)
    plot_ya.insert(idx, mpmath.fdiv(frac1.numerator, frac2.numerator))
    plot_yb.insert(idx, mpmath.fdiv(frac21div1.numerator, frac1.numerator))
    plot_yc.insert(idx, mpmath.fdiv(frac21div1.numerator, frac2.numerator))
    plot_ylog.insert(idx, mpmath.log(mpmath.power(2, -(mpmath.mp.prec - 1)), mpmath.sqrt(p1p2[thisi])))


idx_ary = []
for idx in range(0, len(plot_ye)):
    if pair[1] != 0:
        idx_ary.append(idx)

min([pair[1] for pair in plot_ye if pair[1] != 0])
min_pair = mpmath.mpf('11321188277745455433291604213214468274089954092855096243301.0')
max([pair[1] for pair in plot_ye if pair[1] != 0])

_ = plt.figure(figsize=(9, 6))
_ = plt.plot(plot_x, plot_ya)
_ = plt.plot(plot_x, plot_yb)
_ = plt.plot(plot_x, plot_yc)
_ = plt.plot(plot_x, plot_ye)
_ = plt.plot(plot_x, plot_yf)
_ = plt.plot(plot_x, plot_ylog)
_ = plt.plot(plot_x, [mpmath.fabs(z) for z in plot_ya])
_ = plt.plot(plot_x, [mpmath.fabs(z) for z in plot_yb])
_ = plt.plot(plot_x, [mpmath.fabs(z) for z in plot_yc])
_ = plt.plot(plot_x, [z.real for z in plot_ya])
_ = plt.plot(plot_x, [z.real for z in plot_yb])
_ = plt.plot(plot_x, [z.real for z in plot_yc])
_ = plt.plot(plot_x, [float(mpmath.log(mpmath.fabs(pair[0]/(pair[1] + min_pair)))) for pair in plot_ye])
_ = plt.plot(plot_x, [float(mpmath.log(mpmath.fabs(pair[0]/(pair[1] + min_pair)))) for pair in plot_yf])
_ = plt.plot([plot_x[idx] for idx in idx_ary], [float(mpmath.log(plot_ye[idx][0]/plot_ye[idx][1])) for idx in idx_ary])
plt.grid()
#plt.savefig("H:\\DESKTOP\\Zeta Viz\\" + str(p1[thisi])[:-2] + "x" + str(p2[thisi])[:-2] + ".a.png", dpi=72)
plt.show()


967.2807256047798
967.2807833369052
967.2807841974586
967.2809297690677
967.2809581923657
967.2812319783807
967.2813138406725
967.2813323358569
967.2813598993547
967.2814099135197
mods = []
for i1 in range(0, len(plot_xa)):
    for i2 in range(0, i1):
        if i1 != i2:
            if plot_xa[i1] % plot_xa[i2] > 0.000001:
                mods.append(plot_xa[i1] % plot_xa[i2])

mults = [plot_xa[0]]
for ipx in range(0, len(plot_xa)):
    for im in range(0, len(mods)):
        for imult in range(0, int((plot_xa[-1] - plot_xa[ipx])/mods[im]) + 1):
            mults.append(plot_xa[ipx] + imult * mods[im])

_ = plt.plot(list(iteration_utilities.deepflatten([mults, mults])), [0, 1] * len(mults))
_ = plt.plot(numpy.array([mults, mults]).ravel(), [0, 1] * len(mults))

plot_xa = [float(plot_x[i]) for i in range(0, len(plot_x)) if plot_ya[i] < 0.15]
plot_xb = [float(plot_x[i]) for i in range(0, len(plot_x)) if plot_yb[i] < 0.15]
plot_xc = [float(plot_x[i]) for i in range(0, len(plot_x)) if plot_yc[i] > 0.85]
plot_xe = [float(plot_x[i]) for i in range(0, len(plot_x)) if plot_ye[i] > 0.65]
plot_xf = [float(plot_x[i]) for i in range(0, len(plot_x)) if plot_yf[i] > 157 or plot_yf[i] < 135]
plot_xlog = [float(plot_x[i]) for i in range(0, len(plot_x)) if plot_ylog[i] > 0.85]
[x for x in plot_xb if x not in plot_xa]
[x for x in plot_xc if x not in plot_xa]
[x for x in plot_xe if x not in plot_xa]
967.2807003249109
967.2807174087184
967.2807941240975
967.2808766167694
967.2809732332008
967.2811151000761
967.2814522627293
967.2815063335531
[x for x in plot_xf if x not in plot_xa]
[x for x in plot_xlog if x not in plot_xa]

len([float(mpmath.log(x[0]/x[1], 4) if x[0]/x[1] > 1 else float(x[0]/x[1])) for x in plot_ya if x[0]/x[1] == 1])

_ = plt.figure(figsize=(9, 6))
_ = plt.plot(plot_x, [float(mpmath.log(x[0]/x[1], 4) if x[0]/x[1] > 1 else float(x[0]/x[1])) for x in plot_yb])
plt.grid()
#plt.savefig("H:\\DESKTOP\\Zeta Viz\\" + str(p1[thisi])[:-2] + "x" + str(p2[thisi])[:-2] + ".b.png", dpi=72)
plt.show()

_ = plt.figure(figsize=(9, 6))
_ = plt.plot(plot_x, [float(mpmath.log(x[0]/x[1], 4) if x[0]/x[1] > 1 else float(x[0]/x[1])) for x in plot_yc])
plt.grid()
#plt.savefig("H:\\DESKTOP\\Zeta Viz\\" + str(p1[thisi])[:-2] + "x" + str(p2[thisi])[:-2] + ".c.png", dpi=72)
plt.show()

min_ylog = min(plot_ylog)
max_ylog = max(plot_ylog)
_ = plt.figure(figsize=(9, 6))
_ = plt.plot(plot_x, plot_ylog)
plt.grid()
#plt.savefig("H:\\DESKTOP\\Zeta Viz\\" + str(p1[thisi])[:-2] + "x" + str(p2[thisi])[:-2] + ".log.png", dpi=72)
plt.show()

plot_y = [x for x in plot_ylog if x < 0.5]
# 33
min([plot_ylog.index(x) for x in plot_y])
max([plot_ylog.index(x) for x in plot_y])

min_log_plot_ya = min([mpmath.log(1 + x) for x in plot_ya if x > 0])
max_log_plot_ya = max([mpmath.log(1 + x) for x in plot_ya if x > 0])
min_log_plot_yb = min([mpmath.log(1 + x) for x in plot_yb if x > 0])
max_log_plot_yb = max([mpmath.log(1 + x) for x in plot_yb if x > 0])
min_log_plot_yc = min([mpmath.log(1 + mpmath.fabs(x)) for x in plot_yc if x > 0])
max_log_plot_yc = max([mpmath.log(1 + mpmath.fabs(x)) for x in plot_yc if x > 0])
log_range_ya = mpmath.log(max_log_plot_ya - min_log_plot_ya)
log_range_yb = mpmath.log(max_log_plot_yb - min_log_plot_yb)
log_range_yc = mpmath.log(max_log_plot_yc - min_log_plot_yc)
idx_x_ary = []
idx_y_ary = []
for idx in range(0, len(plot_ya)):
    #if plot_ylog[idx] < 1:
    #if plot_yc[idx] < 0.06:
    #if plot_ya[idx] > 0.96:
    if plot_yc[idx] < 2 and plot_yc[idx] > 0.1183:
        idx_x_ary.append(plot_x[idx])
        idx_y_ary.append(idx)
    if plot_yc[idx] > 0:
        plot_yc[idx] = (mpmath.log(1 + mpmath.fabs(plot_yc[idx])) - min_log_plot_yc)/log_range_yc
        plot_ya[idx] = mpmath.log(1 + mpmath.log(1 + plot_ya[idx]) - mpmath.log(1 + min_log_plot_ya))/log_range_ya
        plot_yb[idx] = mpmath.log(1 + mpmath.log(1 + plot_yb[idx]) - mpmath.log(1 + min_log_plot_yb))/log_range_yb

# 967.280901
# 967.281389
plt.plot([plot_x[idx] for idx in idx_y_ary], [plot_yc[idx] for idx in idx_y_ary])
plt.grid()
plt.show()

# 967.27000004
# 967.27200002
# 967.27500004
# 967.27700005
# 967.28400002
# 967.30200005
# 967.30900002
# 967.31600004
# 967.33800001
# 967.34600002
# 967.34900002
# 967.36800001
# 967.89500001
# 967.92800001
# 968.19300002
# 968.71700006

# 967.61610006
# 968.0162
# 968.39930004
# x_ary = [967.61610006, 968.0162, 968.39930004]
for x in idx_x_ary:
    print("# " + str(round(float(x), 8)))


minminf, maxminf = 2**32, 0
mindistdist, mindistfrac, mindistf, mindistflog, mindistepart = 2**32, 2**32, 2*32, 2**32, 2**32
bprintall = False
for p in [2048 + 10, 4096 + 10, 8192 + 18]:
    p = primesieve.primes(p)[-1]
    for epart in [(0.27895868339632674, mpmath.mpf('0.00000000000001')), (0.278675207163, 1/2053), (0.27273023722, 0.019), (0.274234368636, 0.02), (0.273, 0.0278), (0.25, 0.25), (0.20, 0.30), (0.15, 0.35)]:
        mindist, minfrac, minf, minflog, minepart = 2**32, (0, 1), 2**32, 2**32, 2**320
        for inum in primesieve.primes(p - 1):
            f = 1 + epart[0] * (mpmath.e() - 1) + mpmath.fmul(epart[1] * (mpmath.e() - 1), mpmath.fdiv(inum, p))
            flog = mpmath.log(f)
            dist = 0
            for x in x_ary:
                xmod = x % flog
                dist += xmod if (xmod < 0.5 * flog) else flog - xmod
            if dist < mindist:
                mindist = dist
                minfrac = (inum, p)
                minf = round(f, 16)
                minflog = flog
                minepart = epart
        if minf < minminf:
            minminf = minf
        if minf > maxminf:
            maxminf = minf
        if mindist < mindistdist:
            mindistdist = mindist
            mindistfrac = minfrac
            mindistf = minf
            mindistflog = minflog
            mindistepart = minepart
        if bprintall:
            print("# 1 + " + str(epart[0]) + " * (mpmath.e() - 1)")
            print("mindist = mpmath.mpf('" + str(mindist) + "')")
            print("minfrac = " + str(minfrac))
            print("minf = " + str(minf))
            print("minepart = " + str(minepart))
    if p > 8192:
        print("mindistdist mpf('" + str(mindistdist) + "')")
        print("mindistfrac " + str(mindistfrac))
        print("mindistf " + str(mindistf))
        print("mindistflog mpf('" + str(mindistflog) + "')")
        print("mindistepart = " + str(mindistepart))

minminf = 1.472176897141907
maxminf = 1.4953137779259926
mindistdist = mpmath.mpf('0.01013904759327467060463899111650611370195261223478303732144496371287481220654493647732824628871015390249875764341787740924688206791349586501157762535460623437301837869044147183409642495339660596529624721287065904594634502171103669012470617832845844227623066829969069343240830261287548098625183080674357033227584805287621513085065832906152780798406478287053519253803737938107392130794868760403279010564838509465745677430763504533916862186543498823885508779240827134468839788155375695413939862972072562358518799405670701525733700753304832147822822345764104906684154810955252821212229325911613503531632236193761865448503177')
mindistfrac = (2083, 8209)
mindistf = 1.481211932366214
mindistflog = mpf('0.3928606259026835102076370897558434695118017302549818103016566023705471670137260174912764710616211575329396836890156710489808095523688409846202227548231703467772652240541468556166392784626509355784056473406933912838968536372779402775425976010648544035571583141071081678743166497552344128834336913766016476156245833273546400425951053378029806954476100467981841855432420644275462737931324335143769160072682175527641521296611260621261823035654486454150126502486627098816634084492763794650876769298823230196492342859487990629507484415079069665631688756200415755284050196798905148138862216518037708631050705433135915440071141')
(minminf + maxminf)/2 # 1.4837453375339498

mindistdist mpf('0.009446716162479518239918203523204938522147937803265154402334300495917142157278103833595732016361742392725511585815588025810578054511703255413249655604780650860401779622826167782191029987263065515982160458123063993488499404742390163547054605648885796160625155616279960706147073853970730684286014174735504555691394538425023936200565194551923240597423848207547096750867902494100083566056750657758257342426850279992395313134558073507463693053648632614902755380400050668576327605172415054411905310674741865653414022453720509120568730157334179248727940953176254510501966445274697913293042988552163664094482606577605121798258977')
mindistfrac (443, 2053)
mindistf 1.478627410690653
mindistflog mpf('0.3911142322421628970798739402289625235833548807275723596469913870405749224294883818716860735841677990543428641455043134485160231820530836886332606985645519658252481220106488388503099753613293245597432449897221949681092093260376494185855684075068030335905689845960370286795695813185894345051738853394530740797110652424148465789518770427151586906578129092255924315313884263615284214438570622726452328391835176220104996385494006628689917385171361935274061757144205086593990406428723567157632572041539464102278347137575883243806537873515715243523420557363935501596647145876280683496514763653659458362276566481200736353969325')

mindistdist mpf('0.008899119220114110095998282047544637580594293566601860953192641480934427424177531251289743432188373774390552320944593454888850827263888514993815272664314505155767284614994669855436100143712722198424191428574790849279084045849321173183404753260517461464746009330581026256557861285897537576084423262999513661744063066764612841814500055483724580560809230167123371911418388209516936443531788130629302611162771331159372128918517899841300219961095804422484197606251281326134553844289263794580497885336909551324758193639606910995477726056111752212435003413913555904866656756598661798810650310603202261068148997927631613613563')
mindistfrac (673, 2053)
mindistf = 1.4793296365707693
mindistflog mpf('0.3915890369009789859200338433719940116744580427967502434712593821365214136033269326582731754625534742612355948836249775863490650691048802138005638411297185738289465078012196580379674094256244792565527605952380965982399996294683856477237796944794743193614339587416385845575471512383842627579191280029381065993777281808522510569748440534205031248303239519539511016876664313868161476280111374547454002033216677877553233706023133163025247978236088575260608754844685482529636466641764924206288756059406702708540957759683008118571988178503463235243577811502483469077285059291086564165852793892842245963839272447402619868987')

mindistdist mpf('0.008652890051106264533086126795295692224141345798849443729632508460292857976952952589290157122068085023715599878239598207231397664798167454010259503924706121372791250210700661456648202665270065094969071223725218975770137566498511916202095149337647003314662084676136718899386791104969475412496530202824768382831714218023186822120263685560558882764991384027455440613939545667657380588798757131338998326995838783650831099196904244319936579088331763573947352433656588596924342111657205064235226512925846003405318652417127930707296293374584718352958595895983641745485634774362377751740142199702653752334732152592495815205817')
mindistfrac (3533, 4099)
mindistf 1.479563936253105
mindistflog mpf('0.3917474066949975579332823280045394217738086962957477321005550293606884192555783908656989509286666390907153845281983638727390719329020663558306965332102370570589822635681609150824395916554616160125172259735829383479239489114756992661335754981169146832712374799171016052171326906475881047082168908342637404745310523636216998028261967340277194982248825470295555060993868207591463518102110981137580643992195237590993718788581624527159498029246300802901685105903468381577169200720487415127321850034374540923436997494319898226283081019467903666592333096006901645841452063042631177084845118905631013958070738225384396533758')
mindistepart = (0.278675207163, 0.0004870920603994155)

modavg = 0
for x in x_ary:
    flog = x % mindistflog
    flog = flog if flog < 0.5 * mindistflog else mindistflog - flog
    modavg += flog/len(x_ary)
    sflog = str(flog)
    print(str(x) + " % " + str(float(mindistflog)) + " # " + sflog[:(sflog.find(".") + 21)])

mindistf = 1.469561095939653
mindistf = 1.4793296365707693
1 + f * (mpmath.e() - 1) = mindistf - 0.01
f = (mindistf - 0.000000000000001 - 1) / (mpmath.e() - 1)
f = (mindistf - 1/2053 - 1) / (mpmath.e() - 1)

967.61610006 % 0.3928606259026835 # 0.00037846169052230161
968.0162     % 0.3928606259026835 # 0.00761777578785704183
968.39930004 % 0.3928606259026835 # 0.00214281011489532717

967.61610006 % 0.39158903690097896 # 0.0004101223190662654
968.0162     % 0.39158903690097896 # 0.008100780779973
968.39930004 % 0.39158903690097896 # 0.0003882161210748456

967.61610006 % 0.3917474066949976 # 0.00000552335603984781
968.0162     % 0.3917474066949976 # 0.00835805666106054030
968.39930004 % 0.3917474066949976 # 0.00028931003400587641
                                  # 0.00288429668370208818

((1 - 0.61610006) + 0.39930004 + 0.0162) / 3
0.26646666
0.39158903690097896 / 0.26646666
1.469561095939653

# 1 + 0.273 * (mpmath.e() - 1)
mindist = mpmath.mpf('0.01169248266527781921440004927763014999088643201927215999104875734524894488153433541348463405086076970127376860120091120046360913075698578910511253623547165704250629309251921973964636398669704047615093017474306556103849455862973750867450243172905051540027109084087488979333815543213564725585794812385616509406523383384893178427501112087718354866799568950432099148332812226241681094655239553049089366565264828755151645559458094691346613459624665164896443531940339765489130363371767167594069750568014703459907087340375617641154427255203587517603594860259907425594257376930801799290813913733705443795245916440761807226629')
minfrac = (521, 2053)
minf = 1.4812133212185328
# 1 + 0.25 * (mpmath.e() - 1)
mindist = mpmath.mpf('0.01552367635600323936042711675536676447106655727886886157532802292039764139589567550827783193780072533863041513805676127900195061267874552450361827370093056048307463074295954564830015656695943424692951361517065827188621847231372094149033464559419809784765366561956449391533056781408263985953693705511525890331457541300298297731918330837066831338383841538430913519695129758707051041972490115885837098094785246241325329964920942571474946584593345515460170524684303463905980955484605656503373095858977934397769448218685353294793882141585867090474108155826013647631481337199937418116621159700092900678960022978076853084663')
minfrac = (257, 2053)
minf = 1.4833452293887475
# 1 + 0.2 * (mpmath.e() - 1)
mindist = mpmath.mpf('0.01692087059290969542035839746319137833772764791793277538660202203133912403870770684352666484212608402863927986365601532543433608364872171950598885167998473482104019145459705042402976086125606608436453336088576935129054775206351787704201948716623192461257402288768884461045890363115889226443420835835076396035854550553194263734570190246002075639383035450273929941856019278253351710692861473328457263252924050127732728326730642819274433920532595012959130026829480123371853193521316524396715228327539623499584470597399462711736664459635256442098534863335360770164600570383420946823761589016173986396277584014319370883653')
minfrac = (563, 2053)
minf = 1.4850191522610896
# 1 + 0.15 * (mpmath.e() - 1)
mindist = mpmath.mpf('0.03015114058429581419103959923552663195461069732139685441364696567976025510332895169971745373910112365649338935427479703964385414529263309510788954416259582292501274146101539457869703644980948571791508813869742486412736245166339500359340760453310104024505408037261616215302769295234869992787496941858190872739909731099199113196957038881761486254453628159295544684026054077483093082780352556928132126233954474551148851336472301761641591215164381187097333444811748740894558156844219209563034243067841627015733032990749526460946694474294942258267301021137219828552654344293131898706385841242374350539145357257763975045079')
minfrac = (811, 2053)
minf = 1.4953137779259926
# 1 + 0.273 * (mpmath.e() - 1)
mindist = mpmath.mpf('0.01165324360683361752735920232082381759003249625070264880258004970874504971330321802344187952494543433465540871043866850240430052269804701410853777347047643556192807948124586129704951606250174232918358050331234731759242580671099623901540893120459648029524471925266178945461563350654236482826414036022448443683983285936533776058241977180797786098703414823722106098758473505943371300788330722668630855843209641095296548503361803966264472670408781891556143010932621944658283066102169713909877133987245423621286985644613357324738076544440156305989080846229289319307239806537828329539547938826570094232515920922640820178791')
minfrac = (599, 4099)
minf = 1.4760714643373765
# 1 + 0.25 * (mpmath.e() - 1)
mindist = mpmath.mpf('0.01122738049814663210796925088141213415658170082094568372962428446230741433845856851943761537456253951209284636407981135972704300625819741282241804129646316388447804389087630447246265148710353979452020542530797213995119876166289215788732680762942285778468330769237400316807129262078131650271869732985228332400123026523348856825170111933065476658013104914711864012601078746303383614882050917035851084991095219822281665952803803329848202896087137519747024666927972718174033682669706072092488654306795433888198663594405511041900276035167000887434883675024931038851845556234589871821732589405667624306395824549579318056522')
minfrac = (457, 4099)
minf = 1.477463528327605
# 1 + 0.2 * (mpmath.e() - 1)
mindist = mpmath.mpf('0.01454542873862377303839724030994135076424680273614701432948457091650685441573444777242034812899594444568557788268547507943572081411772693885765787248648764543214242165308376197595120878962864617811680374377596056721448461330188052743351302300992867562051595495104440092032851485379988479182866178696592275509841569908786542079883271995935834669254336531306284717831877164801950334380884562393724460027995426977466770587643107957804764588296253873979480190687491972775879514064939452831128023454176517937692935307523624051236219113681903625511370418317082040998345979397861491276510941944912181732669981910752976400049')
minfrac = (1031, 4099)
minf = 1.4733134941481112
# 1 + 0.15 * (mpmath.e() - 1)
mindist = mpmath.mpf('0.02446804350887768461041742824835937725207046425792403763099848954208133370813962612450801323456260917478585366611798051641565132778217426798340340559597792959696701175844700686385638350710651983477118414196582643726494178827257875011295843739127983981963468379185685066972902635284861045414057308464248989657220503246485560874792551482830439769290541249392828291690023845850009669624001353943524287798194539370250049670190333007961515920266368864028706110604358205233329024732199482388197863515019203077683954579064195528753696930591938846888001599803064877983257908247573156964415222589382688291599961938238414049025')
minfrac = (1609, 4099)
minf = 1.4938121478225799
# 1 + 0.273 * (mpmath.e() - 1)
mindist = mpmath.mpf('0.01013904759327467060463899111650611370195261223478303732144496371287481220654493647732824628871015390249875764341787740924688206791349586501157762535460623437301837869044147183409642495339660596529624721287065904594634502171103669012470617832845844227623066829969069343240830261287548098625183080674357033227584805287621513085065832906152780798406478287053519253803737938107392130794868760403279010564838509465745677430763504533916862186543498823885508779240827134468839788155375695413939862972072562358518799405670701525733700753304832147822822345764104906684154810955252821212229325911613503531632236193761865448503')
minfrac = (2083, 8209)
minf = 1.481211932366214
# 1 + 0.25 * (mpmath.e() - 1)
mindist = mpmath.mpf('0.01927086967419452738925621560105609243186101452616747038596352021596212192555246534122806424050446137079082817490502232344563725146142763947826080978965565908383800944361748210520685741826959879160085979151873444815219555050070112411305270078424311210712108119155464493239031118028870718764165960646503937874139145193554399258123828908022453647360445041229922867030622920972218875297153659496695697304729242878279826465147337724626084652537278598092906240947892721673022562059727884612775232721512806315846479246023214298896400238618708996130763351302898034017241025956931867253510939369877132342514966834208631389242')
minfrac = (1171, 8209)
minf = 1.4908479580626703
# 1 + 0.2 * (mpmath.e() - 1)
mindist = mpmath.mpf('0.01392831679451840846529142721434896249603340506501468732894596972124695385075570110177617768103256973615843873604323354931034577490476629513999018008576621493865141179417674394599763880989764943619113813289782416977254134978755752102826506949538178177669594977823037532774956182050643873212078215140230738085355821682869237115734896306983779746967365259449837010323897647918647914377123189541931764792893885850589203931132919998991425660262891952687855931607433169167040354883920893295572488883950167492811658196387809465748365864690111613081072689612665622931971407442242899014669755391586634655628092492655330493395')
minfrac = (2083, 8209)
minf = 1.474458450550386
# 1 + 0.15 * (mpmath.e() - 1)
mindist = mpmath.mpf('0.01649590102660940448160345296645491257391644690901291213093991598299225279637549311758904382272902383362284142444879687206401515937842141927850667537762931685355329719862707746672407762147175698844284821170649476822326742526250746977901732459423479498790849638130445429732744183891693175923557502666165528503718609608076408812851366627811509002906414249970895222270897604513602833576146010570459763686167258271017244223867572400970197529683564750760695620605898721446562213007587253496779950494682936400800531223393127358011395251668097531948970085994793344484210127380992803503828150950113869507441063963681506380064')
minfrac = (2927, 8209)
minf = 1.472176897141907




tempy = [x for x in plot_ylog if round(x, 12) not in [round(plot_ylog[0], 12), round(plot_ylog[1], 12)]]
ilen = len(tempy)
tempx = [x for x in range(0, ilen)]
#[round(x, 12) for x in tempy[650:670]]
_ = plt.figure(figsize=(9, 6))
#_ = plt.plot(tempx, tempy)
maxy = 990 + 1
_ = plt.plot(tempx[(tempy.index(ylog_avg) - 30):maxy], tempy[(tempy.index(ylog_avg) - 30):maxy])
_ = plt.plot([tempx[tempy.index(ylog_avg)], tempx[tempy.index(ylog_avg)]], [min(tempy), max(tempy)])
_ = plt.plot([660, 660], [min(tempy), max(tempy)])
#_ = plt.plot([min(tempx), max(tempx)], [tempy[660], tempy[660]])
_ = plt.plot([tempy.index(ylog_avg) - 30, maxy], [tempy[660], tempy[660]])
plt.grid()
#plt.savefig("H:\\DESKTOP\\Zeta Viz\\" + str(p1[thisi])[:-2] + "x" + str(p2[thisi])[:-2] + ".log.png", dpi=72)
plt.show()



plot_ylog[plot_x.index(-2):plot_x.index(2) + 1]

lessthanj[0]
[one, two, twoonedivone]



for irange in [4*4, 8*8, 16*16, 32*32, 64*64, 128*128, 256*256, 512*512, 1024*1024, 2048*2048, 4096*4096, 8192*8192, 16384*16384, 32768*32768, 65536*65536]:
t1 = time.time()
for irange in [2048*2048, 4096*4096, 8192*8192, 16384*16384, 32768*32768, 65536*65536]:
    mpmath.mp.prec = 256
    sum_sq, sum_int = mpmath.mpf(0), mpmath.mpf(0)
    for iden in range(2, irange + 1):
        #for inum in range(1, iden):
        imax = mpmath.mpf(iden - 1)
        sum_sq += mpmath.fdiv((2 * imax + 1) * imax * (imax + 1), 6 * iden**2)
        sum_int += mpmath.fdiv(imax * (imax + 1), 2 * iden)
    srange = str(int(math.sqrt(irange)))
    srange = srange + "*" + srange
    if len(srange) < 11:
        srange = (" " * (len(srange) - 11)) + srange
    mpmath.mp.prec = 128
    print(srange + ", sqrt(sum_sq) = " + str(mpmath.sqrt(sum_sq)))
    print(srange + ", sqrt(sum_int) = " + str(mpmath.sqrt(sum_int)))
    print(srange + ", sqrt(sum_int)/sqrt(sum_sq) = " + str(mpmath.sqrt(sum_int)/mpmath.sqrt(sum_sq)))

# 8 minutes up to 1024*1024
t2 = time.time()
round((t2 - t1)/60, 2)

      4*4, sqrt(sum1) = 6.1560367254864685
      4*4, sqrt(sum2) = 7.745966692414834
      4*4, sqrt(sum2)/sqrt(sum1) = 1.2582716831993435
      8*8, sqrt(sum1) = 25.73176989282479
      8*8, sqrt(sum2) = 31.74901573277509
      8*8, sqrt(sum2)/sqrt(sum1) = 1.2338450042501035
    16*16, sqrt(sum1) = 104.1074159582006
    16*16, sqrt(sum2) = 127.74975538137049
    16*16, sqrt(sum2)/sqrt(sum1) = 1.2270956320024535
    32*32, sqrt(sum1) = 417.63929994986347
    32*32, sqrt(sum2) = 511.74993893502324
    32*32, sqrt(sum2)/sqrt(sum1) = 1.2253395190454
    64*64, sqrt(sum1) = 1671.7771429980282
    64*64, sqrt(sum2) = 2047.749984739348
    64*64, sqrt(sum2)/sqrt(sum1) = 1.2248941154124653
  128*128, sqrt(sum_sq) = 6688.3318583099965426370986552051256095
  128*128, sqrt(sum_int) = 8191.749996185186314612091222618922779
  128*128, sqrt(sum_int)/sqrt(sum_sq) = 1.2247822281735692036582139766185424301
  256*256, sqrt(sum_sq) = 26754.551748775939774518294714192004656
  256*256, sqrt(sum_int) = 32767.749999046318407566746136372713614
  256*256, sqrt(sum_int)/sqrt(sum_sq) = 1.2247542140393173033430986789852540243
  512*512, sqrt(sum_sq) = 107019.43161645448490426563816521124619
  512*512, sqrt(sum_int) = 131071.74999976158096615000240846825511
  512*512, sqrt(sum_int)/sqrt(sum_sq) = 1.2247472073063131138138727992676444423
1024*1024, sqrt(sum_sq) = 428078.95117576153329085020852308992452
1024*1024, sqrt(sum_int) = 524287.74999994039532680288300392573836
1024*1024, sqrt(sum_int)/sqrt(sum_sq) = 1.2247454553883852518521512394015887225
2048*2048, sqrt(sum_sq) = 1712317.0294381736001628222721290105523
2048*2048, sqrt(sum_int) = 2097151.7499999850988370297952396519093
2048*2048, sqrt(sum_int)/sqrt(sum_sq) = 1.2247450173920650562454169645473604036
4096*4096, sqrt(sum_sq) = 6849269.3424948768125423833004525073622
4096*4096, sqrt(sum_int) = 8388607.7499999962747095905157793390811
4096*4096, sqrt(sum_int)/sqrt(sum_sq) = 1.2247449078917969084759323274699391978
8192*8192, sqrt(sum_sq) = 27397078.594723643146862524911815412445
8192*8192, sqrt(sum_int) = 33554431.749999999068677418445627515844
8192*8192, sqrt(sum_int)/sqrt(sum_sq) = 1.2247448805166471330390849642294979117


(2 * n + 1) * n * (n + 1) / 6 * (n + 1)**2 / (n * (n + 1)) / 2 * (n + 1)

(2 * n + 1) * (n + 1) / 3 * (n + 1)**2

(2 * n + 1) / 3 * (n + 1)

(2 * n + 1) / (3 * n + 3)

(2 + 1/n) / (3 + 3/n)

2/3


(2 * n + 1) * n * (n + 1) / (6 * (n + 1)**2)

(2*n**2 + n) / 6*(n + 1)

(2*n**2 + n) / 6*(n + 1) + (2*n**2 + 5*n + 3) / 6*(n + 2)
((2*n**2 + n)*(n + 2) + (2*n**2 + 5*n + 3)*(n + 1)) / 6*(n + 1)*(n + 2)
((2*n**3 + n**2 + 4*n**2 + 2*n) + (2*n**3 + 5*n**2 + 3*n + 2*n**2 + 5*n + 3)) / 6*(n + 1)*(n + 2)
(4*n**3 + 12*n**2 + 10*n + 3) / 6*(n + 1)*(n + 2)

(n**4 + (39/6)*n**3 + (86/6)*n**2 + (78/6)*n + (27/6)) / (n + 1)*(n + 2)*(n + 3)
(6*n**4 + 39*n**3 + 86*n**2 + 78*n + 27) / 6*(n**3 + 6*n**2 + 11*n + 6)

(2*n**2 + n)*(n + 2)*(n + 3)*(n + 4) + (2*n**2 + 5*n + 3)*(n + 1)*(n + 3)*(n + 4) + (2*n**2 + 9*n + 9)*(n + 1)*(n + 2)*(n + 4) + (2*n**2 + 13*n + 19)*(n + 1)*(n + 2)*(n + 3) / 6*(n + 1)*(n + 2)*(n + 3)*(n + 4)
(8*n**5 + 88*n**4 + 361*n**3 + 691*n**2 + 626*n + 222) / 6*(n + 1)*(n + 2)*(n + 3)*(n + 4)
(8*n**5 + 88*n**4 + 361*n**3 + 691*n**2 + 626*n + 222) / 6*(n**4 + 10*n**3 + 35*n**2 + 50*n + 24)





factor_p1p2(p1p2[0], p1[0])

def factor_p1p2(p1p2, p1):
    # 
    # p1p2 = 2018066034762209086399223917657
    # log_upper = mpmath.log(mpmath.sqrt(p1p2[0]), 10)             = 14.508707361522376142423011549868395416589
    # log_lower = mpmath.log(mpmath.sqrt(p1p2[0]/201.8066034), 10) = 13.356239675088130224050068489727277179075
    # 
    log_upper = mpmath.log(mpmath.sqrt(p1p2), 10) + 2
    log_lower = mpmath.log(mpmath.sqrt(p1p2/201.8066034), 10)
    if log_lower > mpmath.floor(log_upper) - 1.25:
        for f in [x/8 for x in range(12, 0, -1)]:
            if log_lower > mpmath.floor(log_upper) - f:
                log_lower = log_upper - 1 - f
    
    log_lower = log_lower - 0.25 * random.random()
    thisrand, prevrand, nextrand = 0, 0, 0
    thisrand1, prevrand1, nextrand1 = 0, 0, 0
    for i in range(0, 12):
        if nextrand1 > prevrand1 and nextrand > prevrand:
            thisrand = nextrand
            thisrand1 = nextrand1
        while thisrand1 <= prevrand1 and thisrand <= prevrand:
            thisrand1 = log_lower + (i / 8) * (log_upper - log_lower)
            thisrand = int(10**thisrand1)
        if prevrand == 0:
            prevrand = thisrand
        if prevrand1 == 0:
            prevrand1 = thisrand1
        p2 = int(round(p1p2/thisrand))
        onea = (1 + 1/(2*thisrand)) * (mpmath.log(thisrand + 1) - mpmath.log(thisrand)) + (1 + thisrand/(2*p1p2)) * (mpmath.log(p1p2 + thisrand)) - (thisrand/(2*p1p2)) * mpmath.log(p1p2)
        oneb = (1 + 1/(2*p2)) * (mpmath.log(p2 + 1) - mpmath.log(p2)) + (1 + p2/(2*p1p2)) * (mpmath.log(p1p2 + p2)) - (p2/(2*p1p2)) * mpmath.log(p1p2)
        two = (2 + 1/p1p2) * mpmath.log(p1p2 + 1) - (1/p1p2 - 1) * mpmath.log(p1p2)
        twoonea = mpmath.fdiv(two, onea)
        twooneb = mpmath.fdiv(two, oneb)
        print("thisrand " + str(thisrand) + ", " + str(float(twoonea)))
        print("      p2 " + str(p2) + ", " + str(float(twooneb)))
        if round(twoonea, 15) in [3.0, mpmath.mpf('2.999999999999999')]:
            return thisrand
        nextrand1 = log_lower + ((i + 1) / 8) * (log_upper - log_lower)
        nextrand = int(10**nextrand1)
        if p1 > thisrand and p1 < nextrand:
            p2 = int(round(p1p2/p1))
            onea = (1 + 1/(2*p1)) * (mpmath.log(p1 + 1) - mpmath.log(p1)) + (1 + p1/(2*p1p2)) * (mpmath.log(p1p2 + p1)) - (p1/(2*p1p2)) * mpmath.log(p1p2)
            oneb = (1 + 1/(2*p2)) * (mpmath.log(p2 + 1) - mpmath.log(p2)) + (1 + p2/(2*p1p2)) * (mpmath.log(p1p2 + p2)) - (p2/(2*p1p2)) * mpmath.log(p1p2)
            two = (2 + 1/p1p2) * mpmath.log(p1p2 + 1) - (1/p1p2 - 1) * mpmath.log(p1p2)
            twoonea = mpmath.fdiv(two, onea)
            twooneb = mpmath.fdiv(two, oneb)
            sp1 = str(p1)
            sp2 = str(p2)
            print(sp1[:sp1.find(".")] + ", " + str(float(twoonea)) + " ***")
            print(sp2[:sp2.find(".")] + ", " + str(float(twooneb)) + " ***")
        prevrand = thisrand
        prevrand1 = thisrand1
            

myexp1 = lambda x, n: mpmath.power(mpmath.fadd(1, mpmath.fdiv(x, n)), n)
myexp2 = lambda x, n: mpmath.power(mpmath.fadd(1, mpmath.fdiv(x, n)), mpmath.fadd(n, 0.5))
myexp3 = lambda x, n: mpmath.power(mpmath.fadd(1, mpmath.fdiv(x, n)), mpmath.fadd(n, myepsilon(n)))

# (1/n - log(1 + 1/n)) / ((1/n) * log(1 + 1/n))
myepsilon2 = lambda n: mpmath.fdiv(mpmath.fsub(mpmath.fdiv(1, n), mpmath.log(1 + mpmath.fdiv(1, n))), mpmath.fmul(mpmath.fdiv(1, n), mpmath.log(mpmath.fadd(1, mpmath.fdiv(1, n)))))

mpmath.mp.prec = 64
mpmath.exp(mpmath.mp.mpc(0, mpmath.pi()))
myexp1(mpmath.mp.mpc(0, mpmath.pi()), mpmath.power(2, mpmath.mp.prec - 1))
myexp2(mpmath.mp.mpc(0, mpmath.pi()), mpmath.power(2, mpmath.mp.prec - 1))
myexp3(mpmath.mp.mpc(0, mpmath.pi()), mpmath.power(2, mpmath.mp.prec - 1))
mpc(real='-1.0', imag='-5.01655761266833202345e-20')
mpc(real='-1.00000000000000000054', imag='-5.01655761266833202639e-20')
mpc(real='-1.00000000000000000054', imag='-5.01655761266833202639e-20')
mpc(real='-1.00000000000000000054', imag='-3.90672820922912056743e-19')
mpmath.mpc(-mpmath.power(2, mpmath.mpf('7.8208654878293888796e-19')), -mpmath.power(2, mpmath.mpf('-64.1118641787301516283')))
mpmath.mpc(-mpmath.power(2, mpmath.power(2, mpmath.mpf('-60.1493055321677400384'))), -mpmath.power(2, mpmath.mpf('-64.1118641787301516283')))
mpmath.mpc(-mpmath.power(2, mpmath.power(2, mpmath.mpf('-60.1493055321677400384'))), -mpmath.power(2, -64) - mpmpath.power(2, mpmath.mpf('-67.7445170396417674988')))
mpc(real='-1.00000000000000000054', imag='-5.01655761266833203433e-20')
mpmath.mpc(-mpmath.power(2, mpmath.power(2, mpmath.mpf('-60.1493055321677400384'))), -mpmath.power(2, mpmath.mpf('-61.1506729120264386976')))
mpc(real='-1.00000000000000000054', imag='-3.90672820922912056578e-19')
mpmath.mpc(-mpmath.exp(mpmath.exp(mpmath.mpf('-42.0588344628424541174'))), -mpmath.exp(mpmath.mpf('-42.3864165183145465317')))
mpc(real='-1.00000000000000000054', imag='-3.9067282092291205726e-19')

mpmath.mp.prec = 64
myexp1(mpmath.mp.mpc(0, mpmath.pi()), mpmath.power(2, mpmath.mp.prec - 2))
myexp2(mpmath.mp.mpc(0, mpmath.pi()), mpmath.power(2, mpmath.mp.prec - 2))
myexp3(mpmath.mp.mpc(0, mpmath.pi()), mpmath.power(2, mpmath.mp.prec - 2))
mpc(real='-1.00000000000000000108', imag='-5.01655761266833202904e-20')
mpc(real='-1.00000000000000000054', imag='-3.90672820922912056743e-19')
mpc(real='-1.00000000000000000054', imag='-3.90672820922912056743e-19')

mpmath.mp.prec = 64
myexp1(mpmath.mp.mpc(0, mpmath.pi()), mpmath.power(2, mpmath.mp.prec - 3))
myexp2(mpmath.mp.mpc(0, mpmath.pi()), mpmath.power(2, mpmath.mp.prec - 3))
myexp3(mpmath.mp.mpc(0, mpmath.pi()), mpmath.power(2, mpmath.mp.prec - 3))
mpc(real='-1.00000000000000000217', imag='-5.01655761266833203433e-20')
mpc(real='-1.00000000000000000108', imag='-7.31180065719140793612e-19')
mpc(real='-1.00000000000000000108', imag='-7.31180065719140793612e-19')

mpmath.mp.prec = 64
myexp1(mpmath.mp.mpc(0, mpmath.pi()), mpmath.power(2, mpmath.mp.prec - 4))
myexp2(mpmath.mp.mpc(0, mpmath.pi()), mpmath.power(2, mpmath.mp.prec - 4))
myexp3(mpmath.mp.mpc(0, mpmath.pi()), mpmath.power(2, mpmath.mp.prec - 4))
mpc(real='-1.00000000000000000434', imag='-5.0165576126683320449e-20')
mpc(real='-1.00000000000000000217', imag='-1.41240631354841184357e-18')
mpc(real='-1.00000000000000000217', imag='-1.41240631354841184357e-18')

myexp3(mpmath.mp.mpc(0, mpmath.pi()), mpmath.power(2, mpmath.mp.prec) - mpmath.power(2, mpmath.mp.prec/2))
mpc(real='-3.65729520106397195786e-10', imag='1.00000000000000000011')

mpmath.mp.prec = 32768
mpmath.exp(mpmath.mp.mpc(0, mpmath.pi()))
myexp1(mpmath.mp.mpc(0, mpmath.pi()), mpmath.power(2, mpmath.mp.prec - 1))
myexp2(mpmath.mp.mpc(0, mpmath.pi()), mpmath.power(2, mpmath.mp.prec - 1))
myexp3(mpmath.mp.mpc(0, mpmath.pi()), mpmath.power(2, mpmath.mp.prec - 1))
mpc(real='-1.0', imag='-1.0826693819594280679390489481547791577522925541287790996270460791205111224612439996049612082296017408449907032949138586308326385356972825e-9864')
mpc(real='-1.0', imag='-1.0826693819594280679390489481547791577522925541287790996270460791205111224612439996049612082296017408449907032949138586308326385356972825e-9864')
mpc(real='-1.0', imag='-1.0826693819594280679390489481547791577522925541287790996270460791205111224612439996049612082296017408449907032949138586308326385356972825e-9864')

myexp3(mpmath.mp.mpc(0, mpmath.pi()), mpmath.power(2, mpmath.mp.prec) - mpmath.power(2, mpmath.mp.prec/2))
myexp3(mpmath.mp.mpc(0, mpmath.pi()), mpmath.power(2, mpmath.mp.prec - 1) - mpmath.power(2, (mpmath.mp.prec - 1)/2))
myexp3(mpmath.mp.mpc(0, mpmath.pi()), mpmath.power(2, mpmath.mp.prec - 2) - mpmath.power(2, (mpmath.mp.prec - 2)/2))
mpc(real='-1.32029481687651327694316898976069521940657742708617811891250160538344503160687827768883365075511811491486993516721161571513063184825701736005860393524e-4932', imag='1.0')
mpc(real='-1.32029481687651327694316898976069521940657742708617811891250160538344503160687827768883365075511811491486993516721161571513063184825701736005860393524e-4932', imag='1.0')
mpmath.mpc(real=-mpmath.power(2, mpmath.mpf('-16383.34850387052768120195672070489199266498152307323695847059321148451189703641545856103973520719014589829273452492264046471959577204009330774622184389877')), imag=mpmath.power(2, mpmath.mpf('2.0384807624465694966634082413857813486871670546288882983990345758975769005963554316924680160064872432638245255077708431225074480285683655821457222039445685e-9864')))
mpmath.mpc(real=-mpmath.power(2, mpmath.mpf('-16383.348503870527681201956720704891992664981523073236958470593211484511897036415458561039735207190145898292734524922640464719595772040093307746221843898772'), mpmath.power(2, mpmath.mpf('1.412967193115527288555480437571743690747488782054501311818828515938075859332032541582207048707354961538816795326572752765551515170858120315735745353919733923e-9864')))
mpmath.mpc(real=-mpmath.power(2, mpmath.mpf('-16383.348503870527681201956720704891992664981523073236958470593211484511897036415458561039735207190145898292734524922640464719595772040093307746221843898772'), mpmath.power(2, mpmath.power(2, mpf('-32767.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002954')))
mpc(real='-0.99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999', imag='-5.2811792675060531077726759590427808776263097083447124756500064215337801264275131107553346030204724596594797406688464628605225273930280694402344157409678e-4932')

A cos(x) + B sin(X) = sqrt(A^2 + B^2) sin(x + arctan(B/A))

for A == B == 1, sqrt(1/2) sin(x + pi/4)
                 
                 sin(arcsin(1/2) * (x + pi/4))


A cos(x) - B sin(X) = sqrt(A^2 + B^2) sin(x + arctan(-B/A))

for A == -B, sqrt(2) sin(x - pi/4)

sqrt(2) sin(-ln(x) * b * i - ln(x) * a + pi/4)

sin(x) = (e^iz - e^-iz)/2i

       e^(-ln(x) * (a + pi/(4*ln(x)) + b * i) 


arctan(x) = (1/2i) ln((i - z)/(i + z))

arctan[(A sin(a) + B sin(b)) / (A cos(a) + B cos(b))]

(1/2i) ln((i - z)/(i + z))

z = (sin(a) + sin(b))/(cos(a) + cos(b))
  
  = (e^ai - e^-ai + e^bi - e^-bi)/(2i)/(e^ai + e^-ai + e^bi + e^-bi)/2

  = (1/i)*(e^ai - e^-ai + e^bi - e^-bi)/(e^ai + e^-ai + e^bi + e^-bi)

ln((i - z)/(i + z))

 = ln((i - (1/i)*(e^ai - e^-ai + e^bi - e^-bi)/(e^ai + e^-ai + e^bi + e^-bi))
    / (i + (1/i)*(e^ai - e^-ai + e^bi - e^-bi)/(e^ai + e^-ai + e^bi + e^-bi))

 = ln(i*(e^ai + e^-ai + e^bi + e^-bi) + i*(e^ai - e^-ai + e^bi - e^-bi)
    / (i*(e^ai + e^-ai + e^bi + e^-bi) - i*(e^ai - e^-ai + e^bi - e^-bi)

 = ln((2i * e^ai + 2i * e^bi)/(2 * e^-ai + 2 * e^-bi))

 = ln(i * (e^ai + e^bi)/(e^-ai + e^-bi))

 = ln(i * (1 + e^(b-a)i + e^(a-b)i + 1)/(e^-2ai - e^-2bi))

 = ln(i * (e^(b-a)i + e^(a-b)i + 2)/(e^-2ai - e^-2bi))

 = ln(i * (e^(b-a + 2a)i + e^(a-b + 2a)i + 2e^2ai)/(1 - e^-2bi))

 = ln(i * (e^(b+a)i + e^(3a-b)i + 2e^2ai)/(1 - e^-2bi))

 = ln(i * (e^bi + e^(2a-b)i + 2e^ai) * e^ai /(1 - e^-2bi))



arctan = -i/2 ln((i - z)/(i + z))

arcsin = i ln(sqrt(1 - z^2) - iz)

arcsin = i ln(sqrt(1 - e^-2ln(x)a) - iz)

       = i ln(mpmath.sqrt(1 - mpmath.exp(-2*a*mpmath.log(7)))

       = i ln(mpmath.sqrt(1 - 1/x) - i * e^-a*ln(x))

       = i ln(mpmath.sqrt((x - 1)/x) - i * e^-a*ln(x))
       * ln(i * (e^bi + e^(2a-b)i + 2e^ai) * e^ai /(1 - e^-2bi))




  1**-zz.real * sin(-log(1) * zz.imag)
- 2**-zz.real * sin(-log(1) * zz.imag - log(2/1) * zz.imag)

  3**-zz.real * sin(-log(3) * zz.imag))
- 4**-zz.real * sin(-log(3) * zz.imag - log(4/3) * zz.imag)

  sqrt[3**(-2*zz.real) + 4**(-2*zz.real) + 2*12**-zz.real * cos(-log(4/3) * zz.imag)]
  * sin(-log(3) * zz.imag + arctan[(4**-zz.real * sin(-log(4/3) * zz.imag))/(4**-zz.real * cos(-log(4/3) * zz.imag) + 3**-zz.real)])

  5**-zz.real * sin(-log(5) * zz.imag))
- 6**-zz.real * sin(-log(5) * zz.imag - log(6/5) * zz.imag)

  sqrt[5**(-2*zz.real) + 6**(-2*zz.real) + 2*30**-zz.real * cos(-log(6/5) * zz.imag)]
  * sin(-log(5) * zz.imag + arctan[(6**-zz.real * sin(-log(6/5) * zz.imag))/(6**-zz.real * cos(-log(6/5) * zz.imag) + 5**-zz.real)])


  7**-zz.real * sin(-log(7) * zz.imag))
- 8**-zz.real * sin(-log(7) * zz.imag - log(8/7) * zz.imag)

  9**-zz.real * sin(-log(9) * zz.imag))
- 10**-zz.real * sin(-log(9) * zz.imag - log(10/9) * zz.imag)



  fractions.Fraction(2**-32)
  fractions.Fraction(math.exp(1/4294967296))
  math.cos(4294967297/4294967296 * zz.imag)
  -0.6178580268166856 for zz.imag = 236.5242296658162

  1**-zz.real * sin(-log(1) * zz.imag + pi/4)
- 2**-zz.real * sin(-log(1) * zz.imag + pi/4 - log(2/1) * zz.imag)

  3**-zz.real * sin(-log(9/2) * zz.imag + pi/4 + log(6/9) * zz.imag)
- 4**-zz.real * sin(-log(9/2) * zz.imag + pi/4 + log(8/9) * zz.imag)

  5**-zz.real * sin(-log(9/2) * zz.imag + pi/4 - log(10/9) * zz.imag)
- 6**-zz.real * sin(-log(9/2) * zz.imag + pi/4 - log(12/9) * zz.imag)

  7**-zz.real * sin(-log(17/2) * zz.imag + pi/4 + log(14/17) * zz.imag)
- 8**-zz.real * sin(-log(17/2) * zz.imag + pi/4 + log(16/17) * zz.imag)

  9**-zz.real * sin(-log(17/2) * zz.imag + pi/4 - log(18/17) * zz.imag)
- 10**-zz.real * sin(-log(17/2) * zz.imag + pi/4 - log(20/17) * zz.imag)


  1**-zz.real * sin(-log(1) * zz.imag + pi/4)
- 2**-zz.real * sin(-log(1) * zz.imag + pi/4 - log(2/1) * zz.imag)

  3**-zz.real * sin(-log(13/2) * zz.imag + pi/4 + log(6/13) * zz.imag)
- 4**-zz.real * sin(-log(13/2) * zz.imag + pi/4 + log(8/13) * zz.imag)

  5**-zz.real * sin(-log(13/2) * zz.imag + pi/4 + log(10/13) * zz.imag)
- 6**-zz.real * sin(-log(13/2) * zz.imag + pi/4 + log(12/13) * zz.imag)

  7**-zz.real * sin(-log(13/2) * zz.imag + pi/4 - log(14/13) * zz.imag)
- 8**-zz.real * sin(-log(13/2) * zz.imag + pi/4 - log(16/13) * zz.imag)

  9**-zz.real * sin(-log(13/2) * zz.imag + pi/4 - log(18/13) * zz.imag)
- 10**-zz.real * sin(-log(13/2) * zz.imag + pi/4 - log(20/13) * zz.imag)


  1**-zz.real * sin(-log(1) * zz.imag + pi/4)
- 2**-zz.real * sin(-log(1) * zz.imag + pi/4 - log(2/1) * zz.imag)

  3**-zz.real * sin(-log(13/2) * zz.imag + pi/4 + (log(2) + log(3) - log(13)) * zz.imag)
- 4**-zz.real * sin(-log(13/2) * zz.imag + pi/4 + (log(2) + log(4) - log(13)) * zz.imag)

  5**-zz.real * sin(-log(13/2) * zz.imag + pi/4 + (log(2) + log(5) - log(13)) * zz.imag)
- 6**-zz.real * sin(-log(13/2) * zz.imag + pi/4 + (log(2) + log(6) - log(13)) * zz.imag)

  7**-zz.real * sin(-log(13/2) * zz.imag + pi/4 - (log(2) + log(7) - log(13)) * zz.imag)
- 8**-zz.real * sin(-log(13/2) * zz.imag + pi/4 - (log(2) + log(8) - log(13)) * zz.imag)

  9**-zz.real * sin(-log(13/2) * zz.imag + pi/4 - (log(2) + log(9) - log(13)) * zz.imag)
- 10**-zz.real * sin(-log(13/2) * zz.imag + pi/4 - (log(2) + log(10) - log(13)) * zz.imag)


  1**-zz.real * sin(-log(1) * zz.imag + pi/4)
- 2**-zz.real * sin(-log(1) * zz.imag + pi/4 - log(2/1) * zz.imag)

  3**-zz.real * sin(-log(13/2) * zz.imag + pi/4 + log(13/13 - 7/13) * zz.imag) # (13/2) * (6/13)
- 4**-zz.real * sin(-log(13/2) * zz.imag + pi/4 + log(13/13 - 5/13) * zz.imag) # (13/2) * (8/13)

  5**-zz.real * sin(-log(13/2) * zz.imag + pi/4 + log(13/13 - 3/13) * zz.imag)
- 6**-zz.real * sin(-log(13/2) * zz.imag + pi/4 + log(13/13 - 1/13) * zz.imag)

  7**-zz.real * sin(-log(13/2) * zz.imag + pi/4 - log(13/13 + 1/13) * zz.imag)
- 8**-zz.real * sin(-log(13/2) * zz.imag + pi/4 - log(13/13 + 3/13) * zz.imag)

  9**-zz.real * sin(-log(13/2) * zz.imag + pi/4 - log(13/13 + 5/13) * zz.imag)
- 10**-zz.real * sin(-log(13/2) * zz.imag + pi/4 - log(13/13 + 7/13) * zz.imag)


  1**-zz.real * sin(-log(9/2) * zz.imag + pi/4 + log(9/9 - 7/9) * zz.imag) # (9/2) * (2/9)
- 2**-zz.real * sin(-log(9/2) * zz.imag + pi/4 + log(9/9 - 5/9) * zz.imag) # (9/2) * (4/9) 

  3**-zz.real * sin(-log(9/2) * zz.imag + pi/4 + log(9/9 - 3/9) * zz.imag)
- 4**-zz.real * sin(-log(9/2) * zz.imag + pi/4 + log(9/9 - 1/9) * zz.imag)

  5**-zz.real * sin(-log(9/2) * zz.imag + pi/4 + log(9/9 + 1/9) * zz.imag)
- 6**-zz.real * sin(-log(9/2) * zz.imag + pi/4 + log(9/9 + 3/9) * zz.imag)

  7**-zz.real * sin(-log(9/2) * zz.imag + pi/4 - log(9/9 + 5/9) * zz.imag)
- 8**-zz.real * sin(-log(9/2) * zz.imag + pi/4 - log(9/9 + 7/9) * zz.imag)


for x < a:
  (a - 3/2)**-zz.real * e**((-log(a) * zz.imag + pi/4) * i) * sin(log(1 - 3/(2*a)) * zz.imag)
- (a - 1/2)**-zz.real * e**((-log(a) * zz.imag + pi/4) * i) * sin(log(1 - 1/(2*a)) * zz.imag)

for x > a:
  (a + 1/2)**-zz.real * e**((-log(a) * zz.imag + pi/4) * i) * sin(log(1 + 1/(2*a)) * zz.imag)
- (a + 3/2)**-zz.real * e**((-log(a) * zz.imag + pi/4) * i) * sin(log(1 + 3/(2*a)) * zz.imag)


for x < a:
sin(log(1 - 3/(2*a)) * zz.imag) = (log(1 - 3/(2*a)) * zz.imag - (log(1 - 3/(2*a))**3 * zz.imag**3) / 3! + (log(1 - 3/(2*a))**5 * zz.imag**5) / 5! - (log(1 - 3/(2*a))**7 * zz.imag**7) / 7! + (log(1 - 3/(2*a))**9 * zz.imag**9) / 9!
                                2 * a = 18446744073709551617
                                mpmath.fdiv(1, mpmath.log(1 - mpmath.fdiv(3, mpmath.power(2, 64) + 1)))
                                mpmath.fdiv(1, mpmath.power(mpmath.log(1 - mpmath.fdiv(3, mpmath.power(2, 64) + 1)), 3))
                                mpmath.fdiv(1, mpmath.power(mpmath.log(1 - mpmath.fdiv(3, mpmath.power(2, 64) + 1)), 5))
                                mpmath.fdiv(1, mpmath.power(mpmath.log(1 - mpmath.fdiv(3, mpmath.power(2, 64) + 1)), 7))
                                = zz.imag / -6148914691236517205.1666666666666666666576 - zz.imag**3 / (3! * -232485249458765954197235773067639211884430496933548809936.6296296296296296296335) + zz.imag**5 / (5! * -8790070106670411860516631617597784469283665360764196087903541747878139252837601030889620170692.99897119341563786008227763681413772356) - zz.imag**7 / (7! * -332345095699865976411255960768460840014021362751173027875959895983007197752867335218888449478051807322553084159605765773014295401807.340660722450845907636032) + (log(1 - 3/(2*a))**9 * zz.imag**9) / 9!
sin(log(1 - 1/(2*a)) * zz.imag)

for x > a:
sin(log(1 + 1/(2*a)) * zz.imag)
sin(log(1 + 3/(2*a)) * zz.imag) = (log(1 + 3/(2*a)) * zz.imag - (log(1 + 3/(2*a))**3 * zz.imag**3) / 3! + (log(1 + 3/(2*a))**5 * zz.imag**5) / 5! - (log(1 + 3/(2*a))**7 * zz.imag**7) / 7! + (log(1 + 3/(2*a))**9 * zz.imag**9) / 9!
                                2 * a = 18446744073709551617
                                a = 18446744073709551617 / 2
                                mpmath.fdiv(1, mpmath.log(1 + mpmath.fdiv(3, mpmath.power(2, 64) + 1)))
                                mpmath.fdiv(1, mpmath.power(mpmath.log(1 + mpmath.fdiv(3, mpmath.power(2, 64) + 1)), 3))
                                mpmath.fdiv(1, mpmath.power(mpmath.log(1 + mpmath.fdiv(3, mpmath.power(2, 64) + 1)), 5))
                                mpmath.fdiv(1, mpmath.power(mpmath.log(1 + mpmath.fdiv(3, mpmath.power(2, 64) + 1)), 7))
                                = zz.imag / 6148914691236517206.16666666666666666665311 - zz.imag**3 / (3! * 232485249458765954310663228707952033051186528793277914832.96296296296296296296364) + zz.imag**5 / (5! * 8790070106670411867664291447061747151300911777445346144164064703777458513800356810007390949999.86625514403292181069956158743142167418) - zz.imag**7 / (7! * 332345095699865976789601699279793287991613593491479639829850623839326287286970297516492225188115610872693088009003692643113453175870.37399024538942234415408) + zz.imag**9 / (9! * 12565686199924022474326992808177392924563301485462560671228952866869975199198055088728407961834931490527705026030113938092856505211951126063075460558460495268916240479997.84741024705873814241441)


mpmath.mp.prec = 4096
a = mpmath.fdiv(18446744073709551617, 2)
sum1 = mpmath.fsum([mpmath.power(-1, mpmath.floor(i/2)) * mpmath.fdiv(mpmath.power(mpmath.log(1 + mpmath.fdiv(1, 2 * a)) * zz.imag, i), mpmath.factorial(i)) for i in range(1, 50 + 1, 2)])
sum2 = mpmath.fsum([mpmath.power(-1, mpmath.floor(i/2)) * mpmath.fdiv(mpmath.power(mpmath.log(1 - mpmath.fdiv(1, 2 * a)) * zz.imag, i), mpmath.factorial(i)) for i in range(1, 50 + 1, 2)])
mpmath.mp.prec = 256
mpmath.log(mpmath.fabs(mpmath.fdiv(1, sum1 + sum2)), a)
mpf('1.509565827711044349635466199565284044688458704715307592466433010945150390390113')

mpmath.mp.prec = 4096
a = mpmath.fdiv(18446744073709551617, 2)
sum1 = mpmath.fsum([mpmath.power(-1, mpmath.floor(i/2)) * mpmath.fdiv(mpmath.power(mpmath.log(1 + mpmath.fdiv(3, 2 * a)) * zz.imag, i), mpmath.factorial(i)) for i in range(1, 50 + 1, 2)])
sum2 = mpmath.fsum([mpmath.power(-1, mpmath.floor(i/2)) * mpmath.fdiv(mpmath.power(mpmath.log(1 - mpmath.fdiv(3, 2 * a)) * zz.imag, i), mpmath.factorial(i)) for i in range(1, 50 + 1, 2)])
mpmath.mp.prec = 256
mpmath.log(mpmath.fabs(mpmath.fdiv(1, sum1 + sum2)), a)
mpf('1.45924955784688066135263795190421133005404139809210467259834932346705886543745')

mpmath.mp.prec = 4096
a = mpmath.fdiv(18446744073709551617, 2)
sum1 = mpmath.fsum([mpmath.power(-1, mpmath.floor(i/2)) * mpmath.fdiv(mpmath.power(mpmath.log(1 + mpmath.fdiv(5, 2 * a)) * zz.imag, i), mpmath.factorial(i)) for i in range(1, 50 + 1, 2)])
sum2 = mpmath.fsum([mpmath.power(-1, mpmath.floor(i/2)) * mpmath.fdiv(mpmath.power(mpmath.log(1 - mpmath.fdiv(5, 2 * a)) * zz.imag, i), mpmath.factorial(i)) for i in range(1, 50 + 1, 2)])
mpmath.mp.prec = 256
mpmath.log(mpmath.fabs(mpmath.fdiv(1, sum1 + sum2)), a)
mpf('1.435853824698747132294533110835373627505502183345159994470104965237871799530469')

mpmath.mp.prec = 8192
a = mpmath.fdiv(18446744073709551617, 2)
sum1 = mpmath.fsum([mpmath.power(-1, mpmath.floor(i/2)) * mpmath.fdiv(mpmath.power(mpmath.log(1 + mpmath.fdiv(4611686018427387903, 2 * a)) * zz.imag, i), mpmath.factorial(i)) for i in range(1, 15625 + 1, 2)])
sum2 = mpmath.fsum([mpmath.power(-1, mpmath.floor(i/2)) * mpmath.fdiv(mpmath.power(mpmath.log(1 - mpmath.fdiv(4611686018427387903, 2 * a)) * zz.imag, i), mpmath.factorial(i)) for i in range(1, 15625 + 1, 2)])
mpmath.mp.prec = 256
mpmath.log(mpmath.fabs(mpmath.fdiv(1, sum1 + sum2)), a)
mpf('-1038.227819976656141851011469590195929927796323653908773314732636037945572969088')


zz = mpmath.zetazero(8)
mpmath.fsum([mpmath.sin((-1)**((n + 7)/2) * mpmath.log(1 + n/13) * zz.imag) for n in range(-7, 7 + 1, 2)])
mpmath.sin(mpmath.fsum([(-1)**((n + 7)/2) * mpmath.log(1 + n/13) * zz.imag for n in range(-7, 7 + 1, 2)]))
mpf('1.25508926606890820657')
mpf('0.645408248607131622627')

mpmath.fsum([mpmath.sin((-1)**((n + 13)/2) * mpmath.log(1 + n/25) * zz.imag) for n in range(-13, 13 + 1, 2)])
mpmath.sin(mpmath.fsum([(-1)**((n + 13)/2) * mpmath.log(1 + n/25) * zz.imag for n in range(-13, 13 + 1, 2)]))
mpf('-5.32889158564740216375')
mpf('-0.805307149700575751765')

mpmath.fsum([mpmath.sin((-1)**((n + 7)/2) * mpmath.log(1 + n/9) * zz.imag) for n in range(-7, 7 + 1, 2)])
mpmath.sin(mpmath.fsum([(-1)**((n + 7)/2) * mpmath.log(1 + n/9) * zz.imag for n in range(-7, 7 + 1, 2)]))
mpf('-1.62912307872364611739')
mpf('0.359024928588568143748')



def unique_factors(x):
    rslt = []
    for p in primesieve.primes(int(math.sqrt(x))):
        while x % p == 0:
            if p not in rslt:
                rslt.append(int(p))
            x /= p
            if x == 1:
                break
    if x != 1:
        rslt.append(int(x))
    return rslt



# 
# 1 = (9/2) * (2/9) = (9/2) * (9/9 - 7/9)
# 2 = (9/2) * (4/9) = (9/2) * (9/9 - 5/9)
# 
# 1 = (17/2) * (2/17) = (17/2) * (17/17 - 15/17)
# 2 = (17/2) * (4/17) = (17/2) * (17/17 - 13/17)
# 
# 1 = (33/2) * (2/33) = (33/2) * (33/33 - 31/33)
# 2 = (33/2) * (4/33) = (33/2) * (33/33 - 29/33)
# 
# 1 = (65/2) * (2/65) = (65/2) * (65/65 - 63/65)
# 2 = (65/2) * (4/65) = (65/2) * (65/65 - 61/65)
# 
# 

mpmath.mp.prec = 256
zz = mpmath.zetazero(8)
x, func = mpmath.mpf(9), lambda x: mpmath.fsum([mpmath.sin((-1)**((n + 7)/2) * mpmath.log(1 + n/x) * zz.imag) for n in range(-7, 7 + 1, 2)])
x, func = mpmath.mpf(17), lambda x: mpmath.fsum([mpmath.sin((-1)**((n + 15)/2) * mpmath.log(1 + n/x) * zz.imag) for n in range(-15, 15 + 1, 2)])
x, func = mpmath.mpf(33), lambda x: mpmath.fsum([mpmath.sin((-1)**((n + 31)/2) * mpmath.log(1 + n/x) * zz.imag) for n in range(-31, 31 + 1, 2)])
x, func = mpmath.mpf(65), lambda x: mpmath.fsum([mpmath.sin((-1)**((n + 63)/2) * mpmath.log(1 + n/x) * zz.imag) for n in range(-63, 63 + 1, 2)])
x, func = mpmath.mpf(129), lambda x: mpmath.fsum([mpmath.sin((-1)**((n + 127)/2) * mpmath.log(1 + n/x) * zz.imag) for n in range(-127, 127 + 1, 2)])

primes = {}
for i in range(3, 20 + 1):
    two = mpmath.power(2, i)
    x = two + 1
    func = lambda x: mpmath.fsum([mpmath.sin((-1)**((n + two - 1)/2) * mpmath.log(1 + n/x) * zz.imag) for n in range(-int(two - 1), int(two - 1) + 1, 2)])
    dx = mpmath.mpf(1/16)
    tol = mpmath.power(2, -mpmath.mp.prec)
    while abs(func(x)) > tol and dx >= tol:
        if abs(func(x + dx)) < abs(func(x)) and abs(func(x + dx)) < abs(func(x - dx)):
            x += dx
        elif abs(func(x - dx)) < abs(func(x)) and abs(func(x - dx)) < abs(func(x + dx)):
            x -= dx
        else:
            dx /= 2
    print("")
    print("mpf('" + str(x) + "')")
    fracs = []
    bfirst = True
    for fx in [float(mpmath.ceil(x) - x), float(x)]:
        frac1 = fractions.Fraction(fx)
        fracs.append(frac1)
        if not bfirst:
            print(str(frac1.numerator) + ", " + str(frac1.denominator))
            print("x * " + str(frac1.denominator))
            print("mpf('" + str(x * frac1.denominator) + "')")
        else:
            bfirst = False
    bfirst = True
    for fx in [float(mpmath.ceil(x * frac1.denominator) - x * frac1.denominator), float(mpmath.fmod(x * frac1.denominator, 1))]:
        frac2 = fractions.Fraction(fx)
        fracs.append(frac2)
        if not bfirst:
            print("fractions.Fraction(float(mpmath.fmod(x * " + str(frac1.denominator) + ", 1)))")
            print(str(frac2.numerator) + ", " + str(frac2.denominator))
            print("x * mpmath.fmul(" + str(frac1.denominator) + ", " + str(frac2.denominator) + ")")
            print("mpf('" + str(x * mpmath.fmul(frac1.denominator, frac2.denominator)) + "')")
        else:
            bfirst = False
    bfirst = True
    for fx in [float(mpmath.ceil(x * mpmath.fmul(frac1.denominator, frac2.denominator)) - x * mpmath.fmul(frac1.denominator, frac2.denominator)), float(mpmath.fmod(x * mpmath.fmul(frac1.denominator, frac2.denominator), 1))]:
        frac3 = fractions.Fraction(fx)
        fracs.append(frac3)
        if not bfirst:
            print("fractions.Fraction(float(mpmath.fmod(x * mpmath.fmul(" + str(frac1.denominator) + ", " + str(frac2.denominator) + "), 1)))")
            print(str(frac3.numerator) + ", " + str(frac3.denominator))
            print("x * mpmath.fmul(mpmath.fmul(" + str(frac1.denominator) + ", " + str(frac2.denominator) + "), " + str(frac3.denominator) + ")")
            print("mpf('" + str(x * mpmath.fmul(mpmath.fmul(frac1.denominator, frac2.denominator), frac3.denominator)) + "')")
        else:
            bfirst = False
    bfirst = True
    for fx in [float(mpmath.ceil(x * mpmath.fmul(mpmath.fmul(frac1.denominator, frac2.denominator), frac3.denominator)) - x * mpmath.fmul(mpmath.fmul(frac1.denominator, frac2.denominator), frac3.denominator)), float(mpmath.fmod(x * mpmath.fmul(mpmath.fmul(frac1.denominator, frac2.denominator), frac3.denominator), 1))]:
        frac4 = fractions.Fraction(fx)
        fracs.append(frac4)
        if not bfirst:
            print("fractions.Fraction(float(mpmath.fmod(x * mpmath.fmul(mpmath.fmul(" + str(frac1.denominator) + ", " + str(frac2.denominator) + "), " + str(frac3.denominator) + "), 1)))")
            print(str(frac4.numerator) + ", " + str(frac4.denominator))
        else:
            bfirst = False
    
    aryp = []
    for frac in fracs:
        if frac.numerator > 1:
            for p in unique_factors(frac.numerator):
                aryp.append(p)
                if p in primes:
                    primes[p] += 1
                else:
                    primes[p] = 1
    
    print("factors " + str(sorted(aryp)))
    print("")


for p in sorted(primes.keys()):
    bprinted = False
    for i in [-3, -1, 1, 3]:
        if math.log(p + i, 2) % 1 == 0:
            bprinted = True
            print("primes[" + str(p) + "], " + str(primes[p]) + ", 2^" + str(int(math.log(p + i, 2))) + (" - " if i > 0 else " + ") + str(abs(i)))
    if not bprinted:
        print("primes[" + str(p) + "], " + str(primes[p]))



mpf('8.878525737766071996466369110346710245763754373047026615665731746507875831085')
mpf('16.96912295157676774873552360623962033112189543893916070046683832058331449636513')
mpf('33.00648206158291674265539951449188465807374299932114128825557406742426221826293')
mpf('65.05785614156081320071290277097317076959276211162053593192997181028503351238847')
mpf('128.9804369967295244465745749032663395994640697777691764268305879352735195744007')
fractions.Fraction(float(x))
2499082825262665, 281474976710656
4776383487595329, 281474976710656
290328086549523, 8796093022208
572254954446595, 8796093022208
4538095687473085, 35184372088832

x * 281474976710656
x * 281474976710656
x * 8796093022208
x * 8796093022208
x * 35184372088832
mpf('2499082825262664.995517528990862785624587858580236793491247980813953288693412')
mpf('4776383487595328.904508644998659122846867471197783671448678794691833030207417282')
mpf('290328086549523.0165032873761025165776155256187666293801665597429950318698175851')
mpf('572254954446594.9472608808986348698553319916841118066757419665635069463252458957')
mpf('4538095687473084.550804851084776499545352830310994580280034029667241590221921214')
fractions.Fraction(float(mpmath.fmod(x * 281474976710656, 1)))
fractions.Fraction(float(mpmath.fmod(x * 281474976710656, 1)))
fractions.Fraction(float(mpmath.fmod(x * 8796093022208, 1)))
fractions.Fraction(float(mpmath.fmod(x * 8796093022208, 1)))
fractions.Fraction(float(mpmath.fmod(x * 35184372088832, 1)))
8966824745208093, 9007199254740992
8147089593138707, 9007199254740992
148648397754807, 9007199254740992
1066520937559435, 1125899906842624
2480604522099261, 4503599627370496

x * mpmath.fmul(281474976710656, 9007199254740992)
x * mpmath.fmul(281474976710656, 9007199254740992)
x * mpmath.fmul(35184372088832, 4503599627370496)
mpf('22509736961241888882534433130781.18033614708110690095198280769039911319850944')
mpf('43021837789825826715815142424082.95218144546356608959314370885710799702701309915')
mpf('20437766047075438455370217828924.98283832203014754452796708505957212764769792557')
fractions.Fraction(float(mpmath.fmod(x * mpmath.fmul(281474976710656, 9007199254740992), 1)))
fractions.Fraction(float(mpmath.fmod(x * mpmath.fmul(281474976710656, 9007199254740992), 1)))
fractions.Fraction(float(mpmath.fmod(x * mpmath.fmul(8796093022208, 9007199254740992), 1)))
fractions.Fraction(float(mpmath.fmod(x * mpmath.fmul(8796093022208, 1125899906842624), 1)))
fractions.Fraction(float(mpmath.fmod(x * mpmath.fmul(35184372088832, 4503599627370496), 1)))
387268927, 2147483648
8576488005957633, 9007199254740992
624365660536831, 72057594037927936
133419810536447, 140737488355328
33770067603, 34359738368


x * mpmath.fmul(mpmath.fmul(281474976710656, 9007199254740992), 2147483648)
x * mpmath.fmul(mpmath.fmul(281474976710656, 9007199254740992), 9007199254740992)
x * mpmath.fmul(mpmath.fmul(8796093022208, 9007199254740992), 72057594037927936)
x * mpmath.fmul(mpmath.fmul(8796093022208, 1125899906842624), 140737488355328)
x * mpmath.fmul(mpmath.fmul(35184372088832, 4503599627370496), 34359738368)
mpf('48339292045048166147875687945302030238014.9999999995343387126922607421875')
mpf('387506265278107032812182039833909012537939326976.9999999999417923390865325927734')
mpf('188433701466939487751722409155004430112807976958.99999237060546875')
mpf('90677417060975519826136693643991245721811967.00000381469726573602230246251555543')
mpf('702236294203905636885406729181031393023635.0000002384185791015625')
fractions.Fraction(float(mpmath.fmod(x * mpmath.fmul(mpmath.fmul(281474976710656, 9007199254740992), 2147483648), 1)))
fractions.Fraction(float(mpmath.fmod(x * mpmath.fmul(mpmath.fmul(281474976710656, 9007199254740992), 9007199254740992), 1)))
fractions.Fraction(float(mpmath.fmod(x * mpmath.fmul(mpmath.fmul(35184372088832, 4503599627370496), 34359738368), 1)))
2147483647, 2147483648
17179869183, 17179869184
1, 4194304


A sin(xt + a) + B sin(xt + b) = sqrt([A cos(a) + B cos(b)]^2
                                + [A sin(a) + B sin(b)]^2)
                              * sin(xt + arctan[(A sin(a) + B sin(b)) / (A cos(a) + B cos(b))])
                                
                              = sqrt[A^2 cos^2(a) + 2 A B cos(a) cos(b) + B^2 cos^2(b)
                                   + A^2 sin^2(a) + 2 A B sin(a) sin(b) + B^2 sin^2(b)]
                              * sin(xt + arctan[(A sin(a) + B sin(b)) / (A cos(a) + B cos(b))])
                              
                              = sqrt[A^2 + B^2 + 2 A B cos(a) cos(b) + 2 A B sin(a) sin(b)]
                              * sin(xt + arctan[(A sin(a) + B sin(b)) / (A cos(a) + B cos(b))])
                              
                              = sqrt[A^2 + B^2 + 2 A B cos(a) cos(b) + 2 A B sin(a) sin(b)]
                              * sin(pi/4 + arctan[(A sin(a) + B sin(b)) / (A cos(a) + B cos(b))])
                              
A sin(xt + a) + B sin(xt + b) = sqrt[A^2 + B^2 + 2 A B cos(a) cos(b) + 2 A B sin(a) sin(b)]
                              * sin(-pi/4 + arctan[(A sin(a) + B sin(b)) / (A cos(a) + B cos(b))])



(A sin(pi/4 + a) + B sin(pi/4 + b)) * (A sin(-pi/4 + a) + B sin(-pi/4 + b))
                              
                              = A^2 sin(pi/4 + a) sin(-pi/4 + a)
                              + A B sin(pi/4 + a) sin(-pi/4 + b)
                              + A B sin(pi/4 + b) sin(-pi/4 + a)
                              + B^2 sin(pi/4 + b) sin(-pi/4 + b)

(A sin(pi/4 + a) + B sin(pi/4 + b)) * (A sin(-pi/4 + a) + B sin(-pi/4 + b))
                              
                              = sqrt[A^2 + B^2 + 2 A B cos(a) cos(b) + 2 A B sin(a) sin(b)]
                              * sin(pi/4 + arctan[(A sin(a) + B sin(b)) / (A cos(a) + B cos(b))])
                              * sqrt[A^2 + B^2 + 2 A B cos(a) cos(b) + 2 A B sin(a) sin(b)]
                              * sin(-pi/4 + arctan[(A sin(a) + B sin(b)) / (A cos(a) + B cos(b))])
                              
                              = [A^2 + B^2 + 2 A B cos(a) cos(b) + 2 A B sin(a) sin(b)]
                              * sin(pi/4 + arctan[(A sin(a) + B sin(b)) / (A cos(a) + B cos(b))])
                              * sin(-pi/4 + arctan[(A sin(a) + B sin(b)) / (A cos(a) + B cos(b))])


e^ix = cos(x) + i sin(x)

e^(a + bi) = e^a cos(x) + i e^a sin(x)

           = e^a (e^bi + e^-bi) / 2 + i e^a (e^bi - e^-bi) / 2i


choose x 100.5, 1/100^(a+bi) - 1/101^(a+bi)

              = 100^(-a-bi) - 101^(-a-bi)
 
              = e^(-ln(100) a) e^(-ln(100) b i) - e^(-ln(101) a) e^(-ln(101) b i)
 
              = e^(-ln(100) a) [cos(-ln(100) b) + i sin(-ln(100) b)]
              - e^(-ln(101) a) [cos(-ln(101) b) + i sin(-ln(101) b)]

for x = 100.5,  (x-1/2)^(-a) sqrt(2) sin(-ln(x-1/2) b + pi/4)
              - (x+1/2)^(-a) sqrt(2) sin(-ln(x+1/2) b + pi/4)
              
              = sqrt(2) sqrt([(x+1/2)^(-a) sin(-ln(x+1/2)) + (x+3/2)^-a cos(-ln(x+3/2) b)]^2
                           + [(x+1/2)^(-a) cos(-ln(x+1/2)) + (x+3/2)^-a sin(-ln(x+3/2) b)]^2)
                        * sin(arctan[((x+1/2)^-a sin(x+1/2) + (x+3/2)^-a sin(x+3/2))
                                    / (x+1/2)^-a cos(x+1/2) + (x+3/2)^-a cos(x+3/2))])
              
              = sqrt(2) sqrt([(x+1/2)^(-2a)
                            + 2*(x^2+2x+3/4)^-a cos(-ln(x+1/2) b) cos(-ln(x+3/2) b)
                            + 2*(x^2+2x+3/4)^-a sin(-ln(x+1/2) b) sin(-ln(x+3/2) b)
                            + (x+3/2)^(-2a)]
                      * sin(arctan[((x+1/2)^-a sin(x+1/2) + (x+3/2)^-a sin(x+3/2))
                                    / (x+1/2)^-a cos(x+1/2) + (x+3/2)^-a cos(x+3/2))])

              = sqrt(2) sqrt([(x^2+x+1/4)^(-a)
                            + 2*(x^2+2x+3/4)^-a cos(-ln(x+1/2) b) cos(-ln(x+3/2) b)
                            + 2*(x^2+2x+3/4)^-a sin(-ln(x+1/2) b) sin(-ln(x+3/2) b)
                            + (x^2+3x+9/4)^(-a)]
                      * sin(arctan[((x+1/2)^-a sin(x+1/2) + (x+3/2)^-a sin(x+3/2))
                                  / (x+1/2)^-a cos(x+1/2) + (x+3/2)^-a cos(x+3/2))])


A sin(xt + a) + B sin(xt + b) = sqrt[A^2 + B^2 + 2 A B cos(a) cos(b) + 2 A B sin(a) sin(b)]
                              * sin(xt + arctan[(A sin(a) + B sin(b)) / (A cos(a) + B cos(b))])




term = {}
xadd = {}
xsub = {}
A = {}
B = {}
alpha = {}
beta = {}

x = 109 + 1/2

term[(110, 111)] = mpmath.power(x + 1/2, -mpmath.mpc(0.5, 14.1347)) - mpmath.power(x + 3/2, -mpmath.mpc(0.5, 14.1347))
mpc(real='-0.00652224124262358174699', imag='-0.0102724860486698258306')
term[(110, 111)].real + term[(110, 111)].imag
term[(110, 111)].real - term[(110, 111)].imag
mpf('-0.0167947272912934075776')
mpf('0.00375024480604624408357')

A sin(X) + A cos(x) = sqrt(2) A sin(x + pi/4)
A sin(X) - A cos(x) = sqrt(2) A -sin(x - pi/4)

xadd[110] = mpmath.sqrt(mpmath.power(mpmath.power(x + 1/2, -0.5), 2) + mpmath.power(mpmath.power(x + 1/2, -0.5), 2)) * mpmath.sin(-mpmath.log(x + 1/2) * 14.1347 + mpmath.pi()/4)
          = mpmath.sqrt(2) * mpmath.power(x + 1/2, -0.5) * mpmath.sin(-mpmath.log(x + 1/2) * 14.1347 + mpmath.pi()/4)
          = mpmath.sqrt(2) * mpmath.power(x + 1/2, -0.5) * mpmath.sin(-mpmath.log(x + 1/2) * 14.1347 + mpmath.pi()/4)
          = mpf('-0.042283528940307033995')
xsub[110] = mpmath.sqrt(2) * mpmath.power(x + 1/2, -0.5)  * mpmath.sin(mpmath.log(x + 1/2) * 14.1347 + mpmath.pi()/4)
          = mpf('-0.128038749455672204599')

xadd[111] = mpmath.sqrt(2) * mpmath.power(x + 3/2, -0.5)  * mpmath.sin(-mpmath.log(x + 3/2) * 14.1347 + mpmath.pi()/4)
          = mpf('-0.0254888016490136265056')
xsub[111] = mpmath.sqrt(2) * mpmath.power(x + 3/2, -0.5)  * mpmath.sin(mpmath.log(x + 3/2) * 14.1347 + mpmath.pi()/4)
          = mpf('-0.131788994261718448743')

A[(110, 111)], alpha[(110, 111, 1)] = mpmath.power(x+1/2, -0.5), -mpmath.log(x+1/2) * 14.1347 + mpmath.pi()/4
B[(110, 111)], beta[(110, 111, 1)] = mpmath.power(x+3/2, -0.5), mpmath.log(x+3/2) * 14.1347 - mpmath.pi()/4
mpmath.sqrt(2) * mpmath.sqrt((A * mpmath.cos(alpha) + B * mpmath.cos(beta))**2 + (A * mpmath.sin(alpha) + B * mpmath.sin(beta))**2) * mpmath.sin(-mpmath.atan((A * mpmath.sin(alpha) + B * mpmath.sin(beta))/(A * mpmath.cos(alpha) + B * mpmath.cos(beta))))
mpf('-0.0167947272912934074878')

A[(110, 111)], alpha[(110, 111, 2)] = mpmath.power(x+1/2, -0.5), mpmath.log(x+1/2) * 14.1347 + mpmath.pi()/4
B[(110, 111)], beta[(110, 111, 2)] = mpmath.power(x+3/2, -0.5), -mpmath.log(x+3/2) * 14.1347 - mpmath.pi()/4
mpmath.sqrt(2) * mpmath.sqrt((A[(110, 111)] * mpmath.cos(alpha[(110, 111, 2)]) + B[(110, 111)] * mpmath.cos(beta[(110, 111, 2)]))**2 + (A[(110, 111)] * mpmath.sin(alpha[(110, 111, 2)]) + B[(110, 111)] * mpmath.sin(beta[(110, 111, 2)]))**2) * mpmath.sin(-mpmath.atan((A[(110, 111)] * mpmath.sin(alpha[(110, 111, 2)]) + B[(110, 111)] * mpmath.sin(beta[(110, 111, 2)]))/(A[(110, 111)] * mpmath.cos(alpha[(110, 111, 2)]) + B[(110, 111)] * mpmath.cos(beta[(110, 111, 2)]))))
mpf('0.00375024480604624415112')

xadd[110] - xadd[111]
xsub[110] - xsub[111]
xadd[110] - xadd[111] + xsub[110] - xsub[111]
mpf('-0.0167947272912934074895')
mpf('0.00375024480604624414455')
mpf('-0.0130444824852471633449')

term[(108, 109)] = mpmath.power(x-3/2, -mpmath.mpc(0.5, 14.1347)) - mpmath.power(x-1/2, -mpmath.mpc(0.5, 14.1347))
mpc(real='-0.00378547243216870864826', imag='-0.011919132321702278508')
term[(108, 109)].real + term[(108, 109)].imag
term[(108, 109)].real - term[(108, 109)].imag
mpf('-0.0157046047538709871562')
mpf('0.0081336598895335698597')

A sin(X) + A cos(x) = sqrt(2) A sin(x + pi/4)
A sin(X) - A cos(x) = sqrt(2) A -sin(x - pi/4)

xadd[108] = mpmath.sqrt(2) * mpmath.power(x - 3/2, -0.5) * mpmath.sin(-mpmath.log(x - 3/2) * 14.1347 + mpmath.pi()/4)
          = mpf('-0.0794825731971005104264')
xsub[108] = mpmath.sqrt(2) * mpmath.power(x - 3/2, -0.5)  * mpmath.sin(mpmath.log(x - 3/2) * 14.1347 + mpmath.pi()/4)
          = mpf('-0.110458313749966679268')

xadd[109] = mpmath.sqrt(2) * mpmath.power(x-1/2, -0.5)  * mpmath.sin(-mpmath.log(x-1/2) * 14.1347 + mpmath.pi()/4)
          = mpf('-0.064174104235618085863')
xsub[109] = mpmath.sqrt(2) * mpmath.power(x-1/2, -0.5)  * mpmath.sin(mpmath.log(x - 1/2) * 14.1347 + mpmath.pi()/4)
          = mpf('-0.119290855470010918765')

A[(108, 109)], alpha[(108, 109, 1)] = mpmath.power(x-3/2, -0.5), -mpmath.log(x-3/2) * 14.1347 + mpmath.pi()/4
B[(108, 109)], beta[(108, 109, 1)] = mpmath.power(x-1/2, -0.5), mpmath.log(x-1/2) * 14.1347 - mpmath.pi()/4
mpmath.sqrt(2) * mpmath.sqrt((A[(108, 109)] * mpmath.cos(alpha[(108, 109, 1)]) + B[(108, 109)] * mpmath.cos(beta[(108, 109, 1)]))**2 + (A[(108, 109)] * mpmath.sin(alpha[(108, 109, 1)]) + B[(108, 109)] * mpmath.sin(beta[(108, 109, 1)]))**2) * mpmath.sin(-mpmath.atan((A[(108, 109)] * mpmath.sin(alpha[(108, 109, 1)]) + B[(108, 109)] * mpmath.sin(beta[(108, 109, 1)]))/(A[(108, 109)] * mpmath.cos(alpha[(108, 109, 1)]) + B[(108, 109)] * mpmath.cos(beta[(108, 109, 1)]))))
mpf('-0.0157046047538709881032')

A[(108, 109)], alpha[(108, 109, 2)] = mpmath.power(x-3/2, -0.5), mpmath.log(x-3/2) * 14.1347 + mpmath.pi()/4
B[(108, 109)], beta[(108, 109, 2)] = mpmath.power(x-1/2, -0.5), -mpmath.log(x-1/2) * 14.1347 - mpmath.pi()/4
mpmath.sqrt(2) * mpmath.sqrt((A[(108, 109)] * mpmath.cos(alpha[(108, 109, 2)]) + B[(108, 109)] * mpmath.cos(beta[(108, 109, 2)]))**2 + (A[(108, 109)] * mpmath.sin(alpha[(108, 109, 2)]) + B[(108, 109)] * mpmath.sin(beta[(108, 109, 2)]))**2) * mpmath.sin(-mpmath.atan((A[(108, 109)] * mpmath.sin(alpha[(108, 109, 2)]) + B[(108, 109)] * mpmath.sin(beta[(108, 109, 2)]))/(A[(108, 109)] * mpmath.cos(alpha[(108, 109, 2)]) + B[(108, 109)] * mpmath.cos(beta[(108, 109, 2)]))))
mpf('0.00813365988953357043991')

xadd[108] - xadd[109]
xsub[108] - xsub[109]
xadd[108] - xadd[109] + xsub[108] - xsub[109]
mpf('-0.0157046047538709880981')
mpf('0.00813365988953357043907')
mpf('-0.00757094486433741766245')



mpmath.sqrt(2) *  * mpmath.sin(-mpmath.atan((A[(110, 111)] * mpmath.sin(alpha[(110, 111, 2)]) + B[(110, 111)] * mpmath.sin(beta[(110, 111, 2)]))/(A[(110, 111)] * mpmath.cos(alpha[(110, 111, 2)]) + B[(110, 111)] * mpmath.cos(beta[(110, 111, 2)]))))
mpmath.sqrt(2) *  * mpmath.sin()

A[(108, 111)] = mpmath.sqrt((A[(108, 109)] * mpmath.cos(alpha[(108, 109, 1)]) + B[(108, 109)] * mpmath.cos(beta[(108, 109, 1)]))**2 + (A[(108, 109)] * mpmath.sin(alpha[(108, 109, 1)]) + B[(108, 109)] * mpmath.sin(beta[(108, 109, 1)]))**2)
alpha[(108, 111)] = -mpmath.atan((A[(108, 109)] * mpmath.sin(alpha[(108, 109, 1)]) + B[(108, 109)] * mpmath.sin(beta[(108, 109, 1)]))/(A[(108, 109)] * mpmath.cos(alpha[(108, 109, 1)]) + B[(108, 109)] * mpmath.cos(beta[(108, 109, 1)])))
B[(108, 111)] = mpmath.sqrt((A[(110, 111)] * mpmath.cos(alpha[(110, 111, 1)]) + B[(110, 111)] * mpmath.cos(beta[(110, 111, 1)]))**2 + (A[(110, 111)] * mpmath.sin(alpha[(110, 111, 1)]) + B[(110, 111)] * mpmath.sin(beta[(110, 111, 1)]))**2)
beta[(108, 111)] = -mpmath.atan((A[(110, 111)] * mpmath.sin(alpha[(110, 111, 1)]) + B[(110, 111)] * mpmath.sin(beta[(110, 111, 1)]))/(A[(110, 111)] * mpmath.cos(alpha[(110, 111, 1)]) + B[(110, 111)] * mpmath.cos(beta[(110, 111, 1)])))


mpmath.sqrt(2) * mpmath.sqrt((A * mpmath.cos(alpha) + B * mpmath.cos(beta))**2 + (A * mpmath.sin(alpha) + B * mpmath.sin(beta))**2) * mpmath.sin(-mpmath.atan((A * mpmath.sin(alpha) + B * mpmath.sin(beta))/(A * mpmath.cos(alpha) + B * mpmath.cos(beta))))
mpf('-0.0167947272912934074878')

A, alpha = mpmath.power(x+1/2, -0.5), mpmath.log(x+1/2) * 14.1347 + mpmath.pi()/4
B, beta = mpmath.power(x+3/2, -0.5), -mpmath.log(x+3/2) * 14.1347 - mpmath.pi()/4
mpmath.sqrt(2) * mpmath.sqrt((A * mpmath.cos(alpha) + B * mpmath.cos(beta))**2 + (A * mpmath.sin(alpha) + B * mpmath.sin(beta))**2) * mpmath.sin(-mpmath.atan((A * mpmath.sin(alpha) + B * mpmath.sin(beta))/(A * mpmath.cos(alpha) + B * mpmath.cos(beta))))
mpf('0.00375024480604624415112')




   sqrt(2) * (x - 3/2)^-0.5 * sin(-log(x - 3/2) * 14.1347 + pi/4)
 - sqrt(2) * (x - 1/2)^-0.5 * sin(-log(x - 1/2) * 14.1347 + pi/4)

 = sqrt(2) * (x - 3/2)^-0.5 * sin(-log(x - 3/2) * 14.1347 + pi/4)
 + sqrt(2) * (x - 1/2)^-0.5 * sin(log(x - 1/2) * 14.1347 - pi/4)
 
 = sqrt(2) * sqrt([(x - 3/2)^-0.5 * cos(-log(x - 3/2) * 14.1347)
                 + (x - 1/2)^-0.5 * cos(log(x - 1/2) * 14.1347)]^2
                + [(x - 3/2)^-0.5 * sin(-log(x - 3/2) * 14.1347)
                 + (x - 1/2)^-0.5 * sin(log(x - 1/2) * 14.1347)]^2)
           * sin(pi/4 + atan[((x - 3/2)^-0.5 * sin(-log(x - 3/2) * 14.1347)
                            + (x - 1/2)^-0.5 * sin(log(x - 1/2) * 14.1347))
                           / ((x - 3/2)^-0.5 * cos(-log(x - 3/2) * 14.1347)
                            + (x - 1/2)^-0.5 * cos(log(x - 1/2) * 14.1347))])

mpmath.sqrt(2) * mpmath.sqrt((mpmath.power(x-3/2, -0.5) * mpmath.cos(-mpmath.log(x-3/2) * 14.1347) + mpmath.power(x-1/2, -0.5) * mpmath.cos(-mpmath.log(x-1/2) * 14.1347))**2 + (mpmath.power(x-3/2, -0.5) * mpmath.sin(-mpmath.log(x-3/2) * 14.1347) + mpmath.power(x-1/2, -0.5) * mpmath.sin(-mpmath.log(x-1/2) * 14.1347))**2) * mpmath.sin(mpmath.pi()/4 + mpmath.atan((mpmath.power(x-3/2, -0.5) * mpmath.sin(-mpmath.log(x-3/2) * 14.1347) + mpmath.power(x-1/2, -0.5) * mpmath.sin(-mpmath.log(x-1/2) * 14.1347))/(mpmath.power(x-3/2, -0.5) * mpmath.cos(-mpmath.log(x-3/2) * 14.1347) + mpmath.power(x-1/2, -0.5) * mpmath.cos(-mpmath.log(x-1/2) * 14.1347))))

A, alpha = mpmath.power(x-3/2, -0.5), -mpmath.log(x-3/2) * 14.1347 + mpmath.pi()/4
B, beta = mpmath.power(x-1/2, -0.5), mpmath.log(x-1/2) * 14.1347 - mpmath.pi()/4
mpmath.sqrt(2) * mpmath.sqrt((A * mpmath.cos(alpha) + B * mpmath.cos(beta))**2 + (A * mpmath.sin(alpha) + B * mpmath.sin(beta))**2) * mpmath.sin(-mpmath.atan((A * mpmath.sin(alpha) + B * mpmath.sin(beta))/(A * mpmath.cos(alpha) + B * mpmath.cos(beta))))
mpmath.sqrt(2) * mpmath.sqrt((mpmath.power(x-3/2, -0.5) * mpmath.cos(alpha) + mpmath.power(x-1/2, -0.5) * mpmath.cos(beta))**2 + (mpmath.power(x-3/2, -0.5) * mpmath.sin(alpha) + mpmath.power(x-1/2, -0.5) * mpmath.sin(beta))**2) * mpmath.sin(-mpmath.atan((mpmath.power(x-3/2, -0.5) * mpmath.sin(alpha) + mpmath.power(x-1/2, -0.5) * mpmath.sin(beta))/(mpmath.power(x-3/2, -0.5) * mpmath.cos(alpha) + mpmath.power(x-1/2, -0.5) * mpmath.cos(beta))))

xadd[108] - xadd[109]
xsub[108] - xsub[109]
xadd[108] - xadd[109] + xsub[108] - xsub[109]
mpf('-0.0153084689614824245635')
mpf('0.00883254172004423949755')
mpf('-0.00647592724143818506593')





term[(108, 111)] = term[(108, 109)] + term[(110, 111)]
mpc(real='-0.00928087244571365538391', imag='-0.0226224831223486059849')

A sin(X) + B sin(x) = sqrt(A^2 + B^2) sin(x + pi/4)
A sin(X) + B sin(x) = sqrt(A^2 + B^2) -sin(x - pi/4)

sqrt(2) * (x - 3/2)^-0.5 * sin(-log(x - 3/2) * 14.1347 + .pi/4) + sqrt(2) * (x - 3/2)^-0.5 * sin(-log(x - 3/2) * 14.1347 + .pi/4)


x + 1/2 + 3/2 = 110, 111
x - 1/2 - 3/2 = 108, 109

A = sqrt(2) sqrt([(x*2+x+1/4)^(-a)
                + 2*(x^2+2x+3/4)^(-a) cos(-ln(x+1/2) b) cos(-ln(x+3/2) b)
                + 2*(x^2+2x+3/4)^(-a) sin(-ln(x+1/2) b) sin(-ln(x+3/2) b)
                + (x^2+3x+9/4)^(-a)]

B = sqrt(2) sqrt([(x^2-x+1/4)^(-a)
                + 2*(x^2-2x+3/4)^(-a) cos(-ln(x-1/2) b) cos(-ln(x-3/2) b)
                + 2*(x^2-2x+3/4)^(-a) sin(-ln(x-1/2) b) sin(-ln(x-3/2) b)
                + (x^2+3x+9/4)^(-a)]

sin(xt + a) = sin(arctan[((x+1/2)^-a sin(x+1/2) + (x+3/2)^-a sin(x+3/2))
                        / (x+1/2)^-a cos(x+1/2) + (x+3/2)^-a cos(x+3/2))])

sin(xt + b) = sin(arctan[((x-1/2)^-a sin(x-1/2) + (x-3/2)^-a sin(x-3/2))
                        / (x-1/2)^-a cos(x-1/2) + (x-3/2)^-a cos(x-3/2))])
            
            sqrt[A^2 + B^2 + 2 A B cos(a) cos(b) + 2 A B sin(a) sin(b)]
            * sin(xt + arctan[(A sin(a) + B sin(b)) / (A cos(a) + B cos(b))])
            = 
            sqrt(2 * [(x*2+x+1/4)^(-a)
                  + 2*(x^2+2x+3/4)^(-a) cos(-ln(x+1/2) b) cos(-ln(x+3/2) b)
                  + 2*(x^2+2x+3/4)^(-a) sin(-ln(x+1/2) b) sin(-ln(x+3/2) b)
                    + (x^2+3x+9/4)^(-a)]
               + 2 * [(x^2-x+1/4)^(-a)
                  + 2*(x^2-2x+3/4)^(-a) cos(-ln(x-1/2) b) cos(-ln(x-3/2) b)
                  + 2*(x^2-2x+3/4)^(-a) sin(-ln(x-1/2) b) sin(-ln(x-3/2) b)
                    + (x^2-3x+9/4)^(-a)]
            * sin(arctan[(sqrt(2) sqrt([(x*2+x+1/4)^(-a)
                        + 2*(x^2+2x+3/4)^(-a) cos(-ln(x+1/2) b) cos(-ln(x+3/2) b)
                        + 2*(x^2+2x+3/4)^(-a) sin(-ln(x+1/2) b) sin(-ln(x+3/2) b)
                        + (x^2+3x+9/4)^(-a)] * sin(arctan[((x+1/2)^-a sin(x+1/2) + (x+3/2)^-a sin(x+3/2))
                                                         / (x+1/2)^-a cos(x+1/2) + (x+3/2)^-a cos(x+3/2))])
                        + sqrt(2) sqrt([(x^2-x+1/4)^(-a)
                        + 2*(x^2-2x+3/4)^(-a) cos(-ln(x-1/2) b) cos(-ln(x-3/2) b)
                        + 2*(x^2-2x+3/4)^(-a) sin(-ln(x-1/2) b) sin(-ln(x-3/2) b)
                        + (x^2+3x+9/4)^(-a)] * sin(arctan[((x-1/2)^-a sin(x-1/2) + (x-3/2)^-a sin(x-3/2))
                                                         / (x-1/2)^-a cos(x-1/2) + (x-3/2)^-a cos(x-3/2))))
                  / ((sqrt(2) sqrt([(x*2+x+1/4)^(-a)
                        + 2*(x^2+2x+3/4)^(-a) cos(-ln(x+1/2) b) cos(-ln(x+3/2) b)
                        + 2*(x^2+2x+3/4)^(-a) sin(-ln(x+1/2) b) sin(-ln(x+3/2) b)
                        + (x^2+3x+9/4)^(-a)] * cos(arctan[((x+1/2)^-a sin(x+1/2) + (x+3/2)^-a sin(x+3/2))
                                                         / (x+1/2)^-a cos(x+1/2) + (x+3/2)^-a cos(x+3/2))])
                    + sqrt(2) sqrt([(x^2-x+1/4)^(-a)
                        + 2*(x^2-2x+3/4)^(-a) cos(-ln(x-1/2) b) cos(-ln(x-3/2) b)
                        + 2*(x^2-2x+3/4)^(-a) sin(-ln(x-1/2) b) sin(-ln(x-3/2) b)
                        + (x^2+3x+9/4)^(-a)] * cos(arctan[((x-1/2)^-a sin(x-1/2) + (x-3/2)^-a sin(x-3/2))
                                                         / (x-1/2)^-a cos(x-1/2) + (x-3/2)^-a cos(x-3/2))))


cos(-ln(x+1/2) b) cos(-ln(x+3/2) b) = 

sin(-ln(x+1/2) b) sin(-ln(x+3/2) b) = (e^(i -ln(x+1/2) b) - e^(i ln(x+1/2) b)) / (2 i)  
                                    * (e^(i -ln(x+3/2) b) - e^(i ln(x+3/2) b)) / (2 i)
                                    
                                    = (e^(i -ln(x+1/2) b + i -ln(x+3/2) b)
                                     - e^(i -ln(x+1/2) b + i ln(x+3/2) b)
                                     - e^(i ln(x+1/2) b + i -ln(x+3/2) b)
                                     + e^(i ln(x+1/2) b + i ln(x+3/2) b) / -4
                                    
                                    = (e^(-i (ln(x+1/2) + ln(x+3/2)) b)
                                     - e^(i (ln(x+3/2) - ln(x+1/2)) b)
                                     - e^(i (ln(x+1/2) - ln(x+3/2)) b)
                                     + e^(i (ln(x+1/2) + ln(x+3/2)) b) / -4
                                    
                                    = (e^(-i (ln(x+1/2) + ln(x+3/2)) b)
                                     - e^(i (ln(x+3/2) - ln(x+1/2)) b)
                                     - e^(-i (ln(x+3/2) - ln(x+1/2)) b)
                                     + e^(i (ln(x+1/2) + ln(x+3/2)) b) / -4
                                    
                                    = (e^(-i (ln(a) + (x+1/2-a)/a - (x+1/2-a)^2/2a^2 + (x+1/2-a)^3/3a^3 - (x+1/2-a)^4/4a^4
                                           + ln(a) + (x+3/2-a)/a - (x+3/2-a)^2/2a^2 + (x+3/2-a)^3/3a^3 - (x+3/2-a)^4/4a^4) b)
                                     - e^(i (ln(a) + (x+3/2-a)/a - (x+3/2-a)^2/2a^2 + (x+3/2-a)^3/3a^3 - (x+3/2-a)^4/4a^4
                                           - ln(a) - (x+1/2-a)/a + (x+1/2-a)^2/2a^2 - (x+1/2-a)^3/3a^3 + (x+1/2-a)^4/4a^4) b)
                                     - e^(-i ((ln(a) + (x+3/2-a)/a - (x+3/2-a)^2/2a^2 + (x+3/2-a)^3/3a^3 - (x+3/2-a)^4/4a^4
                                           - ln(a) - (x+1/2-a)/a + (x+1/2-a)^2/2a^2 - (x+1/2-a)^3/3a^3 + (x+1/2-a)^4/4a^4)) b)
                                     + e^(i (ln(a) + (x+1/2-a)/a - (x+1/2-a)^2/2a^2 + (x+1/2-a)^3/3a^3 - (x+1/2-a)^4/4a^4
                                           + ln(a) + (x+3/2-a)/a - (x+3/2-a)^2/2a^2 + (x+3/2-a)^3/3a^3 - (x+3/2-a)^4/4a^4) b)
                                     / -4
                                    
                                    = (e^(-i (ln(x) + (1/2)/x - (1/2)^2/2x^2 + (1/2)^3/3x^3 - (1/2)^4/4x^4
                                           + ln(x) + (3/2)/x - (3/2)^2/2x^2 + (3/2)^3/3x^3 - (3/2)^4/4x^4) b)
                                     - e^(i (ln(x) + (3/2)/x - (3/2)^2/2x^2 + (3/2)^3/3x^3 - (3/2)^4/4x^4
                                           - ln(x) - (1/2)/x + (1/2)^2/2x^2 - (1/2)^3/3x^3 + (1/2)^4/4x^4) b)
                                     - e^(-i ((ln(x) + (3/2)/x - (3/2)^2/2x^2 + (3/2)^3/3x^3 - (3/2)^4/4x^4
                                           - ln(x) - (1/2)/x + (1/2)^2/2x^2 - (1/2)^3/3x^3 + (1/2)^4/4x^4)) b)
                                     + e^(i (ln(x) + (1/2)/x - (1/2)^2/2x^2 + (1/2)^3/3x^3 - (1/2)^4/4x^4
                                           + ln(x) + (3/2)/x - (3/2)^2/2x^2 + (3/2)^3/3x^3 - (3/2)^4/4x^4) b)
                                     / -4
                                    
                                    = (e^(-i (2*ln(x) + 2/x - (10/4)/2x^2 + (28/8)/3x^3 - (82/16)/4x^4) b)
                                     - e^(i (1/x - 2/2x^2 + (26/8)/3x^3 - (80/16)/4x^4) b)
                                     - e^(-i (1/x - (8/4)/2x^2 + (26/8)/3x^3 - (80/16)/4x^4) b)
                                     + e^(i (2 * ln(x) + 2/x - (10/4)/2x^2 + (28/8)/3x^3 - (82/16)/4x^4) b)
                                     / -4
                                    
                                    = (e^(-i (2*ln(x) + 2/x - 10/8x^2 + 28/24x^3 - 82/64x^4) b)
                                     - e^(i (1/x - 1/x^2 + 26/24x^3 - 80/64x^4) b)
                                     - e^(-i (1/x - 1/2x^2 + 26/24x^3 - 80/64x^4) b)
                                     + e^(i (2*ln(x) + 2/x - 10/8x^2 + 28/24x^3 - 82/64x^4) b)
                                     / -4


            = 
            sqrt(2 * [(x*2+x+1/4)^(-a)
                  + 2*(x^2+2x+3/4)^(-a) cos(-ln(x+1/2) b) cos(-ln(x+3/2) b)
                  + 2*(x^2+2x+3/4)^(-a) sin(-ln(x+1/2) b) sin(-ln(x+3/2) b)
                    + (x^2+3x+9/4)^(-a)]
               + 2 * [(x^2-x+1/4)^(-a)
                  + 2*(x^2-2x+3/4)^(-a) cos(-ln(x-1/2) b) cos(-ln(x-3/2) b)
                  + 2*(x^2-2x+3/4)^(-a) sin(-ln(x-1/2) b) sin(-ln(x-3/2) b)
                    + (x^2-3x+9/4)^(-a)]
            * sin(arctan[(sqrt([(x*2+x+1/4)^(-a)
                        + 2*(x^2+2x+3/4)^(-a) cos(-ln(x+1/2) b) cos(-ln(x+3/2) b)
                        + 2*(x^2+2x+3/4)^(-a) sin(-ln(x+1/2) b) sin(-ln(x+3/2) b)
                        + (x^2+3x+9/4)^(-a)] * sin(arctan[((x+1/2)^-a sin(x+1/2) + (x+3/2)^-a sin(x+3/2))
                                                         / (x+1/2)^-a cos(x+1/2) + (x+3/2)^-a cos(x+3/2))])
                        + sqrt([(x^2-x+1/4)^(-a)
                        + 2*(x^2-2x+3/4)^(-a) cos(-ln(x-1/2) b) cos(-ln(x-3/2) b)
                        + 2*(x^2-2x+3/4)^(-a) sin(-ln(x-1/2) b) sin(-ln(x-3/2) b)
                        + (x^2+3x+9/4)^(-a)] * sin(arctan[((x-1/2)^-a sin(x-1/2) + (x-3/2)^-a sin(x-3/2))
                                                         / (x-1/2)^-a cos(x-1/2) + (x-3/2)^-a cos(x-3/2))))
                  / ((sqrt([(x*2+x+1/4)^(-a)
                        + 2*(x^2+2x+3/4)^(-a) cos(-ln(x+1/2) b) cos(-ln(x+3/2) b)
                        + 2*(x^2+2x+3/4)^(-a) sin(-ln(x+1/2) b) sin(-ln(x+3/2) b)
                        + (x^2+3x+9/4)^(-a)] * cos(arctan[((x+1/2)^-a sin(x+1/2) + (x+3/2)^-a sin(x+3/2))
                                                         / (x+1/2)^-a cos(x+1/2) + (x+3/2)^-a cos(x+3/2))])
                    + sqrt([(x^2-x+1/4)^(-a)
                        + 2*(x^2-2x+3/4)^(-a) cos(-ln(x-1/2) b) cos(-ln(x-3/2) b)
                        + 2*(x^2-2x+3/4)^(-a) sin(-ln(x-1/2) b) sin(-ln(x-3/2) b)
                        + (x^2+3x+9/4)^(-a)] * cos(arctan[((x-1/2)^-a sin(x-1/2) + (x-3/2)^-a sin(x-3/2))
                                                         / (x-1/2)^-a cos(x-1/2) + (x-3/2)^-a cos(x-3/2))))



import math
import mpmath
import primesieve
import matplotlib.pyplot as plt
import pickle
import time
import os


mpmath.log(mpmath.mpf('1000004294967367'), 2)
it = primesieve.Iterator()

for i in range(0, 20):
    it.skipto(int(mpmath.floor(mpmath.power(2, 49.8289 + (52.15085 - 49.8289) * random.random()))))
    p1 = it.next_prime()
    it.skipto(int(mpmath.floor(mpmath.power(2, 53.15085 - (53.15085 - 52.15085) * random.random()))))
    p2 = it.next_prime()
    print("pary.append([mpmath.mpf('" + str(p1) + "'), mpmath.mpf('" + str(p2) + "')])")

for objstr in "distz3mod1, distz3mod2, distz1mod1, distz1mod2, distz2mod1, distz2mod2, distzd3mod1, distzd3mod2, distzd1mod1, distzd1mod2, distzd2mod1, distzd2mod2".split(", "):
    print("min(" + objstr + ") # " + str(min(eval(objstr))))

tol = 0.0009
idigits = 6
zz = mpmath.zetazero(2)
distz3mod1 = []
distz3mod2 = []
distz1mod1 = []
distz1mod2 = []
distz2mod1 = []
distz2mod2 = []
distzd3mod1 = []
distzd3mod2 = []
distzd1mod1 = []
distzd1mod2 = []
distzd2mod1 = []
distzd2mod2 = []
distzlog3mod1 = []
distzlog3mod2 = []
distzlog1mod1 = []
distzlog1mod2 = []
distzlog2mod1 = []
distzlog2mod2 = []
dicdist = {}
pary = []
pary.append([mpmath.mpf('1000004294967367'), mpmath.mpf('10000000004194309')])
pary.append([mpmath.mpf('1293319370881457'), mpmath.mpf('3184525836262943')])
pary.append([mpmath.mpf('1014717811895477'), mpmath.mpf('6325057419036089')])
pary.append([mpmath.mpf('2152616888721601'), mpmath.mpf('5867852253923339')])
pary.append([mpmath.mpf('1373743475582201'), mpmath.mpf('9015017069572961')])
pary.append([mpmath.mpf('1080541428403909'), mpmath.mpf('5879843342842223')])
pary.append([mpmath.mpf('4506901327164923'), mpmath.mpf('6594204355333433')])
pary.append([mpmath.mpf('1267685742386801'), mpmath.mpf('6770719924085501')])
pary.append([mpmath.mpf('1300720310786203'), mpmath.mpf('8763546558609083')])
pary.append([mpmath.mpf('1141172522650313'), mpmath.mpf('9652714134870641')])
pary.append([mpmath.mpf('1510496805088409'), mpmath.mpf('7030290302385673')])
pary.append([mpmath.mpf('4320201394811297'), mpmath.mpf('6660789042637991')])
pary.append([mpmath.mpf('1919887538364491'), mpmath.mpf('5062144743151271')])
pary.append([mpmath.mpf('1145627482280249'), mpmath.mpf('6799991793304291')])
pary.append([mpmath.mpf('1984122886757309'), mpmath.mpf('9406537174635037')])
pary.append([mpmath.mpf('2039925173128943'), mpmath.mpf('8063551980171073')])
pary.append([mpmath.mpf('2857290703266733'), mpmath.mpf('7085045779898621')])
pary.append([mpmath.mpf('1193589246063637'), mpmath.mpf('6027042500405417')])
pary.append([mpmath.mpf('4523263091629193'), mpmath.mpf('8070515420771777')])
pary.append([mpmath.mpf('2020699389269083'), mpmath.mpf('8176237831377379')])
pary.append([mpmath.mpf('1025035672438553'), mpmath.mpf('9252620396222923')])
pary.append([mpmath.mpf('2529049737528823'), mpmath.mpf('6970223264686531')])
pary.append([mpmath.mpf('1872377415407621'), mpmath.mpf('5640593649121367')])

for p in range(0, len(pary)):
    p1, p2 = pary[p][0], pary[p][1]
    for ioffset in range(-4, 5):
        for ipowpi in range(1, 49):
            zpipow = [0] * 6
            zpipow[0] = mpmath.power(mpmath.mpc(0.5, ioffset/2 + 2 * mpmath.pi()), mpmath.fdiv(1, ipowpi))
            zpipow[1] = mpmath.mpc(0.5, mpmath.power(ioffset/2 + 2 * mpmath.pi(), mpmath.fdiv(1, ipowpi)))
            zpipow[2] = mpmath.power(mpmath.mpc(0.5, ioffset/2 + mpmath.sqrt(2) * mpmath.pi()), mpmath.fdiv(1, ipowpi))
            zpipow[3] = mpmath.mpc(0.5, mpmath.power(ioffset/2 + mpmath.sqrt(2) * mpmath.pi(), mpmath.fdiv(1, ipowpi)))
            zpipow[4] = mpmath.power(mpmath.mpc(0.5, ioffset/2 + mpmath.pi()), mpmath.fdiv(1, ipowpi))
            zpipow[5] = mpmath.mpc(0.5, mpmath.power(ioffset/2 + mpmath.pi(), mpmath.fdiv(1, ipowpi)))
            for zpp in range(0, len(zpipow)):
                z1 = mpmath.power(p1, zz) / zpipow[zpp]
                z1floored = mpmath.mpc(mpmath.floor(z1.real), mpmath.floor(z1.imag))
                z1mod1 = z1 - zpipow[zpp] * z1floored
                z1mod2 = z1 - z1floored
                z2 = mpmath.power(p2, zz) / zpipow[zpp]
                z2floored = mpmath.mpc(mpmath.floor(z2.real), mpmath.floor(z2.imag))
                z2mod1 = z2 - zpipow[zpp] * z2floored
                z2mod2 = z2 - z2floored
                z3 = mpmath.power(mpmath.fmul(p1, p2), zz) / zpipow[zpp]
                z3floored = mpmath.mpc(mpmath.floor(z3.real), mpmath.floor(z3.imag))
                z3mod1 = z3 - zpipow[zpp] * z3floored
                z3mod2 = z3 - z3floored
                bz3mod1 = False
                bz3mod2 = False
                bz1mod1 = False
                bz1mod2 = False
                mindist = 1
                thisdist = min(abs(round(z3mod1.real, idigits) - round(z2mod1.real, idigits)), abs(round(z3mod1.imag, idigits) - round(z2mod1.imag, idigits)), abs(round(z3mod1.real, idigits) - round(z1mod1.real, idigits)),  abs(round(z3mod1.imag, idigits) - round(z1mod1.imag, idigits)))
                if thisdist < tol:
                    bz3mod1 = True
                    mindist = min(mindist, thisdist)
                thisdist = min(abs(round(z3mod2.real, idigits) - round(z2mod2.real, idigits)), abs(round(z3mod2.imag, idigits) - round(z2mod2.imag, idigits)), abs(round(z3mod2.real, idigits) - round(z1mod2.real, idigits)), abs(round(z3mod2.imag, idigits) - round(z1mod2.imag, idigits)))
                if thisdist < tol:
                    bz3mod2 = True
                    mindist = min(mindist, thisdist)
                thisdist = min(abs(round(z1mod1.real, idigits) - round(z2mod1.real, idigits)), abs(round(z1mod1.imag, idigits) - round(z2mod1.imag, idigits)))
                if thisdist < tol:
                    bz1mod1 = True
                    mindist = min(mindist, thisdist)
                thisdist = min(abs(round(z1mod2.real, idigits) - round(z2mod2.real, idigits)), abs(round(z1mod2.imag, idigits) - round(z2mod2.imag, idigits)))
                if thisdist < tol:
                    bz1mod2 = True
                    mindist = min(mindist, thisdist)
                if bz3mod1 or bz3mod2 or bz1mod1 or bz1mod2:
                    msg = ""
                    msg += "z distance=" + str(round(mindist, idigits)) + "\n"
                    msg += "z match for p1=" + str(p1)[:-2] + ", p2=" + str(p2)[:-2] + "\n"
                    if zpp == 0:
                        msg += "z match for mpmath.power(mpmath.mpc(0.5, " + str(ioffset/2) + " + 2 * mpmath.pi()), mpmath.fdiv(1, " + str(ipowpi) + "))\n"
                    elif zpp == 1:
                        msg += "z match for mpmath.mpc(0.5, mpmath.power(" + str(ioffset/2) + " + 2 * mpmath.pi(), mpmath.fdiv(1, " + str(ipowpi) + ")))\n"
                    elif zpp == 2:
                        msg += "z match for mpmath.mpc(0.5, mpmath.power(" + str(ioffset/2) + " + mpmath.sqrt(2) * mpmath.pi(), mpmath.fdiv(1, " + str(ipowpi) + ")))\n"
                    elif zpp == 3:
                        msg += "z match for mpmath.mpc(0.5, mpmath.power(" + str(ioffset/2) + " + mpmath.sqrt(2) * mpmath.pi(), mpmath.fdiv(1, " + str(ipowpi) + ")))\n"
                    elif zpp == 4:
                        msg += "z match for mpmath.mpc(0.5, mpmath.power(" + str(ioffset/2) + " + mpmath.pi(), mpmath.fdiv(1, " + str(ipowpi) + ")))\n"
                    elif zpp == 5:
                        msg += "z match for mpmath.mpc(0.5, mpmath.power(" + str(ioffset/2) + " + mpmath.pi(), mpmath.fdiv(1, " + str(ipowpi) + ")))\n"
                    msg += "# z1 # mpc(real='" + str(z1.real) + "', imag='" + str(z1.imag) + "')\n"
                    if bz3mod1 or bz1mod1:
                        msg += "# z1mod1 # mpc(real='" + str(z1mod1.real) + "', imag='" + str(z1mod1.imag) + "')\n"
                    if bz3mod2 or bz1mod2:
                        msg += "# z1mod2 # mpc(real='" + str(z1mod2.real) + "', imag='" + str(z1mod2.imag) + "')\n"
                    msg += "# z2 # mpc(real='" + str(z2.real) + "', imag='" + str(z2.imag) + "')\n"
                    if bz3mod1 or bz1mod1:
                        msg += "# z2mod1 # mpc(real='" + str(z2mod1.real) + "', imag='" + str(z2mod1.imag) + "')\n"
                    if bz3mod2 or bz1mod2:
                        msg += "# z2mod2 # mpc(real='" + str(z2mod2.real) + "', imag='" + str(z2mod2.imag) + "')\n"
                    msg += "# z3 # mpc(real='" + str(z3.real) + "', imag='" + str(z3.imag) + "')\n"
                    if bz3mod1 or bz1mod1:
                        msg += "# z3mod1 # mpc(real='" + str(z3mod1.real) + "', imag='" + str(z3mod1.imag) + "')\n"
                    if bz3mod2 or bz1mod2:
                        msg += "# z3mod2 # mpc(real='" + str(z3mod2.real) + "', imag='" + str(z3mod2.imag) + "')\n"
                    if mindist not in dicdist:
                        dicdist[mindist] = msg
                    else:
                        dicdist[mindist] += "\n" + msg
                else:
                    distz3mod1.append(abs(round(z3mod1.real, idigits) - round(z2mod1.real, idigits)))
                    distz3mod1.append(abs(round(z3mod1.imag, idigits) - round(z2mod1.imag, idigits)))
                    distz3mod1.append(abs(round(z3mod1.real, idigits) - round(z1mod1.real, idigits)))
                    distz3mod1.append(abs(round(z3mod1.imag, idigits) - round(z1mod1.imag, idigits)))
                    distz3mod2.append(abs(round(z3mod2.real, idigits) - round(z2mod2.real, idigits)))
                    distz3mod2.append(abs(round(z3mod2.imag, idigits) - round(z2mod2.imag, idigits)))
                    distz3mod2.append(abs(round(z3mod2.real, idigits) - round(z1mod2.real, idigits)))
                    distz3mod2.append(abs(round(z3mod2.imag, idigits) - round(z1mod2.imag, idigits)))
                    distz1mod1.append(abs(round(z1mod1.real, idigits) - round(z2mod1.real, idigits)))
                    distz1mod1.append(abs(round(z1mod1.imag, idigits) - round(z2mod1.imag, idigits)))
                    distz1mod2.append(abs(round(z1mod2.real, idigits) - round(z2mod2.real, idigits)))
                    distz1mod2.append(abs(round(z1mod2.imag, idigits) - round(z2mod2.imag, idigits)))
                    distz2mod1.append(abs(round(z2mod1.real, idigits) - round(z1mod1.real, idigits)))
                    distz2mod1.append(abs(round(z2mod1.imag, idigits) - round(z1mod1.imag, idigits)))
                    distz2mod2.append(abs(round(z2mod2.real, idigits) - round(z1mod2.real, idigits)))
                    distz2mod2.append(abs(round(z2mod2.imag, idigits) - round(z1mod2.imag, idigits)))
                val = 0
                ipow2 = 24
                while mpmath.fabs(val) == 0:
                    val = mpmath.power(p1, zz) - mpmath.power(p1 + mpmath.fdiv(1, 2**ipow2), zz)
                    ipow2 -= 1
                zd1 = mpmath.fdiv(1, val) / zpipow[zpp]
                zd1floored = mpmath.mpc(mpmath.floor(zd1.real), mpmath.floor(zd1.imag))
                zd1mod1 = zd1 - zpipow[zpp] * zd1floored
                zd1mod2 = zd1 - zd1floored
                val = 0
                ipow2 = 24
                while mpmath.fabs(val) == 0:
                    val = mpmath.power(p2, zz) - mpmath.power(p2 + mpmath.fdiv(1, 2**ipow2), zz)
                    ipow2 -= 1
                zd2 = mpmath.fdiv(1, val) / zpipow[zpp]
                zd2floored = mpmath.mpc(mpmath.floor(zd2.real), mpmath.floor(zd2.imag))
                zd2mod1 = zd2 - zpipow[zpp] * zd2floored
                zd2mod2 = zd2 - zd2floored
                val = 0
                ipow2 = 24
                while mpmath.fabs(val) == 0:
                    val = mpmath.power(mpmath.fmul(p1, p2), zz) - mpmath.power(mpmath.fmul(p1, p2) + mpmath.fdiv(1, 2**ipow2), zz)
                    ipow2 -= 1
                zd3 = mpmath.fdiv(1, val) / zpipow[zpp]
                zd3floored = mpmath.mpc(mpmath.floor(zd3.real), mpmath.floor(zd3.imag))
                zd3mod1 = zd3 - zpipow[zpp] * zd3floored
                zd3mod2 = zd3 - zd3floored
                bzd3mod1 = False
                bzd3mod2 = False
                bzd1mod1 = False
                bzd1mod2 = False
                mindist = 1
                thisdist = min(abs(round(zd3mod1.real, idigits) - round(zd2mod1.real, idigits)), abs(round(zd3mod1.imag, idigits) - round(zd2mod1.imag, idigits)), abs(round(zd3mod1.real, idigits) - round(zd1mod1.real, idigits)), abs(round(zd3mod1.imag, idigits) - round(zd1mod1.imag, idigits)))
                if thisdist < tol:
                    bzd3mod1 = True
                    mindist = min(mindist, thisdist)
                thisdist = min(abs(round(zd3mod2.real, idigits) - round(zd2mod2.real, idigits)), abs(round(zd3mod2.imag, idigits) - round(zd2mod2.imag, idigits)), abs(round(zd3mod2.real, idigits) - round(zd1mod2.real, idigits)), abs(round(zd3mod2.imag, idigits) - round(zd1mod2.imag, idigits)))
                if thisdist < tol:
                    bzd3mod2 = True
                    mindist = min(mindist, thisdist)
                thisdist = min(abs(round(zd1mod1.real, idigits) - round(zd2mod1.real, idigits)), abs(round(zd1mod1.imag, idigits) - round(zd2mod1.imag, idigits)))
                if thisdist < tol:
                    bzd1mod2 = True
                    mindist = min(mindist, thisdist)
                thisdist = min(abs(round(zd1mod2.real, idigits) - round(zd2mod2.real, idigits)), abs(round(zd1mod2.imag, idigits) - round(zd2mod2.imag, idigits)))
                if thisdist < tol:
                    bzd1mod2 = True
                    mindist = min(mindist, thisdist)
                if bzd3mod1 or bzd3mod2 or bzd1mod1 or bzd1mod2:
                    msg = ""
                    msg += "zd distance=" + str(round(mindist, idigits)) + "\n"
                    msg += "zd match for p1=" + str(p1)[:-2] + ", p2=" + str(p2)[:-2] + "\n"
                    if zpp == 0:
                        msg += "zd match for mpmath.power(mpmath.mpc(0.5, " + str(ioffset/2) + " + 2 * mpmath.pi()), mpmath.fdiv(1, " + str(ipowpi) + "))\n"
                    elif zpp == 1:
                        msg += "zd match for mpmath.mpc(0.5, mpmath.power(" + str(ioffset/2) + " + 2 * mpmath.pi(), mpmath.fdiv(1, " + str(ipowpi) + ")))\n"
                    elif zpp == 2:
                        msg += "zd match for mpmath.mpc(0.5, mpmath.power(" + str(ioffset/2) + " + mpmath.sqrt(2) * mpmath.pi(), mpmath.fdiv(1, " + str(ipowpi) + ")))\n"
                    elif zpp == 3:
                        msg += "zd match for mpmath.mpc(0.5, mpmath.power(" + str(ioffset/2) + " + mpmath.sqrt(2) * mpmath.pi(), mpmath.fdiv(1, " + str(ipowpi) + ")))\n"
                    elif zpp == 4:
                        msg += "zd match for mpmath.mpc(0.5, mpmath.power(" + str(ioffset/2) + " + mpmath.pi(), mpmath.fdiv(1, " + str(ipowpi) + ")))\n"
                    elif zpp == 5:
                        msg += "zd match for mpmath.mpc(0.5, mpmath.power(" + str(ioffset/2) + " + mpmath.pi(), mpmath.fdiv(1, " + str(ipowpi) + ")))\n"
                    msg += "# zd1 # mpc(real='" + str(zd1.real) + "', imag='" + str(zd1.imag) + "')\n"
                    if bzd3mod1 or bzd1mod1:
                        msg += "# zd1mod1 # mpc(real='" + str(zd1mod1.real) + "', imag='" + str(zd1mod1.imag) + "')\n"
                    if bzd3mod2 or bzd1mod2:
                        msg += "# zd1mod2 # mpc(real='" + str(zd1mod2.real) + "', imag='" + str(zd1mod2.imag) + "')\n"
                    msg += "# zd2 # mpc(real='" + str(zd2.real) + "', imag='" + str(zd2.imag) + "')\n"
                    if bzd3mod1 or bzd1mod1:
                        msg += "# zd2mod1 # mpc(real='" + str(zd2mod1.real) + "', imag='" + str(zd2mod1.imag) + "')\n"
                    if bzd3mod2 or bzd1mod2:
                        msg += "# zd2mod2 # mpc(real='" + str(zd2mod2.real) + "', imag='" + str(zd2mod2.imag) + "')\n"
                    msg += "# zd3 # mpc(real='" + str(zd3.real) + "', imag='" + str(zd3.imag) + "')\n"
                    if bzd3mod1 or bzd1mod1:
                        msg += "# zd3mod1 # mpc(real='" + str(zd3mod1.real) + "', imag='" + str(zd3mod1.imag) + "')\n"
                    if bzd3mod2 or bzd1mod2:
                        msg += "# zd3mod2 # mpc(real='" + str(zd3mod2.real) + "', imag='" + str(zd3mod2.imag) + "')\n"
                    if mindist not in dicdist:
                        dicdist[mindist] = msg
                    else:
                        dicdist[mindist] += "\n" + msg
                else:
                    distzd3mod1.append(abs(round(zd3mod1.real, idigits) - round(zd2mod1.real, idigits)))
                    distzd3mod1.append(abs(round(zd3mod1.imag, idigits) - round(zd2mod1.imag, idigits)))
                    distzd3mod1.append(abs(round(zd3mod1.real, idigits) - round(zd1mod1.real, idigits)))
                    distzd3mod1.append(abs(round(zd3mod1.imag, idigits) - round(zd1mod1.imag, idigits)))
                    distzd3mod2.append(abs(round(zd3mod2.real, idigits) - round(zd2mod2.real, idigits)))
                    distzd3mod2.append(abs(round(zd3mod2.imag, idigits) - round(zd2mod2.imag, idigits)))
                    distzd3mod2.append(abs(round(zd3mod2.real, idigits) - round(zd1mod2.real, idigits)))
                    distzd3mod2.append(abs(round(zd3mod2.imag, idigits) - round(zd1mod2.imag, idigits)))
                    distzd1mod1.append(abs(round(zd1mod1.real, idigits) - round(zd2mod1.real, idigits)))
                    distzd1mod1.append(abs(round(zd1mod1.imag, idigits) - round(zd2mod1.imag, idigits)))
                    distzd1mod2.append(abs(round(zd1mod2.real, idigits) - round(zd2mod2.real, idigits)))
                    distzd1mod2.append(abs(round(zd1mod2.imag, idigits) - round(zd2mod2.imag, idigits)))
                    distzd2mod1.append(abs(round(zd2mod1.real, idigits) - round(zd1mod1.real, idigits)))
                    distzd2mod1.append(abs(round(zd2mod1.imag, idigits) - round(zd1mod1.imag, idigits)))
                    distzd2mod2.append(abs(round(zd2mod2.real, idigits) - round(zd1mod2.real, idigits)))
                    distzd2mod2.append(abs(round(zd2mod2.imag, idigits) - round(zd1mod2.imag, idigits)))
                zlog1 = []
                zlog1floored = []
                zlog1mod1 = []
                zlog1mod2 = []
                zlog2 = []
                zlog2floored = []
                zlog2mod1 = []
                zlog2mod2 = []
                zlog3 = []
                zlog3floored = []
                zlog3mod1 = []
                zlog3mod2 = []
                for ilog in range(0, 5):
                    ilogmax = ilog + 1
                    zlog1.append(iterlog(mpmath.power(p1, zz), 2, ilogmax) / zpipow[zpp])
                    zlog1floored.append(mpmath.mpc(mpmath.floor(zlog1[ilog].real), mpmath.floor(zlog1[ilog].imag)))
                    zlog1mod1.append(zlog1[ilog] - zpipow[zpp] * zlog1floored[ilog])
                    zlog1mod2.append(zlog1[ilog] - zlog1floored[ilog])
                    zlog2.append(iterlog(mpmath.power(p2, zz), 2, ilogmax) / zpipow[zpp])
                    zlog2floored.append(mpmath.mpc(mpmath.floor(zlog2[ilog].real), mpmath.floor(zlog2[ilog].imag)))
                    zlog2mod1.append(zlog2[ilog] - zpipow[zpp] * zlog2floored[ilog])
                    zlog2mod2.append(zlog2[ilog] - zlog2floored[ilog])
                    zlog3.append(iterlog(mpmath.power(mpmath.fmul(p1, p2), zz), 2, ilogmax) / zpipow[zpp])
                    zlog3floored.append(mpmath.mpc(mpmath.floor(zlog3[ilog].real), mpmath.floor(zlog3[ilog].imag)))
                    zlog3mod1.append(zlog3[ilog] - zpipow[zpp] * zlog3floored[ilog])
                    zlog3mod2.append(zlog3[ilog] - zlog3floored[ilog])
                    bzlog3mod1 = False
                    bzlog3mod2 = False
                    bzlog1mod1 = False
                    bzlog1mod2 = False
                    mindist = 1
                    thisdist = min(abs(round(zlog3mod1[ilog].real, idigits) - round(zlog2mod1[ilog].real, idigits)), abs(round(zlog3mod1[ilog].imag, idigits) - round(zlog2mod1[ilog].imag, idigits)), abs(round(zlog3mod1[ilog].real, idigits) - round(zlog1mod1[ilog].real, idigits)),  abs(round(zlog3mod1[ilog].imag, idigits) - round(zlog1mod1[ilog].imag, idigits)))
                    if thisdist < tol:
                        bzlog3mod1 = True
                        mindist = min(mindist, thisdist)
                    thisdist = min(abs(round(zlog3mod2[ilog].real, idigits) - round(zlog2mod2[ilog].real, idigits)), abs(round(zlog3mod2[ilog].imag, idigits) - round(zlog2mod2[ilog].imag, idigits)), abs(round(zlog3mod2[ilog].real, idigits) - round(zlog1mod2[ilog].real, idigits)), abs(round(zlog3mod2[ilog].imag, idigits) - round(zlog1mod2[ilog].imag, idigits)))
                    if thisdist < tol:
                        bzlog3mod2 = True
                        mindist = min(mindist, thisdist)
                    thisdist = min(abs(round(zlog1mod1[ilog].real, idigits) - round(zlog2mod1[ilog].real, idigits)), abs(round(zlog1mod1[ilog].imag, idigits) - round(zlog2mod1[ilog].imag, idigits)))
                    if thisdist < tol:
                        bzlog1mod1 = True
-                        mindist = min(mindist, thisdist)
                    thisdist = min(abs(round(zlog1mod2[ilog].real, idigits) - round(zlog2mod2[ilog].real, idigits)), abs(round(zlog1mod2[ilog].imag, idigits) - round(zlog2mod2[ilog].imag, idigits)))
                    if thisdist < tol:
                        bzlog1mod2 = True
                        mindist = min(mindist, thisdist)
                    if bzlog3mod1 or bzlog3mod2 or bzlog1mod1 or bzlog1mod2:
                        msg = ""
                        msg += "zlog distance=" + str(round(mindist, idigits)) + "\n"
                        msg += "zlog match for p1=" + str(p1)[:-2] + ", p2=" + str(p2)[:-2] + "\n"
                        if zpp == 0:
                            msg += "zlog match for iterlog(" + str(ilogmax) + "), mpmath.power(mpmath.mpc(0.5, " + str(ioffset/2) + " + 2 * mpmath.pi()), mpmath.fdiv(1, " + str(ipowpi) + "))\n"
                        elif zpp == 1:
                            msg += "zlog match for iterlog(" + str(ilogmax) + "), mpmath.mpc(0.5, mpmath.power(" + str(ioffset/2) + " + 2 * mpmath.pi(), mpmath.fdiv(1, " + str(ipowpi) + ")))\n"
                        elif zpp == 2:
                            msg += "zlog match for iterlog(" + str(ilogmax) + "), mpmath.mpc(0.5, mpmath.power(" + str(ioffset/2) + " + mpmath.sqrt(2) * mpmath.pi(), mpmath.fdiv(1, " + str(ipowpi) + ")))\n"
                        elif zpp == 3:
                            msg += "zlog match for iterlog(" + str(ilogmax) + "), mpmath.mpc(0.5, mpmath.power(" + str(ioffset/2) + " + mpmath.sqrt(2) * mpmath.pi(), mpmath.fdiv(1, " + str(ipowpi) + ")))\n"
                        elif zpp == 4:
                            msg += "zlog match for iterlog(" + str(ilogmax) + "), mpmath.mpc(0.5, mpmath.power(" + str(ioffset/2) + " + mpmath.pi(), mpmath.fdiv(1, " + str(ipowpi) + ")))\n"
                        elif zpp == 5:
                            msg += "zlog match for iterlog(" + str(ilogmax) + "), mpmath.mpc(0.5, mpmath.power(" + str(ioffset/2) + " + mpmath.pi(), mpmath.fdiv(1, " + str(ipowpi) + ")))\n"
                        msg += "# zlog1 # mpc(real='" + str(zlog1[ilog].real) + "', imag='" + str(zlog1[ilog].imag) + "')\n"
                        if bzlog3mod1 or bzlog1mod1:
                            msg += "# zlog1mod1 # mpc(real='" + str(zlog1mod1[ilog].real) + "', imag='" + str(zlog1mod1[ilog].imag) + "')\n"
                        if bzlog3mod2 or bzlog1mod2:
                            msg += "# zlog1mod2 # mpc(real='" + str(zlog1mod2[ilog].real) + "', imag='" + str(zlog1mod2[ilog].imag) + "')\n"
                        msg += "# z2 # mpc(real='" + str(zlog2[ilog].real) + "', imag='" + str(zlog2[ilog].imag) + "')\n"
                        if bzlog3mod1 or bzlog1mod1:
                            msg += "# zlog2mod1 # mpc(real='" + str(zlog2mod1[ilog].real) + "', imag='" + str(zlog2mod1[ilog].imag) + "')\n"
                        if bzlog3mod2 or bzlog1mod2:
                            msg += "# zlog2mod2 # mpc(real='" + str(zlog2mod2[ilog].real) + "', imag='" + str(zlog2mod2[ilog].imag) + "')\n"
                        msg += "# z3 # mpc(real='" + str(zlog3[ilog].real) + "', imag='" + str(zlog3[ilog].imag) + "')\n"
                        if bzlog3mod1 or bzlog1mod1:
                            msg += "# zlog3mod1 # mpc(real='" + str(zlog3mod1[ilog].real) + "', imag='" + str(zlog3mod1[ilog].imag) + "')\n"
                        if bzlog3mod2 or bzlog1mod2:
                            msg += "# zlog3mod2 # mpc(real='" + str(zlog3mod2[ilog].real) + "', imag='" + str(zlog3mod2[ilog].imag) + "')\n"
                        if mindist not in dicdist:
                            dicdist[mindist] = msg
                        else:
                            dicdist[mindist] += "\n" + msg
                    else:
                        distzlog3mod1.append(abs(round(zlog3mod1[ilog].real, idigits) - round(zlog2mod1[ilog].real, idigits)))
                        distzlog3mod1.append(abs(round(zlog3mod1[ilog].imag, idigits) - round(zlog2mod1[ilog].imag, idigits)))
                        distzlog3mod1.append(abs(round(zlog3mod1[ilog].real, idigits) - round(zlog1mod1[ilog].real, idigits)))
                        distzlog3mod1.append(abs(round(zlog3mod1[ilog].imag, idigits) - round(zlog1mod1[ilog].imag, idigits)))
                        distzlog3mod2.append(abs(round(zlog3mod2[ilog].real, idigits) - round(zlog2mod2[ilog].real, idigits)))
                        distzlog3mod2.append(abs(round(zlog3mod2[ilog].imag, idigits) - round(zlog2mod2[ilog].imag, idigits)))
                        distzlog3mod2.append(abs(round(zlog3mod2[ilog].real, idigits) - round(zlog1mod2[ilog].real, idigits)))
                        distzlog3mod2.append(abs(round(zlog3mod2[ilog].imag, idigits) - round(zlog1mod2[ilog].imag, idigits)))
                        distzlog1mod1.append(abs(round(zlog1mod1[ilog].real, idigits) - round(zlog2mod1[ilog].real, idigits)))
                        distzlog1mod1.append(abs(round(zlog1mod1[ilog].imag, idigits) - round(zlog2mod1[ilog].imag, idigits)))
                        distzlog1mod2.append(abs(round(zlog1mod2[ilog].real, idigits) - round(zlog2mod2[ilog].real, idigits)))
                        distzlog1mod2.append(abs(round(zlog1mod2[ilog].imag, idigits) - round(zlog2mod2[ilog].imag, idigits)))
                        distzlog2mod1.append(abs(round(zlog2mod1[ilog].real, idigits) - round(zlog1mod1[ilog].real, idigits)))
                        distzlog2mod1.append(abs(round(zlog2mod1[ilog].imag, idigits) - round(zlog1mod1[ilog].imag, idigits)))
                        distzlog2mod2.append(abs(round(zlog2mod2[ilog].real, idigits) - round(zlog1mod2[ilog].real, idigits)))
                        distzlog2mod2.append(abs(round(zlog2mod2[ilog].imag, idigits) - round(zlog1mod2[ilog].imag, idigits)))


def iterlog(x, ibase, itimes):
    for i in range(0, itimes):
        x = mpmath.log(x, ibase)
    return x


for key in sorted(dicdist.keys()):
    if key < 0.00002:
        print("")
        print(dicdist[key])



zlog distance=0.0
zlog match for p1=1000004294967367, p2=10000000004194309
zlog match for iterlog(1), mpmath.mpc(0.5, mpmath.power(-1.5 + mpmath.sqrt(2) * mpmath.pi(), mpmath.fdiv(1, 8)))
# zlog1 # mpc(real='20.78923773037961910937134484680938758', imag='-7.2273003830951625055270939449023370497')
# zlog1mod2 # mpc(real='0.78923773037961910937134484680938757996', imag='0.77269961690483749447290605509766295029')
# z2 # mpc(real='23.186447417270650633354851582225312729', imag='-1.9999982174936234473613185241926732672')
# zlog2mod2 # mpc(real='0.18644741727065063335485158222531272912', imag='0.0000017825063765526386814758073267328312713')
# z3 # mpc(real='43.975685147650269742726196429034700309', imag='-9.2272986005887859528884124690950103169')
# zlog3mod2 # mpc(real='0.97568514765026974272619642903470030907', imag='0.77270139941121404711158753090498968311')

zlog distance=0.0
zlog match for p1=1293319370881457, p2=3184525836262943
zlog match for iterlog(2), mpmath.mpc(0.5, mpmath.power(-1.5 + mpmath.pi(), mpmath.fdiv(1, 24)))
# zlog1 # mpc(real='4.5669505455071565279999672826539655102', imag='-0.030692368704722580421330943990523595655')
# zlog1mod1 # mpc(real='0.42738469276201057458839247855868153315', imag='0.77336305751439446163513743900206154244')
# zlog1mod2 # mpc(real='0.56695054550715652799996728265396551017', imag='0.96930763129527741957866905600947640435')
# z2 # mpc(real='4.6033603231841898481354488992580903518', imag='-0.030692283673905075399947396814581999428')
# zlog2mod1 # mpc(real='0.46379447043904389472387409516280637477', imag='0.77336314254521196665652098617800313866')
# zlog2mod2 # mpc(real='0.60336032318418984813544889925809035179', imag='0.96930771632609492460005260318541800057')
# z3 # mpc(real='5.5327606022553750428349975414891408443', imag='-0.33124660782530903875654832137053432241')
# zlog3mod1 # mpc(real='0.37188187673377609791149523154834386461', imag='0.41849445675447401593605528090881884952')
# zlog3mod2 # mpc(real='0.53276060225537504283499754148914084434', imag='0.66875339217469096124345167862946567759')

zlog distance=0.0
zlog match for p1=1293319370881457, p2=3184525836262943
zlog match for iterlog(5), mpmath.power(mpmath.mpc(0.5, 1.5 + 2 * mpmath.pi()), mpmath.fdiv(1, 1))
# zlog1 # mpc(real='0.0086487838392242515938979822419229843038', imag='-0.02606656716225555644499222380533223185')
# zlog1mod1 # mpc(real='-7.7745365233403622253313887843170827841', imag='0.47393343283774444355500777619466776815')
# zlog1mod2 # mpc(real='0.0086487838392242515938979822419229843038', imag='0.97393343283774444355500777619466776815')
# z2 # mpc(real='0.008652781137787489918436287498913290778', imag='-0.027250071815524508455643827127782455612')
# zlog2mod1 # mpc(real='-7.7745325260417989870068504790600924776', imag='0.47274992818447549154435617287221754439')
# zlog2mod2 # mpc(real='0.008652781137787489918436287498913290778', imag='0.97274992818447549154435617287221754439')
# z3 # mpc(real='0.0025524097136832426184487493268453128902', imag='-0.051817547513724256623599093698999739631')
# zlog3mod1 # mpc(real='-7.7806328974659032343068380172321604555', imag='0.44818245248627574337640090630100026037')
# zlog3mod2 # mpc(real='0.0025524097136832426184487493268453128902', imag='0.94818245248627574337640090630100026037')

zlog distance=0.0
zlog match for p1=1293319370881457, p2=3184525836262943
zlog match for iterlog(5), mpmath.mpc(0.5, mpmath.power(1.5 + 2 * mpmath.pi(), mpmath.fdiv(1, 1)))
# zlog1 # mpc(real='0.0086487838392242515938979822419229843038', imag='-0.02606656716225555644499222380533223185')
# zlog1mod1 # mpc(real='-7.7745365233403622253313887843170827841', imag='0.47393343283774444355500777619466776815')
# zlog1mod2 # mpc(real='0.0086487838392242515938979822419229843038', imag='0.97393343283774444355500777619466776815')
# z2 # mpc(real='0.008652781137787489918436287498913290778', imag='-0.027250071815524508455643827127782455612')
# zlog2mod1 # mpc(real='-7.7745325260417989870068504790600924776', imag='0.47274992818447549154435617287221754439')
# zlog2mod2 # mpc(real='0.008652781137787489918436287498913290778', imag='0.97274992818447549154435617287221754439')
# z3 # mpc(real='0.0025524097136832426184487493268453128902', imag='-0.051817547513724256623599093698999739631')
# zlog3mod1 # mpc(real='-7.7806328974659032343068380172321604555', imag='0.44818245248627574337640090630100026037')
# zlog3mod2 # mpc(real='0.0025524097136832426184487493268453128902', imag='0.94818245248627574337640090630100026037')

zlog distance=0.0
zlog match for p1=1293319370881457, p2=3184525836262943
zlog match for iterlog(5), mpmath.power(mpmath.mpc(0.5, 2.0 + 2 * mpmath.pi()), mpmath.fdiv(1, 1))
# zlog1 # mpc(real='0.0080339759835474759752290921067019820014', imag='-0.024530216207718896993928270112668106452')
# zlog1mod1 # mpc(real='-8.2751513311960390009500576744523037864', imag='0.47546978379228110300607172988733189355')
# zlog1mod2 # mpc(real='0.0080339759835474759752290921067019820014', imag='0.97546978379228110300607172988733189355')
# z2 # mpc(real='0.0080334361620422253841239000724607342718', imag='-0.025642554546974653278800046386135339189')
# zlog2mod1 # mpc(real='-8.2751518710175442515411628664865450341', imag='0.47435744545302534672119995361386466081')
# zlog2mod2 # mpc(real='0.0080334361620422253841239000724607342718', imag='0.97435744545302534672119995361386466081')
# z3 # mpc(real='0.0022107740427733167906746832630584113681', imag='-0.048710294088028423074830489439213498975')
# zlog3mod1 # mpc(real='-8.280974533136813160134612083295947357', imag='0.45128970591197157692516951056078650103')
# zlog3mod2 # mpc(real='0.0022107740427733167906746832630584113681', imag='0.95128970591197157692516951056078650103')

zlog distance=0.0
zlog match for p1=1293319370881457, p2=3184525836262943
zlog match for iterlog(5), mpmath.mpc(0.5, mpmath.power(2.0 + 2 * mpmath.pi(), mpmath.fdiv(1, 1)))
# zlog1 # mpc(real='0.0080339759835474759752290921067019820014', imag='-0.024530216207718896993928270112668106452')
# zlog1mod1 # mpc(real='-8.2751513311960390009500576744523037864', imag='0.47546978379228110300607172988733189355')
# zlog1mod2 # mpc(real='0.0080339759835474759752290921067019820014', imag='0.97546978379228110300607172988733189355')
# z2 # mpc(real='0.0080334361620422253841239000724607342718', imag='-0.025642554546974653278800046386135339189')
# zlog2mod1 # mpc(real='-8.2751518710175442515411628664865450341', imag='0.47435744545302534672119995361386466081')
# zlog2mod2 # mpc(real='0.0080334361620422253841239000724607342718', imag='0.97435744545302534672119995361386466081')
# z3 # mpc(real='0.0022107740427733167906746832630584113681', imag='-0.048710294088028423074830489439213498975')
# zlog3mod1 # mpc(real='-8.280974533136813160134612083295947357', imag='0.45128970591197157692516951056078650103')
# zlog3mod2 # mpc(real='0.0022107740427733167906746832630584113681', imag='0.95128970591197157692516951056078650103')

zlog distance=0.0
zlog match for p1=1014717811895477, p2=6325057419036089
zlog match for iterlog(5), mpmath.power(mpmath.mpc(0.5, -2.0 + 2 * mpmath.pi()), mpmath.fdiv(1, 6))
# zlog1 # mpc(real='0.14544260177421218787917880260804443895', imag='-0.077625743981795092108440234257025303932')
# zlog1mod1 # mpc(real='-0.1608314608962154115669455723461959153', imag='1.1608712623316369129366881823424231214')
# zlog1mod2 # mpc(real='0.14544260177421218787917880260804443895', imag='0.92237425601820490789155976574297469607')
# z2 # mpc(real='0.16023913305765290181634985430806721802', imag='-0.066076517634940224987485406788303322036')
# zlog2mod1 # mpc(real='-0.14603492961277469762977452064617313623', imag='1.1724204886784917800576430098111451033')
# zlog2mod2 # mpc(real='0.16023913305765290181634985430806721802', imag='0.93392348236505977501251459321169667796')
# z3 # mpc(real='0.31191379932672784555204184821505828994', imag='-0.066073317257852508974866126738459236656')
# zlog3mod1 # mpc(real='0.0056397366563002461059174732608179356915', imag='1.1724236890555794960702622898609891886')
# zlog3mod2 # mpc(real='0.31191379932672784555204184821505828994', imag='0.93392668274214749102513387326154076334')

zlog distance=0.0
zlog match for p1=2152616888721601, p2=5867852253923339
zlog match for iterlog(1), mpmath.mpc(0.5, mpmath.power(-2.0 + mpmath.sqrt(2) * mpmath.pi(), mpmath.fdiv(1, 12)))
# zlog1 # mpc(real='23.565198039157172242701147138094717205', imag='-1.6544508219263417433095641238410274783')
# zlog1mod2 # mpc(real='0.56519803915717224270114713809471720526', imag='0.34554917807365825669043587615897252165')
# z2 # mpc(real='24.570758004676122917807459922025395587', imag='1.2331192344756867061542162549842654788')
# zlog2mod2 # mpc(real='0.57075800467612291780745992202539558702', imag='0.23311923447568670615421625498426547881')
# z3 # mpc(real='47.179781015249695263133328277346719327', imag='-8.766875028115472105697887975556821556')
# zlog3mod2 # mpc(real='0.17978101524969526313332827734671932731', imag='0.23312497188452789430211202444317844405')

zlog distance=0.0
zlog match for p1=2152616888721601, p2=5867852253923339
zlog match for iterlog(5), mpmath.mpc(0.5, mpmath.power(1.5 + 2 * mpmath.pi(), mpmath.fdiv(1, 13)))
# zlog1 # mpc(real='0.07497907476551011113499123233936678086', imag='-0.14380468297397708480092133141062303242')
# zlog1mod1 # mpc(real='-1.0960038627100422012149245872043090293', imag='0.35619531702602291519907866858937696758')
# zlog1mod2 # mpc(real='0.07497907476551011113499123233936678086', imag='0.85619531702602291519907866858937696758')
# z2 # mpc(real='0.11037507269691608022301672108723275824', imag='-0.1437958912175796908265203019126974565')
# zlog2mod1 # mpc(real='-1.0606078647786362321268990984564430519', imag='0.3562041087824203091734796980873025435')
# zlog2mod2 # mpc(real='0.11037507269691608022301672108723275824', imag='0.8562041087824203091734796980873025435')
# z3 # mpc(real='0.11464030927410817929019014463065734827', imag='-0.30028108376315906624721689034609540089')
# zlog3mod1 # mpc(real='-1.0563426282014441330597256749130184619', imag='0.19971891623684093375278310965390459911')
# zlog3mod2 # mpc(real='0.11464030927410817929019014463065734827', imag='0.69971891623684093375278310965390459911')

zlog distance=0.0
zlog match for p1=1373743475582201, p2=9015017069572961
zlog match for iterlog(5), mpmath.mpc(0.5, mpmath.power(-1.5 + 2 * mpmath.pi(), mpmath.fdiv(1, 4)))
# zlog1 # mpc(real='0.012558162237041509811785998127472550836', imag='-0.13540133491733456899820500167112526693')
# zlog1mod1 # mpc(real='-1.4663094628009368364796619384805730201', imag='0.36459866508266543100179499832887473307')
# zlog1mod2 # mpc(real='0.012558162237041509811785998127472550836', imag='0.86459866508266543100179499832887473307')
# z2 # mpc(real='0.038918026776559123654742914965314735236', imag='-0.13539896298337843778812624837705950597')
# zlog2mod1 # mpc(real='-1.4399495982614192226367050216427308357', imag='0.36460103701662156221187375162294049403')
# zlog2mod2 # mpc(real='0.038918026776559123654742914965314735236', imag='0.86460103701662156221187375162294049403')
# z3 # mpc(real='0.072710319008483133992896692371962608482', imag='-0.2521089490032540661724926993899800161')
# zlog3mod1 # mpc(real='-1.4061573060294952122985512442360829624', imag='0.2478910509967459338275073006100199839')
# zlog3mod2 # mpc(real='0.072710319008483133992896692371962608482', imag='0.7478910509967459338275073006100199839')

zlog distance=0.0
zlog match for p1=1373743475582201, p2=9015017069572961
zlog match for iterlog(3), mpmath.power(mpmath.mpc(0.5, 1.0 + 2 * mpmath.pi()), mpmath.fdiv(1, 14))
# zlog1 # mpc(real='1.9122644862146332009640286803723487177', imag='-0.25883050245889018327330616518649644282')
# zlog1mod2 # mpc(real='0.91226448621463320096402868037234871772', imag='0.74116949754110981672669383481350355718')
# z2 # mpc(real='1.9323787984250496597119010670204241472', imag='-0.21925302069616341063297547985094091614')
# zlog2mod2 # mpc(real='0.93237879842504965971190106702042414722', imag='0.78074697930383658936702452014905908386')
# z3 # mpc(real='2.1625246836579220530445981525022791425', imag='-0.25883182036877812561201664323863569552')
# zlog3mod2 # mpc(real='0.16252468365792205304459815250227914248', imag='0.74116817963122187438798335676136430448')

z distance=0.0
z match for p1=1373743475582201, p2=9015017069572961
z match for mpmath.mpc(0.5, mpmath.power(1.5 + mpmath.pi(), mpmath.fdiv(1, 17)))
# z1 # mpc(real='-28575949.732545229160568844337377375051', imag='11496907.429513760734550949889209213399')
# z1mod2 # mpc(real='0.26745477083943115566262262494922330411', imag='0.42951376073455094988920921339941027897')
# z2 # mpc(real='-8078242.121210641984661945259582200587', imag='-78491297.763522119834434146099360787821')
# z2mod2 # mpc(real='0.87878935801533805474041779941298776302', imag='0.23647788016556585390063921217877025883')
# z3 # mpc(real='-1786646317890371.1212116521695158251407', imag='2315386930634412.5050335201147509268174')
# z3mod2 # mpc(real='0.87878834783048417485934228299295748084', imag='0.5050335201147509268174242720296452866')

zlog distance=0.0
zlog match for p1=4506901327164923, p2=6594204355333433
zlog match for iterlog(2), mpmath.mpc(0.5, mpmath.power(-1.0 + mpmath.sqrt(2) * mpmath.pi(), mpmath.fdiv(1, 17)))
# zlog1 # mpc(real='4.3501124959318536345172942711009100358', imag='-0.55420266031345787239880639825377252144')
# zlog1mod1 # mpc(real='-0.029313232191988339729471511177659318131', imag='0.15732113481884824014238797726706823984')
# z2 # mpc(real='4.3630370681536285946224459804512787273', imag='-0.42763719616102940400578108259730581915')
# zlog2mod1 # mpc(real='-0.016388659970213379624319801827290626678', imag='0.28388659897127670853541329292353494213')
# z3 # mpc(real='5.2991405362697695812280285411545756652', imag='-0.33744118621270339869430368011327210499')
# zlog3mod1 # mpc(real='-0.15259264524393557004981121198488299333', imag='0.28388669435521344772442079657255652047')

zlog distance=0.0
zlog match for p1=1267685742386801, p2=6770719924085501
zlog match for iterlog(4), mpmath.mpc(0.5, mpmath.power(-1.0 + mpmath.sqrt(2) * mpmath.pi(), mpmath.fdiv(1, 15)))
# zlog1 # mpc(real='1.0585659757479871440188074714296432824', imag='-0.067074128992115106029632547087555291526')
# zlog1mod1 # mpc(real='-0.12638352255302698402605579803441966363', imag='0.91149130377681085211414630022196179562')
# zlog1mod2 # mpc(real='0.058565975747987144018807471429643282447', imag='0.93292587100788489397036745291244470847')
# z2 # mpc(real='1.0642254395247356274945705598063502139', imag='-0.10535986104077639299309037477049902645')
# zlog2mod1 # mpc(real='-0.12072405877627850055029270965771273213', imag='0.8732055717281495651506884725390180607')
# zlog2mod2 # mpc(real='0.06422543952473562749457055980635021394', imag='0.89464013895922360700690962522950097355')
# z3 # mpc(real='1.2159357754699721913699546215534080501', imag='-0.10536221171220536682635555970309226788')
# zlog3mod1 # mpc(real='0.030986277168958063325091352089345103979', imag='0.87320322105672059131742328760642481927')
# zlog3mod2 # mpc(real='0.21593577546997219136995462155340805005', imag='0.89463778828779463317364444029690773212')

zlog distance=0.0
zlog match for p1=1267685742386801, p2=6770719924085501
zlog match for iterlog(4), mpmath.mpc(0.5, mpmath.power(1.0 + mpmath.pi(), mpmath.fdiv(1, 6)))
# zlog1 # mpc(real='0.88849993838553099297461458179718779047', imag='-0.18932935576710294447614410534666492653')
# zlog1mod1 # mpc(real='0.58472127186481185398313126939635048266', imag='1.0425434854444187033711060742443580698')
# zlog1mod2 # mpc(real='0.88849993838553099297461458179718779047', imag='0.81067064423289705552385589465333507347')
# z2 # mpc(real='0.88850288516713190177060776008731425109', imag='-0.22247625104636684294354083446305492266')
# zlog2mod1 # mpc(real='0.58472421864641276277912444768647694327', imag='1.0093965901651548049037093451279680737')
# zlog2mod2 # mpc(real='0.88850288516713190177060776008731425109', imag='0.77752374895363315705645916553694507734')
# z3 # mpc(real='1.017042825920675112955770862120918911', imag='-0.2414676078753022578997246463347229886')
# zlog3mod1 # mpc(real='-0.51860868181156567388296262987094139317', imag='0.6866265668155002509560422208554626999')
# zlog3mod2 # mpc(real='0.017042825920675112955770862120918910966', imag='0.7585323921246977421002753536652770114')

zd distance=0.0
zd match for p1=1300720310786203, p2=8763546558609083
zd match for mpmath.mpc(0.5, mpmath.power(-1.5 + 2 * mpmath.pi(), mpmath.fdiv(1, 18)))
# zd1 # mpc(real='-3992214815256.3845057919517774305909832', imag='-4472261346592.1882021581361757749137779')
# zd1mod2 # mpc(real='0.61549420804822256940901683667185926182', imag='0.8117978418638242250862221375702434831')
# zd2 # mpc(real='-133539268391.96764025716108203784963034', imag='15560171867540.719097133601386309594529')
# zd2mod2 # mpc(real='0.032359742838917962150369656497655463997', imag='0.71909713360138630959452925486812986215')
# zd3 # mpc(real='214960272444320926459.61548919302739047', imag='-516728327694448873660.04824309187368715')
# zd3mod2 # mpc(real='0.61548919302739047050565535101895875414', imag='0.9517569081263128547010232693992293207')

zlog distance=0.0
zlog match for p1=1300720310786203, p2=8763546558609083
zlog match for iterlog(3), mpmath.mpc(0.5, mpmath.power(0.5 + mpmath.pi(), mpmath.fdiv(1, 8)))
# zlog1 # mpc(real='1.870655601690081484115961561597361081', imag='-0.27865247336463228676859471167236117898')
# zlog1mod1 # mpc(real='0.50296394692750702383106153084032375885', imag='0.66934468527782555947216857672251822392')
# zlog1mod2 # mpc(real='0.87065560169008148411596156159736108097', imag='0.72134752663536771323140528832763882102')
# z2 # mpc(real='1.8706520660394176636475849040312631389', imag='-0.36231733120572765320225566481849750998')
# zlog2mod1 # mpc(real='0.50296041127684320336268487327422581675', imag='0.58567982743673019303850762357638189292')
# zlog2mod2 # mpc(real='0.87065206603941766364758490403126313887', imag='0.63768266879427234679774433518150249002')
# z3 # mpc(real='2.1002402518596115219446955092131827465', imag='-0.36627976494977820842492257739735870857')
# zlog3mod1 # mpc(real='-0.42529580960547909160303618111981293817', imag='0.37187014563262133079377233981644173472')
# zlog3mod2 # mpc(real='0.10024025185961152194469550921318274646', imag='0.63372023505022179157507742260264129143')

zlog distance=0.0
zlog match for p1=4320201394811297, p2=6660789042637991
zlog match for iterlog(5), mpmath.power(mpmath.mpc(0.5, -2.0 + 2 * mpmath.pi()), mpmath.fdiv(1, 11))
# zlog1 # mpc(real='0.19728776023929880737434326240849371403', imag='0.022639450859011368537932754562724738237')
# zlog1mod1 # mpc(real='0.19728776023929880737434326240849371403', imag='0.022639450859011368537932754562724738237')
# zlog1mod2 # mpc(real='0.19728776023929880737434326240849371403', imag='0.022639450859011368537932754562724738237')
# z2 # mpc(real='0.18686804265078760973418652251253133862', imag='-0.03530038135166893573640541904278443151')
# zlog2mod1 # mpc(real='0.03628327043342931541967524125074993241', imag='1.0968193515165005343023287718442700448')
# zlog2mod2 # mpc(real='0.18686804265078760973418652251253133862', imag='0.96469961864833106426359458095721556849')
# z3 # mpc(real='0.35866140197747233180937696776051689725', imag='-0.035300441511814266297603094521687276315')
# zlog3mod1 # mpc(real='0.20807662976011403749486568649873549104', imag='1.0968192913563552037411310963653672')
# zlog3mod2 # mpc(real='0.35866140197747233180937696776051689725', imag='0.96469955848818573370239690547831272369')

zlog distance=0.0
zlog match for p1=4320201394811297, p2=6660789042637991
zlog match for iterlog(1), mpmath.mpc(0.5, mpmath.power(-1.0 + mpmath.sqrt(2) * mpmath.pi(), mpmath.fdiv(1, 7)))
# zlog1 # mpc(real='10.69473559637566717628604294580202553', imag='-17.283875421354536256023254668520132329')
# zlog1mod2 # mpc(real='0.69473559637566717628604294580202552986', imag='0.71612457864546374397674533147986767088')
# z2 # mpc(real='7.2240512957408518782322484993165726147', imag='-19.000005883978538095098510855162395187')
# zlog2mod2 # mpc(real='0.22405129574085187823224849931657261471', imag='0.99999411602146190490148914483760481288')
# z3 # mpc(real='17.918786892116519054518291445118598145', imag='-36.283881305333074351121765523682527516')
# zlog3mod2 # mpc(real='0.91878689211651905451829144511859814452', imag='0.71611869466692564887823447631747248385')

zlog distance=0.0
zlog match for p1=1919887538364491, p2=5062144743151271
zlog match for iterlog(3), mpmath.mpc(0.5, mpmath.power(-1.5 + mpmath.sqrt(2) * mpmath.pi(), mpmath.fdiv(1, 17)))
# zlog1 # mpc(real='2.0757654014905503300962543251183161317', imag='-0.21031093735972535295987723354797183876')
# zlog1mod1 # mpc(real='-0.13775186045215934247469629580976435507', imag='0.67674256931109187781433984479813279676')
# zlog1mod2 # mpc(real='0.075765401490550330096254325118316131734', imag='0.78968906264027464704012276645202816124')
# z2 # mpc(real='2.0877249818653817618611497685299609153', imag='-0.17485213815303197913539927101310146388')
# zlog2mod1 # mpc(real='-0.12579228007732791070980085239811957147', imag='0.71220136851778525163881780733300317164')
# zlog2mod2 # mpc(real='0.087724981865381761861149768529960915335', imag='0.82514786184696802086460072898689853612')
# z3 # mpc(real='2.342242043598447093205013483072303575', imag='-0.21030966371827371829758684665114548479')
# zlog3mod1 # mpc(real='0.12872478165573742063406286214422308818', imag='0.67674384295254351247663023169495915073')
# zlog3mod2 # mpc(real='0.34224204359844709320501348307230357498', imag='0.78969033628172628170241315334885451521')

zlog distance=0.0
zlog match for p1=1919887538364491, p2=5062144743151271
zlog match for iterlog(4), mpmath.mpc(0.5, mpmath.power(-1.0 + mpmath.sqrt(2) * mpmath.pi(), mpmath.fdiv(1, 15)))
# zlog1 # mpc(real='1.0546685070876750633543398644342707244', imag='-0.12524410203352237949359682662905048843')
# zlog1mod1 # mpc(real='-0.13028099121333906469052340502979222163', imag='0.85332133073540357865018202068046659872')
# zlog1mod2 # mpc(real='0.054668507087675063354339864434270724445', imag='0.87475589796647762050640317337094951157')
# z2 # mpc(real='1.0623271655083277486855855243801738649', imag='-0.10274866814408656005795869056772664022')
# zlog2mod1 # mpc(real='-0.12262233279268637935927774508388908115', imag='0.87581676462483939808582015674179044692')
# zlog2mod2 # mpc(real='0.062327165508327748685585524380173864929', imag='0.89725133185591343994204130943227335977')
# z3 # mpc(real='1.2142910364820756017633364683253806507', imag='-0.12523660713947493227764373449974509414')
# zlog3mod1 # mpc(real='0.0293415381810614737184731988613177046', imag='0.85332882562945102586613511280977199301')
# zlog3mod2 # mpc(real='0.21429103648207560176333646832538065067', imag='0.87476339286052506772235626550025490586')

zlog distance=0.0
zlog match for p1=1919887538364491, p2=5062144743151271
zlog match for iterlog(3), mpmath.power(mpmath.mpc(0.5, -0.5 + 2 * mpmath.pi()), mpmath.fdiv(1, 18))
# zlog1 # mpc(real='2.007637463589737534754466633161197333', imag='-0.20335782210535513958396595907686552828')
# zlog1mod1 # mpc(real='-0.280977050357960792433108897104617196', imag='0.71385668441794129644184517616954867733')
# zlog1mod2 # mpc(real='0.0076374635897375347544666331611973330453', imag='0.79664217789464486041603404092313447172')
# z2 # mpc(real='2.0192036385340147810043730008213958216', imag='-0.16906260139976732127840344272327125126')
# zlog2mod1 # mpc(real='-0.26941087541368354618320252944441870747', imag='0.74815190512352911474740769252314295436')
# zlog2mod2 # mpc(real='0.019203638534014781004373000821395821579', imag='0.83093739860023267872159655727672874874')
# z3 # mpc(real='2.2653675219992485085958820131141579528', imag='-0.20335016343682110042319551498731652375')
# zlog3mod1 # mpc(real='-0.023246991948449818591693517151656576277', imag='0.71386434308647533560261562025909768186')
# zlog3mod2 # mpc(real='0.26536752199924850859588201311415795277', imag='0.79664983656317889957680448501268347625')

zlog distance=0.0
zlog match for p1=1919887538364491, p2=5062144743151271
zlog match for iterlog(4), mpmath.mpc(0.5, mpmath.power(0.0 + mpmath.sqrt(2) * mpmath.pi(), mpmath.fdiv(1, 2)))
# zlog1 # mpc(real='0.11096288951593524621799042922297109256', imag='-0.52107913662002446105169503043688274392')
# zlog1mod1 # mpc(real='-1.9968518409948765713735282231468087633', imag='-0.021079136620024461051695030436882743924')
# zlog1mod2 # mpc(real='0.11096288951593524621799042922297109256', imag='0.47892086337997553894830496956311725608')
# z2 # mpc(real='0.12288315252726070536366659667362652916', imag='-0.52108071639162740890913001753092057412')
# zlog2mod1 # mpc(real='-1.9849315779835511122278520556961533267', imag='-0.021080716391627408909130017530920574123')
# zlog2mod2 # mpc(real='0.12288315252726070536366659667362652916', imag='0.47891928360837259109086998246907942588')
# z3 # mpc(real='0.13676207993116447691273354855666694667', imag='-0.59687920192286143115520571463547703156')
# zlog3mod1 # mpc(real='-1.9710526505796473406787851038131129092', imag='-0.096879201922861431155205714635477031561')
# zlog3mod2 # mpc(real='0.13676207993116447691273354855666694667', imag='0.40312079807713856884479428536452296844')

zlog distance=0.0
zlog match for p1=1919887538364491, p2=5062144743151271
zlog match for iterlog(5), mpmath.mpc(0.5, mpmath.power(0.5 + mpmath.pi(), mpmath.fdiv(1, 13)))
# zlog1 # mpc(real='0.18264072764952125639074558775414035466', imag='-0.050560274406499965337827569219291309466')
# zlog1mod1 # mpc(real='0.060933164636254820328701055132202558084', imag='1.0480391399156029820123786321650418251')
# zlog1mod2 # mpc(real='0.18264072764952125639074558775414035466', imag='0.94943972559350003466217243078070869053')
# z2 # mpc(real='0.19211355185763440600754437117456023573', imag='-0.023010405934748652102882633710105148298')
# zlog2mod1 # mpc(real='0.070405988844367969945499838552622439158', imag='1.0755890083873542952473235676742279863')
# zlog2mod2 # mpc(real='0.19211355185763440600754437117456023573', imag='0.9769895940652513478971173662898948517')
# z3 # mpc(real='0.36546991300159745807075048561114530816', imag='-0.050556792911436211972103276596715620675')
# zlog3mod1 # mpc(real='0.24376234998833102200870595298920751159', imag='1.0480426214106667353781029247876175139')
# zlog3mod2 # mpc(real='0.36546991300159745807075048561114530816', imag='0.94944320708856378802789672340328437933')

zlog distance=0.0
zlog match for p1=1145627482280249, p2=6799991793304291
zlog match for iterlog(4), mpmath.mpc(0.5, mpmath.power(-1.0 + 2 * mpmath.pi(), mpmath.fdiv(1, 3)))
# zlog1 # mpc(real='0.17551820882568924793761712192759420718', imag='-0.608560180043471701518107653121492642')
# zlog1mod1 # mpc(real='-1.5661494251314773326005598979767578869', imag='-0.108560180043471701518107653121492642')
# zlog1mod2 # mpc(real='0.17551820882568924793761712192759420718', imag='0.391439819956528298481892346878507358')
# z2 # mpc(real='0.17551509767779597658064909833730111511', imag='-0.61685503541986985125787691322957600232')
# zlog2mod1 # mpc(real='-1.566152536279370603957527921567050979', imag='-0.11685503541986985125787691322957600232')
# zlog2mod2 # mpc(real='0.17551509767779597658064909833730111511', imag='0.38314496458013014874212308677042399768')
# z3 # mpc(real='0.20155979572320460014276721108126954307', imag='-0.70318496178820430967271624596423493029')
# zlog3mod1 # mpc(real='-1.540107838233961980395409808823082551', imag='-0.20318496178820430967271624596423493029')
# zlog3mod2 # mpc(real='0.20155979572320460014276721108126954307', imag='0.29681503821179569032728375403576506971')

zlog distance=0.0
zlog match for p1=1145627482280249, p2=6799991793304291
zlog match for iterlog(5), mpmath.mpc(0.5, mpmath.power(-1.0 + 2 * mpmath.pi(), mpmath.fdiv(1, 3)))
# zlog1 # mpc(real='0.031202380703813041251902542864804931176', imag='-0.10513263506389861114651871751364849579')
# zlog1mod1 # mpc(real='-1.7104652532533535392862744770395471629', imag='0.39486736493610138885348128248635150421')
# zlog1mod2 # mpc(real='0.031202380703813041251902542864804931176', imag='0.89486736493610138885348128248635150421')
# z2 # mpc(real='0.031204357522116183586373718071728872497', imag='-0.11549472561542510877688951835681557103')
# zlog2mod1 # mpc(real='-1.7104632764350503969518033018326232216', imag='0.38450527438457489122311048164318442897')
# zlog2mod2 # mpc(real='0.031204357522116183586373718071728872497', imag='0.88450527438457489122311048164318442897')
# z3 # mpc(real='0.061593752264003379748917040308054135488', imag='-0.21573220840432353192365281905670593722')
# zlog3mod1 # mpc(real='-1.6800738816931632007892599795962979586', imag='0.28426779159567646807634718094329406278')
# zlog3mod2 # mpc(real='0.061593752264003379748917040308054135488', imag='0.78426779159567646807634718094329406278')

zlog distance=0.0
zlog match for p1=1984122886757309, p2=9406537174635037
zlog match for iterlog(4), mpmath.mpc(0.5, mpmath.power(-2.0 + mpmath.sqrt(2) * mpmath.pi(), mpmath.fdiv(1, 20)))
# zlog1 # mpc(real='1.0977819052124623983180146637422665779', imag='-0.089967962590836413788671877742711247598')
# zlog1mod1 # mpc(real='-0.018100656855142435186575412230328415693', imag='0.88273670468310695317582208419733708771')
# zlog1mod2 # mpc(real='0.097781905212462398318014663742266577947', imag='0.9100320374091635862113281222572887524')
# z2 # mpc(real='1.1104398426494869009131230209128883', imag='-0.070776953577628320024649401164648755067')
# zlog2mod1 # mpc(real='-0.0054427194181179325914670550597066935973', imag='0.90192771369631504693984456077539958024')
# zlog2mod2 # mpc(real='0.11043984264948690091312302091288830004', imag='0.92922304642237167997535059883535124493')
# z3 # mpc(real='1.2656007461578408967634459640517223276', imag='-0.089963187346377313730515508865550672726')
# zlog3mod1 # mpc(real='0.14971818409023606325885588807912733395', imag='0.88274147992756605323397845307449766258')
# zlog3mod2 # mpc(real='0.26560074615784089676344596405172232759', imag='0.91003681265362268626948449113444932727')

zlog distance=0.0
zlog match for p1=1984122886757309, p2=9406537174635037
zlog match for iterlog(4), mpmath.power(mpmath.mpc(0.5, 1.5 + 2 * mpmath.pi()), mpmath.fdiv(1, 22))
# zlog1 # mpc(real='1.0466647612528301331018526728980024887', imag='-0.08581912023731945986010903839505338223')
# zlog1mod1 # mpc(real='-0.12375087357565251001381269996592839413', imag='0.93434250446268044774216369882048678358')
# zlog1mod2 # mpc(real='0.046664761252830133101852672898002488659', imag='0.91418087976268054013989096160494661777')
# z2 # mpc(real='1.0587340341579825103877600964904394538', imag='-0.067522127355579612659922297435338490659')
# zlog2mod1 # mpc(real='-0.11168160067050013272790527637349142894', imag='0.95263949734442029494235043978020167515')
# zlog2mod2 # mpc(real='0.058734034157982510387760096490439453849', imag='0.93247787264442038734007770256466150934')
# z3 # mpc(real='1.2066697848070067574613847227358201893', imag='-0.085820706377153784098688955138417367853')
# zlog3mod1 # mpc(real='0.036254149978524114345719349871889306478', imag='0.93434091832284612350358378207712279796')
# zlog3mod2 # mpc(real='0.20666978480700675746138472273582018927', imag='0.91417929362284621590131104486158263215')

zlog distance=0.0
zlog match for p1=2039925173128943, p2=8063551980171073
zlog match for iterlog(3), mpmath.power(mpmath.mpc(0.5, 2.0 + 2 * mpmath.pi()), mpmath.fdiv(1, 11))
# zlog1 # mpc(real='1.815742810639608196851442198204737023', imag='-0.25835912566650635719627289223026471615')
# zlog1mod2 # mpc(real='0.81574281063960819685144219820473702299', imag='0.74164087433349364280372710776973528385')
# z2 # mpc(real='1.828495283265675022688281008631809005', imag='-0.30958490781827844744306446484594406792')
# zlog2mod2 # mpc(real='0.82849528326567502268828100863180900495', imag='0.69041509218172155255693553515405593208')
# z3 # mpc(real='2.0561131460469564002300259478418447017', imag='-0.25836123549825969577743140407978569894')
# zlog3mod2 # mpc(real='0.056113146046956400230025947841844701685', imag='0.74163876450174030422256859592021430106')

zlog distance=0.0
zlog match for p1=2857290703266733, p2=7085045779898621
zlog match for iterlog(2), mpmath.mpc(0.5, mpmath.power(-2.0 + mpmath.sqrt(2) * mpmath.pi(), mpmath.fdiv(1, 3)))
# zlog1 # mpc(real='3.1116029295581792095558918417794185063', imag='-1.4975748090355125049781873888290917148')
# zlog1mod1 # mpc(real='-1.735315553736445006764707844281856242', imag='-0.85552033350972994871079567582502906108')
# zlog1mod2 # mpc(real='0.11160292955817920955589184177941850627', imag='0.50242519096448749502181261117090828524')
# z2 # mpc(real='3.1419316014160505627720162186592977677', imag='-1.4975769514775953484759019269851628975')
# zlog2mod1 # mpc(real='-1.7049868818785736535485834674019769806', imag='-0.85552247595181279220851021398110024381')
# zlog2mod2 # mpc(real='0.14193160141605056277201621865929776771', imag='0.50242304852240465152409807301483710251')
# z3 # mpc(real='3.7888580907338015107823903847476806411', imag='-1.8224695614551100867885551523561508093')
# zlog3mod1 # mpc(real='-1.0580603925608227055382093013135941072', imag='-1.1804150859293275305211634393520881556')
# zlog3mod2 # mpc(real='0.78885809073380151078239038474768064111', imag='0.17753043854488991321144484764384919074')

zlog distance=0.0
zlog match for p1=2857290703266733, p2=7085045779898621
zlog match for iterlog(3), mpmath.mpc(0.5, mpmath.power(-1.0 + mpmath.pi(), mpmath.fdiv(1, 3)))
# zlog1 # mpc(real='1.5480936669932334029966753858892525191', imag='-0.73285053325444682602145540747421288229')
# zlog1mod1 # mpc(real='-0.18678281387266213951900235464490970058', imag='-0.12256757996148154816725374156663058981')
# zlog1mod2 # mpc(real='0.54809366699323340299667538588925251906', imag='0.26714946674555317397854459252578711771')
# z2 # mpc(real='1.5577987836995830788313614438781138539', imag='-0.73285578590476761342096186829755889617')
# zlog2mod1 # mpc(real='-0.1770776971663124636843162966560483657', imag='-0.12257283261180233556676020238997660369')
# zlog2mod2 # mpc(real='0.55779878369958307883136144387811385393', imag='0.26714421409523238657903813170244110383')
# z3 # mpc(real='1.7450844984423301418618813643846804162', imag='-0.82703578004290751968145294533151563961')
# zlog3mod1 # mpc(real='0.010208017576434599346203623850518196601', imag='-0.21675282674994224182725127942393334713')
# zlog3mod2 # mpc(real='0.74508449844233014186188136438468041623', imag='0.17296421995709248031854705466848436039')

zlog distance=0.0
zlog match for p1=1193589246063637, p2=6027042500405417
zlog match for iterlog(4), mpmath.mpc(0.5, mpmath.power(-0.5 + mpmath.sqrt(2) * mpmath.pi(), mpmath.fdiv(1, 5)))
# zlog1 # mpc(real='0.83893893062724540570418853301204740315', imag='-0.23681446867447189809403166847666627776')
# zlog1mod1 # mpc(real='0.46345496391320161163689072135131674561', imag='1.0263788881822914478803397882473301805')
# zlog1mod2 # mpc(real='0.83893893062724540570418853301204740315', imag='0.76318553132552810190596833152333372224')
# z2 # mpc(real='0.83893801245997116841799502324410123847', imag='-0.28256429653858059450527318945709614189')
# zlog2mod1 # mpc(real='0.46345404574592737435069721158337058092', imag='0.98062906031818275146909826726690031639')
# zlog2mod2 # mpc(real='0.83893801245997116841799502324410123847', imag='0.71743570346141940549472681054290385811')
# z3 # mpc(real='0.96196000268914605358484795787596543925', imag='-0.29423339923468042090197508985360849535')
# zlog3mod1 # mpc(real='0.58647603597510225951755014621523478171', imag='0.96895995762208292507239636687038796293')
# zlog3mod2 # mpc(real='0.96196000268914605358484795787596543925', imag='0.70576660076531957909802491014639150465')

zlog distance=0.0
zlog match for p1=2020699389269083, p2=8176237831377379
zlog match for iterlog(5), mpmath.mpc(0.5, mpmath.power(-0.5 + mpmath.sqrt(2) * mpmath.pi(), mpmath.fdiv(1, 3)))
# zlog1 # mpc(real='0.11134273611342116890511270402566446438', imag='-0.066271220134826129932570755514471180034')
# zlog1mod1 # mpc(real='-0.62230352240305153852723199380696002822', imag='1.3376046120033573581903548732045049809')
# zlog1mod2 # mpc(real='0.11134273611342116890511270402566446438', imag='0.93372877986517387006742924448552881997')
# z2 # mpc(real='0.11133983171567038818293717135673800261', imag='-0.092942393649214241469725514202013835503')
# zlog2mod1 # mpc(real='-0.62230642680080231924940752647588648999', imag='1.3109334384889692466532001145169623254')
# zlog2mod2 # mpc(real='0.11133983171567038818293717135673800261', imag='0.9070576063507857585302744857979861645')
# z3 # mpc(real='0.22376463204596604531941592412327116003', imag='-0.13104740247864560610810317677148860915')
# zlog3mod1 # mpc(real='-0.50988162647050666211292877370935333258', imag='1.2728284296595378820148224519474875517')
# zlog3mod2 # mpc(real='0.22376463204596604531941592412327116003', imag='0.86895259752135439389189682322851139085')

zlog distance=0.0
zlog match for p1=1025035672438553, p2=9252620396222923
zlog match for iterlog(5), mpmath.mpc(0.5, mpmath.power(2.0 + mpmath.sqrt(2) * mpmath.pi(), mpmath.fdiv(1, 1)))
# zlog1 # mpc(real='-0.0048610942562437497869800161937480870396', imag='-0.031877933581419961033583203886773837837')
# zlog1mod1 # mpc(real='-5.9477440324146099968028610062544417856', imag='6.9110050045769462859822977861739198608')
# zlog1mod2 # mpc(real='0.99513890574375625021301998380625191296', imag='0.96812206641858003896641679611322616216')
# z2 # mpc(real='0.0026769072626920041582564553430070973822', imag='-0.033890195167164380695487012446108194166')
# zlog2mod1 # mpc(real='-6.4402060308956742428576245347176866012', imag='0.46610980483283561930451298755389180583')
# zlog2mod2 # mpc(real='0.0026769072626920041582564553430070973822', imag='0.96610980483283561930451298755389180583')
# z3 # mpc(real='0.0026701641873509954721259487663966350811', imag='-0.063097413611826801059435987697959305931')
# zlog3mod1 # mpc(real='-6.4402127739710152515437550412942970635', imag='0.43690258638817319894056401230204069407')
# zlog3mod2 # mpc(real='0.0026701641873509954721259487663966350811', imag='0.93690258638817319894056401230204069407')

zlog distance=0.0
zlog match for p1=1025035672438553, p2=9252620396222923
zlog match for iterlog(5), mpmath.mpc(0.5, mpmath.power(2.0 + mpmath.sqrt(2) * mpmath.pi(), mpmath.fdiv(1, 1)))
# zlog1 # mpc(real='-0.0048610942562437497869800161937480870396', imag='-0.031877933581419961033583203886773837837')
# zlog1mod1 # mpc(real='-5.9477440324146099968028610062544417856', imag='6.9110050045769462859822977861739198608')
# zlog1mod2 # mpc(real='0.99513890574375625021301998380625191296', imag='0.96812206641858003896641679611322616216')
# z2 # mpc(real='0.0026769072626920041582564553430070973822', imag='-0.033890195167164380695487012446108194166')
# zlog2mod1 # mpc(real='-6.4402060308956742428576245347176866012', imag='0.46610980483283561930451298755389180583')
# zlog2mod2 # mpc(real='0.0026769072626920041582564553430070973822', imag='0.96610980483283561930451298755389180583')
# z3 # mpc(real='0.0026701641873509954721259487663966350811', imag='-0.063097413611826801059435987697959305931')
# zlog3mod1 # mpc(real='-6.4402127739710152515437550412942970635', imag='0.43690258638817319894056401230204069407')
# zlog3mod2 # mpc(real='0.0026701641873509954721259487663966350811', imag='0.93690258638817319894056401230204069407')

zlog distance=0.0
zlog match for p1=2529049737528823, p2=6970223264686531
zlog match for iterlog(4), mpmath.power(mpmath.mpc(0.5, -1.0 + 2 * mpmath.pi()), mpmath.fdiv(1, 1))
# zlog1 # mpc(real='0.014142853818905692553889036077668870113', imag='-0.21771183123566220112121245430315143906')
# zlog1mod1 # mpc(real='-5.2690424533606807843713977304813368983', imag='0.28228816876433779887878754569684856095')
# zlog1mod2 # mpc(real='0.014142853818905692553889036077668870113', imag='0.78228816876433779887878754569684856095')
# z2 # mpc(real='0.021643846978325606087907934570865776964', imag='-0.21796343727721640857277827278167632449')
# zlog2mod1 # mpc(real='-5.2615414602012608708373788319881399914', imag='0.28203656272278359142722172721832367551')
# zlog2mod2 # mpc(real='0.021643846978325606087907934570865776964', imag='0.78203656272278359142722172721832367551')
# z3 # mpc(real='0.02164276810437099965175968542874139894', imag='-0.24936290240272234893420399467116204857')
# zlog3mod1 # mpc(real='-5.2615425390752154772735270811302643694', imag='0.25063709759727765106579600532883795143')
# zlog3mod2 # mpc(real='0.02164276810437099965175968542874139894', imag='0.75063709759727765106579600532883795143')

zlog distance=0.0
zlog match for p1=2529049737528823, p2=6970223264686531
zlog match for iterlog(4), mpmath.mpc(0.5, mpmath.power(-1.0 + 2 * mpmath.pi(), mpmath.fdiv(1, 1)))
# zlog1 # mpc(real='0.014142853818905692553889036077668870113', imag='-0.21771183123566220112121245430315143906')
# zlog1mod1 # mpc(real='-5.2690424533606807843713977304813368983', imag='0.28228816876433779887878754569684856095')
# zlog1mod2 # mpc(real='0.014142853818905692553889036077668870113', imag='0.78228816876433779887878754569684856095')
# z2 # mpc(real='0.021643846978325606087907934570865776964', imag='-0.21796343727721640857277827278167632449')
# zlog2mod1 # mpc(real='-5.2615414602012608708373788319881399914', imag='0.28203656272278359142722172721832367551')
# zlog2mod2 # mpc(real='0.021643846978325606087907934570865776964', imag='0.78203656272278359142722172721832367551')
# z3 # mpc(real='0.02164276810437099965175968542874139894', imag='-0.24936290240272234893420399467116204857')
# zlog3mod1 # mpc(real='-5.2615425390752154772735270811302643694', imag='0.25063709759727765106579600532883795143')
# zlog3mod2 # mpc(real='0.02164276810437099965175968542874139894', imag='0.75063709759727765106579600532883795143')

z distance=0.0
z match for p1=1872377415407621, p2=5640593649121367
z match for mpmath.mpc(0.5, mpmath.power(-0.5 + mpmath.sqrt(2) * mpmath.pi(), mpmath.fdiv(1, 20)))
# z1 # mpc(real='-24651697.52016296196510252357322447256', imag='-31989646.481768771811443374520462159552')
# z1mod2 # mpc(real='0.47983703803489747642677552743981361767', imag='0.51823122818855662547953784044813009115')
# z2 # mpc(real='-35736985.126574621857696117559155812408', imag='60302871.713476227230897147066252219702')
# z2mod2 # mpc(real='0.87342537814230388244084418759240478919', imag='0.71347622723089714706625221970198128662')
# z3 # mpc(real='3029466013472311.2050977414565082650991', imag='-149633734928892.48176642939707840494504')
# z3mod2 # mpc(real='0.20509774145650826509913232767771344017', imag='0.51823357060292159505496466536340541406')

z distance=0.0
z match for p1=1872377415407621, p2=5640593649121367
z match for mpmath.mpc(0.5, mpmath.power(1.0 + mpmath.sqrt(2) * mpmath.pi(), mpmath.fdiv(1, 21)))
# z1 # mpc(real='-35828185.281198898778275034795449331058', imag='5494334.452658940813783895256164691773')
# z1mod2 # mpc(real='0.71880110122172496520455066894240427011', imag='0.4526589408137838952561646917730295794')
# z2 # mpc(real='31881470.013818100574893866867471273344', imag='54236283.452657836108146695901957665621')
# z2mod2 # mpc(real='0.01381810057489386686747127334368046911', imag='0.45265783610814669590195766562109978129')
# z3 # mpc(real='1196455083704242.8791963678099389084254', imag='-2445275007128422.9092427017551478364223')
# z3mod2 # mpc(real='0.8791963678099389084253859297296486864', imag='0.090757298244852163577699418050702580285')






z1 = mpmath.fdiv(1, mpmath.power(p1, zz))
z2 = mpmath.fdiv(1, mpmath.power(p2, zz))
z3 = mpmath.fdiv(1, mpmath.power(mpmath.fmul(p1, p2), zz))
dicdist = {}
for i in range(0, 64):
    zz = mpmath.zetazero(1 + int(random.random() * 2000))
    z3 = mpmath.fdiv(1, mpmath.power(mpmath.fmul(p1, p2), zz))
    z3add = (z3.real + z3.imag)**2/(z3.real**2 + z3.imag**2)
    z3sub = (z3.real - z3.imag)**2/(z3.real**2 + z3.imag**2)
    dicdist[min(abs(abs(z3add) - 1), abs(abs(z3sub) - 1))] = [zz, z3]

zz = dicdist[max(dicdist.keys())][0]
z3 = dicdist[max(dicdist.keys())][1]

z1add2 = (z1.real + z1.imag)/(z1.real - z1.imag)
z1sub2 = (z1.real - z1.imag)/(z1.real + z1.imag)
z2add2 = (z2.real + z2.imag)/(z2.real - z2.imag)
z2sub2 = (z2.real - z2.imag)/(z2.real + z2.imag)
z3add2 = (z3.real + z3.imag)/(z3.real - z3.imag)
z3sub2 = (z3.real - z3.imag)/(z3.real + z3.imag)

absz12 = (z1.real**2 + z1.imag**2)
absz22 = (z2.real**2 + z2.imag**2)
absz32 = (z3.real**2 + z3.imag**2)
z1add2 = (z1.real + z1.imag)**2/absz12
z1sub2 = (z1.real - z1.imag)**2/absz12
z2add2 = (z2.real + z2.imag)**2/absz22
z2sub2 = (z2.real - z2.imag)**2/absz22
z3add2 = (z3.real + z3.imag)**2/absz32
z3sub2 = (z3.real - z3.imag)**2/absz32

abszlog12 = (mpmath.log(z1.real)**2 + mpmath.log(z1.imag)**2)
abszlog22 = (mpmath.log(z2.real)**2 + mpmath.log(z2.imag)**2)
abszlog32 = (mpmath.log(z3.real)**2 + mpmath.log(z3.imag)**2)
zlog1add2 = (mpmath.log(z1.real) + mpmath.log(z1.imag))**2/abszlog12
zlog1sub2 = (mpmath.log(z1.real) - mpmath.log(z1.imag))**2/abszlog12
zlog2add2 = (mpmath.log(z2.real) + mpmath.log(z2.imag))**2/abszlog22
zlog2sub2 = (mpmath.log(z2.real) - mpmath.log(z2.imag))**2/abszlog22
zlog3add2 = (mpmath.log(z3.real) + mpmath.log(z3.imag))**2/abszlog32
zlog3sub2 = (mpmath.log(z3.real) - mpmath.log(z3.imag))**2/abszlog32

abszexp12 = (mpmath.exp(z1.real)**2 + mpmath.exp(z1.imag)**2)
abszexp22 = (mpmath.exp(z2.real)**2 + mpmath.exp(z2.imag)**2)
abszexp32 = (mpmath.exp(z3.real)**2 + mpmath.exp(z3.imag)**2)
zexp1add2 = (mpmath.exp(z1.real) + mpmath.exp(z1.imag))**2/abszexp12
zexp1sub2 = (mpmath.exp(z1.real) - mpmath.exp(z1.imag))**2/abszexp12
zexp2add2 = (mpmath.exp(z2.real) + mpmath.exp(z2.imag))**2/abszexp22
zexp2sub2 = (mpmath.exp(z2.real) - mpmath.exp(z2.imag))**2/abszexp22
zexp3add2 = (mpmath.exp(z3.real) + mpmath.exp(z3.imag))**2/abszexp32
zexp3sub2 = (mpmath.exp(z3.real) - mpmath.exp(z3.imag))**2/abszexp32

abszsin12 = (mpmath.sin(z1.real)**2 + mpmath.sin(z1.imag)**2)
abszsin22 = (mpmath.sin(z2.real)**2 + mpmath.sin(z2.imag)**2)
abszsin32 = (mpmath.sin(z3.real)**2 + mpmath.sin(z3.imag)**2)
zsin1add2 = (mpmath.sin(z1.real) + mpmath.sin(z1.imag))**2/abszsin12
zsin1sub2 = (mpmath.sin(z1.real) - mpmath.sin(z1.imag))**2/abszsin12
zsin2add2 = (mpmath.sin(z2.real) + mpmath.sin(z2.imag))**2/abszsin22
zsin2sub2 = (mpmath.sin(z2.real) - mpmath.sin(z2.imag))**2/abszsin22
zsin3add2 = (mpmath.sin(z3.real) + mpmath.sin(z3.imag))**2/abszsin32
zsin3sub2 = (mpmath.sin(z3.real) - mpmath.sin(z3.imag))**2/abszsin32

abszcos12 = (mpmath.cos(z1.real)**2 + mpmath.cos(z1.imag)**2)
abszcos22 = (mpmath.cos(z2.real)**2 + mpmath.cos(z2.imag)**2)
abszcos32 = (mpmath.cos(z3.real)**2 + mpmath.cos(z3.imag)**2)
zcos1add2 = (mpmath.cos(z1.real) + mpmath.cos(z1.imag))**2/abszcos12
zcos1sub2 = (mpmath.cos(z1.real) - mpmath.cos(z1.imag))**2/abszcos12
zcos2add2 = (mpmath.cos(z2.real) + mpmath.cos(z2.imag))**2/abszcos22
zcos2sub2 = (mpmath.cos(z2.real) - mpmath.cos(z2.imag))**2/abszcos22
zcos3add2 = (mpmath.cos(z3.real) + mpmath.cos(z3.imag))**2/abszcos32
zcos3sub2 = (mpmath.cos(z3.real) - mpmath.cos(z3.imag))**2/abszcos32

absztan12 = (mpmath.tan(z1.real)**2 + mpmath.tan(z1.imag)**2)
absztan22 = (mpmath.tan(z2.real)**2 + mpmath.tan(z2.imag)**2)
absztan32 = (mpmath.tan(z3.real)**2 + mpmath.tan(z3.imag)**2)
ztan1add2 = (mpmath.tan(z1.real) + mpmath.tan(z1.imag))**2/absztan12
ztan1sub2 = (mpmath.tan(z1.real) - mpmath.tan(z1.imag))**2/absztan12
ztan2add2 = (mpmath.tan(z2.real) + mpmath.tan(z2.imag))**2/absztan22
ztan2sub2 = (mpmath.tan(z2.real) - mpmath.tan(z2.imag))**2/absztan22
ztan3add2 = (mpmath.tan(z3.real) + mpmath.tan(z3.imag))**2/absztan32
ztan3sub2 = (mpmath.tan(z3.real) - mpmath.tan(z3.imag))**2/absztan32

abszzeta12 = (mpmath.zeta(z1.real)**2 + mpmath.zeta(z1.imag)**2)
abszzeta22 = (mpmath.zeta(z2.real)**2 + mpmath.zeta(z2.imag)**2)
abszzeta32 = (mpmath.zeta(z3.real)**2 + mpmath.zeta(z3.imag)**2)
zzeta1add2 = (mpmath.zeta(z1.real) + mpmath.zeta(z1.imag))**2/abszzeta12
zzeta1sub2 = (mpmath.zeta(z1.real) - mpmath.zeta(z1.imag))**2/abszzeta12
zzeta2add2 = (mpmath.zeta(z2.real) + mpmath.zeta(z2.imag))**2/abszzeta22
zzeta2sub2 = (mpmath.zeta(z2.real) - mpmath.zeta(z2.imag))**2/abszzeta22
zzeta3add2 = (mpmath.zeta(z3.real) + mpmath.zeta(z3.imag))**2/abszzeta32
zzeta3sub2 = (mpmath.zeta(z3.real) - mpmath.zeta(z3.imag))**2/abszzeta32


for objstr in "p1, p2, z1add2, z1sub2, z2add2, z2sub2, z3add2, z3sub2".split(", "):
    print("# " + objstr + " # " + str(round(eval(objstr), 16)))

for objstr in "zlog1add, zlog1sub, zlog2add, zlog2sub, zlog3add, zlog3sub".split(", "): 
    obj = eval(objstr)
    if type(obj) is mpmath.mpf:
        print("# " + objstr + " # " + str(round(obj, 16)))
    if type(obj) is mpmath.mpc:
        print("# " + objstr + " # mpc('" + str(round(obj.real, 16)) + "', '" + str(round(obj.imag, 16)) + "')")

for objstr in "z1sin * z2sin, z1cos * z2cos, z1sin**z2sin, z2sin**z1sin, z1cos**z2cos, z2cos**z1cos, z1cos**z2sin, z1sin**z2cos, z2cos**z1sin, z2sin**z1cos".split(", "):
    print("# " + objstr + " # " + str(round(eval(objstr), 16)))

print("(z3add2 + z3sub2)/(z1add2 + z1sub2) / abs((z3add2 + z3sub2)/(z1add2 + z1sub2))")
print(str((mpmath.mpc(z3add2, z3sub2) / mpmath.mpc(z1add2, z1sub2)) / mpmath.fabs(mpmath.mpc(z3add2, z3sub2) / mpmath.mpc(z1add2, z1sub2))))
print("(z3add2 + z3sub2)/(z2add2 + z2sub2) / abs((z3add2 + z3sub2)/(z2add2 + z2sub2))")
print(str((mpmath.mpc(z3add2, z3sub2) / mpmath.mpc(z2add2, z2sub2)) / mpmath.fabs(mpmath.mpc(z3add2, z3sub2) / mpmath.mpc(z2add2, z2sub2))))
print("(z3add2 + z3sub2)/(z1add2 + z1sub2)")
print(str((mpmath.mpc(z3add2, z3sub2) / mpmath.mpc(z1add2, z1sub2))))
print("(z3add2 + z3sub2)/(z2add2 + z2sub2)")
print(str((mpmath.mpc(z3add2, z3sub2) / mpmath.mpc(z2add2, z2sub2))))

(mpmath.log(z1.real) + mpmath.log(z1.imag))**2/(mpmath.log(z1.real)**2 + mpmath.log(z1.imag)**2)
(mpmath.log(z2.real) + mpmath.log(z2.imag))**2/(mpmath.log(z2.real)**2 + mpmath.log(z2.imag)**2)
(mpmath.log(z1.real) - mpmath.log(z1.imag))**2/(mpmath.log(z1.real)**2 + mpmath.log(z1.imag)**2)
(mpmath.log(z2.real) - mpmath.log(z2.imag))**2/(mpmath.log(z2.real)**2 + mpmath.log(z2.imag)**2)

(mpmath.log(z1.real) + mpmath.log(z1.imag))**3/(mpmath.log(z1.real)**3 + mpmath.log(z1.imag)**3)
(mpmath.log(z2.real) + mpmath.log(z2.imag))**3/(mpmath.log(z2.real)**3 + mpmath.log(z2.imag)**3)
(mpmath.log(z1.real) - mpmath.log(z1.imag))**3/(mpmath.log(z1.real)**3 + mpmath.log(z1.imag)**3)
(mpmath.log(z2.real) - mpmath.log(z2.imag))**3/(mpmath.log(z2.real)**3 + mpmath.log(z2.imag)**3)

# p1 # 1872377415407621.0
# p2 # 5640593649121367.0
# z1add2 # 1.6773443876622967
# z1sub2 # 0.3226556123377033
# z2add2 # 1.744200770603038
# z2sub2 # 0.2557992293969621
# z3add2 # 1.999919508577846
# z3sub2 # 8.0491422154e-05

# p1 # 1872377415407621.0
# p2 # 5640593649121367.0
# z1add2 # 1.2766058264484192
# z1sub2 # 0.7233941735515806
# z2add2 # 0.7377238261008373
# z2sub2 # 1.2622761738991628
# z3add2 # 1.0148795800053472
# z3sub2 # 0.9851204199946528

# zlog1add # 1.9986532069164562
# zlog1sub # 0.0013467930835437
# zlog2add # mpc('1.9991383195881849', '-0.0002989956689593')
# zlog2sub # mpc('0.0008616804118151', '0.0002989956689593')
# zlog3add # mpc('1.9999999394998216', '-1.0621135e-08')
# zlog3sub # mpc('6.05001785e-08', '1.0621135e-08')

# z1sin * z2sin # 0.0825350569965894
# z1sin**z2sin # 0.7487483390353192
# z2sin**z1sin # 0.6441030624815117
# z1cos**z2cos # 2.4648260991028694
# z2cos**z1cos # 2.542380154286142
# z1cos**z2sin # 1.1414534257999935
# z1sin**z2cos # 0.1390409016561537
# z2cos**z1sin # 1.1966095326237474
# z2sin**z1cos # 0.1015881612299551


z1sin * z2sin
z1sin**z2sin
(mpmath.mpc(z3cos, z3sin) / mpmath.mpc(z1cos, z1sin)) * 2 / mpmath.fabs(mpmath.mpc(z3cos, z3sin) / mpmath.mpc(z1cos, z1sin))
(mpmath.mpc(z3cos, z3sin) / mpmath.mpc(z2cos, z2sin)) / mpmath.fabs(mpmath.mpc(z3cos, z3sin) / mpmath.mpc(z2cos, z2sin))

z1sin * z2sin
mpf('0.082535056996589436767130661439088061770753')
(mpmath.mpc(z3cos, z3sin) / mpmath.mpc(z1cos, z1sin)) * 2 / mpmath.fabs(mpmath.mpc(z3cos, z3sin) / mpmath.mpc(z1cos, z1sin))
mpc(real='1.9640086860698717257198885026538885193606', imag='-0.37771666767842804788848790918670001437358')
(mpmath.mpc(z3cos, z3sin) / mpmath.mpc(z2cos, z2sin)) / mpmath.fabs(mpmath.mpc(z3cos, z3sin) / mpmath.mpc(z2cos, z2sin))
mpc(real='0.98942212862663627183044975507370080674768', imag='-0.14506499020761704271748146356844081345667')


for i in range(0, 20):
    it.skipto(int(mpmath.floor(mpmath.power(2, 49.8289 + (52.15085 - 49.8289) * random.random()))))
    p1 = it.next_prime()
    it.skipto(int(mpmath.floor(mpmath.power(2, 53.15085 - (53.15085 - 52.15085) * random.random()))))
    p2 = it.next_prime()
    print("pary.append([mpmath.mpf('" + str(p1) + "'), mpmath.mpf('" + str(p2) + "')])")

#mpmath.sqrt(mpmath.mpf('1000000000000000') * mpmath.mpf('9999999999999999')) 
#mpmath.mpf('3162277660168379.1738850105360137479809248')
target = mpmath.power(mpmath.mpf('3162277660168379') - 200, 2)
it = primesieve.Iterator()
for i in range(0, 30):
    it.skipto(int(mpmath.floor(mpmath.power(2, 49.8289 + (52.15085 - 49.8289) * random.random())) - 20))
    p1 = it.next_prime()
    it.skipto(int(mpmath.floor(target/p1 - 20)))
    p2 = it.next_prime()
    print("pary.append([mpmath.mpf('" + str(min(p1, p2)) + "'), mpmath.mpf('" + str(max(p1, p2)) + "')])")

pary = []
pary.append([mpmath.mpf('1494540567481373'), mpmath.mpf('9636630916797179')])
pary.append([mpmath.mpf('1766854433245813'), mpmath.mpf('5685950043228479')])
pary.append([mpmath.mpf('1355860089154163'), mpmath.mpf('9830585258725337')])
pary.append([mpmath.mpf('1257254305712179'), mpmath.mpf('5510599671319943')])
pary.append([mpmath.mpf('2628145625298667'), mpmath.mpf('6777555554626739')])
pary.append([mpmath.mpf('1346698713808309'), mpmath.mpf('9726231445303073')])
pary.append([mpmath.mpf('1696671538052209'), mpmath.mpf('9714580609800419')])
pary.append([mpmath.mpf('1824471579650899'), mpmath.mpf('9632045022837929')])
pary.append([mpmath.mpf('1964970069654283'), mpmath.mpf('6704573449932223')])
pary.append([mpmath.mpf('4860821208388291'), mpmath.mpf('5850121217229811')])
pary.append([mpmath.mpf('1479220749573617'), mpmath.mpf('6421169993071237')])
pary.append([mpmath.mpf('1486584153482819'), mpmath.mpf('7648833203116877')])
pary.append([mpmath.mpf('2826405398082389'), mpmath.mpf('9959899520770931')])
pary.append([mpmath.mpf('3561742250698799'), mpmath.mpf('8581018575750011')])
pary.append([mpmath.mpf('1201896306908441'), mpmath.mpf('5595544351447493')])
pary.append([mpmath.mpf('4016007847674833'), mpmath.mpf('6332760015880973')])
pary.append([mpmath.mpf('2367456112596271'), mpmath.mpf('5212847246689847')])
pary.append([mpmath.mpf('1368026589466421'), mpmath.mpf('8153417520369049')])
pary.append([mpmath.mpf('1641334563826879'), mpmath.mpf('7240886998510937')])
pary.append([mpmath.mpf('2581132908875947'), mpmath.mpf('6251366858362159')])


pary = []
pary.append([mpmath.mpf('1560240573893179'), mpmath.mpf('6409268011180063')])
pary.append([mpmath.mpf('2729323464325001'), mpmath.mpf('3663911636238331')])
pary.append([mpmath.mpf('2013853259989559'), mpmath.mpf('4965605090835047')])
pary.append([mpmath.mpf('1221416554529981'), mpmath.mpf('8187215051990899')])
pary.append([mpmath.mpf('3028224840523669'), mpmath.mpf('3302264701807739')])
pary.append([mpmath.mpf('1646014454510557'), mpmath.mpf('6075280792702519')])
pary.append([mpmath.mpf('1018440040533109'), mpmath.mpf('9818938378310587')])
pary.append([mpmath.mpf('2385485132022191'), mpmath.mpf('4192019420184779')])
pary.append([mpmath.mpf('1361982362049467'), mpmath.mpf('7342238988286963')])
pary.append([mpmath.mpf('2746394330947087'), mpmath.mpf('3641137722764747')])
pary.append([mpmath.mpf('2754124661208773'), mpmath.mpf('3630917707119953')])
pary.append([mpmath.mpf('2018380028508463'), mpmath.mpf('4954468365102077')])
pary.append([mpmath.mpf('1645024743417091'), mpmath.mpf('6078935918754967')])
pary.append([mpmath.mpf('2410711794557317'), mpmath.mpf('4148152434718961')])
pary.append([mpmath.mpf('2472433880860613'), mpmath.mpf('4044597543097061')])
pary.append([mpmath.mpf('3152204095784489'), mpmath.mpf('3172383416851697')])
pary.append([mpmath.mpf('2824271983966049'), mpmath.mpf('3540735473343457')])
pary.append([mpmath.mpf('2809620734225801'), mpmath.mpf('3559199246425831')])
pary.append([mpmath.mpf('2101948714730101'), mpmath.mpf('4757490004356767')])
pary.append([mpmath.mpf('2080122730197563'), mpmath.mpf('4807408647012331')])
pary.append([mpmath.mpf('2302927745349659'), mpmath.mpf('4342298632769519')])
pary.append([mpmath.mpf('2196949576020307'), mpmath.mpf('4551765825282899')])
pary.append([mpmath.mpf('2023709805779063'), mpmath.mpf('4941419946398443')])
pary.append([mpmath.mpf('1630314658608737'), mpmath.mpf('6133785246421379')])
pary.append([mpmath.mpf('2902742558063627'), mpmath.mpf('3445017875326019')])
pary.append([mpmath.mpf('2367223827096203'), mpmath.mpf('4224357614829133')])
pary.append([mpmath.mpf('1519126376870503'), mpmath.mpf('6582730806504289')])
pary.append([mpmath.mpf('2164618477874549'), mpmath.mpf('4619751749425049')])
pary.append([mpmath.mpf('1141388188359611'), mpmath.mpf('8761261157232271')])
pary.append([mpmath.mpf('2267307321288781'), mpmath.mpf('4410518109346787')])

pary.append([mpmath.mpf('2537719037383381'), mpmath.mpf('3940546550933249')])
pary.append([mpmath.mpf('2987980135263997'), mpmath.mpf('3346742463907039')])
pary.append([mpmath.mpf('3064130240421241'), mpmath.mpf('3263568848373767')])
pary.append([mpmath.mpf('2904911236704973'), mpmath.mpf('3442445976883493')])
pary.append([mpmath.mpf('2625793409784749'), mpmath.mpf('3808372723739323')])
pary.append([mpmath.mpf('2058742269808811'), mpmath.mpf('4857334571037601')])
pary.append([mpmath.mpf('1095544664056373'), mpmath.mpf('9127879791749107')])
pary.append([mpmath.mpf('1782229822811539'), mpmath.mpf('5610948639734527')])
pary.append([mpmath.mpf('2704762808530921'), mpmath.mpf('3697181863214881')])
pary.append([mpmath.mpf('1504998577681003'), mpmath.mpf('6644524551915091')])
pary.append([mpmath.mpf('2504052680678491'), mpmath.mpf('3993526205402791')])
pary.append([mpmath.mpf('1204619638336493'), mpmath.mpf('8301375539426009')])
pary.append([mpmath.mpf('2487904119171187'), mpmath.mpf('4019447503198069')])
pary.append([mpmath.mpf('2390277882431081'), mpmath.mpf('4183613994632269')])
pary.append([mpmath.mpf('2964475227212189'), mpmath.mpf('3373278315232583')])
pary.append([mpmath.mpf('3156303391604453'), mpmath.mpf('3168263236860581')])
pary.append([mpmath.mpf('1925472080134871'), mpmath.mpf('5193531551648501')])
pary.append([mpmath.mpf('2729593643948179'), mpmath.mpf('3663548976299063')])
pary.append([mpmath.mpf('2694433543013057'), mpmath.mpf('3711355221927733')])
pary.append([mpmath.mpf('2442864168906809'), mpmath.mpf('4093555477738147')])
pary.append([mpmath.mpf('2148509165272919'), mpmath.mpf('4654390198390643')])
pary.append([mpmath.mpf('2063810707989619'), mpmath.mpf('4845405618492919')])
pary.append([mpmath.mpf('3126883885477747'), mpmath.mpf('3198072063514057')])
pary.append([mpmath.mpf('2142775648588699'), mpmath.mpf('4666844149822807')])
pary.append([mpmath.mpf('1189985398996217'), mpmath.mpf('8403464452953767')])
pary.append([mpmath.mpf('2469673372816583'), mpmath.mpf('4049118442166323')])
pary.append([mpmath.mpf('2952990149519651'), mpmath.mpf('3386398021552961')])
pary.append([mpmath.mpf('2294760806839981'), mpmath.mpf('4357752655610897')])
pary.append([mpmath.mpf('2188108307658607'), mpmath.mpf('4570157685978191')])
pary.append([mpmath.mpf('2042426784298463'), mpmath.mpf('4896136339806949')])


f = open("C:\\Users\\aweslowski7\\Desktop\\Zeta Zeroes\\zary.409608.bin", "rb")
zary = pickle.load(f)
f.close()

maxary = []
minary = []
maxinvary = []
mininvary = []
#for p in range(0, 2):
for p in range(0, len(pary)):
    t1 = time.time()
    p1, p2 = pary[p][0], pary[p][1]
    dic1 = {}
    dic2 = {}
    zz = 0
    z3 = 0
    for i in range(0, len(zary)):
        mpmath.mp.prec = 128
        z3 = mpmath.fdiv(1, mpmath.power(mpmath.fmul(p1, p2), zary[i]))
        z3add = (z3.real + z3.imag)**2/(z3.real**2 + z3.imag**2)
        z3sub = (z3.real - z3.imag)**2/(z3.real**2 + z3.imag**2)
        thismax = max(abs(z3add), abs(z3sub))
        if len(dic1) == 0 or float(thismax) >= float(max(dic1.keys())):
            dic1[thismax] = [zary[i], z3]
        thismin = min(abs(abs(z3add) - 1), abs(abs(z3sub) - 1))
        if len(dic2) == 0 or float(thismin) <= float(min(dic2.keys())):
            dic2[thismin] = [zary[i], z3]
    
    for i in range(0, 6):
        if i % 2 == 0:
            thismax = max(dic1.keys())
            zz = dic1[thismax][0]   
            z3 = dic1[thismax][1]
            _ = dic1.pop(thismax)
        else:
            thismin = min(dic2.keys())
            zz = dic2[thismin][0]
            z3 = dic2[thismin][1]
            _ = dic2.pop(thismin)
        
        mpmath.mp.prec = 64
        z1 = mpmath.fdiv(1, mpmath.power(p1, zz))
        z2 = mpmath.fdiv(1, mpmath.power(p2, zz))
        z3 = mpmath.fdiv(1, mpmath.power(mpmath.fmul(p1, p2), zz))
        zsqrt3 = mpmath.fdiv(1, mpmath.power(mpmath.sqrt(mpmath.fmul(p1, p2)), zz))
        zinva1 = mpmath.fdiv(1, 1 - mpmath.power(p1, -zz))
        zinva2 = mpmath.fdiv(1, 1 - mpmath.power(p2, -zz))
        zinva3 = mpmath.fdiv(1, 1 - mpmath.power(mpmath.fmul(p1, p2), -zz))
        zinvb1 = mpmath.fdiv(1, 1 - mpmath.power(p1, 1 - zz))
        zinvb2 = mpmath.fdiv(1, 1 - mpmath.power(p2, 1 - zz))
        zinvb3 = mpmath.fdiv(1, 1 - mpmath.power(mpmath.fmul(p1, p2), 1 - zz))
        zinvsqrt3 = mpmath.fdiv(1, 1 - mpmath.power(mpmath.sqrt(mpmath.fmul(p1, p2)), -zz))
        zdelta1, ipowtwo = mpmath.mpc(0, 0), 24
        while zdelta1.real == 0 or zdelta1.imag == 0:
            zdelta1 = z1 - mpmath.fdiv(1, mpmath.power(p1 + mpmath.fdiv(1, mpmath.power(2, ipowtwo)), zz))
            ipowtwo -= 1
        zdelta2, ipowtwo = mpmath.mpc(0, 0), 24
        while zdelta2.real == 0 or zdelta2.imag == 0:
            zdelta2 = z2 - mpmath.fdiv(1, mpmath.power(p2 + mpmath.fdiv(1, mpmath.power(2, ipowtwo)), zz))
            ipowtwo -= 1
        zdelta3, ipowtwo = mpmath.mpc(0, 0), 24
        while zdelta3.real == 0 or zdelta3.imag == 0:
            zdelta3 = z3 - mpmath.fdiv(1, mpmath.power(mpmath.fmul(p1, p2) + mpmath.fdiv(1, mpmath.power(2, ipowtwo)), zz))
            ipowtwo -= 1
        zderiv1 = mpmath.fdiv(-zz, mpmath.power(p1, zz + 1))
        zderiv2 = mpmath.fdiv(-zz, mpmath.power(p2, zz + 1))
        zderiv3 = mpmath.fdiv(-zz, mpmath.power(mpmath.fmul(p1, p2), zz + 1))
        zderivdelta1, ipowtwo = mpmath.mpc(0, 0), 24
        while zderivdelta1.real == 0 or zderivdelta1.imag == 0:
            zderivdelta1 = mpmath.fdiv(-zz, mpmath.power(p1 + mpmath.fdiv(1, mpmath.power(2, ipowtwo)), zz + 1))
            ipowtwo -= 1
        zderivdelta2, ipowtwo = mpmath.mpc(0, 0), 24
        while zderivdelta2.real == 0 or zderivdelta2.imag == 0:
            zderivdelta2 = mpmath.fdiv(-zz, mpmath.power(p2 + mpmath.fdiv(1, mpmath.power(2, ipowtwo)), zz + 1))
            ipowtwo -= 1
        zderivdelta3, ipowtwo = mpmath.mpc(0, 0), 24
        while zderivdelta3.real == 0 or zderivdelta3.imag == 0:
            zderivdelta3 = mpmath.fdiv(-zz, mpmath.power(mpmath.fmul(p1, p2) + mpmath.fdiv(1, mpmath.power(2, ipowtwo)), zz + 1))
            ipowtwo -= 1
        zaccel1 = mpmath.fdiv(zz * (zz + 1), mpmath.power(p1, zz + 2))
        zaccel2 = mpmath.fdiv(zz * (zz + 1), mpmath.power(p2, zz + 2))
        zaccel3 = mpmath.fdiv(zz * (zz + 1), mpmath.power(mpmath.fmul(p1, p2), zz + 2))
        zacceldelta1, ipowtwo = mpmath.mpc(0, 0), 24
        while zacceldelta1.real == 0 or zacceldelta1.imag == 0:
            zacceldelta1 = mpmath.fdiv(zz * (zz + 1), mpmath.power(p1 + mpmath.fdiv(1, mpmath.power(2, ipowtwo)), zz + 2))
            ipowtwo -= 1
        zacceldelta2, ipowtwo = mpmath.mpc(0, 0), 24
        while zacceldelta2.real == 0 or zacceldelta2.imag == 0:
            zacceldelta2 = mpmath.fdiv(zz * (zz + 1), mpmath.power(p2 + mpmath.fdiv(1, mpmath.power(2, ipowtwo)), zz + 2))
            ipowtwo -= 1
        zacceldelta3, ipowtwo = mpmath.mpc(0, 0), 24
        while zacceldelta3.real == 0 or zacceldelta3.imag == 0:
            zacceldelta3 = mpmath.fdiv(zz * (zz + 1), mpmath.power(mpmath.fmul(p1, p2) + mpmath.fdiv(1, mpmath.power(2, ipowtwo)), zz + 2))
            ipowtwo -= 1
        zloge1 = mpmath.fdiv(mpmath.log(zz), mpmath.power(p1, zz))
        zloge2 = mpmath.fdiv(mpmath.log(zz), mpmath.power(p2, zz))
        zloge3 = mpmath.fdiv(mpmath.log(zz), mpmath.power(mpmath.fmul(p1, p2), zz))
        while zlogedelta1.real == 0 or zlogedelta1.imag == 0:
            zlogedelta1 = mpmath.fdiv(mpmath.log(zz), mpmath.power(p1 + mpmath.fdiv(1, mpmath.power(2, ipowtwo)), zz))
            ipowtwo -= 1
        zlogedelta2, ipowtwo = mpmath.mpc(0, 0), 24
        while zlogedelta2.real == 0 or zlogedelta2.imag == 0:
            zlogedelta2 = mpmath.fdiv(mpmath.log(zz), mpmath.power(p2 + mpmath.fdiv(1, mpmath.power(2, ipowtwo)), zz))
            ipowtwo -= 1
        zlogedelta3, ipowtwo = mpmath.mpc(0, 0), 24
        while zlogedelta3.real == 0 or zlogedelta3.imag == 0:
            zlogedelta3 = mpmath.fdiv(mpmath.log(zz), mpmath.power(mpmath.fmul(p1, p2) + mpmath.fdiv(1, mpmath.power(2, ipowtwo)), zz))
            ipowtwo -= 1
        zlogtwo1 = mpmath.fdiv(mpmath.log(zz, 2), mpmath.power(p1, zz))
        zlogtwo2 = mpmath.fdiv(mpmath.log(zz, 2), mpmath.power(p2, zz))
        zlogtwo3 = mpmath.fdiv(mpmath.log(zz, 2), mpmath.power(mpmath.fmul(p1, p2), zz))
        zlogtwodelta1, ipowtwo = mpmath.mpc(0, 0), 24
        while zlogtwodelta1.real == 0 or zlogtwodelta1.imag == 0:
            zlogtwodelta1 = mpmath.fdiv(mpmath.log(zz, 2), mpmath.power(p1 + mpmath.fdiv(1, mpmath.power(2, ipowtwo)), zz))
            ipowtwo -= 1
        zlogtwodelta2, ipowtwo = mpmath.mpc(0, 0), 24
        while zlogtwodelta2.real == 0 or zlogtwodelta2.imag == 0:
            zlogtwodelta2 = mpmath.fdiv(mpmath.log(zz, 2), mpmath.power(p2 + mpmath.fdiv(1, mpmath.power(2, ipowtwo)), zz))
            ipowtwo -= 1
        zlogtwodelta3, ipowtwo = mpmath.mpc(0, 0), 24
        while zlogtwodelta3.real == 0 or zlogtwodelta3.imag == 0:
            zlogtwodelta3 = mpmath.fdiv(mpmath.log(zz, 2), mpmath.power(mpmath.fmul(p1, p2) + mpmath.fdiv(1, mpmath.power(2, ipowtwo)), zz))
            ipowtwo -= 1
        #zzeta1 = mpmath.zeta(mpmath.fdiv(1, mpmath.power(p1, zz))
        #zzeta2 = mpmath.zeta(mpmath.fdiv(1, mpmath.power(p2, zz))
        #zzeta3 = mpmath.zeta(mpmath.fdiv(1, mpmath.power(mpmath.fmul(p1, p2), zz))
        #zzetaderiv1 = mpmath.zeta(mpmath.fdiv(1, mpmath.power(p1, zz)), 2)
        #zzetaderiv2 = mpmath.zeta(mpmath.fdiv(1, mpmath.power(p2, zz)), 2)
        #zzetaderiv3 = mpmath.zeta(mpmath.fdiv(1, mpmath.power(mpmath.fmul(p1, p2), zz)), 2)
        #zzetaaccel1 = mpmath.zeta(mpmath.fdiv(1, mpmath.power(p1, zz)), 3)
        #zzetaaccel2 = mpmath.zeta(mpmath.fdiv(1, mpmath.power(p2, zz)), 3)
        #zzetaaccel3 = mpmath.zeta(mpmath.fdiv(1, mpmath.power(mpmath.fmul(p1, p2), zz)), 3)
        zzeta1 = mpmath.zeta(zz + mpmath.fdiv(1, mpmath.power(p1, zz)))
        zzeta2 = mpmath.zeta(zz + mpmath.fdiv(1, mpmath.power(p2, zz)))
        zzeta3 = mpmath.zeta(zz + mpmath.fdiv(1, mpmath.power(mpmath.fmul(p1, p2), zz)))
        zzetaderiv1 = mpmath.zeta(zz + mpmath.fdiv(1, mpmath.power(p1, zz)), 2)
        zzetaderiv2 = mpmath.zeta(zz + mpmath.fdiv(1, mpmath.power(p2, zz)), 2)
        zzetaderiv3 = mpmath.zeta(zz + mpmath.fdiv(1, mpmath.power(mpmath.fmul(p1, p2), zz)), 2)
        zzetaaccel1 = mpmath.zeta(zz + mpmath.fdiv(1, mpmath.power(p1, zz)), 3)
        zzetaaccel2 = mpmath.zeta(zz + mpmath.fdiv(1, mpmath.power(p2, zz)), 3)
        zzetaaccel3 = mpmath.zeta(zz + mpmath.fdiv(1, mpmath.power(mpmath.fmul(p1, p2), zz)), 3)
        
        absz12 = (z1.real**2 + z1.imag**2)
        absz22 = (z2.real**2 + z2.imag**2)
        absz32 = (z3.real**2 + z3.imag**2)
        abszsqrt32 = (zsqrt3.real**2 + zsqrt3.imag**2)
        z1add2 = (z1.real + z1.imag)**2/absz12
        z1sub2 = (z1.real - z1.imag)**2/absz12
        z1mul2 = (z1.real * z1.imag)**2/absz12
        z2add2 = (z2.real + z2.imag)**2/absz22
        z2sub2 = (z2.real - z2.imag)**2/absz22
        z2mul2 = (z2.real * z2.imag)**2/absz22
        z3add2 = (z3.real + z3.imag)**2/absz32
        z3sub2 = (z3.real - z3.imag)**2/absz32
        z3mul2 = (z3.real * z3.imag)**2/absz32
        zsqrt3add2 = (zsqrt3.real + zsqrt3.imag)**2/abszsqrt32
        zsqrt3sub2 = (zsqrt3.real - zsqrt3.imag)**2/abszsqrt32
        zsqrt3mul2 = (zsqrt3.real * zsqrt3.imag)**2/abszsqrt32
        
        if False:
            f = open("C:\\Users\\aweslowski7\\Desktop\\Zeta Zeroes\\Scratch Squares.txt", "a")
            _ = f.write("\n\n\n")
            _ = f.write("# ------------------------------------------------------\n")
            _ = f.write("# p1, p2 = " + str(p1)[:-2] + ", " + str(p2)[:-2] + "\n")
            _ = f.write("# zz = " + str(zz) + "\n")
            _ = f.write("# z3add2, z3sub2 = " + str(z3add2) + ", " + str(z3sub2) + "\n")
            _ = f.write("# z1add2, z1sub2 = " + str(z1add2) + ", " + str(z1sub2) + "\n")
            _ = f.write("# z2add2, z2sub2 = " + str(z2add2) + ", " + str(z2sub2) + "\n")
            _ = f.write("# ------------------------------------------------------\n")
            _ = f.write("\n")
            squares(p1, p2, zz, f)
            squareroots(p1, p2, zz, f)
            f.close()
        
        abszinva12 = (zinva1.real**2 + zinva1.imag**2)
        abszinva22 = (zinva2.real**2 + zinva2.imag**2)
        abszinva32 = (zinva3.real**2 + zinva3.imag**2)
        abszinvasqrt32 = (zinvasqrt3.real**2 + zinvasqrt3.imag**2)
        zinva1add2 = (zinva1.real + zinva1.imag)**2/abszinva12
        zinva1sub2 = (zinva1.real - zinva1.imag)**2/abszinva12
        zinva1mul2 = (zinva1.real * zinva1.imag)**2/abszinva12
        zinva2add2 = (zinva2.real + zinva2.imag)**2/abszinva22
        zinva2sub2 = (zinva2.real - zinva2.imag)**2/abszinva22
        zinva2mul2 = (zinva2.real * zinva2.imag)**2/abszinva22
        zinva3add2 = (zinva3.real + zinva3.imag)**2/abszinva32
        zinva3sub2 = (zinva3.real - zinva3.imag)**2/abszinva32
        zinva3mul2 = (zinva3.real * zinva3.imag)**2/abszinva32
        zinvasqrt3add2 = (zinvasqrt3.real + zinvasqrt3.imag)**2/abszinvasqrt32
        zinvasqrt3sub2 = (zinvasqrt3.real - zinvasqrt3.imag)**2/abszinvasqrt32
        zinvasqrt3mul2 = (zinvasqrt3.real * zinvasqrt3.imag)**2/abszinvasqrt32
        
        abszinvb12 = (zinvb1.real**2 + zinvb1.imag**2)
        abszinvb22 = (zinvb2.real**2 + zinvb2.imag**2)
        abszinvb32 = (zinvb3.real**2 + zinvb3.imag**2)
        abszinvbsqrt32 = (zinvbsqrt3.real**2 + zinvbsqrt3.imag**2)
        zinvb1add2 = (zinvb1.real + zinvb1.imag)**2/abszinvb12
        zinvb1sub2 = (zinvb1.real - zinvb1.imag)**2/abszinvb12
        zinvb1mul2 = (zinvb1.real * zinvb1.imag)**2/abszinvb12
        zinvb2add2 = (zinvb2.real + zinvb2.imag)**2/abszinvb22
        zinvb2sub2 = (zinvb2.real - zinvb2.imag)**2/abszinvb22
        zinvb2mul2 = (zinvb2.real * zinvb2.imag)**2/abszinvb22
        zinvb3add2 = (zinvb3.real + zinvb3.imag)**2/abszinvb32
        zinvb3sub2 = (zinvb3.real - zinvb3.imag)**2/abszinvb32
        zinvb3mul2 = (zinvb3.real * zinvb3.imag)**2/abszinvb32
        zinvbsqrt3add2 = (zinvbsqrt3.real + zinvbsqrt3.imag)**2/abszinvbsqrt32
        zinvbsqrt3sub2 = (zinvbsqrt3.real - zinvbsqrt3.imag)**2/abszinvbsqrt32
        zinvbsqrt3mul2 = (zinvbsqrt3.real * zinvbsqrt3.imag)**2/abszinvbsqrt32
        
        if i == 0:
            maxary.append([z3add2, z3sub2, zsqrt3add2, zsqrt3sub2, z1add2, z1sub2, z2add2, z2sub2, p1, p2, zz.imag])
            maxinvary.append([zinva3add2, zinva3sub2, zinvasqrt3add2, zinvasqrt3sub2, zinva1add2, zinva1asub2, zinva2add2, zinva2sub2, p1, p2, zz.imag])
        elif i == 1:
            minary.append([z3add2, z3sub2, zsqrt3add2, zsqrt3sub2, z1add2, z1sub2, z2add2, z2sub2, p1, p2, zz.imag])
            mininvary.append([zinva3add2, zinva3sub2, zinvasqrt3add2, zinvasqrt3sub2, zinva1add2, zinva1sub2, zinva2add2, zinva2sub2, p1, p2, zz.imag])
        
        absz13 = (z1.real**3 + z1.imag**3)
        absz23 = (z2.real**3 + z2.imag**3)
        absz33 = (z3.real**3 + z3.imag**3)
        z1add3 = (z1.real + z1.imag)**3/absz13
        z1sub3 = (z1.real - z1.imag)**3/absz13
        z1mul3 = (z1.real * z1.imag)**3/absz13
        z2add3 = (z2.real + z2.imag)**3/absz23
        z2sub3 = (z2.real - z2.imag)**3/absz23
        z2mul3 = (z2.real * z2.imag)**3/absz23
        z3add3 = (z3.real + z3.imag)**3/absz33
        z3sub3 = (z3.real - z3.imag)**3/absz33
        z3mul3 = (z3.real * z3.imag)**3/absz33
        
        abszdelta12 = (zdelta1.real**2 + zdelta1.imag**2)
        abszdelta22 = (zdelta2.real**2 + zdelta2.imag**2)
        abszdelta32 = (zdelta3.real**2 + zdelta3.imag**2)
        zdelta1add2 = (zdelta1.real + zdelta1.imag)**2/abszdelta12
        zdelta1sub2 = (zdelta1.real - zdelta1.imag)**2/abszdelta12
        zdelta1mul2 = (zdelta1.real * zdelta1.imag)**2/abszdelta12
        zdelta2add2 = (zdelta2.real + zdelta2.imag)**2/abszdelta22
        zdelta2sub2 = (zdelta2.real - zdelta2.imag)**2/abszdelta22
        zdelta2mul2 = (zdelta2.real * zdelta2.imag)**2/abszdelta22
        zdelta3add2 = (zdelta3.real + zdelta3.imag)**2/abszdelta32
        zdelta3sub2 = (zdelta3.real - zdelta3.imag)**2/abszdelta32
        zdelta3mul2 = (zdelta3.real * zdelta3.imag)**2/abszdelta32
        
        abszderiv12 = (zderiv1.real**2 + zderiv1.imag**2)
        abszderiv22 = (zderiv2.real**2 + zderiv2.imag**2)
        abszderiv32 = (zderiv3.real**2 + zderiv3.imag**2)
        zderiv1add2 = (zderiv1.real + zderiv1.imag)**2/abszderiv12
        zderiv1sub2 = (zderiv1.real - zderiv1.imag)**2/abszderiv12
        zderiv1mul2 = (zderiv1.real * zderiv1.imag)**2/abszderiv12
        zderiv2add2 = (zderiv2.real + zderiv2.imag)**2/abszderiv22
        zderiv2sub2 = (zderiv2.real - zderiv2.imag)**2/abszderiv22
        zderiv2mul2 = (zderiv2.real * zderiv2.imag)**2/abszderiv22
        zderiv3add2 = (zderiv3.real + zderiv3.imag)**2/abszderiv32
        zderiv3sub2 = (zderiv3.real - zderiv3.imag)**2/abszderiv32
        zderiv3mul2 = (zderiv3.real * zderiv3.imag)**2/abszderiv32
        
        abszderivdelta12 = (zderivdelta1.real**2 + zderivdelta1.imag**2)
        abszderivdelta22 = (zderivdelta2.real**2 + zderivdelta2.imag**2)
        abszderivdelta32 = (zderivdelta3.real**2 + zderivdelta3.imag**2)
        zderivdelta1add2 = (zderivdelta1.real + zderivdelta1.imag)**2/abszderivdelta12
        zderivdelta1sub2 = (zderivdelta1.real - zderivdelta1.imag)**2/abszderivdelta12
        zderivdelta1mul2 = (zderivdelta1.real * zderivdelta1.imag)**2/abszderivdelta12
        zderivdelta2add2 = (zderivdelta2.real + zderivdelta2.imag)**2/abszderivdelta22
        zderivdelta2sub2 = (zderivdelta2.real - zderivdelta2.imag)**2/abszderivdelta22
        zderivdelta2mul2 = (zderivdelta2.real * zderivdelta2.imag)**2/abszderivdelta22
        zderivdelta3add2 = (zderivdelta3.real + zderivdelta3.imag)**2/abszderivdelta32
        zderivdelta3sub2 = (zderivdelta3.real - zderivdelta3.imag)**2/abszderivdelta32
        zderivdelta3mul2 = (zderivdelta3.real * zderivdelta3.imag)**2/abszderivdelta32
        
        abszaccel12 = (zaccel1.real**2 + zaccel1.imag**2)
        abszaccel22 = (zaccel2.real**2 + zaccel2.imag**2)
        abszaccel32 = (zaccel3.real**2 + zaccel3.imag**2)
        zaccel1add2 = (zaccel1.real + zaccel1.imag)**2/abszaccel12
        zaccel1sub2 = (zaccel1.real - zaccel1.imag)**2/abszaccel12
        zaccel1mul2 = (zaccel1.real * zaccel1.imag)**2/abszaccel12
        zaccel2add2 = (zaccel2.real + zaccel2.imag)**2/abszaccel22
        zaccel2sub2 = (zaccel2.real - zaccel2.imag)**2/abszaccel22
        zaccel2mul2 = (zaccel2.real * zaccel2.imag)**2/abszaccel22
        zaccel3add2 = (zaccel3.real + zaccel3.imag)**2/abszaccel32
        zaccel3sub2 = (zaccel3.real - zaccel3.imag)**2/abszaccel32
        zaccel3mul2 = (zaccel3.real * zaccel3.imag)**2/abszaccel32
        
        abszacceldelta12 = (zacceldelta1.real**2 + zacceldelta1.imag**2)
        abszacceldelta22 = (zacceldelta2.real**2 + zacceldelta2.imag**2)
        abszacceldelta32 = (zacceldelta3.real**2 + zacceldelta3.imag**2)
        zacceldelta1add2 = (zacceldelta1.real + zacceldelta1.imag)**2/abszacceldelta12
        zacceldelta1sub2 = (zacceldelta1.real - zacceldelta1.imag)**2/abszacceldelta12
        zacceldelta1mul2 = (zacceldelta1.real * zacceldelta1.imag)**2/abszacceldelta12
        zacceldelta2add2 = (zacceldelta2.real + zacceldelta2.imag)**2/abszacceldelta22
        zacceldelta2sub2 = (zacceldelta2.real - zacceldelta2.imag)**2/abszacceldelta22
        zacceldelta2mul2 = (zacceldelta2.real * zacceldelta2.imag)**2/abszacceldelta22
        zacceldelta3add2 = (zacceldelta3.real + zacceldelta3.imag)**2/abszacceldelta32
        zacceldelta3sub2 = (zacceldelta3.real - zacceldelta3.imag)**2/abszacceldelta32
        zacceldelta3mul2 = (zacceldelta3.real * zacceldelta3.imag)**2/abszacceldelta32
        
        abszloge12 = (zloge1.real**2 + zloge1.imag**2)
        abszloge22 = (zloge2.real**2 + zloge2.imag**2)
        abszloge32 = (zloge3.real**2 + zloge3.imag**2)
        zloge1add2 = (zloge1.real + zloge1.imag)**2/abszloge12
        zloge1sub2 = (zloge1.real - zloge1.imag)**2/abszloge12
        zloge1mul2 = (zloge1.real * zloge1.imag)**2/abszloge12
        zloge2add2 = (zloge2.real + zloge2.imag)**2/abszloge22
        zloge2sub2 = (zloge2.real - zloge2.imag)**2/abszloge22
        zloge2mul2 = (zloge2.real * zloge2.imag)**2/abszloge22
        zloge3add2 = (zloge3.real + zloge3.imag)**2/abszloge32
        zloge3sub2 = (zloge3.real - zloge3.imag)**2/abszloge32
        zloge3mul2 = (zloge3.real * zloge3.imag)**2/abszloge32
        
        abszloge13 = (zloge1.real**3 + zloge1.imag**3)
        abszloge23 = (zloge2.real**3 + zloge2.imag**3)
        abszloge33 = (zloge3.real**3 + zloge3.imag**3)
        zloge1add3 = (zloge1.real + zloge1.imag)**3/abszloge13
        zloge1sub3 = (zloge1.real - zloge1.imag)**3/abszloge13
        zloge1mul3 = (zloge1.real * zloge1.imag)**3/abszloge13
        zloge2add3 = (zloge2.real + zloge2.imag)**3/abszloge23
        zloge2sub3 = (zloge2.real - zloge2.imag)**3/abszloge23
        zloge2mul3 = (zloge2.real * zloge2.imag)**3/abszloge23
        zloge3add3 = (zloge3.real + zloge3.imag)**3/abszloge33
        zloge3sub3 = (zloge3.real - zloge3.imag)**3/abszloge33
        zloge3mul3 = (zloge3.real * zloge3.imag)**3/abszloge33
        
        abszlogedelta12 = (zlogedelta1.real**2 + zlogedelta1.imag**2)
        abszlogedelta22 = (zlogedelta2.real**2 + zlogedelta2.imag**2)
        abszlogedelta32 = (zlogedelta3.real**2 + zlogedelta3.imag**2)
        zlogedelta1add2 = (zlogedelta1.real + zlogedelta1.imag)**2/abszlogedelta12
        zlogedelta1sub2 = (zlogedelta1.real - zlogedelta1.imag)**2/abszlogedelta12
        zlogedelta1mul2 = (zlogedelta1.real * zlogedelta1.imag)**2/abszlogedelta12
        zlogedelta2add2 = (zlogedelta2.real + zlogedelta2.imag)**2/abszlogedelta22
        zlogedelta2sub2 = (zlogedelta2.real - zlogedelta2.imag)**2/abszlogedelta22
        zlogedelta2mul2 = (zlogedelta2.real * zlogedelta2.imag)**2/abszlogedelta22
        zlogedelta3add2 = (zlogedelta3.real + zlogedelta3.imag)**2/abszlogedelta32
        zlogedelta3sub2 = (zlogedelta3.real - zlogedelta3.imag)**2/abszlogedelta32
        zlogedelta3mul2 = (zlogedelta3.real * zlogedelta3.imag)**2/abszlogedelta32
        
        abszlogedelta13 = (zlogedelta1.real**3 + zlogedelta1.imag**3)
        abszlogedelta23 = (zlogedelta2.real**3 + zlogedelta2.imag**3)
        abszlogedelta33 = (zlogedelta3.real**3 + zlogedelta3.imag**3)
        zlogedelta1add3 = (zlogedelta1.real + zlogedelta1.imag)**3/abszlogedelta13
        zlogedelta1sub3 = (zlogedelta1.real - zlogedelta1.imag)**3/abszlogedelta13
        zlogedelta1mul3 = (zlogedelta1.real * zlogedelta1.imag)**3/abszlogedelta13
        zlogedelta2add3 = (zlogedelta2.real + zlogedelta2.imag)**3/abszlogedelta23
        zlogedelta2sub3 = (zlogedelta2.real - zlogedelta2.imag)**3/abszlogedelta23
        zlogedelta2mul3 = (zlogedelta2.real * zlogedelta2.imag)**3/abszlogedelta23
        zlogedelta3add3 = (zlogedelta3.real + zlogedelta3.imag)**3/abszlogedelta33
        zlogedelta3sub3 = (zlogedelta3.real - zlogedelta3.imag)**3/abszlogedelta33
        zlogedelta3mul3 = (zlogedelta3.real * zlogedelta3.imag)**3/abszlogedelta33
        
        abszzeta12 = (zzeta1.real**2 + zzeta1.imag**2)
        abszzeta22 = (zzeta2.real**2 + zzeta2.imag**2)
        abszzeta32 = (zzeta3.real**2 + zzeta3.imag**2)
        zzeta1add2 = (zzeta1.real + zzeta1.imag)**2/abszzeta12
        zzeta1sub2 = (zzeta1.real - zzeta1.imag)**2/abszzeta12
        zzeta1mul2 = (zzeta1.real * zzeta1.imag)**2/abszzeta12
        zzeta2add2 = (zzeta2.real + zzeta2.imag)**2/abszzeta22
        zzeta2sub2 = (zzeta2.real - zzeta2.imag)**2/abszzeta22
        zzeta2mul2 = (zzeta2.real * zzeta2.imag)**2/abszzeta22
        zzeta3add2 = (zzeta3.real + zzeta3.imag)**2/abszzeta32
        zzeta3sub2 = (zzeta3.real - zzeta3.imag)**2/abszzeta32
        zzeta3mul2 = (zzeta3.real * zzeta3.imag)**2/abszzeta32
        
        abszzetaderiv12 = (zzetaderiv1.real**2 + zzetaderiv1.imag**2)
        abszzetaderiv22 = (zzetaderiv2.real**2 + zzetaderiv2.imag**2)
        abszzetaderiv32 = (zzetaderiv3.real**2 + zzetaderiv3.imag**2)
        zzetaderiv1add2 = (zzetaderiv1.real + zzetaderiv1.imag)**2/abszzetaderiv12
        zzetaderiv1sub2 = (zzetaderiv1.real - zzetaderiv1.imag)**2/abszzetaderiv12
        zzetaderiv1mul2 = (zzetaderiv1.real * zzetaderiv1.imag)**2/abszzetaderiv12
        zzetaderiv2add2 = (zzetaderiv2.real + zzetaderiv2.imag)**2/abszzetaderiv22
        zzetaderiv2sub2 = (zzetaderiv2.real - zzetaderiv2.imag)**2/abszzetaderiv22
        zzetaderiv2mul2 = (zzetaderiv2.real * zzetaderiv2.imag)**2/abszzetaderiv22
        zzetaderiv3add2 = (zzetaderiv3.real + zzetaderiv3.imag)**2/abszzetaderiv32
        zzetaderiv3sub2 = (zzetaderiv3.real - zzetaderiv3.imag)**2/abszzetaderiv32
        zzetaderiv3mul2 = (zzetaderiv3.real * zzetaderiv3.imag)**2/abszzetaderiv32
        
        abszzetaaccel12 = (zzetaaccel1.real**2 + zzetaaccel1.imag**2)
        abszzetaaccel22 = (zzetaaccel2.real**2 + zzetaaccel2.imag**2)
        abszzetaaccel32 = (zzetaaccel3.real**2 + zzetaaccel3.imag**2)
        zzetaaccel1add2 = (zzetaaccel1.real + zzetaaccel1.imag)**2/abszzetaaccel12
        zzetaaccel1sub2 = (zzetaaccel1.real - zzetaaccel1.imag)**2/abszzetaaccel12
        zzetaaccel1mul2 = (zzetaaccel1.real * zzetaaccel1.imag)**2/abszzetaaccel12
        zzetaaccel2add2 = (zzetaaccel2.real + zzetaaccel2.imag)**2/abszzetaaccel22
        zzetaaccel2sub2 = (zzetaaccel2.real - zzetaaccel2.imag)**2/abszzetaaccel22
        zzetaaccel2mul2 = (zzetaaccel2.real * zzetaaccel2.imag)**2/abszzetaaccel22
        zzetaaccel3add2 = (zzetaaccel3.real + zzetaaccel3.imag)**2/abszzetaaccel32
        zzetaaccel3sub2 = (zzetaaccel3.real - zzetaaccel3.imag)**2/abszzetaaccel32
        zzetaaccel3mul2 = (zzetaaccel3.real * zzetaaccel3.imag)**2/abszzetaaccel32
        
        abszlogz12 = (mpmath.log(z1.real)**2 + mpmath.log(z1.imag)**2)
        abszlogz22 = (mpmath.log(z2.real)**2 + mpmath.log(z2.imag)**2)
        abszlogz32 = (mpmath.log(z3.real)**2 + mpmath.log(z3.imag)**2)
        zlogz1add2 = (mpmath.log(z1.real) + mpmath.log(z1.imag))**2/abszlogz12
        zlogz1sub2 = (mpmath.log(z1.real) - mpmath.log(z1.imag))**2/abszlogz12
        zlogz2add2 = (mpmath.log(z2.real) + mpmath.log(z2.imag))**2/abszlogz22
        zlogz2sub2 = (mpmath.log(z2.real) - mpmath.log(z2.imag))**2/abszlogz22
        zlogz3add2 = (mpmath.log(z3.real) + mpmath.log(z3.imag))**2/abszlogz32
        zlogz3sub2 = (mpmath.log(z3.real) - mpmath.log(z3.imag))**2/abszlogz32
        
        abszlogz13 = (mpmath.log(z1.real)**3 + mpmath.log(z1.imag)**3)
        abszlogz23 = (mpmath.log(z2.real)**3 + mpmath.log(z2.imag)**3)
        abszlogz33 = (mpmath.log(z3.real)**3 + mpmath.log(z3.imag)**3)
        zlogz1add3 = (mpmath.log(z1.real) + mpmath.log(z1.imag))**3/abszlogz13
        zlogz1sub3 = (mpmath.log(z1.real) - mpmath.log(z1.imag))**3/abszlogz13
        zlogz2add3 = (mpmath.log(z2.real) + mpmath.log(z2.imag))**3/abszlogz23
        zlogz2sub3 = (mpmath.log(z2.real) - mpmath.log(z2.imag))**3/abszlogz23
        zlogz3add3 = (mpmath.log(z3.real) + mpmath.log(z3.imag))**3/abszlogz33
        zlogz3sub3 = (mpmath.log(z3.real) - mpmath.log(z3.imag))**3/abszlogz33
        
        #print("")
        #for objstr in "p1, p2, 1/z1, 1/z2, 1/z3, zz".split(", "):
        #    print("# " + objstr + " # " + str(eval(objstr)))
        
        print("# p1, p2 = " + str(p1)[:-2] + ", " + str(p2)[:-2])
        print("# z1, z2 = " + str(z1) + ", " + str(z2))
        print("# zz3, z3sqrt = " + str(z3) + ", " + str(z3sqrt))
        print("# zz = " + str(zz))
        
        print("")
        for objstr in "z1add2, z1sub2, z1mul2, z2add2, z2sub2, z2mul2, z3add2, z3sub2, z3mul2".split(", "):
            print("# " + objstr + " # " + str(eval(objstr)))
        
        print("")
        for objstr in "zinva1add2, zinva1sub2, zinva1mul2, zinva2add2, zinva2sub2, zinva2mul2, zinva3add2, zinva3sub2, zinva3mul2".split(", "):
            print("# " + objstr + " # " + str(eval(objstr)))
        
        print("")
        for objstr in "z1add3, z1sub3, z1mul3, z2add3, z2sub3, z2mul3, z3add3, z3sub3, z3mul3".split(", "):
            print("# " + objstr + " # " + str(eval(objstr)))
        
        print("")
        for objstr in "zdelta1add2, zdelta1sub2, zdelta1mul2, zdelta2add2, zdelta2sub2, zdelta2mul2, zdelta3add2, zdelta3sub2, zdelta3mul2".split(", "):
            print("# " + objstr + " # " + str(eval(objstr)))
        
        print("")
        for objstr in "zderiv1add2, zderiv1sub2, zderiv1mul2, zderiv2add2, zderiv2sub2, zderiv2mul2, zderiv3add2, zderiv3sub2, zderiv3mul2".split(", "):
            print("# " + objstr + " # " + str(eval(objstr)))
        
        print("")
        for objstr in "zderivdelta1add2, zderivdelta1sub2, zderivdelta1mul2, zderivdelta2add2, zderivdelta2sub2, zderivdelta2mul2, zderivdelta3add2, zderivdelta3sub2, zderivdelta3mul2".split(", "):
            print("# " + objstr + " # " + str(eval(objstr)))
        
        print("")
        for objstr in "zaccel1add2, zaccel1sub2, zaccel1mul2, zaccel2add2, zaccel2sub2, zaccel2mul2, zaccel3add2, zaccel3sub2, zaccel3mul2".split(", "):
            print("# " + objstr + " # " + str(eval(objstr)))
        
        print("")
        for objstr in "zacceldelta1add2, zacceldelta1sub2, zacceldelta1mul2, zacceldelta2add2, zacceldelta2sub2, zacceldelta2mul2, zacceldelta3add2, zacceldelta3sub2, zacceldelta3mul2".split(", "):
            print("# " + objstr + " # " + str(eval(objstr)))
        
        print("")
        for objstr in "zloge1add2, zloge1sub2, zloge1mul2, zloge2add2, zloge2sub2, zloge2mul2, zloge3add2, zloge3sub2, zloge3mul2".split(", "):
            print("# " + objstr + " # " + str(eval(objstr)))
        
        print("")
        for objstr in "zloge1add3, zloge1sub3, zloge1mul3, zloge2add3, zloge2sub3, zloge2mul3, zloge3add3, zloge3sub3, zloge3mul3".split(", "):
            print("# " + objstr + " # " + str(eval(objstr)))
        
        print("")
        for objstr in "zlogedelta1add2, zlogedelta1sub2, zlogedelta1mul2, zlogedelta2add2, zlogedelta2sub2, zlogedelta2mul2, zlogedelta3add2, zlogedelta3sub2, zlogedelta3mul2".split(", "):        
            print("# " + objstr + " # " + str(eval(objstr)))
        
        print("")
        for objstr in "zlogedelta1add3, zlogedelta1sub3, zlogedelta1mul3, zlogedelta2add3, zlogedelta2sub3, zlogedelta2mul3, zlogedelta3add3, zlogedelta3sub3, zlogedelta3mul3".split(", "):        
            print("# " + objstr + " # " + str(eval(objstr)))
        
        print("")
        for objstr in "zlogz1add2, zlogz1sub2, zlogz2add2, zlogz2sub2, zlogz3add2, zlogz3sub2".split(", "):
            print("# " + objstr + " # " + str(eval(objstr)))
        
        print("")
        for objstr in "zlogz1add3, zlogz1sub3, zlogz2add3, zlogz2sub3, zlogz3add3, zlogz3sub3".split(", "):
            print("# " + objstr + " # " + str(eval(objstr)))
        
        print("")
        for objstr in "z1add2 * z2sub2, z1sub2 * z2add2, z1add2 * z2add2, z1sub2 * z2sub2, z1add2 * z2add2 + z1sub2 * z2sub2, z1add2 * z2sub2 + z1sub2 * z2add2, z1add2 * z2add2 - z1sub2 * z2sub2, z1add2 * z2sub2 - z1sub2 * z2add2".split(", "):
            print("# " + objstr + " # " + str(eval(objstr)))
        
        print("")
        for objstr in "zzeta1add2, zzeta1sub2, zzeta1mul2, zzeta2add2, zzeta2sub2, zzeta2mul2, zzeta3add2, zzeta3sub2, zzeta3mul2".split(", "):
            print("# " + objstr + " # " + str(eval(objstr)))
        
        print("")
        for objstr in "zzetaderiv1add2, zzetaderiv1sub2, zzetaderiv1mul2, zzetaderiv2add2, zzetaderiv2sub2, zzetaderiv2mul2, zzetaderiv3add2, zzetaderiv3sub2, zzetaderiv3mul2".split(", "):
            print("# " + objstr + " # " + str(eval(objstr)))
        
        print("")
        for objstr in "zzetaaccel1add2, zzetaaccel1sub2, zzetaaccel1mul2, zzetaaccel2add2, zzetaaccel2sub2, zzetaaccel2mul2, zzetaaccel3add2, zzetaaccel3sub2, zzetaaccel3mul2".split(", "):
            print("# " + objstr + " # " + str(eval(objstr)))
        
        print("")
        # z1add2 = (z1.real + z1.imag)**2/absz12
        # z1sub2 = (z1.real - z1.imag)**2/absz12
        # z2add2 = (z2.real + z2.imag)**2/absz22
        # z2sub2 = (z2.real - z2.imag)**2/absz22
        # z3add2 = (z3.real + z3.imag)**2/absz32
        # z3sub2 = (z3.real - z3.imag)**2/absz32
        # ((z3.real + z3.imag)**2/absz32 + (z3.real - z3.imag)**2/absz32 * i) / ((z1.real + z1.imag)**2/absz12 + (z1.real - z1.imag)**2/absz12 i)
        print("mpc(z3add2, z3sub2) / mpc(z1add2, z1sub2) / abs(mpc(z3add2, z3sub2) / mpc(z1add2, z1sub2))")
        print((mpmath.mpc(z3add2, z3sub2) / mpmath.mpc(z1add2, z1sub2)) / mpmath.fabs(mpmath.mpc(z3add2, z3sub2) / mpmath.mpc(z1add2, z1sub2)))
        print("mpc(z3add2, z3sub2) / mpc(z2add2, z2sub2)) / abs(mpc(z3add2, z3sub2) / mpc(z2add2, z2sub2))")
        print((mpmath.mpc(z3add2, z3sub2) / mpmath.mpc(z2add2, z2sub2)) / mpmath.fabs(mpmath.mpc(z3add2, z3sub2) / mpmath.mpc(z2add2, z2sub2)))
    t2 = time.time()
    print("time elapsed: " + str(t2 - t1))






# p1 # 1494540567481373.0
# p2 # 9636630916797179.0
# 1/z1 # (36744512.1015171956229197103280739437 - 12015881.070601080318800798222919146077j)
# 1/z2 # (87904715.188639180925165045750151652313 - 43696589.848653030675725668146895763964j)
# 1/z3 # (2704962844217125.538705705910498173332 - 2661862477740613.5365894435836498207509j)
# zz # (0.5 + 2130.5551022832359166850148032154490428j)

# z1add2 # 1.5908406864500793645353361929976596086
# z1sub2 # 0.40915931354992063546466380700234039143
# z1mul2 # 5.8394653909110410626079517222303698783e-17
# z2add2 # 1.7971948533725234591521392651319755051
# z2sub2 # 0.20280514662747654084786073486802449488
# z2mul2 # 1.6487080384491363471015970818095662294e-17
# z3add2 # 1.99987101803407614454012928299056126
# z3sub2 # 0.00012898196592385545987071700943873998013
# z3mul2 # 1.7353817878579831448560299726421283004e-32

# z1add3 # 2.2578578179957116906976800971474277942
# z1sub3 # 0.29450672577713627062959049964380722252
# z1mul3 # 5.0213002241013600133896878551258815633e-25
# z2add3 # 2.9883391477192218522593325229220198325
# z2sub3 # 0.11328061360919483318350054375356104334
# z2mul3 # 8.3033389754476882386841813579360556789e-26
# z3add3 # 3.9992262080096689962665927266764899249
# z3sub3 # 0.00000207141195269919462858389141478119104
# z3mul3 # 3.2327010394466022276529143309577673687e-48

# zdelta1add2 # 0.40953805375023273652782763374760472266
# zdelta1sub2 # 1.5904619462497672634721723662523952773
# zdelta1mul2 # 1.6842496943659730340164733893882067108e-54
# zdelta2add2 # 0.20308859817746318929420458502835217963
# zdelta2sub2 # 1.7969114018225368107057954149716478204
# zdelta2mul2 # 1.1444324860701912235649116379795140106e-56
# zdelta3add2 # 0.00013595814920256170368865090807906227002
# zdelta3sub2 # 1.9998640418507974382963113490919209377
# zdelta3mul2 # 5.6553055895148098354094096802762564739e-102

# zderiv1add2 # 0.40953805375023273632945593911797269689
# zderiv1sub2 # 1.5904619462497672636705440608820273031
# zderiv1mul2 # 1.1851853587414793637866013770345936597e-40
# zderiv2add2 # 0.20308859817746318915249672257875469234
# zderiv2sub2 # 1.7969114018225368108475032774212453077
# zderiv2mul2 # 8.0532276840881304539746699456463820609e-43
# zderiv3add2 # 0.00013663038916345499456295705484871734175
# zderiv3sub2 # 1.9998633696108365450054370429451512827
# zderiv3mul2 # 3.7975901230611124159400222855371218538e-88

# zderivdelta1add2 # 0.40953805375023273660376106960957845535
# zderivdelta1sub2 # 1.5904619462497672633962389303904215447
# zderivdelta1mul2 # 1.1851853587414793626851378372804509534e-40
# zderivdelta2add2 # 0.20308859817746318918433970546989866389
# zderivdelta2sub2 # 1.7969114018225368108156602945301013361
# zderivdelta2mul2 # 8.0532276840881304533307893949936419226e-43
# zderivdelta3add2 # 0.00013663038916345499456295705484871793868
# zderivdelta3sub2 # 1.999863369610836545005437042945151282
# zderivdelta3mul2 # 3.7975901230611124159400222855371218491e-88

# zaccel1add2 # 1.5893249456773053622741318795730834412
# zaccel1sub2 # 0.41067505432269463772586812042691655883
# zaccel1mul2 # 2.3992883267041298305985600930225940344e-64
# zaccel2add2 # 1.7960599941903680201998163157784895545
# zaccel2sub2 # 0.20394000580963197980018368422151044554
# zaccel2mul2 # 3.9280481265811006714906504287265221515e-68
# zaccel3add2 # 1.9998391027325984081640380879648831551
# zaccel3sub2 # 0.0001608972674015918359619120351168449375
# zaccel3mul2 # 8.310112390454515244048834787668844096e-144

# zacceldelta1add2 # 1.5893249456773053619995444384632153179
# zacceldelta1sub2 # 0.41067505432269463800045556153678468212
# zacceldelta1mul2 # 2.3992883267041298283617757795064229153e-64
# zacceldelta2add2 # 1.7960599941903680201679142156533144195
# zacceldelta2sub2 # 0.20394000580963197983208578434668558052
# zacceldelta2mul2 # 3.9280481265811006711755744539918759596e-68
# zacceldelta3add2 # 1.9998391027325984081640380879648831544
# zacceldelta3sub2 # 0.00016089726740159183596191203511684558525
# zacceldelta3mul2 # 8.3101123904545152440488347876688440849e-144

# zlog1add2 # 1.8605511619490449845002049566294197358
# zlog1sub2 # 0.13944883805095501549979504337058026416
# zlog1mul2 # 7.5818880860855920096090476168827682827e-15
# zlog2add2 # 1.9704007477436368353024621145899891828
# zlog2sub2 # 0.029599252256363164697537885410010817159
# zlog2mul2 # 1.4952324239398300513259124578346620771e-15
# zlog3add2 # 1.9255961183547569817006591428195325363
# zlog3sub2 # 0.074403881645243018299340857180467463754
# zlog3mul2 # 9.1021041898980879863316439168063071309e-31

# zlog1add3 # 3.2657037329232731945368537862779083153
# zlog1sub3 # 0.067009550884176952330215919953502751954
# zlog1mul3 # 8.4953330944261113060862132599518302579e-22
# zlog2add3 # 3.8275100597159729470981348281745565071
# zlog2sub3 # 0.0070470216421975537849896566096292493556
# zlog2mul3 # 8.0010605029560909349386782480903673449e-23
# zlog3add3 # 3.5844921099988519636364624480757706533
# zlog3sub3 # -0.027225333972133453122224192015702613162
# zlog3mul3 # 1.1649104193984512809421417834564230867e-45

# zlogdelta1add2 # 1.8605511619490449843270824958289201937
# zlogdelta1sub2 # 0.13944883805095501567291750417107980627
# zlogdelta1mul2 # 7.5818880860855920065578511453362428673e-15
# zlogdelta2add2 # 1.9704007477436368352897322057935557713
# zlogdelta2sub2 # 0.029599252256363164710267794206444228696
# zlogdelta2mul2 # 1.495232423939830051286664452260972104e-15
# zlogdelta3add2 # 1.9255961183547569818293078883708312084
# zlogdelta3sub2 # 0.074403881645243018170692111629168791626
# zlogdelta3mul2 # 9.1021041898980879888611236011811963112e-31

# zlogdelta1add3 # 3.2657037329232731937368076958809236701
# zlogdelta1sub3 # 0.067009550884176952447938570542705414735
# zlogdelta1mul3 # 8.4953330944261113000625194472612481215e-22
# zlogdelta2add3 # 3.8275100597159729470260838127839476831
# zlogdelta2sub3 # 0.0070470216421975537894714169593250972107
# zlogdelta2mul3 # 8.0010605029560909345505723294760740515e-23
# zlogdelta3add3 # 3.5844921099988519643051475829361620657
# zlogdelta3sub3 # -0.02722533397213345305396334661113439407
# zlogdelta3mul3 # 1.1649104193984512815283078725824371534e-45

# zlogz1add2 # 1.9980907780169963758253904689170754352
# zlogz1sub2 # 0.001909221983003624174609531082924564781
# zlogz2add2 # 1.9993136025410323348826494561606237024
# zlogz2sub2 # 0.0006863974589676651173505438393762975869
# zlogz3add2 # 1.9999999016668135706889893971561909201
# zlogz3sub2 # 0.000000098333186429311010602843809079955841565

# zlogz1add3 # 3.9885664971968727191151657119129358739
# zlogz1sub3 # -0.00011780904983522549760247061410979578144
# zlogz2add3 # 3.9958844401560131512291778544289434666
# zlogz2sub3 # -0.000025418799737968127825483363937519652774
# zlogz3add3 # 3.9999994100009394406215514866551110497
# zlogz3sub3 # -0.000000000043607896120378186857643538556224029643

# z1add2 * z2sub2 # 0.32263067867646377820990811463552282436
# z1sub2 * z2add2 # 0.73533901252135196744351425890415461745
# z1add2 * z2add2 # 2.8590506942236949508607642713597963928
# z1sub2 * z2sub2 # 0.082979614578489303485813355100526165402
# z1add2 * z2add2 + z1sub2 * z2sub2 # 2.9420303088021842543465776264603225582
# z1add2 * z2sub2 + z1sub2 * z2add2 # 1.0579696911978157456534223735396774418
# z1add2 * z2add2 - z1sub2 * z2sub2 # 2.7760710796452056473749509162592702274
# z1add2 * z2sub2 - z1sub2 * z2add2 # -0.41270833384488818923360614426863179309

# zzeta1add2 # 1.9443872777995322352984409951879586035
# zzeta1sub2 # 0.055612722200467764701559004812041396542
# zzeta1mul2 # 1.1266711090972229058110712750118794443e-14
# zzeta2add2 # 1.9990084346037417832680882905800790155
# zzeta2sub2 # 0.00099156539625821673191170941992098452281
# zzeta2mul2 # 1.9553195037758831156164031438778470976e-15
# zzeta3add2 # 1.8322932551342242652366676545458106954
# zzeta3sub2 # 0.16770674486577573476333234545418930459
# zzeta3mul2 # 9.0808078544356746468512780230459734186e-31

# zzetaderiv1add2 # 0.99999973955977006645097060867223002153
# zzetaderiv1sub2 # 1.0000002604402299335490293913277699785
# zzetaderiv1mul2 # 1.695727212776156172602148784152119511e-14
# zzetaderiv2add2 # 0.99999987762428739306528242195105241391
# zzetaderiv2sub2 # 1.0000001223757126069347175780489475861
# zzetaderiv2mul2 # 3.7439532799715318831938928589918201719e-15
# zzetaderiv3add2 # 0.99999999999999596258626600832220762502
# zzetaderiv3sub2 # 1.000000000000004037413733991677792375
# zzetaderiv3mul2 # 4.075177414856146781208147224745178669e-30

# zzetaaccel1add2 # 0.8029045503813775436860441898542323159
# zzetaaccel1sub2 # 1.1970954496186224563139558101457676841
# zzetaaccel1mul2 # 0.027909103566007840051133147384413727582
# zzetaaccel2add2 # 0.80290464423494414397641846825576464432
# zzetaaccel2sub2 # 1.1970953557650558560235815317442353557
# zzetaaccel2mul2 # 0.027909080923631184321466842156956627484
# zzetaaccel3add2 # 0.80290472380885883380110296572257644833
# zzetaaccel3sub2 # 1.1970952761911411661988970342774235517
# zzetaaccel3mul2 # 0.027909060440629854292037472732178827865

mpc(z3add2, z3sub2) / mpc(z1add2, z1sub2) / abs(mpc(z3add2, z3sub2) / mpc(z1add2, z1sub2))
(0.96849636743199300292888185187651678636 - 0.24902768173645676654501836404537316366j)
mpc(z3add2, z3sub2) / mpc(z2add2, z2sub2)) / abs(mpc(z3add2, z3sub2) / mpc(z2add2, z2sub2))
(0.99370036009019161887874033945385378445 - 0.11206959604024416975979700756993569994j)
[mpc(real='0.5', imag='1862.1214649289442148815469013264688783013'), mpc(real='8.7472737434433601231109444002189983467314e-20', imag='2.6350175324702354438676524772691741940403e-16
')]

# p1 # 1494540567481373.0
# p2 # 9636630916797179.0
# 1/z1 # (12243640.233796284568397409567739983667 + 36669249.260200812872508075951310686863j)
# 1/z2 # (-93102772.421117955244275833174326226871 - 31120807.899196590076811404068606401478j)
# 1/z3 # (1259811741287.2574761885180124001523584 - 3795040744428572.8216092722028733726944j)
# zz # (0.5 + 1862.1214649289442148815469013264688783j)

# z1add2 # 0.39919316296391542420611371407176782717
# z1sub2 # 1.6008068370360845757938862859282321728
# z1mul2 # 6.0381240777829065885091766072724670772e-17
# z2add2 # 0.39866255739859378327556633143699783202
# z2sub2 # 1.601337442601406216724433668563002168
# z2mul2 # 9.3810462130519875599365612939318077313e-18
# z3add2 # 1.0006639252051807559662617422375126891
# z3sub2 # 0.9993360747948192440337382577624873109
# z3mul2 # 7.6514789510865496420407566264742547757e-39

# z1add3 # 0.30697640230663302241859617195160866359
# z1sub3 # -2.4651238642937958340956228783271096877
# z1mul3 # 5.7106218138791207370348781266003428159e-25
# z2add3 # 0.30650583878108538355703677322147572923
# z2sub3 # 2.4674869651612854350990091700070504944
# z2mul3 # 3.4987063441524568620322431815522315905e-26
# z3add3 # 1.0009962185150621426999526649673668832
# z3sub3 # -0.99900444260693664048071757736205759337
# z3mul3 # 6.692958830048635842399468397227417046e-58

# zdelta1add2 # 1.6003774582245308336168330401950160581
# zdelta1sub2 # 0.39962254177546916638316695980498394193
# zdelta1mul2 # 1.3301538749984016267658584352511235351e-54
# zdelta2add2 # 1.6017664337605701729224569856449993901
# zdelta2sub2 # 0.39823356623942982707754301435500060991
# zdelta2mul2 # 4.9849004908928802066974131861948463674e-57
# zdelta3add2 # 0.99868333112074077877414471221471057975
# zdelta3sub2 # 1.0013166688792592212258552877852894202
# zdelta3mul2 # 6.81273279134324213164303450337565859e-108

# zderiv1add2 # 1.6003774582245308337423632063368450476
# zderiv1sub2 # 0.39962254177546916625763679366315495244
# zderiv1mul2 # 9.3601257746690982655745165916867757278e-41
# zderiv2add2 # 1.6017664337605701724965359697959763225
# zderiv2sub2 # 0.39823356623942982750346403020402367749
# zderiv2mul2 # 3.5078118739475278059458111167430677866e-43
# zderiv3add2 # 0.99879905315145909213980344445021046125
# zderiv3sub2 # 1.0012009468485409078601965555497895387
# zderiv3mul2 # 4.1850902231125052936172683568881690525e-94

# zderivdelta1add2 # 1.6003774582245308335048014127924746186
# zderivdelta1sub2 # 0.39962254177546916649519858720752538136
# zderivdelta1mul2 # 9.3601257746690982581649092087836743978e-41
# zderivdelta2add2 # 1.6017664337605701725333311895978990233
# zderivdelta2sub2 # 0.39823356623942982746666881040210097672
# zderivdelta2mul2 # 3.507811873947527806374653713723923286e-43
# zderivdelta3add2 # 0.99879905315145909213980344445021043117
# zderivdelta3sub2 # 1.0012009468485409078601965555497895688
# zderivdelta3mul2 # 4.1850902231125052936172683568883787877e-94

# zaccel1add2 # 0.40091171633267680758901457559975803445
# zaccel1sub2 # 1.5990882836673231924109854244002419656
# zaccel1mul2 # 1.4468231855338559655825220879467217981e-64
# zaccel2add2 # 0.39694763477318761520445092657602953575
# zaccel2sub2 # 1.6030523652268123847955490734239704642
# zaccel2mul2 # 1.3153952469240427785535172571294990869e-68
# zaccel3add2 # 1.0028120087713206681767834849538844572
# zaccel3sub2 # 0.99718799122867933182321651504611554282
# zaccel3mul2 # 3.8356680971010543088733363664498618345e-149

# zacceldelta1add2 # 0.40091171633267680782686338870460595595
# zacceldelta1sub2 # 1.5990882836673231921731366112953940441
# zacceldelta1mul2 # 1.4468231855338559644331154692535290934e-64
# zacceldelta2add2 # 0.39694763477318761516770041916196461754
# zacceldelta2sub2 # 1.6030523652268123848322995808380353824
# zacceldelta2mul2 # 1.3153952469240427787137584347739949127e-68
# zacceldelta3add2 # 1.0028120087713206681767834849538844873
# zacceldelta3sub2 # 0.99718799122867933182321651504611551273
# zacceldelta3mul2 # 3.8356680971010543088733363664499439287e-149

# zlog1add2 # 0.12971463267538483111538009900621184969
# zlog1sub2 # 1.8702853673246151688846199009937881503
# zlog1mul2 # 7.4951473261744968773394458591231159095e-15
# zlog2add2 # 0.76822438672338277863204131884265310667
# zlog2sub2 # 1.2317756132766172213679586811573468933
# zlog2mul2 # 8.2446983511012232820308779742084923152e-17
# zlog3add2 # 0.60083365718733896393924927227671342882
# zlog3sub2 # 1.3991663428126610360607507277232865712
# zlog3mul2 # 1.6362114031883365026739673536594507031e-31

# zlog1add3 # 0.09038448521673750612044266527016382688
# zlog1sub3 # -4.9484848807464584980253078378260705509
# zlog1mul3 # 1.2553958665567866780480483602133442035e-21
# zlog2add3 # 0.68844231664983721486712217708913565954
# zlog2sub3 # 1.3977607007501794513151733938157888776
# zlog2mul3 # 7.6541607580919980768869484820059473949e-25
# zlog3add3 # 0.50086869465078610024664764008211418275
# zlog3sub3 # -1.7799038130126450928031759015639039339
# zlog3mul3 # -7.1178958924545176103086560032873221694e-47

# zlogdelta1add2 # 0.1297146326753848312616950872931391653
# zlogdelta1sub2 # 1.8702853673246151687383049127068608347
# zlogdelta1mul2 # 7.4951473261744968748186346891678699429e-15
# zlogdelta2add2 # 0.76822438672338277858722535702969393692
# zlogdelta2sub2 # 1.2317756132766172214127746429703060631
# zlogdelta2mul2 # 8.2446983511012232852191535808236341597e-17
# zlogdelta3add2 # 0.60083365718733896421161483463525623486
# zlogdelta3sub2 # 1.3991663428126610357883851653647437651
# zlogdelta3mul2 # 1.6362114031883365004409449835504814986e-31

# zlogdelta1add3 # 0.090384485216737506227001610576270348427
# zlogdelta1sub3 # -4.9484848807464584949059844884894788547
# zlogdelta1mul3 # 1.2553958665567866767706819738021666852e-21
# zlogdelta2add3 # 0.68844231664983721481313595755946241775
# zlogdelta2sub3 # 1.3977607007501794514041583483946422978
# zlogdelta2mul3 # 7.6541607580919980813963736839359899499e-25
# zlogdelta3add3 # 0.50086869465078610053055897055071766125
# zlogdelta3sub3 # -1.7799038130126450920820916336501661008
# zlogdelta3mul3 # -7.1178958924545175949321579520965819795e-47

# zlogz1add2 # (2.0148551229905127581348282175504717006 - 0.0081638036434866450108975893414696964719j)
# zlogz1sub2 # (-0.014855122990512758134828217550471700561 + 0.0081638036434866450108975893414696964726j)
# zlogz2add2 # (2.0133756575745037377697782043320773972 - 0.0074818594777942467572000810177871889097j)
# zlogz2sub2 # (-0.013375657574503737769778204332077397173 + 0.0074818594777942467572000810177871889094j)
# zlogz3add2 # 1.9800258509979358472838035683573605592
# zlogz3sub2 # 0.019974149002064152716196431642639440746

# zlogz1add3 # (4.0900565301360791404749406710674025066 - 0.050467730026358101071538521704651111792j)
# zlogz1sub3 # (-0.002174440163876228049520305007091558224 - 0.0022877030021384440793626669218434381332j)
# zlogz2add3 # (4.0809922521054428417004430507698040815 - 0.046113933702425499935757243838706828357j)
# zlogz2sub3 # (0.0018882783248675496691709347730900324785 + 0.0019444983356132577066652727076018572993j)
# zlogz3add3 # 3.8825020279880226821914263097945411103
# zlogz3sub3 # 0.0039337597158384103633696934608717452922

# z1add2 * z2sub2 # 0.63924295868460271358295170297985536821
# z1sub2 * z2add2 # 0.63818174755395943172185693771031537792
# z1add2 * z2add2 # 0.15914336724322813482927572516368028613
# z1sub2 * z2sub2 # 2.5634319265182097198659156341461489677
# z1add2 * z2add2 + z1sub2 * z2sub2 # 2.7225752937614378546951913593098292539
# z1add2 * z2sub2 + z1sub2 * z2add2 # 1.2774247062385621453048086406901707461
# z1add2 * z2add2 - z1sub2 * z2sub2 # -2.4042885592749815850366399089824686816
# z1add2 * z2sub2 - z1sub2 * z2add2 # 0.0010612111306432818610947652695399902853

# zzeta1add2 # 0.047424891829713086508009985462974214303
# zzeta1sub2 # 1.9525751081702869134919900145370257857
# zzeta1mul2 # 1.428219460577776863536009246282027848e-15
# zzeta2add2 # 1.5566264340927602564485782484417501236
# zzeta2sub2 # 0.44337356590723974355142175155824987636
# zzeta2mul2 # 7.5632192685177653451292072911781430456e-17
# zzeta3add2 # 0.055908000389548455023328960973356781687
# zzeta3sub2 # 1.9440919996104515449766710390266432183
# zzeta3mul2 # 1.4557940419318948288679757684316417605e-31

# zzetaderiv1add2 # 1.0000000935951086674075538862275242185
# zzetaderiv1sub2 # 0.99999990640489133259244611377247578151
# zzetaderiv1mul2 # 2.1900108109570223038961796644881479528e-15
# zzetaderiv2add2 # 1.0000000181795141944963783045378591092
# zzetaderiv2sub2 # 0.99999998182048580550362169546214089076
# zzetaderiv2mul2 # 8.2623689027294362392167728700336604565e-17
# zzetaderiv3add2 # 0.9999999999999986818811875342870319227
# zzetaderiv3sub2 # 1.0000000000000013181188124657129680773
# zzetaderiv3mul2 # 4.3435930094400575467075603346448218673e-31

# zzetaaccel1add2 # 0.010122700767967071799715997171186279508
# zzetaaccel1sub2 # 1.9898772992320329282002840028288137205
# zzetaaccel1mul2 # 0.058631733531016690163517108798556602897
# zzetaaccel2add2 # 0.010122718221266924204389213211163974589
# zzetaaccel2sub2 # 1.9898772817787330757956107867888360254
# zzetaaccel2mul2 # 0.058631750591815962136204233080901823441
# zzetaaccel3add2 # 0.010122705073515688997365631105244667317
# zzetaaccel3sub2 # 1.9898772949264843110026343688947553327
# zzetaaccel3mul2 # 0.058631748940761884816166135521235007539

mpc(z3add2, z3sub2) / mpc(z1add2, z1sub2) / abs(mpc(z3add2, z3sub2) / mpc(z1add2, z1sub2))
(0.85684553941272705849073397991786626982 - 0.51557319711997519726622576946512394578j)
mpc(z3add2, z3sub2) / mpc(z2add2, z2sub2)) / abs(mpc(z3add2, z3sub2) / mpc(z2add2, z2sub2))
(0.85664451313132883455397499540045802583 - 0.51590714098758952916286901437781239548j)
[mpc(real='0.5', imag='2176.204119466215638373482619760607322385'), mpc(real='1.8931151851401094842369224890791199185228e-16', imag='-1.8328756251763065878192947715351262201452e-16
')]

# p1 # 1494540567481373.0
# p2 # 9636630916797179.0
# 1/z1 # (12509374.174260921946621287709289815083 - 36579449.493529927605404255699474566775j)
# 1/z2 # (-41788185.270575012349687943184799329388 + 88827802.452775316769020054625059825438j)
# 1/z3 # (2726528067829586.8058130796617948388044 + 2639769030490368.4416130045026471300519j)
# zz # (0.5 + 2176.2041194662156383734826197606073224j)

# z1add2 # 1.6123433926911429894513713490241725296
# z1sub2 # 0.38765660730885701054862865097582747042
# z1mul2 # 6.2722357413890116254609237710744212775e-17
# z2add2 # 1.7703839024496568177473773720364540198
# z2sub2 # 0.22961609755034318225262262796354598017
# z2mul2 # 1.539675438121932724420691992303334535e-17
# z3add2 # 0.00052263262321976591420576878866198425148
# z3sub2 # 1.9994773673767802340857942312113380158
# z3mul2 # 1.7340156122339754344740975025809256107e-32

# z1add3 # 2.3238362923490572539344410213435541755
# z1sub3 # -0.27396179466851919402029932134109907984
# z1mul3 # 5.6383596700904940136953370825571776226e-25
# z2add3 # 2.8795717719971918544012007150925376062
# z2sub3 # -0.13450245982907114977094136926056190703
# z2mul3 # -7.3853401409043676135620045221995913706e-26
# z3add3 # 0.00034848245824694383373837308413577152755
# z3sub3 # 82.463333661929586870958395328762517321
# z3mul3 # -6.6598684946727277518038614007339607342e-47

# zdelta1add2 # 0.38729338256752936763189197878737488526
# zdelta1sub2 # 1.6127066174324706323681080212126251147
# zdelta1mul2 # 1.8920887572838307031904861272383291634e-54
# zdelta2add2 # 0.22932320072970417552642981081349987985
# zdelta2sub2 # 1.7706767992702958244735701891865001202
# zdelta2mul2 # 1.1166790792619783827255011141118430122e-56
# zdelta3add2 # 1.9994940699376078529615549960612471831
# zdelta3sub2 # 0.00050593006239214703844500393875281693529
# zdelta3mul2 # 5.6532634320781740184100565121882226264e-102

# zderiv1add2 # 0.38729338256752936778205159988210784024
# zderiv1sub2 # 1.6127066174324706322179484001178921598
# zderiv1mul2 # 1.3314390972274007501066516561870544611e-40
# zderiv2add2 # 0.22932320072970417553961829867093207858
# zderiv2sub2 # 1.7706767992702958244603817013290679214
# zderiv2mul2 # 7.8579304457135536647354132332077475814e-43
# zderiv3add2 # 1.9994921163140797897543937127460654253
# zderiv3sub2 # 0.00050788368592021024560628725393457467546
# zderiv3mul2 # 3.9591251685420759227902838440629663543e-88

# zderivdelta1add2 # 0.38729338256752936750768594981141079468
# zderivdelta1sub2 # 1.6127066174324706324923140501885892053
# zderivdelta1mul2 # 1.3314390972274007512987509058758332165e-40
# zderivdelta2add2 # 0.2293232007297041755053092920723658032
# zderivdelta2sub2 # 1.7706767992702958244946907079276341968
# zderivdelta2mul2 # 7.8579304457135536654347606539669768499e-43
# zderivdelta3add2 # 1.9994921163140797897543937127460654265
# zderivdelta3sub2 # 0.00050788368592021024560628725393457352472
# zderivdelta3mul2 # 3.9591251685420759227902838440629663634e-88

# zaccel1add2 # 1.6137955149413666462522095684819116842
# zaccel1sub2 # 0.38620448505863335374779043151808831578
# zaccel1mul2 # 2.8330068975807695169420981530197368195e-64
# zaccel2add2 # 1.7715545129694473100070096393602836872
# zaccel2sub2 # 0.22844548703055268999299036063971631282
# zaccel2mul2 # 4.0164822578977317886826431885831134269e-68
# zaccel3add2 # 0.00046490317682802682620881282955801178993
# zaccel3sub2 # 1.9995350968231719731737911871704419882
# zaccel3mul2 # 9.040036371715777094176378639138538918e-144

# zacceldelta1add2 # 1.6137955149413666465262817294677071404
# zacceldelta1sub2 # 0.38620448505863335347371827053229285956
# zacceldelta1mul2 # 2.8330068975807695194709585170737247525e-64
# zacceldelta2add2 # 1.7715545129694473100412614117551197114
# zacceldelta2sub2 # 0.22844548703055268995873858824488028858
# zacceldelta2mul2 # 4.0164822578977317890390037461347247774e-68
# zacceldelta3add2 # 0.0004649031768280268262088128295580106891
# zacceldelta3sub2 # 1.9995350968231719731737911871704419893
# zacceldelta3mul2 # 9.0400363717157770941763786391385389375e-144

# zlog1add2 # 1.2530725555289711513437827169018157464
# zlog1sub2 # 0.74692744447102884865621728309818425356
# zlog1mul2 # 6.591997232943435560804641764644189405e-16
# zlog2add2 # 1.4584733814197175794778217859434918581
# zlog2sub2 # 0.54152661858028242052217821405650814192
# zlog2mul2 # 3.3553486142033844942378498754197197276e-16
# zlog3add2 # 0.093340095623918479057097740346437932866
# zlog3sub2 # 1.9066599043760815209429022596535620671
# zlog3mul2 # 8.7799190072601492604639545692623510179e-31

# zlog1add3 # 1.4346017168542481880646877540904606218
# zlog1sub3 # -0.66021387081936033677116007068557737325
# zlog1mul3 # 1.7309819665508843776711732224338604505e-23
# zlog2add3 # 1.892245471262694976486742128035666675
# zlog2sub3 # -0.42811399718382964938987505103677590259
# zlog2mul3 # -6.602922311183238579263426084539373767e-24
# zlog3add3 # 0.064224985856371839142690005418916199566
# zlog3sub3 # 5.929410331526563594432750646288929418
# zlog3mul3 # -1.8528378739772362636085185278965561857e-45

# zlogdelta1add2 # 1.2530725555289711516796435285807732111
# zlogdelta1sub2 # 0.74692744447102884832035647141922678887
# zlogdelta1mul2 # 6.5919972329434355783010234170855153299e-16
# zlogdelta2add2 # 1.4584733814197175795256708729782273579
# zlogdelta2sub2 # 0.54152661858028242047432912702177264211
# zlogdelta2mul2 # 3.3553486142033844949381777872501989625e-16
# zlogdelta3add2 # 0.093340095623918478910643229325001586952
# zlogdelta3sub2 # 1.9066599043760815210893567706749984131
# zlogdelta3mul2 # 8.7799190072601492632997285247029104692e-31

# zlogdelta1add3 # 1.4346017168542481887250174798999397984
# zlogdelta1sub3 # -0.66021387081936033636430875075584068093
# zlogdelta1mul3 # 1.7309819665508843846635111335096157856e-23
# zlogdelta2add3 # 1.8922454712626949766075576819613768579
# zlogdelta2sub3 # -0.42811399718382964933939904389373155288
# zlogdelta2mul3 # -6.6029223111832385814273096225232387097e-24
# zlogdelta3add3 # 0.06422498585637183903868228835278127058
# zlogdelta3sub3 # 5.9294103315265635994689141165060574219
# zlogdelta3mul3 # -1.8528378739772362658664074290892879277e-45

# zlogz1add2 # 1.9982369827223667211188360572970854404
# zlogz1sub2 # 0.0017630172776332788811639427029145595391
# zlogz2add2 # (1.9992658507239783763950998095574340492 - 0.00025118779216314802280614967340235258829j)
# zlogz2sub2 # (0.00073414927602162360490019044256595077695 + 0.00025118779216314802280614967340235258623j)
# zlogz3add2 # (2.0037403993824407821983069870114485759 + 0.00040353994084361791871084298512922182764j)
# zlogz3sub2 # (-0.0037403993824407821983069870114485759384 - 0.00040353994084361791871084298512922182794j)

# zlogz1add3 # 3.9894405128924139467827836947357899654
# zlogz1sub3 # 0.0001045505585972524214975766664725241324
# zlogz2add3 # (3.9955979580831836942426422134146877917 - 0.0015049161806642855047737865187266419202j)
# zlogz2sub3 # (0.000026893125890118218476020951465849242984 + 0.000014493564713205187352319987389660836206j)
# zlogz3add3 # (4.0225256668678892052233974609638245014 + 0.0024394541842613422730106854286723817733j)
# zlogz3sub3 # (0.000052625429301471812926286206501061173275 - 0.00032299348561471908276480194615786899454j)

# z1add2 * z2sub2 # 0.3702199977408207733243696615335115337
# z1sub2 * z2add2 # 0.68630101725784842991638170755807451418
# z1add2 * z2add2 # 2.8544667876414652055783730365148335255
# z1sub2 * z2sub2 # 0.089012197359865591180875594393580426648
# z1add2 * z2add2 + z1sub2 * z2sub2 # 2.9434789850013307967592486309084139521
# z1add2 * z2sub2 + z1sub2 * z2add2 # 1.0565210149986692032407513690915860479
# z1add2 * z2add2 - z1sub2 * z2sub2 # 2.7654545902815996143974974421212530988
# z1add2 * z2sub2 - z1sub2 * z2add2 # -0.31608101951702765659201204602456298049

# zzeta1add2 # 1.5066743815953753046882823847025297362
# zzeta1sub2 # 0.49332561840462469531171761529747026376
# zzeta1mul2 # 1.5357752302526688216110496180447249365e-15
# zzeta2add2 # 1.305916945565449025578440605421636462
# zzeta2sub2 # 0.69408305443455097442155939457836353802
# zzeta2mul2 # 8.6827916837974396743036009331608079245e-17
# zzeta3add2 # 1.3411311294795422180213504063521385861
# zzeta3sub2 # 0.65886887052045778197864959364786141389
# zzeta3mul2 # 7.2241588928441755685004127891404755679e-32

# zzetaderiv1add2 # 0.99999991877251352223441976060344583038
# zzetaderiv1sub2 # 1.0000000812274864777655802393965541696
# zzetaderiv1mul2 # 1.6494756474583545456872802180275973842e-15
# zzetaderiv2add2 # 1.0000000188637606309241239686103143606
# zzetaderiv2sub2 # 0.99999998113623936907587603138968563938
# zzetaderiv2mul2 # 8.896037699334236353907076856814315497e-17
# zzetaderiv3add2 # 1.0000000000000031039871202871518078964
# zzetaderiv3sub2 # 0.9999999999999968960128797128481921036
# zzetaderiv3mul2 # 2.4086840107271326712854299464629151923e-30

# zzetaaccel1add2 # 0.62534921209441949236858967907269501404
# zzetaaccel1sub2 # 1.374650787905580507631410320927304986
# zzetaaccel1mul2 # 0.096986734542778573458500266541629737069
# zzetaaccel2add2 # 0.625349327332435733448677994252661952
# zzetaaccel2sub2 # 1.374650672667564266551322005747338048
# zzetaaccel2mul2 # 0.096986698972932110475835021764451173857
# zzetaaccel3add2 # 0.62534929998253697276483974251960478046
# zzetaaccel3sub2 # 1.3746507000174630272351602574803952195
# zzetaaccel3mul2 # 0.096986706069059669681000907676150300188

mpc(z3add2, z3sub2) / mpc(z1add2, z1sub2) / abs(mpc(z3add2, z3sub2) / mpc(z1add2, z1sub2))
(0.23402288770673875907030720329879959577 + 0.97223108777152314478523299271066440733j)
mpc(z3add2, z3sub2) / mpc(z2add2, z2sub2)) / abs(mpc(z3add2, z3sub2) / mpc(z2add2, z2sub2))
(0.12888038556167458825404922926787245963 + 0.99166014653079312922442666457818504386j)
[mpc(real='0.5', imag='1885.1980751302581228760071112436369182022'), mpc(real='-2.9225780611835103549798163271773654190358e-18', imag='-2.6348555966733995975660946647521683190398e-
16')]

# p1 # 1494540567481373.0
# p2 # 9636630916797179.0
# 1/z1 # (-38103796.690165264720748138505171076711 - 6530026.4376129149988128627068150893449j)
# 1/z2 # (-15507327.666831338696339983928108489779 - 96933759.369121273699195217257772272251j)
# 1/z3 # (-42091950752854.313341231680939607174807 + 3794807519055534.2510868916699463392231j)
# zz # (0.5 + 1885.1980751302581228760071112436369182j)

# z1add2 # 0.66702971444994545618691958990321042356
# z1sub2 # 1.3329702855500545438130804100967895764
# z1mul2 # 1.8545701179280077461664242000680834899e-17
# z2add2 # 0.68802715772903287568939752749984499881
# z2sub2 # 1.3119728422709671243106024725001550012
# z2mul2 # 2.5249243006956744091956142137146184548e-18
# z3add2 # 1.0221812424032118606355251444020218963
# z3sub2 # 0.97781875759678813936447485559797810372
# z3mul2 # 8.5404117785149037955515445483489299408e-36

# z1add3 # 0.57182872716501570130965986420450924203
# z1sub3 # 1.6153956170953611803027352313672170054
# z1mul3 # 8.3832628750945674005850484228360881041e-26
# z2add3 # 0.59518619349629447770897748824849799845
# z2sub3 # -1.5672264216695364518323351569086035319
# z2mul3 # -4.1842441736666767439397701834005149617e-27
# z3add3 # 1.0336450076398768021180566723584887215
# z3sub3 # -0.96709045489604903154439233475465909764
# z3mul3 # -2.49630569158641857708869840063831389e-53

# zdelta1add2 # 1.3334704181112396360960971463076832033
# zdelta1sub2 # 0.66652958188876036390390285369231679668
# zdelta1mul2 # 4.2059656190924583094282648632260818157e-55
# zdelta2add2 # 1.3114688243069648077764966773701729768
# zdelta2sub2 # 0.68853117569303519222350332262982702317
# zdelta2mul2 # 1.3687612561012948192785378362337155603e-57
# zdelta3add2 # 0.97742990973700596180664053503773652304
# zdelta3sub2 # 1.022570090262994038193359464962263477
# zdelta3mul2 # 2.2070452372843443081926063533415421508e-105

# zderiv1add2 # 1.3334704181112396359157508693277957134
# zderiv1sub2 # 0.66652958188876036408424913067220428666
# zderiv1mul2 # 2.9596851866996738740188369798758651906e-41
# zderiv2add2 # 1.3114688243069648078634603058699060428
# zderiv2sub2 # 0.68853117569303519213653969413009395717
# zderiv2mul2 # 9.6318010670890051889693203767966838193e-44
# zderiv3add2 # 0.97728844302356713823505154022043970299
# zderiv3sub2 # 1.022711556976432861764948459779560297
# zderiv3mul2 # 1.5340836077109435906896870319971090831e-91

# zderivdelta1add2 # 1.3334704181112396361992754928706442303
# zderivdelta1sub2 # 0.66652958188876036380072450712935576973
# zderivdelta1mul2 # 2.9596851866996738790509207709407015576e-41
# zderivdelta2add2 # 1.3114688243069648078191389898332658321
# zderivdelta2sub2 # 0.68853117569303519218086101016673416786
# zderivdelta2mul2 # 9.6318010670890051862277954932181369473e-44
# zderivdelta3add2 # 0.9772884430235671382350515402204396714
# zderivdelta3sub2 # 1.0227115569764328617649484597795603286
# zderivdelta3mul2 # 1.5340836077109435906896870319971133505e-91

# zaccel1add2 # 0.66502974803130109309072610509744839739
# zaccel1sub2 # 1.3349702519686989069092738949025516026
# zaccel1mul2 # 4.7516255072668047750345529614719736973e-65
# zaccel2add2 # 0.6900437545716686640477194197979316307
# zaccel2sub2 # 1.3099562454283313359522805802020683693
# zaccel2mul2 # 3.6504207028303858717361805248920910551e-69
# zaccel3add2 # 1.0243024614579843810308912126386598542
# zaccel3sub2 # 0.9756975385420156189691087873613401458
# zaccel3mul2 # 3.0095677344213258353133943061995743357e-147

# zacceldelta1add2 # 0.66502974803130109280736143238990178826
# zacceldelta1sub2 # 1.3349702519686989071926385676100982117
# zacceldelta1mul2 # 4.7516255072668047830718363353447413039e-65
# zacceldelta2add2 # 0.69004375457166866409206379772468005269
# zacceldelta2sub2 # 1.3099562454283313359079362022753199473
# zacceldelta2mul2 # 3.6504207028303858706914483758880043889e-69
# zacceldelta3add2 # 1.0243024614579843810308912126386598858
# zacceldelta3sub2 # 0.97569753854201561896910878736134011421
# zacceldelta3mul2 # 3.0095677344213258353133943061995821592e-147

# zlog1add2 # 1.0711073511849139363797565798917648586
# zlog1sub2 # 0.92889264881508606362024342010823514138
# zlog1mul2 # 5.0193380027234081997179369692464185086e-17
# zlog2add2 # 0.33470559994379974332696592820174122753
# zlog2sub2 # 1.6652944000562002566730340717982587725
# zlog2mul2 # 6.814400551562123004074878729610856494e-16
# zlog3add2 # 0.62125840862242709407139645987369320361
# zlog3sub2 # 1.3787415913775729059286035401263067964
# zlog3mul2 # 1.4776725762315310287323888063356336732e-31

# zlog1add3 # 1.1105930149538311599789231934935061641
# zlog1sub3 # 0.89692003790730296622110023381744212186
# zlog1mul3 # -3.5626659322047407771309216292740239339e-25
# zlog2add3 # 0.25115844608891397420042397592314605074
# zlog2sub3 # -2.7873393888988216657564028871673711876
# zlog2mul3 # -2.3072508060345194402840411820480383128e-23
# zlog3add3 # 0.52234207437609475641099010850542666692
# zlog3sub3 # -1.7269147733582432596164565461755982105
# zlog3mul3 # 6.0591807741952182523818932179394018664e-47

# zlogdelta1add2 # 1.071107351184913936079779109840046091
# zlogdelta1sub2 # 0.92889264881508606392022089015995390897
# zlogdelta1mul2 # 5.0193380027234081573678135429107822371e-17
# zlogdelta2add2 # 0.33470559994379974336178753902001921613
# zlogdelta2sub2 # 1.6652944000562002566382124609799807839
# zlogdelta2mul2 # 6.8144005515621230033614608949380260505e-16
# zlogdelta3add2 # 0.62125840862242709434973090366702984849
# zlogdelta3sub2 # 1.3787415913775729056502690963329701515
# zlogdelta3mul2 # 1.4776725762315310265604092617169554483e-31

# zlogdelta1add3 # 1.1105930149538311594951700807634616589
# zlogdelta1sub3 # 0.89692003790730296664168838691686802965
# zlogdelta1mul3 # -3.5626659322047407319863336535734335493e-25
# zlogdelta2add3 # 0.25115844608891397422983497205863288007
# zlogdelta2sub3 # -2.7873393888988216655604007634499705567
# zlogdelta2mul3 # -2.3072508060345194398318374312401101405e-23
# zlogdelta3add3 # 0.52234207437609475670612711744864212484
# zlogdelta3sub3 # -1.7269147733582432589087443333332724011
# zlogdelta3mul3 # 6.0591807741952182383742952923757429562e-47

# zlogz1add2 # (2.0125431868410008136259147925532997732 - 0.01456412113132519846664654123487996011j)
# zlogz1sub2 # (-0.012543186841000813625914792553299773167 + 0.01456412113132519846664654123487996011j)
# zlogz2add2 # (2.0059505643988835069587602129416904354 + 0.016602203946059062867294990183808199767j)
# zlogz2sub2 # (-0.0059505643988835069587602129416904354554 - 0.016602203946059062867294990183808199768j)
# zlogz3add2 # (1.9931918061074922409992330936785238858 - 0.0011257944152762324905255422394540680252j)
# zlogz3sub2 # (0.0068081938925077590007669063214761142011 + 0.001125794415276232490525542239454068026j)

# zlogz1add3 # (4.0748935895837309051021663493681002536 - 0.089599347454562733878535011497792106986j)
# zlogz1sub3 # (0.0036663095555406663870400342225519260536 + 0.0010144683678426856252848543032638231509j)
# zlogz2add3 # (4.0342339059662477568898018775823224392 + 0.10078128750658656779833520182413909425j)
# zlogz2sub3 # (-0.0031955147403421098259868593602599403039 - 0.00092485729440823202300220373423154364575j)
# zlogz3add3 # (3.9594196138109560588792636472276325104 - 0.0066637134661940524619572352035312620064j)
# zlogz3sub3 # (0.00078248972269434481320789882953398740311 + 0.00019562186778245147224295099574438724715j)

# z1add2 * z2sub2 # 0.8751248703460865304527634183498525186
# z1sub2 * z2add2 # 0.9171197569042613694577192935431216691
# z1add2 * z2add2 # 0.45893455855380438192107576145656832852
# z1sub2 * z2sub2 # 1.7488208141958477181684415266504574838
# z1add2 * z2add2 + z1sub2 * z2sub2 # 2.2077553727496521000895172881070258123
# z1add2 * z2sub2 + z1sub2 * z2add2 # 1.7922446272503478999104827118929741877
# z1add2 * z2add2 - z1sub2 * z2sub2 # -1.2898862556420433362473657651938891553
# z1add2 * z2sub2 - z1sub2 * z2add2 # -0.041994886558174839004955875193269150494

# zzeta1add2 # 1.977406067926627547391501504238195155
# zzeta1sub2 # 0.02259393207337245260849849576180484496
# zzeta1mul2 # 1.4777087429899379541729816423802305551e-14
# zzeta2add2 # 0.096849366420037522660941619045429032361
# zzeta2sub2 # 1.9031506335799624773390583809545709676
# zzeta2mul2 # 1.9567781456049064195379612014895844592e-15
# zzeta3add2 # 0.0054334966926402185188684388398066796209
# zzeta3sub2 # 1.9945665033073597814811315611601933204
# zzeta3mul2 # 1.5877464340447336851453550299513185907e-30

# zzetaderiv1add2 # 1.0000003123927029514316926805311499018
# zzetaderiv1sub2 # 0.99999968760729704856830731946885009824
# zzetaderiv1mul2 # 2.4397309660254292617381568658659043643e-14
# zzetaderiv2add2 # 0.99999989534729983632913629058653690982
# zzetaderiv2sub2 # 1.0000001046527001636708637094134630902
# zzetaderiv2mul2 # 2.7380473663706450133131970379503596091e-15
# zzetaderiv3add2 # 1.0000000000000033918039190203737947262
# zzetaderiv3sub2 # 0.99999999999999660819608097962620527383
# zzetaderiv3mul2 # 2.8760834562704807691575139921902121174e-30

# zzetaaccel1add2 # 1.1507853146543535097577756421621953458
# zzetaaccel1sub2 # 0.84921468534564649024222435783780465418
# zzetaaccel1mul2 # 0.016430595993828886492894402016149539476
# zzetaaccel2add2 # 1.1507850779193924234594775320419798119
# zzetaaccel2sub2 # 0.84921492208060757654052246795802018805
# zzetaaccel2mul2 # 0.016430541742516983103679446086345752042
# zzetaaccel3add2 # 1.1507851514784424957871453865375648047
# zzetaaccel3sub2 # 0.8492148485215575042128546134624351953
# zzetaaccel3mul2 # 0.016430556228614287463202228263008617188

mpc(z3add2, z3sub2) / mpc(z1add2, z1sub2) / abs(mpc(z3add2, z3sub2) / mpc(z1add2, z1sub2))
(0.94154754014386060362374789957606357366 - 0.33688014136936775675530506581945606626j)
mpc(z3add2, z3sub2) / mpc(z2add2, z2sub2)) / abs(mpc(z3add2, z3sub2) / mpc(z2add2, z2sub2))
(0.94778406862908945613133673309187364037 - 0.3189127768730651654825392298959401251j)
[mpc(real='0.5', imag='1618.5375178319775475283214606293256965473'), mpc(real='-1.8225960462013508144857984452879331721417e-16', imag='-1.9030138764456530405653387744172273942363e-
16')]

# p1 # 1494540567481373.0
# p2 # 9636630916797179.0
# 1/z1 # (-25370779.199616664192266555434627481727 - 29169575.421758737286956329065776149928j)
# 1/z2 # (-8932602.6951626517046435247846434598141 - 97759089.223905681448866249011028519819j)
# 1/z3 # (-2624964035622286.2393304701439676230388 + 2740784495484488.1857291299485921952346j)
# zz # (0.5 + 1618.5375178319775475283214606293256965j)

# z1add2 # 0.0096557116289456249204445068258164988085
# z1sub2 # 1.9903442883710543750795554931741835012
# z1mul2 # 1.6406075399512264236200544010842632963e-16
# z2add2 # 0.81876589205964189101548703837645951975
# z2sub2 # 1.1812341079403581089845129616235404803
# z2mul2 # 8.521080179506857149861269326763513525e-19
# z3add2 # 1.9990685969919984424278951477339796912
# z3sub2 # 0.00093140300800155757210485226602030880985
# z3mul2 # 1.7325975325349744612407604437181609269e-32

# z1add3 # 0.0064579263775713467293400498421869924838
# z1sub3 # -19.112124662123573657337390898112238829
# z1mul3 # -1.4302887212382927498653250612490160418e-23
# z2add3 # 0.75073637357776871835219868187770586964
# z2sub3 # -1.3009236596785351037872400291888097074
# z2mul3 # -7.9705781071324224125403165408040304246e-28
# z3add3 # 3.9944167821778645194591944532291286542
# z3sub3 # -0.000040171522011126286748891198514531630928
# z3mul3 # -3.2229856332287906249578547376334576827e-48

# zdelta1add2 # 1.9902584481532255248913158062307726689
# zdelta1sub2 # 0.009741551846774475108684193769227331108
# zdelta1mul2 # 2.7338820894819125914617296624157717319e-54
# zdelta2add2 # 1.1806264631596443547798143012445185915
# zdelta2sub2 # 0.8193735368403556452201856987554814085
# zdelta2mul2 # 3.3930703958250206638856316636369455383e-58
# zdelta3add2 # 0.00091502292876486342348768239826433131707
# zdelta3sub2 # 1.9990849770712351365765123176017356687
# zdelta3mul2 # 3.3559253593485552448703172307078618013e-102

# zderiv1add2 # 1.9902584481532255249116341625569064785
# zderiv1sub2 # 0.0097415518467744750883658374430935215332
# zderiv1mul2 # 1.9237984936665022711511309111439836685e-40
# zderiv2add2 # 1.1806264631596443547395962450246954131
# zderiv2sub2 # 0.81937353684035564526040375497530458687
# zderiv2mul2 # 2.3876610266061600735570041709273990148e-44
# zderiv3add2 # 0.00090493371225686233813104765892172968095
# zderiv3sub2 # 1.9990950662877431376618689523410782703
# zderiv3mul2 # 2.1882675452334570809282332478529825782e-88

# zderivdelta1add2 # 1.9902584481532255248756820868604427513
# zderivdelta1sub2 # 0.0097415518467744751243179131395572486894
# zderivdelta1mul2 # 1.9237984936665022710109806718720851723e-40
# zderivdelta2add2 # 1.1806264631596443547002108809939055578
# zderivdelta2sub2 # 0.81937353684035564529978911900609444224
# zderivdelta2mul2 # 2.3876610266061600725156628341954870934e-44
# zderivdelta3add2 # 0.00090493371225686233813104765892172849691
# zderivdelta3sub2 # 1.9990950662877431376618689523410782715
# zderivdelta3mul2 # 2.1882675452334570809282332478529825833e-88

# zaccel1add2 # 0.010001340360273961879228781216308357034
# zaccel1sub2 # 1.989998659639726038120771218783691643
# zaccel1mul2 # 2.2550811774390695006628914202283202139e-64
# zaccel2add2 # 0.821196883491902869923387796471131865
# zaccel2sub2 # 1.178803116508097130076612203528868135
# zaccel2mul2 # 6.6001764444893884780370095553828112046e-70
# zaccel3add2 # 1.9991721858186235388886310773264122114
# zaccel3sub2 # 0.00082781418137646111136892267358778861196
# zaccel3mul2 # 2.7640602775178327859619214406464801931e-144

# zacceldelta1add2 # 0.010001340360273961915654711650644546989
# zacceldelta1sub2 # 1.989998659639726038084345288349355453
# zacceldelta1mul2 # 2.2550811774390695004960455100449599384e-64
# zacceldelta2add2 # 0.82119688349190286996278649939967727582
# zacceldelta2sub2 # 1.1788031165080971300372135006003227242
# zacceldelta2mul2 # 6.6001764444893884751279451838838231693e-70
# zacceldelta3add2 # 1.9991721858186235388886310773264122125
# zacceldelta3sub2 # 0.00082781418137646111136892267358778747951
# zacceldelta3mul2 # 2.7640602775178327859619214406464801993e-144

# zlog1add2 # 0.038878816920836507352854469229667658997
# zlog1sub2 # 1.961121183079163492647145530770332341
# zlog1mul2 # 8.8182056046616768558961695732519041484e-15
# zlog2add2 # 0.43446582883759228610516306854978205479
# zlog2sub2 # 1.5655341711624077138948369314502179452
# zlog2mul2 # 4.7350449595436297146245845397635191123e-16
# zlog3add2 # 1.8951613844057677598432162946526257995
# zlog3sub2 # 0.1048386155942322401567837053473742005
# zlog3mul2 # 7.9378223471433828041623325439900658722e-31

# zlog1add3 # 0.026259524360571979685193876646555158649
# zlog1sub3 # 9.4074937875508983837319658596470269088
# zlog1mul3 # 2.83653159233897249385762914258486904e-21
# zlog2add3 # 0.33869424443545172887982762608069178337
# zlog2sub3 # -2.3166915100345998044626217031336540601
# zlog2mul3 # -1.2185982228271681733233986614630470674e-23
# zlog3add3 # 3.430657396757379166730930428321785776
# zlog3sub3 # -0.044636482907465661586622097579084361518
# zlog3mul3 # -9.2995110265892208619845623279540253736e-46

# zlogdelta1add2 # 0.038878816920836507281558677832656329503
# zlogdelta1sub2 # 1.9611211830791634927184413221673436705
# zlogdelta1mul2 # 8.8182056046616768572037319231435625689e-15
# zlogdelta2add2 # 0.43446582883759228613818836527695810828
# zlogdelta2sub2 # 1.5655341711624077138618116347230418917
# zlogdelta2mul2 # 4.735044959543629714071504511232067063e-16
# zlogdelta3add2 # 1.8951613844057677599583066408215371432
# zlogdelta3sub2 # 0.10483861559423224004169335917846285678
# zlogdelta3mul2 # 7.9378223471433828062028212286245592462e-31

# zlogdelta1add3 # 0.026259524360571979636407026182436007909
# zlogdelta1sub3 # 9.4074937875508983926441763714485742852
# zlogdelta1mul3 # 2.8365315923389724970210430591243844636e-21
# zlogdelta2add3 # 0.3386942444354517289099328853459094482
# zlogdelta2sub3 # -2.3166915100345998043310870418562027458
# zlogdelta2mul3 # -1.2185982228271681730792615411614317013e-23
# zlogdelta3add3 # 3.4306573967573791672966386058743993285
# zlogdelta3sub3 # -0.044636482907465661516414550898336347189
# zlogdelta3mul3 # -9.2995110265892208662566983173261746097e-46

# zlogz1add2 # (2.0150138070094220879036783398610649433 + 0.0041007332298446543090679621102867489926j)
# zlogz1sub2 # (-0.015013807009422087903678339861064943315 - 0.0041007332298446543090679621102867489937j)
# zlogz2add2 # (2.0019951243906342600629689038156098271 + 0.020084808068878757637917054537147502677j)
# zlogz2sub2 # (-0.0019951243906342600629689038156098270904 - 0.020084808068878757637917054537147502675j)
# zlogz3add2 # (1.9999993052964330956618776554865948751 - 0.00000012142731302646904304364588793894724475j)
# zlogz3sub2 # (0.00000069470356690433812234451340512495192691 + 0.00000012142731302646904304364588793894782012j)

# zlogz1add3 # (4.0913503652441465285808479533773967116 + 0.02535974923825352086745516354228715149j)
# zlogz1sub3 # (-0.0010894367359109453805585962609204354806 + 0.002554743122442219542369066935557034619j)
# zlogz2add3 # (4.0095607209330271727199977330554312487 + 0.12094216832810009483923049671645166765j)
# zlogz2sub3 # (-0.0032275092874257195051904461891238603207 - 0.0024637119865248613466477734945845979617j)
# zlogz3add3 # (3.9999958317814057828651299178629575403 - 0.00000072856286588800860906258060772328861593j)
# zlogz3sub3 # (0.00000000080950444057616777959304829503212317492 + 0.00000000021496680489512946125755771082632674883j)

# z1add2 * z2sub2 # 0.011405655912546927332753292200911721038
# z1sub2 * z2add2 # 1.6296260167739394595228383553021977629
# z1add2 * z2add2 # 0.0079057673453443225081357214507212765786
# z1sub2 * z2sub2 # 2.3510625599681692906362726310461692395
# z1add2 * z2add2 + z1sub2 * z2sub2 # 2.358968327313513613144408352496890516
# z1add2 * z2sub2 + z1sub2 * z2add2 # 1.641031672686486386855591647503109484
# z1add2 * z2add2 - z1sub2 * z2sub2 # -2.3431567926228249681281369095954479629
# z1add2 * z2sub2 - z1sub2 * z2add2 # -1.6182203608613925321900850631012860419

# zzeta1add2 # 0.51767291451874607621449054742817349037
# zzeta1sub2 # 1.4823270854812539237855094525718265096
# zzeta1mul2 # 6.5448946399841645406327324923925229236e-16
# zzeta2add2 # 0.016514607185393902305229861915384097118
# zzeta2sub2 # 1.9834853928146060976947701380846159029
# zzeta2mul2 # 4.2202446061755426677765367496783636918e-16
# zzeta3add2 # 1.3155801772916886664862365818192263915
# zzeta3sub2 # 0.68441982270831133351376341818077360854
# zzeta3mul2 # 2.9074584070134098010854254196224908908e-32

# zzetaderiv1add2 # 0.99999994716996720580985797441508915956
# zzetaderiv1sub2 # 1.0000000528300327941901420255849108405
# zzetaderiv1mul2 # 6.9775323463328417113132929078243444843e-16
# zzetaderiv2add2 # 0.99999993579504681276646992424716117449
# zzetaderiv2sub2 # 1.0000000642049531872335300757528388255
# zzetaderiv2mul2 # 1.0305690585458237807020923083900896956e-15
# zzetaderiv3add2 # 1.0000000000000021334707347611928707015
# zzetaderiv3sub2 # 0.99999999999999786652926523880712929848
# zzetaderiv3mul2 # 1.1379243440206164385461986648465050944e-30

# zzetaaccel1add2 # 1.9402986208811331214574226888847189873
# zzetaaccel1sub2 # 0.05970137911886687854257731111528101273
# zzetaaccel1mul2 # 0.03645685200196228499442682535653116334
# zzetaaccel2add2 # 1.940298671040429910332618477913389605
# zzetaaccel2sub2 # 0.059701328959570089667381522086610394967
# zzetaaccel2mul2 # 0.036456844287871058700915420503403030079
# zzetaaccel3add2 # 1.9402987353428281767193284378037580224
# zzetaaccel3sub2 # 0.059701264657171823280671562196241977587
# zzetaaccel3mul2 # 0.036456847977436972993427881077330581968

mpc(z3add2, z3sub2) / mpc(z1add2, z1sub2) / abs(mpc(z3add2, z3sub2) / mpc(z1add2, z1sub2))
(0.0053171324178519551148056888075383505587 - 0.99998586395151158047742244023134297193j)
mpc(z3add2, z3sub2) / mpc(z2add2, z2sub2)) / abs(mpc(z3add2, z3sub2) / mpc(z2add2, z2sub2))
(0.5700576521068028125109198100477776395 - 0.82160469404360110126923749090436839068j)
[mpc(real='0.5', imag='1798.147067458075746926822763532138957938'), mpc(real='-7.2944888551534615998852147037616404586002e-18', imag='-2.6340078217058718375932714110004136000123e-1
6')]

# p1 # 1494540567481373.0
# p2 # 9636630916797179.0
# 1/z1 # (-35863967.500052189382758729935052777508 + 14433170.221284487897633173817205258641j)
# 1/z2 # (39156692.362766602835280751366503152996 - 90018800.036463686456917672795837025488j)
# 1/z3 # (-105057678265752.56508750320468752866606 + 3793586525075711.1579357308760047831299j)
# zz # (0.5 + 1798.1470674580757469268227635321389579j)

# z1add2 # 1.6926954798037884104622841896021074543
# z1sub2 # 0.30730452019621158953771581039789254566
# z1mul2 # 8.0263299334392422832731811365673069033e-17
# z2add2 # 1.7315499556487576678022094444051142349
# z2sub2 # 0.26845004435124233219779055559488576515
# z2mul2 # 1.3883621315123645059413865136742792397e-17
# z3add2 # 1.0553445492564502458604048889672885659
# z3sub2 # 0.9446554507435497541395951110327114341
# z3mul2 # 5.3168790928094002197938077219387259572e-35

# z1add3 # 2.5895963085169077614521403141218371119
# z1sub3 # 0.20031673744446822464897234546534009268
# z1mul3 # -8.4555006581228768748164428706569413884e-25
# z2add3 # 2.7301823408179563458553491384892630058
# z2sub3 # -0.16666113493538586301884595764232800493
# z2mul3 # 6.1985948933694782654883363712184610278e-26
# z3add3 # 1.0853794679699516205627005564041635918
# z3sub3 # -0.91917953602803825215191391014026380911
# z3mul3 # -3.8812835482272749289530526688627469806e-52

# zdelta1add2 # 0.30770572360763897051505500840039073853
# zdelta1sub2 # 1.6922942763923610294849449915996092615
# zdelta1mul2 # 1.6491836409685277026235863656262202718e-54
# zdelta2add2 # 0.26807099617183135326249030334828616697
# zdelta2sub2 # 1.731929003828168646737509696651713833
# zdelta2mul2 # 6.8765862829473122065558440183277298375e-57
# zdelta3add2 # 0.94472113106617958883083428407264621461
# zdelta3sub2 # 1.0552788689338204111691657159273537854
# zdelta3mul2 # 1.2008478072497703690030126078649180761e-104

# zderiv1add2 # 0.30770572360763897045236896921543014596
# zderiv1sub2 # 1.692294276392361029547631030784569854
# zderiv1mul2 # 1.1605098173330280034983695414107158689e-40
# zderiv2add2 # 0.26807099617183135312745888879808151613
# zderiv2sub2 # 1.7319290038281686468725411112019184839
# zderiv2mul2 # 4.8389674096035279134090003008655873887e-43
# zderiv3add2 # 0.94410018367590258489454744076399351733
# zderiv3sub2 # 1.0558998163240974151054525592360064827
# zderiv3mul2 # 8.454976813225285241200317986417589696e-91

# zderivdelta1add2 # 0.30770572360763897065936562382402953349
# zderivdelta1sub2 # 1.6922942763923610293406343761759704665
# zderivdelta1mul2 # 1.1605098173330280028041047400744182945e-40
# zderivdelta2add2 # 0.26807099617183135309714581091294911337
# zderivdelta2sub2 # 1.7319290038281686469028541890870508866
# zderivdelta2mul2 # 4.838967409603527913809635540537477279e-43
# zderivdelta3add2 # 0.94410018367590258489454744076399348728
# zderivdelta3sub2 # 1.0558998163240974151054525592360065127
# zderivdelta3mul2 # 8.4549768132252852412003179864175987848e-91

# zaccel1add2 # 1.6910893822335007518596932422140867274
# zaccel1sub2 # 0.30891061776649924814030675778591327258
# zaccel1mul2 # 1.6740602421793059280088756611164550026e-64
# zaccel2add2 # 1.7330647894449967378119231090912416699
# zaccel2sub2 # 0.26693521055500326218807689090875833007
# zaccel2mul2 # 1.6900508494575632371225705160239795052e-68
# zaccel3add2 # 1.057565512765086595394507830707173499
# zaccel3sub2 # 0.942434487234913404605492169292826501
# zaccel3mul2 # 1.3976591339130934995135684503426732016e-146

# zacceldelta1add2 # 1.6910893822335007516523655584182391225
# zacceldelta1sub2 # 0.30891061776649924834763444158176087746
# zacceldelta1mul2 # 1.6740602421793059270037676634183049579e-64
# zacceldelta2add2 # 1.7330647894449967378421818191571226403
# zacceldelta2sub2 # 0.26693521055500326215781818084287735973
# zacceldelta2mul2 # 1.6900508494575632372619864163544383812e-68
# zacceldelta3add2 # 1.057565512765086595394507830707173529
# zacceldelta3sub2 # 0.94243448723491340460549216929282647095
# zacceldelta3mul2 # 1.3976591339130934995135684503426746603e-146

# zlog1add2 # 1.9239774129578611991629101624073012004
# zlog1sub2 # 0.076022587042138800837089837592698799591
# zlog1mul2 # 8.373486008064620179811882163511838814e-15
# zlog2add2 # 1.3962777977538285839058947908828213054
# zlog2sub2 # 0.60372220224617141609410520911717869456
# zlog2mul2 # 2.3887216900061844624992655769327304607e-16
# zlog3add2 # 0.64982254996318178653712032187231753011
# zlog3sub2 # 1.3501774500368182134628796781276824699
# zlog3mul2 # 1.2480578472796945006988324736805381683e-31

# zlog1add3 # 3.5760911269467898321656006248522765096
# zlog1sub3 # 0.028088114706479136607245297919094210075
# zlog1mul3 # -1.0267579440629100931537137157621482679e-21
# zlog2add3 # 1.7412963364829688769378897814661579379
# zlog2sub3 # -0.49507461586343916736385495623808203781
# zlog2mul3 # 3.8963976016198223854326375329081872896e-24
# zlog3add3 # 0.55299871075948037391678693807868656995
# zlog3sub3 # -1.6562207723884407053455898439174557375
# zlog3mul3 # 4.6546177860491536853536427425424592433e-47

# zlogdelta1add2 # 1.9239774129578611990532045355309517877
# zlogdelta1sub2 # 0.07602258704213880094679546446904821229
# zlogdelta1mul2 # 8.373486008064620177822813861474744331e-15
# zlogdelta2add2 # 1.3962777977538285839467403239776663004
# zlogdelta2sub2 # 0.60372220224617141605325967602233369964
# zlogdelta2mul2 # 2.3887216900061844629916613482185239327e-16
# zlogdelta3add2 # 0.64982254996318178680580964590205624606
# zlogdelta3sub2 # 1.3501774500368182131941903540979437539
# zlogdelta3mul2 # 1.2480578472796944987834764208218553755e-31

# zlogdelta1add3 # 3.5760911269467898315970915805552436054
# zlogdelta1sub3 # 0.028088114706479136665981890220483753244
# zlogdelta1mul3 # -1.0267579440629100927124541177518527251e-21
# zlogdelta2add3 # 1.741296336482968877033177633137354229
# zlogdelta2sub3 # -0.49507461586343916731898058661175753644
# zlogdelta2mul3 # 3.8963976016198223866796523496037169319e-24
# zlogdelta3add3 # 0.55299871075948037420866425901545788068
# zlogdelta3sub3 # -1.6562207723884407046981437584097411858
# zlogdelta3mul3 # 4.6546177860491536742085457447519222389e-47

# zlogz1add2 # (1.9988332891452275804629507288346081225 - 0.00041976650497405579549356810773775264801j)
# zlogz1sub2 # (0.0011667108547724195370492711653918775256 + 0.00041976650497405579549356810773775264551j)
# zlogz2add2 # 1.9990310137632357573912983635668298371
# zlogz2sub2 # 0.00096898623676424260870163643317016293164
# zlogz3add2 # (1.9955696880730092452756642826730915216 - 0.00074251413140936909855016360283649141734j)
# zlogz3sub2 # (0.0044303119269907547243357173269084783908 + 0.00074251413140936909855016360283649141694j)

# zlogz1add3 # (3.99300683910739896010101707993776992 - 0.0025127319035507207957743680020654911055j)
# zlogz1sub3 # (-0.000053606838340742991728436125040047532093 - 0.000030532229327949452344896728174351055633j)
# zlogz2add3 # 3.9941917107317746002144703992345202613
# zlogz2sub3 # 0.00004262614135291046209303203773132376761
# zlogz3add3 # (3.9735321105995094818820010583300308856 - 0.004415868332406688002689598384096773679j)
# zlogz3sub3 # (0.00041133745105750335792181615611517860568 + 0.00010438773632552126335714150649659886648j)

# z1add2 * z2sub2 # 0.45440417662647441818223097416787903189
# z1sub2 * z2add2 # 0.53211312831641293286208148377389259292
# z1add2 * z2add2 # 2.9309867829811024027423374050363358768
# z1sub2 * z2sub2 # 0.082495912076010246213350137021892498411
# z1add2 * z2add2 + z1sub2 * z2sub2 # 3.0134826950571126489556875420582283752
# z1add2 * z2sub2 + z1sub2 * z2add2 # 0.98651730494288735104431245794177162481
# z1add2 * z2add2 - z1sub2 * z2sub2 # 2.8484908709050921565289872680144433784
# z1add2 * z2sub2 - z1sub2 * z2add2 # -0.077708951689938514679850509606013561029

# zzeta1add2 # 1.5484876404971501510731046803570518487
# zzeta1sub2 # 0.4515123595028498489268953196429481513
# zzeta1mul2 # 3.9844823561124362535808551189171503764e-16
# zzeta2add2 # 1.8443002139317758741764190992027723861
# zzeta2sub2 # 0.15569978606822412582358090079722761387
# zzeta2mul2 # 1.4642473077093303897316996902411910906e-16
# zzeta3add2 # 1.2377396963623993255065999008347348441
# zzeta3sub2 # 0.76226030363760067449340009916526515593
# zzeta3mul2 # 7.7681274467382033449344286342923112763e-33

# zzetaderiv1add2 # 1.0000000416654248288459378867519997739
# zzetaderiv1sub2 # 0.9999999583345751711540621132480002261
# zzetaderiv1mul2 # 4.3400196707765389728003662984178424993e-16
# zzetaderiv2add2 # 0.99999994976196885068653379363296914046
# zzetaderiv2sub2 # 1.0000000502380311493134662063670308595
# zzetaderiv2mul2 # 6.3096492601455271693190550630154721543e-16
# zzetaderiv3add2 # 1.0000000000000014722481102515295293371
# zzetaderiv3sub2 # 0.99999999999999852775188974847047066287
# zzetaderiv3mul2 # 5.4187862453480005831491087099432856412e-31

# zzetaaccel1add2 # 0.0000021011634674368309938521114711239261948
# zzetaaccel1sub2 # 1.9999978988365325631690061478885288761
# zzetaaccel1mul2 # 0.13684220839727461715062694455908910454
# zzetaaccel2add2 # 0.0000021007299903125131298965674793012939988
# zzetaaccel2sub2 # 1.9999978992700096874868701034325206987
# zzetaaccel2mul2 # 0.13684219497515846747709804052601273338
# zzetaaccel3add2 # 0.0000021008726839378642014206272710574836397
# zzetaaccel3sub2 # 1.9999978991273160621357985793727289425
# zzetaaccel3mul2 # 0.13684219371327916270699972870146541121

mpc(z3add2, z3sub2) / mpc(z1add2, z1sub2) / abs(mpc(z3add2, z3sub2) / mpc(z1add2, z1sub2))
(0.8522533341754909261815142597359824592 + 0.52312929031622669227650852799959516066j)
mpc(z3add2, z3sub2) / mpc(z2add2, z2sub2)) / abs(mpc(z3add2, z3sub2) / mpc(z2add2, z2sub2))
(0.83848461277624405110685984941204959239 + 0.54492527390227742250821749205955499116j)
[mpc(real='0.5', imag='2241.5361865237664020520729570874232387402'), mpc(real='-2.2742948353968696538417712325099735320647e-16', imag='2.1866755236470103043156449257092259793107e-1
6')]

# p1 # 1766854433245813.0
# p2 # 5685950043228479.0
# 1/z1 # (19267194.829341034017668795523857032548 - 37358126.781920250919921977264346903001j)
# 1/z2 # (21533158.919672151319261834397008566388 - 72265296.720961595101626411586538149554j)
# 1/z3 # (-2284812548638283.0158511840202034501722 - 2196788032259255.9587730797387892250259j)
# zz # (0.5 + 2241.5361865237664020520729570874232387j)

# z1add2 # 1.8147658274758853833761830912252136817
# z1sub2 # 0.18523417252411461662381690877478631829
# z1mul2 # 9.3930114039296644850498010766177564502e-17
# z2add2 # 1.5473492052653266481792715405760146053
# z2sub2 # 0.4526507947346733518207284594239853947
# z2mul2 # 1.3172431617710670631218581188309072593e-17
# z3add2 # 0.00077126475422445721858702503080570490272
# z3sub2 # 1.9992287352457755427814129749691942951
# z3mul2 # 2.4846546193892956459863223356359993655e-32

# z1add3 # 3.0622907599957212667055568268224795537
# z1sub3 # -0.099861296262957149425514283553312284927
# z1mul3 # 1.1403096751098586794450500653525003707e-24
# z2add3 # 2.1303801448688154399449158819662813501
# z2sub3 # -0.337069558621648439173351756479833439
# z2mul3 # 5.2914357912775794093790629654479058676e-26
# z3add3 # 0.00051430872554723970760951663947940799149
# z3sub3 # 67.875398561794402146779551236791968302
# z3mul3 # 9.4041101350497093658838043238708051165e-47

# zdelta1add2 # 0.18497559610391124183265973845967892015
# zdelta1sub2 # 1.8150244038960887581673402615403210799
# zdelta1mul2 # 2.1497633393890504220324535181102321304e-54
# zdelta2add2 # 0.4522774872703800010982624143035365145
# zdelta2sub2 # 1.5477225127296199989017375856964634855
# zdelta2mul2 # 2.913156411686006123004179848405907714e-56
# zdelta3add2 # 1.9992442808345696076328301975162416695
# zdelta3sub2 # 0.00075571916543039236716980248375833046201
# zdelta3mul2 # 1.7229019580351408536024512965525496538e-101

# zderiv1add2 # 0.1849755961039112419477877829887711377
# zderiv1sub2 # 1.8150244038960887580522122170112288623
# zderiv1mul2 # 1.5127614647198875964797806149369750743e-40
# zderiv2add2 # 0.45227748727038000114341477228976305611
# zderiv2sub2 # 1.5477225127296199988565852277102369439
# zderiv2mul2 # 2.0499515828345419625475526271657966688e-42
# zderiv3add2 # 1.9992461539182306821488055006042951808
# zderiv3sub2 # 0.00075384608176931785119449939570481917488
# zderiv3mul2 # 1.2369868393628951012519878580506198388e-87

# zderivdelta1add2 # 0.18497559610391124177252749082486648731
# zderivdelta1sub2 # 1.8150244038960887582274725091751335127
# zderivdelta1mul2 # 1.5127614647198875971300733815591101011e-40
# zderivdelta2add2 # 0.45227748727038000106477688351264093908
# zderivdelta2sub2 # 1.5477225127296199989352231164873590609
# zderivdelta2mul2 # 2.0499515828345419631360570265055355815e-42
# zderivdelta3add2 # 1.9992461539182306821488055006042951829
# zderivdelta3sub2 # 0.00075384608176931785119449939570481713052
# zderivdelta3mul2 # 1.2369868393628951012519878580506198438e-87

# zaccel1add2 # 1.8157991595850389001666243266079253669
# zaccel1sub2 # 0.18420084041496109983337567339207463314
# zaccel1mul2 # 2.4394161608109495855603735897701829068e-64
# zaccel2add2 # 1.548841780612875321177552172436000661
# zaccel2sub2 # 0.45115821938712467882244782756399933904
# zaccel2mul2 # 3.1989125897419862355627909476229557068e-67
# zaccel3add2 # 0.00070278333682416927164524005802684320304
# zaccel3sub2 # 1.9992972166631758307283547599419731568
# zaccel3mul2 # 6.1587637760769826829319174597762627606e-143

# zacceldelta1add2 # 1.8157991595850389003415545248239747021
# zacceldelta1sub2 # 0.18420084041496109965844547517602529796
# zacceldelta1mul2 # 2.4394161608109495866057090082395726794e-64
# zacceldelta2add2 # 1.5488417806128753212561210908654962852
# zacceldelta2sub2 # 0.45115821938712467874387890913450371483
# zacceldelta2mul2 # 3.198912589741986236478330136347011801e-67
# zacceldelta3add2 # 0.0007027833368241692716452400580268412289
# zacceldelta3sub2 # 1.9992972166631758307283547599419731588
# zacceldelta3mul2 # 6.1587637760769826829319174597762627846e-143

# zlog1add2 # 1.5232511071430650907976124987081821255
# zlog1sub2 # 0.47674889285693490920238750129181787447
# zlog1mul2 # 2.4013620885352267808898221152121868566e-15
# zlog2add2 # 1.1765988686692922353813031259214290646
# zlog2sub2 # 0.82340113133070776461869687407857093543
# zlog2mul2 # 8.4998429826403946027258144448066454109e-17
# zlog3add2 # 0.095649634526928096896815279281194650551
# zlog3sub2 # 1.9043503654730719031031847207188053495
# zlog3mul2 # 1.2615594911095918401855010023104068621e-30

# zlog1add3 # 2.0629791760956278466883061474811706959
# zlog1sub3 # -0.3612202844267784036701591412417687087
# zlog1mul3 # 1.291290825473645035109189644054626436e-22
# zlog2add3 # 1.2905540623533748491911752101493970305
# zlog2sub3 # -0.75552832629565504421226600802732048627
# zlog2mul3 # 7.9240994443548881681505863292527523209e-25
# zlog3add3 # 0.065866457204345118166659807123910885112
# zlog3sub3 # 5.8513976428119180315642025951244851422
# zlog3mul3 # 3.155011415296849128273041252677429521e-45

# zlogdelta1add2 # 1.5232511071430650910553725900731975049
# zlogdelta1sub2 # 0.47674889285693490894462740992680249511
# zlogdelta1mul2 # 2.4013620885352267832555425675181867984e-15
# zlogdelta2add2 # 1.1765988686692922354738161234859438229
# zlogdelta2sub2 # 0.82340113133070776452618387651405617706
# zlogdelta2mul2 # 8.499842982640394611631083473378180054e-17
# zlogdelta3add2 # 0.095649634526928096767723031326391602308
# zlogdelta3sub2 # 1.9043503654730719032322769686736083977
# zlogdelta3mul2 # 1.2615594911095918405455806108122216369e-30

# zlogdelta1add3 # 2.0629791760956278473974814776339471686
# zlogdelta1sub3 # -0.36122028442677840340969903556133406511
# zlogdelta1mul3 # 1.2912908254736450371335123414785822125e-22
# zlogdelta2add3 # 1.2905540623533748493581264172785922637
# zlogdelta2sub3 # -0.75552832629565504409356547927565240478
# zlogdelta2mul3 # 7.9240994443548881806941969215990340877e-25
# zlogdelta3add3 # 0.065866457204345118074836400380250064328
# zlogdelta3sub3 # 5.8513976428119180358477330195196648618
# zlogdelta3mul3 # 3.1550114152968491316126420102361018346e-45

# zlogz1add2 # 1.9993238513707387716426073285207723732
# zlogz1sub2 # 0.00067614862926122835739267147922762678594
# zlogz2add2 # 1.9979253447280722306890525208637907594
# zlogz2sub2 # 0.0020746552719277693109474791362092405722
# zlogz3add2 # (2.0037926376826579479781208610995538955 + 0.00023629811639037933798390253655767139878j)
# zlogz3sub2 # (-0.0037926376826579479781208610995538954495 - 0.00023629811639037933798390253655767139834j)

# zlogz1add3 # 3.9959458494327814732939129888062992007
# zlogz1sub3 # 0.000024851816124722335388591614520325913157
# zlogz2add3 # 3.9875778400680249859973166588276922867
# zlogz2sub3 # 0.00013343175724352787883845168546863516725
# zlogz3add3 # (4.022842120406016104053010999784142916 + 0.001428604427353372258751878330356704874j)
# zlogz3sub3 # (-0.000031022183293829358317326463712950073911 + 0.00033077000660192936254572178902877133371j)

# z1add2 * z2sub2 # 0.82145519406428662787965022502894500708
# z1sub2 * z2add2 # 0.28662194964316915748582712373054685425
# z1add2 * z2add2 # 2.8080764608874841388727159574214823564
# z1sub2 * z2sub2 # 0.083846395405060075761806693819025782323
# z1add2 * z2add2 + z1sub2 * z2sub2 # 2.8919228562925442146345226512405081387
# z1add2 * z2sub2 + z1sub2 * z2add2 # 1.1080771437074557853654773487594918613
# z1add2 * z2add2 - z1sub2 * z2sub2 # 2.724230065482424063110909263602456574
# z1add2 * z2sub2 - z1sub2 * z2add2 # 0.53483324442111747039382310129839815283

# zzeta1add2 # 1.4922306367834087689332530329836723175
# zzeta1sub2 # 0.5077693632165912310667469670163276825
# zzeta1mul2 # 1.8269468485279984866605127279646074426e-15
# zzeta2add2 # 1.7756738947144909158056198141467726151
# zzeta2sub2 # 0.22432610528550908419438018585322738494
# zzeta2mul2 # 1.4097585433978210203598328041000678005e-15
# zzeta3add2 # 1.064498167698873309120391728846843665
# zzeta3sub2 # 0.93550183230112669087960827115315633502
# zzeta3mul2 # 5.5167129160077494238245640436164134783e-33

# zzetaderiv1add2 # 0.99999991160387024288307528931676592456
# zzetaderiv1sub2 # 1.0000000883961297571169247106832340754
# zzetaderiv1mul2 # 1.9534682828329455587351080478862938665e-15
# zzetaderiv2add2 # 0.9999999168480207371845234701622536491
# zzetaderiv2sub2 # 1.0000000831519792628154765298377463509
# zzetaderiv2mul2 # 1.7285626115796350920622614581728220677e-15
# zzetaderiv3add2 # 0.99999999999999539609218185779907726372
# zzetaderiv3sub2 # 1.0000000000000046039078181422009227363
# zzetaderiv3mul2 # 5.2989917994877194633904168934138879081e-30

# zzetaaccel1add2 # 0.023130413038988840815854125649605413636
# zzetaaccel1sub2 # 1.9768695869610111591841458743503945864
# zzetaaccel1mul2 # 0.2918428874833695894976003366581248297
# zzetaaccel2add2 # 0.023130432893099665233584898144012468804
# zzetaaccel2sub2 # 1.9768695671069003347664151018559875312
# zzetaaccel2mul2 # 0.29184291064376243551872123066419536051
# zzetaaccel3add2 # 0.023130467089978348230146532462509613985
# zzetaaccel3sub2 # 1.976869532910021651769853467537490386
# zzetaaccel3mul2 # 0.29184291576678140526142250553090470432

mpc(z3add2, z3sub2) / mpc(z1add2, z1sub2) / abs(mpc(z3add2, z3sub2) / mpc(z1add2, z1sub2))
(0.10192675696888263792299846211776868399 + 0.99479190598527003425609990837985833405j)
mpc(z3add2, z3sub2) / mpc(z2add2, z2sub2)) / abs(mpc(z3add2, z3sub2) / mpc(z2add2, z2sub2))
(0.28113650226163182441356255288338725099 + 0.95966778996488961251648432120095285681j)
[mpc(real='0.5', imag='1470.9665891271649672004237430624771500401'), mpc(real='3.1548912336520410267662847517612411944604e-16', imag='2.506287803313550622743085926841686504697e-18'
)]

# p1 # 1766854433245813.0
# p2 # 5685950043228479.0
# 1/z1 # (16730337.768333052221770439615118793515 + 38560993.651659206509372866154594771613j)
# 1/z2 # (29462288.313142603331292258892121855908 - 69411264.291768521086003103148265696204j)
# 1/z3 # (3169481356615412.4982684543776764072541 - 25178783921877.076474314809203430858002j)
# zz # (0.5 + 1470.96658912716496720042374306247715j)

# z1add2 # 0.26973220166230816595897608573315945821
# z1sub2 # 1.7302677983376918340410239142668405418
# z1mul2 # 7.5457695786134099977715566534828750266e-17
# z2add2 # 1.7193220711389388493312796752193338215
# z2sub2 # 0.28067792886106115066872032478066617852
# z2mul2 # 2.2750122586981938669477945170120913263e-17
# z3add2 # 1.015887264933829789118726698443077985
# z3sub2 # 0.98411273506617021088127330155692201503
# z3mul2 # 6.2810821585813541544323704204610214971e-36

# z1add3 # 0.19758662635696988932566551628691747713
# z1sub3 # -3.2101722635902018594879925723072772841
# z1mul3 # 9.2451435520583617185810347549540853182e-25
# z2add3 # 2.6850186645567865504685280478911626598
# z2sub3 # -0.17710215522067071650478608154879007605
# z2mul3 # 1.2923705807423165438186871428524333259e-25
# z3add3 # 1.0240217170925521252049398462417797219
# z3sub3 # 0.97635593559071782286332255719048259719
# z3mul3 # 1.5743185191434475562949506735158290492e-53

# zdelta1add2 # 1.7298031996537130626498084658099682517
# zdelta1sub2 # 0.27019680034628693735019153419003174829
# zdelta1mul2 # 7.422925295679207052670599807015782432e-55
# zdelta2add2 # 0.28020583646452785273725219286547687624
# zdelta2sub2 # 1.7197941635354721472627478071345231238
# zdelta2mul2 # 2.1665733558514049090565222815845768344e-56
# zdelta3add2 # 0.98470067144356148829478804192687989699
# zdelta3sub2 # 1.015299328556438511705211958073120103
# zdelta3mul2 # 1.7439582866808699151565435548881433499e-105

# zderiv1add2 # 1.7298031996537130627051517245112988407
# zderiv1sub2 # 0.27019680034628693729484827548870115929
# zderiv1mul2 # 5.2234193118156102720969117111469572827e-41
# zderiv2add2 # 0.28020583646452785268989266277226821778
# zderiv2sub2 # 1.7197941635354721473101073372277317822
# zderiv2mul2 # 1.5245904622005050202990492604780541321e-42
# zderiv3add2 # 0.98479247795196161029049213638787140442
# zderiv3sub2 # 1.0152075220480383897095078636121285956
# zderiv3mul2 # 1.2338181504381703009843090432257270572e-91

# zderivdelta1add2 # 1.7298031996537130625694514949681307279
# zderivdelta1sub2 # 0.2701968003462869374305485050318692721
# zderivdelta1mul2 # 5.2234193118156102701533603562662670343e-41
# zderivdelta2add2 # 0.28020583646452785264707561809169186271
# zderivdelta2sub2 # 1.7197941635354721473529243819083081373
# zderivdelta2mul2 # 1.5245904622005050204803342723953560103e-42
# zderivdelta3add2 # 0.98479247795196161029049213638787143903
# zderivdelta3sub2 # 1.015207522048038389709507863612128561
# zderivdelta3mul2 # 1.2338181504381703009843090432257214424e-91

# zaccel1add2 # 0.27159261883233362074415010136268810995
# zaccel1sub2 # 1.72840738116766637925584989863731189
# zaccel1mul2 # 3.6065882845960822931953069958445815608e-65
# zaccel2add2 # 1.7212084434483029135105013452958722944
# zaccel2sub2 # 0.27879155655169708648949865470412770556
# zaccel2mul2 # 1.0243730662746136201337093649989517044e-67
# zaccel3add2 # 1.0131682531055674112252395934249428075
# zaccel3sub2 # 0.98683174689443258877476040657505719245
# zaccel3mul2 # 1.9833027968342594711053878568484983225e-147

# zacceldelta1add2 # 0.27159261883233362088014548637098835972
# zacceldelta1sub2 # 1.7284073811676663791198545136290116403
# zacceldelta1mul2 # 3.606588284596082291847373150331101323e-65
# zacceldelta2add2 # 1.7212084434483029135532277555728502902
# zacceldelta2sub2 # 0.27879155655169708644677224442714970979
# zacceldelta2mul2 # 1.0243730662746136202549754471385574256e-67
# zacceldelta3add2 # 1.0131682531055674112252395934249427729
# zacceldelta3sub2 # 0.98683174689443258877476040657505722706
# zacceldelta3mul2 # 1.9833027968342594711053878568484878989e-147

# zlog1add2 # 0.05328669081004211960294298378986588005
# zlog1sub2 # 1.94671330918995788039705701621013412
# zlog1mul2 # 7.0591245305744375371266041189684171827e-15
# zlog2add2 # 1.3696818305921584991402303705336238531
# zlog2sub2 # 0.6303181694078415008597696294663761469
# zlog2mul2 # 3.3447820290978101266208127968818094816e-16
# zlog3add2 # 1.4259822571503095687043645326562800489
# zlog3sub2 # 0.5740177428496904312956354673437199511
# zlog3mul2 # 2.5135866397720094130069054732848534561e-31

# zlog1add3 # 0.036166864719317035617053101332059130804
# zlog1sub3 # -7.9861181814076142663952227569808248889
# zlog1mul3 # 1.7438494983721894475207457888434792917e-21
# zlog2add3 # 1.6802632225949485346978696094975731767
# zlog2sub3 # -0.52455075798204239328509750372271913441
# zlog2mul3 # 6.412088552002332271890944946272825752e-24
# zlog3add3 # 1.8119011219894267822049030056727138287
# zlog3sub3 # 0.46275517707141261512603279279600587717
# zlog3mul3 # 1.3409238033319292451795089947201916864e-46

# zlogdelta1add2 # 0.053286690810042119666872660421465200136
# zlogdelta1sub2 # 1.9467133091899578803331273395785347999
# zlogdelta1mul2 # 7.0591245305744375361727504161872065337e-15
# zlogdelta2add2 # 1.3696818305921584991975402671006844692
# zlogdelta2sub2 # 0.63031816940784150080245973289931553083
# zlogdelta2mul2 # 3.3447820290978101276577918109212352635e-16
# zlogdelta3add2 # 1.4259822571503095685247829260749811525
# zlogdelta3sub2 # 0.57401774284969043147521707392501884745
# zlogdelta3mul2 # 2.5135866397720094108874272983853132015e-31

# zlogdelta1add3 # 0.036166864719317035661228246848766049563
# zlogdelta1sub3 # -7.9861181814076142613844943712189106595
# zlogdelta1mul3 # 1.7438494983721894461590515787984475551e-21
# zlogdelta2add3 # 1.6802632225949485348272403719562174777
# zlogdelta2sub3 # -0.52455075798204239322102281445266047988
# zlogdelta2mul3 # 6.4120885520023322749640988106297966333e-24
# zlogdelta3add3 # 1.8119011219894267817699985513070508156
# zlogdelta3sub3 # 0.46275517707141261531953473630918757107
# zlogdelta3mul3 # 1.3409238033319292434149382624786061007e-46

# zlogz1add2 # (2.0152279513801662066854048168189526759 - 0.0055376856451955927792420086047037993464j)
# zlogz1sub2 # (-0.015227951380166206685404816818952675892 + 0.0055376856451955927792420086047037993466j)
# zlogz2add2 # 1.9989448923718299006791944569507523443
# zlogz2sub2 # 0.0010551076281700993208055430492476556625
# zlogz3add2 # 1.9919832755328914271226124591455340185
# zlogz3sub2 # 0.0080167244671085728773875408544659814952

# zlogz1add3 # (4.0925879082646931677530391780156068539 - 0.034260554662345356150610163556900362396j)
# zlogz1sub3 # (-0.0014851792706539745921841613736899213715 - 0.0025498106122951397800418464394714931128j)
# zlogz2add3 # 3.9936760267034449433251488858370473175
# zlogz2sub3 # 0.000048430253623418591199965227354725295041
# zlogz3add3 # 3.9522821937026095998939878706967457011
# zlogz3sub3 # -0.001009055025938547072628986154017476697

# z1add2 * z2sub2 # 0.075707875709710731654599927279583221251
# z1sub2 * z2add2 # 2.9748876146629720983992071062519319478
# z1add2 * z2add2 # 0.46375652761490560026335224418673569517
# z1sub2 * z2sub2 # 0.48564798201241156968284072228174913579
# z1add2 * z2add2 + z1sub2 * z2sub2 # 0.94940450962731716994619296646848483096
# z1add2 * z2sub2 + z1sub2 * z2add2 # 3.0505954903726828300538070335315151691
# z1add2 * z2add2 - z1sub2 * z2sub2 # -0.021891454397505969419488478095013440628
# z1add2 * z2sub2 - z1sub2 * z2add2 # -2.8991797389532613667446071789723487265

# zzeta1add2 # 1.594352520582940481119124830056047482
# zzeta1sub2 # 0.40564747941705951888087516994395251805
# zzeta1mul2 # 3.7550554502732297759334016650131073441e-16
# zzeta2add2 # 0.16668384000675993269867681455620624306
# zzeta2sub2 # 1.8333161599932400673013231854437937569
# zzeta2mul2 # 2.2937464822791632017967811119160669331e-16
# zzeta3add2 # 1.1655994343729702427523348174721248802
# zzeta3sub2 # 0.8344005656270297572476651825278751198
# zzeta3mul2 # 5.126757468495013564317542548452234854e-33

# zzetaderiv1add2 # 1.0000000408047055029664642186535378132
# zzetaderiv1sub2 # 0.99999995919529449703353578134646218678
# zzetaderiv1mul2 # 4.1625604935590418289803222233601542004e-16
# zzetaderiv2add2 # 1.0000000343764018317785802852727188317
# zzetaderiv2sub2 # 0.99999996562359816822141971472728116834
# zzetaderiv2mul2 # 2.9543423180040703302251743428110824894e-16
# zzetaderiv3add2 # 1.0000000000000017235276897103203559994
# zzetaderiv3sub2 # 0.99999999999999827647231028967964400056
# zzetaderiv3mul2 # 7.4263692429954868790548175743053470398e-31

# zzetaaccel1add2 # 0.029626967788566630854486389161414656693
# zzetaaccel1sub2 # 1.9703730322114333691455136108385853433
# zzetaaccel1mul2 # 0.3035142879770645207530864888018414232
# zzetaaccel2add2 # 0.029626937819501896973091376877784242746
# zzetaaccel2sub2 # 1.9703730621804981030269086231222157572
# zzetaaccel2mul2 # 0.30351426099112771266015515448704958206
# zzetaaccel3add2 # 0.029626940759836073039978413454664109593
# zzetaaccel3sub2 # 1.9703730592401639269600215865453358904
# zzetaaccel3mul2 # 0.30351428175394126764444580047134823462

mpc(z3add2, z3sub2) / mpc(z1add2, z1sub2) / abs(mpc(z3add2, z3sub2) / mpc(z1add2, z1sub2))
(0.79811371310441458322666413429968219968 - 0.60250684722638979280934577566854065174j)
mpc(z3add2, z3sub2) / mpc(z2add2, z2sub2)) / abs(mpc(z3add2, z3sub2) / mpc(z2add2, z2sub2))
(0.82096886520180823439383234311852147698 + 0.57097296115425222531646527834017360581j)
[mpc(real='0.5', imag='2374.444230717816650288500339757360672948'), mpc(real='-2.278801824772615839698736971746881828049e-16', imag='2.1819782509096641789602892125714903965136e-16'
)]

# p1 # 1766854433245813.0
# p2 # 5685950043228479.0
# 1/z1 # (-40954315.258201525759307868876655281846 + 9465648.154123134027560203230762232883j)
# 1/z2 # (41321464.913185182463684357503647074594 + 63075245.387211018610766558443648819622j)
# 1/z3 # (-2289340381055616.6056696629611200700563 - 2192069036495106.4532298515562049395438j)
# zz # (0.5 + 2374.4442307178166502885003397573606729j)

# z1add2 # 1.4388127638959142645810883608381991713
# z1sub2 # 0.56118723610408573541891163916180082865
# z1mul2 # 2.7245685628475034454207054254226549617e-17
# z2add2 # 0.083227422209888032641082423498845185884
# z2sub2 # 1.9167725777901119673589175765011548141
# z2mul2 # 3.6953893060881846388480374858216173761e-17
# z3add2 # 0.00094181592148031759927512205875071222696
# z3sub2 # 1.9990581840785196824007248779412492878
# z3mul2 # 2.4838065161146773212608323659746323935e-32

# z1add3 # 1.8432289614235448996246919987712608428
# z1sub3 # 0.44898779938986458484824577311946681366
# z1mul3 # -1.5188660496697593335141383195008913063e-25
# z2add3 # 0.057068160091483823985063782079282265817
# z2sub3 # -6.3073958342800160523233264812917154916
# z2mul3 # 5.339302198880640699292641366394350064e-25
# z3add3 # 0.00062807445782829766919839082170449971672
# z3sub3 # 61.418646613043380007154855732874186119
# z3mul3 # 8.5062615713427388997724032007024799045e-47

# zdelta1add2 # 0.56156571241138046858955831254198083245
# zdelta1sub2 # 1.4384342875886195314104416874580191675
# zdelta1mul2 # 6.9805699653631752387564286461048520014e-55
# zdelta2add2 # 1.9166042846619298870455708773250745571
# zdelta2sub2 # 0.083395715338070112954429122674925442913
# zdelta2mul2 # 9.1545883785440888634411155114703058521e-56
# zdelta3add2 # 1.9990764847011037802339106507933326061
# zdelta3sub2 # 0.00092351529889621976608934920666739389565
# zdelta3mul2 # 1.9246048039825341853589017743798827933e-101

# zderiv1add2 # 0.56156571241138046847850645977703710103
# zderiv1sub2 # 1.438434287588619531521493540222962899
# zderiv1mul2 # 4.9121394210692612786190825615869240041e-41
# zderiv2add2 # 1.9166042846619298870564057165280095615
# zderiv2sub2 # 0.083395715338070112943594283471990438478
# zderiv2mul2 # 6.4419688766158486289117485727630707569e-42
# zderiv3add2 # 1.9990763694828483988348930715347970567
# zderiv3sub2 # 0.00092363051715160116510692846520294326635
# zderiv3mul2 # 1.3875540794910879241397262979261630147e-87

# zderivdelta1add2 # 0.5615657124113804687664760334293549897
# zderivdelta1sub2 # 1.4384342875886195312335239665706450103
# zderivdelta1mul2 # 4.9121394210692612721653689979073893885e-41
# zderivdelta2add2 # 1.916604284661929887016600762576202646
# zderivdelta2sub2 # 0.083395715338070112983399237423797354023
# zderivdelta2mul2 # 6.4419688766158486283518385370058114472e-42
# zderivdelta3add2 # 1.9990763694828483988348930715347970591
# zderivdelta3sub2 # 0.00092363051715160116510692846520294087404
# zderivdelta3mul2 # 1.3875540794910879241397262979261630213e-87

# zaccel1add2 # 1.4372983924835812320779082189438324756
# zaccel1sub2 # 0.56270160751641876792209178105616752441
# zaccel1mul2 # 8.8255139317639958286088381653056767329e-65
# zaccel2add2 # 0.083901570002500929644841255185667957513
# zaccel2sub2 # 1.9160984299974990703551587448143320425
# zaccel2mul2 # 1.122166178585175427111425085095883623e-66
# zaccel3add2 # 0.00087013755007806592199273132631759125243
# zaccel3sub2 # 1.9991298624499219340780072686736824087
# zaccel3mul2 # 7.7519850042002179872584746929359853536e-143

# zacceldelta1add2 # 1.4372983924835812317897613888033792941
# zacceldelta1sub2 # 0.5627016075164187682102386111966207059
# zacceldelta1mul2 # 8.8255139317639958169751578825199671632e-65
# zacceldelta2add2 # 0.083901570002500929684761480211039364989
# zacceldelta2sub2 # 1.916098429997499070315238519788960635
# zacceldelta2mul2 # 1.1221661785851754270135076403579541549e-66
# zacceldelta3add2 # 0.00087013755007806592199273132631758893065
# zacceldelta3sub2 # 1.9991298624499219340780072686736824111
# zacceldelta3mul2 # 7.7519850042002179872584746929359853891e-143

# zlog1add2 # 1.7532869308707535658002915531894868693
# zlog1sub2 # 0.24671306912924643419970844681051313071
# zlog1mul2 # 5.0485220317390680724310991091072754265e-15
# zlog2add2 # 0.000073255299650110700679351958073405584762
# zlog2sub2 # 1.9999267447003498892993206480419265944
# zlog2mul2 # 2.7642510945069206263787859150578533164e-15
# zlog3add2 # 0.096175943729381042013352163967771405259
# zlog3sub2 # 1.9038240562706189579866478360322285947
# zlog3mul2 # 1.2782274608982492704457762082969338506e-30

# zlog1add3 # 2.8126550916728871560166570831124779424
# zlog1sub3 # 0.14846538871440313423305570206052380736
# zlog1mul3 # -4.345936431160021358475185707705884314e-22
# zlog2add3 # 0.000048838058982288826235706322388452773942
# zlog2sub3 # -220.30327509885131647505251259372895201
# zlog2mul3 # 1.1320511666504262441689020905627556821e-20
# zlog3add3 # 0.06624088916247894174255206433130363781
# zlog3sub3 # 5.8340034803975933549566933379652783479
# zlog3mul3 # 3.2095096358716504093067783824465018253e-45

# zlogdelta1add2 # 1.7532869308707535655895627627997244076
# zlogdelta1sub2 # 0.24671306912924643441043723720027559244
# zlogdelta1mul2 # 5.0485220317390680696061536846909898089e-15
# zlogdelta2add2 # 0.000073255299650110701884458927378193933778
# zlogdelta2sub2 # 1.9999267447003498892981155410726218061
# zlogdelta2mul2 # 2.764251094506920626372065036294212251e-15
# zlogdelta3add2 # 0.096175943729381041876248856487996747863
# zlogdelta3sub2 # 1.9038240562706189581237511435120032521
# zlogdelta3mul2 # 1.278227460898249270833484939235810742e-30

# zlogdelta1add3 # 2.8126550916728871552031860358091143087
# zlogdelta1sub3 # 0.1484653887144031344070995533802735478
# zlogdelta1mul3 # -4.3459364311600213543540624270769686092e-22
# zlogdelta2add3 # 0.00004883805898228882703915020579420427712
# zlogdelta2sub3 # -220.30327509885131466286130413051016122
# zlogdelta2mul3 # 1.1320511666504262348536647081562053037e-20
# zlogdelta3add3 # 0.066240889162478941644995031100456419002
# zlogdelta3sub3 # 5.8340034803975933594697657828354637485
# zlogdelta3mul3 # 3.2095096358716504129031458389430196551e-45

# zlogz1add2 # (1.9970738007444875962421523666724421416 - 0.0010327541993581153662544352670685371135j)
# zlogz1sub2 # (0.0029261992555124037578476333275578583721 + 0.0010327541993581153662544352670685371139j)
# zlogz2add2 # (2.0145644633107123263914604173417590533 - 0.0014497789210643003418673736516862939984j)
# zlogz2sub2 # (-0.014564463310712326391460417341759053325 + 0.0014497789210643003418673736516862939984j)
# zlogz3add2 # (2.003793361656393926675220966613364573 + 0.0002263139834741735565562716143781414665j)
# zlogz3sub2 # (-0.0037933616563939266752209666133645730103 - 0.00022631398347417355655627161437814146687j)

# zlogz1add3 # (3.9824876867927236323019458829100827477 - 0.0061604126861276071714245728273916158428j)
# zlogz1sub3 # (-0.00021310362821566179490469924945774681179 - 0.00011868646761036939089350277775211542954j)
# zlogz2add3 # (4.0886651535816723857792118266190706333 - 0.0089576822312880541194453670248356188075j)
# zlogz2sub3 # (-0.00037821346617370178022353693541853241891 - 0.0025035946804794846635606839982693252471j)
# zlogz3add3 # (4.0228465254189758464268554551622890608 + 0.0013682446357590086229633326389260146605j)
# zlogz3sub3 # (-0.000029713897304807357377112142111015534467 + 0.0003309054110822399009969307645233630915j)

# z1add2 * z2sub2 # 2.7578768504100873282350751559765128689
# z1sub2 * z2add2 # 0.046706167038034864355063281297804897944
# z1add2 * z2add2 # 0.11974867738174120092710156569988547382
# z1sub2 * z2sub2 # 1.0756683051701366064827599970257967594
# z1add2 * z2add2 + z1sub2 * z2sub2 # 1.1954169825518778074098615627256822332
# z1add2 * z2sub2 + z1sub2 * z2add2 # 2.8045830174481221925901384372743177668
# z1add2 * z2add2 - z1sub2 * z2sub2 # -0.95591962778839540555565843132591128554
# z1add2 * z2sub2 - z1sub2 * z2add2 # 2.7111706833720524638800118746787079709

# zzeta1add2 # 0.28778439804506207065440965156705027506
# zzeta1sub2 # 1.7122156019549379293455903484329497249
# zzeta1mul2 # 9.6597003981741469324745277645879082944e-15
# zzeta2add2 # 1.0868931437617115397168148750871416592
# zzeta2sub2 # 0.91310685623828846028318512491285834076
# zzeta2mul2 # 4.4679609235844868475385328418564165351e-17
# zzeta3add2 # 0.64092736773509280038552391242692141276
# zzeta3sub2 # 1.3590726322649071996144760875730785872
# zzeta3mul2 # 4.3181944882333339068354449785401796441e-31

# zzetaderiv1add2 # 0.99999978691546197059267380755471968261
# zzetaderiv1sub2 # 1.0000002130845380294073261924452803174
# zzetaderiv1mul2 # 1.1351260866884299224903510788280774931e-14
# zzetaderiv2add2 # 1.0000003074100827241551262576712905749
# zzetaderiv2sub2 # 0.9999996925899172758448737423287094251
# zzetaderiv2mul2 # 2.3625240056253079771522345665730656327e-14
# zzetaderiv3add2 # 0.99999999999999280278471989501776141357
# zzetaderiv3sub2 # 1.0000000000000071972152801049822385864
# zzetaderiv3mul2 # 1.2949976947044176796534285850023448908e-29

# zzetaaccel1add2 # 1.2894474603171341768965657653500735037
# zzetaaccel1sub2 # 0.71055253968286582310343423464992649632
# zzetaaccel1mul2 # 0.059188813751224759245550938213976595155
# zzetaaccel2add2 # 1.2894477944189917426480842396027315052
# zzetaaccel2sub2 # 0.71055220558100825735191576039726849482
# zzetaaccel2mul2 # 0.059188934733844059545174832120697341502
# zzetaaccel3add2 # 1.2894476171581548460901915242537760938
# zzetaaccel3sub2 # 0.71055238284184515390980847574622390617
# zzetaaccel3mul2 # 0.059188860513073029569830370221104294691

mpc(z3add2, z3sub2) / mpc(z1add2, z1sub2) / abs(mpc(z3add2, z3sub2) / mpc(z1add2, z1sub2))
(0.3638124073360122684890265157805577722 + 0.93147223912920533507674175420415767831j)
mpc(z3add2, z3sub2) / mpc(z2add2, z2sub2)) / abs(mpc(z3add2, z3sub2) / mpc(z2add2, z2sub2))
(0.99907898305999195890466716347103424692 + 0.042909038765885916954306920252674029389j)
[mpc(real='0.5', imag='105.44662305232609449367083241411180899735'), mpc(real='3.1540033609260516155418400432676294159569e-16', imag='-7.8928089404037513205767644531026141978698e-1
8')]

# p1 # 1766854433245813.0
# p2 # 5685950043228479.0
# 1/z1 # (14385865.264979645117911837306319911725 + 39495586.004307685483370900892323679142j)
# 1/z2 # (27571386.994878690790997810915821438269 - 70183820.51731804373609145452059522973j)
# 1/z3 # (3168589377829565.9889481239992793596725 + 79293100570630.362267840150498120865203j)
# zz # (0.5 + 105.446623052326094493670832414111809j)

# z1add2 # 0.35684777633252987265933560993893053179
# z1sub2 # 1.6431522236674701273406643900610694682
# z1mul2 # 5.8528418502553477939306619173365638134e-17
# z2add2 # 1.6806480048366214785063219595817374553
# z2sub2 # 0.31935199516337852149367804041826254473
# z2mul2 # 2.036958217034485333319593578693528047e-17
# z3add2 # 0.94998185886039688324089221995916756746
# z3sub2 # 1.0500181411396031167591077800408324325
# z3mul2 # 6.2257445040366606790987237703200110073e-35

# z1add3 # 0.27001681790191452983506782330671557311
# z1sub3 # -2.6679827724607025894467476610539262293
# z1mul3 # 5.6717425129496953279667462575964298645e-25
# z2add3 # 2.54768706303961408829693007598507013
# z2sub3 # -0.21102571772551222025180919162402982342
# z2mul3 # 1.0749892378071591624478183241941720145e-25
# z3add3 # 0.92680336802512672383353232762459831771
# z3sub3 # 1.0769854575128834770457884634349722179
# z3mul3 # -4.9170154875950916423490882702692757305e-52

# zdelta1add2 # 1.6358616087748016066023559216744260522
# zdelta1sub2 # 0.36413839122519839339764407832557394781
# zdelta1mul2 # 2.8957310436772163837327804148980628869e-57
# zdelta2add2 # 0.31243506668823006365502242468189644369
# zdelta2sub2 # 1.6875649333117699363449775753181035563
# zdelta2mul2 # 1.0159062768048624335213621567344555506e-58
# zdelta3add2 # 1.0597224912261673264795432183890236061
# zdelta3sub2 # 0.94027750877383267352045678161097639394
# zdelta3mul2 # 1.3783477269818236758642548430118244996e-106

# zderiv1add2 # 1.6358616087748016069656580858817706707
# zderiv1sub2 # 0.36413839122519839303434191411822932928
# zderiv1mul2 # 2.0376895701984201888987995952838638703e-43
# zderiv2add2 # 0.31243506668823006311650897290117075398
# zderiv2sub2 # 1.687564933311769936883491027098829246
# zderiv2mul2 # 7.1488048900964475468519780826416471149e-45
# zderiv3add2 # 1.0594872797202233773874743700329775878
# zderiv3sub2 # 0.94051272027977662261252562996702241219
# zderiv3mul2 # 9.7017909815402144382106759475018798409e-93

# zderivdelta1add2 # 1.6358616087748016069546761598171807787
# zderivdelta1sub2 # 0.36413839122519839304532384018281922126
# zderivdelta1mul2 # 2.0376895701984201888280015296781582685e-43
# zderivdelta2add2 # 0.31243506668823006311329841975284391962
# zderivdelta2sub2 # 1.6875649333117699368867015802471560804
# zderivdelta2mul2 # 7.1488048900964475469182904837714598966e-45
# zderivdelta3add2 # 1.0594872797202233773874743700329775903
# zderivdelta3sub2 # 0.9405127202797766226125256299670224097
# zderivdelta3mul2 # 9.701790981540214438210675947501880652e-93

# zaccel1add2 # 0.38634935508929302672509887032228672782
# zaccel1sub2 # 1.6136506449107069732749011296777132722
# zaccel1mul2 # 6.760936978255930087786247230963297522e-70
# zaccel2add2 # 1.707941040099455953733998342493970104
# zaccel2sub2 # 0.292058959900544046266001657506029896
# zaccel2mul2 # 2.6070378188808116958214128279613988453e-72
# zaccel3add2 # 0.91214250708890435273088515798678708643
# zaccel3sub2 # 1.0878574929110956472691148420132129136
# zaccel3mul2 # 2.3318838345056538974316586805466072967e-150

# zacceldelta1add2 # 0.38634935508929302673633370935793537695
# zacceldelta1sub2 # 1.613650644910706973263666290642064623
# zacceldelta1mul2 # 6.7609369782559300875364052567781524147e-70
# zacceldelta2add2 # 1.707941040099455953737121122829808544
# zacceldelta2sub2 # 0.29205895990054404626287887717019145598
# zacceldelta2mul2 # 2.6070378188808116958441392111786350644e-72
# zacceldelta3add2 # 0.91214250708890435273088515798678708396
# zacceldelta3sub2 # 1.087857492911095647269114842013212916
# zacceldelta3mul2 # 2.3318838345056538974316586805466074283e-150

# zlog1add2 # 0.024882618782492926294935810360906710814
# zlog1sub2 # 1.9751173812175070737050641896390932892
# zlog1mul2 # 3.249355469828896939825477532485195401e-15
# zlog2add2 # 1.0998380335209363658100640816192532271
# zlog2sub2 # 0.90016196647906363418993591838074677292
# zlog2mul2 # 1.0584569440573392692249721003016969524e-17
# zlog3add2 # 1.5634890326915432486834477361494309514
# zlog3sub2 # 0.43651096730845675131655226385056904856
# zlog3mul2 # 1.908320540053705243264705784201966725e-31

# zlog1add3 # 0.016727150961895973318145452324584279066
# zlog1sub3 # -11.829522476437069202788664482430635849
# zlog1mul3 # 7.8935739907791916061648996357146793028e-22
# zlog2add3 # 1.1576255634238373247047365107142037393
# zlog2sub3 # -0.85714835601991917431462256730491776279
# zlog2mul3 # 3.4560880817477733010371458440755550486e-26
# zlog3add3 # 2.1767867677627287635416610360951732291
# zlog3sub3 # 0.32111927138256040318269190314032109764
# zlog3mul3 # 9.2821934918680495415734207848571634415e-47

# zlogdelta1add2 # 0.024882618782492926298090208437046148534
# zlogdelta1sub2 # 1.9751173812175070737019097915629538515
# zlogdelta1mul2 # 3.249355469828896939804235680066384738e-15
# zlogdelta2add2 # 1.0998380335209363658144634915242956544
# zlogdelta2sub2 # 0.90016196647906363418553650847570434561
# zlogdelta2mul2 # 1.0584569440573392693182327152804616588e-17
# zlogdelta3add2 # 1.5634890326915432486716928886211602188
# zlogdelta3sub2 # 0.43651096730845675132830711137883978123
# zlogdelta3mul2 # 1.9083205400537052431849587388932939836e-31

# zlogdelta1add3 # 0.016727150961895973320283707536043879762
# zlogdelta1sub3 # -11.82952247643706920202304695777791038
# zlogdelta1mul3 # 7.893573990779191605595526757775695546e-22
# zlogdelta2add3 # 1.1576255634238373247120473028599295267
# zlogdelta2sub3 # -0.85714835601991917430860900707232354385
# zlogdelta2mul3 # 3.456088081747773301495009146252488993e-26
# zlogdelta3add3 # 2.1767867677627287635074827438784824185
# zlogdelta3sub3 # 0.32111927138256040319424253333574633066
# zlogdelta3mul3 # 9.2821934918680495409505166272071458869e-47

# zlogz1add2 # (2.0149094786504981296369674154853143107 - 0.007252678393580486946773198658871559072j)
# zlogz1sub2 # (-0.014909478650498129636967415485314310657 + 0.007252678393580486946773198658871559073j)
# zlogz2add2 # 1.9987495144955621641522016566778750957
# zlogz2sub2 # 0.001250485504437835847798343322124904258
# zlogz3add2 # (1.9979667231491734552030614470582217561 + 0.0080529916304373205409905733142005267161j)
# zlogz3sub2 # (0.0020332768508265447969385529417782438969 - 0.0080529916304373205409905733142005267152j)

# zlogz1add3 # (4.0904806753265648176569615682532373461 - 0.044840851315823906907723671524235887899j)
# zlogz1sub3 # (-0.0019310675053936108435574133307541979266 - 0.0023652399457995386904368407322252602636j)
# zlogz2add3 # 3.9925064575395966087894273657602411628
# zlogz2sub3 # 0.000062477848117953878733393060168237585389
# zlogz3add3 # (3.9874383786312597222978811084562688362 + 0.048118951999689732381468290204709761313j)
# zlogz3sub3 # (0.00042447134695534690029433732332625383891 + 0.00098091497103209690519549783015738565706j)

# z1add2 * z2sub2 # 0.11396004934140846032637022813939767708
# z1sub2 * z2add2 # 2.761560506349591672020342927425011524
# z1add2 * z2add2 # 0.59973550332365128499230099173846338651
# z1sub2 * z2sub2 # 0.52474394098534858266098585269712741239
# z1add2 * z2add2 + z1sub2 * z2sub2 # 1.1244794443089998676532868444355907989
# z1add2 * z2sub2 + z1sub2 * z2add2 # 2.8755205556910001323467131555644092011
# z1add2 * z2add2 - z1sub2 * z2sub2 # 0.074991562338302702331315139041335974121
# z1add2 * z2sub2 - z1sub2 * z2add2 # -2.647600457008183211693972699285613847

# zzeta1add2 # 0.077950781919655527838014745062858282562
# zzeta1sub2 # 1.9220492180803444721619852549371417174
# zzeta1mul2 # 4.2231918900730827311164941699756314449e-16
# zzeta2add2 # 1.2705005869479495344567484104756349155
# zzeta2sub2 # 0.72949941305205046554325158952436508446
# zzeta2mul2 # 1.1294493720201142425916147130168980998e-17
# zzeta3add2 # 1.4120427464876347494720474727613114962
# zzeta3sub2 # 0.5879572535123652505279525272386885038
# zzeta3mul2 # 1.4832492104036532261417883435278131422e-32

# zzetaderiv1add2 # 1.0000000742439231782934266728394674541
# zzetaderiv1sub2 # 0.99999992575607682170657332716053254592
# zzetaderiv1mul2 # 1.3780399642153263705910077113511947368e-15
# zzetaderiv2add2 # 0.99999995076892486353613103926487724251
# zzetaderiv2sub2 # 1.0000000492310751364638689607351227575
# zzetaderiv2mul2 # 6.0592468566184503068119284220625076305e-16
# zzetaderiv3add2 # 0.99999999999999975082583033751502670519
# zzetaderiv3sub2 # 1.0000000000000002491741696624849732948
# zzetaderiv3mul2 # 1.5521941706747193768308192164937599395e-32

# zzetaaccel1add2 # 1.9999975843885270805227981269018532196
# zzetaaccel1sub2 # 0.000002415611472919477201873098146780394344
# zzetaaccel1mul2 # 0.13728274438097937927023624192479709504
# zzetaaccel2add2 # 1.9999975840449094169720144195812355155
# zzetaaccel2sub2 # 0.0000024159550905830279855804187644845404053
# zzetaaccel2mul2 # 0.13728274003409685251241430792867284185
# zzetaaccel3add2 # 1.9999975841498358225661588497353024996
# zzetaaccel3sub2 # 0.0000024158501641774338411502646975003802561
# zzetaaccel3mul2 # 0.13728274519692200314375725902695852056

mpc(z3add2, z3sub2) / mpc(z1add2, z1sub2) / abs(mpc(z3add2, z3sub2) / mpc(z1add2, z1sub2))
(0.8670381312825806969807391455102831792 - 0.4982417875911356756965388163730335932j)
mpc(z3add2, z3sub2) / mpc(z2add2, z2sub2)) / abs(mpc(z3add2, z3sub2) / mpc(z2add2, z2sub2))
(0.79753628845056234454778004602901078648 + 0.60327097444224963824878284136005476669j)
[mpc(real='0.5', imag='2278.5259421557841917469604183519606095565'), mpc(real='2.177333851478109367770512607011587897742e-16', imag='2.283239834804329864761693328995572475095e-16')
]

# p1 # 1766854433245813.0
# p2 # 5685950043228479.0
# 1/z1 # (-41950319.640763095968853625845700642007 - 2650493.4038059839662536027048257010139j)
# 1/z2 # (-48494409.713756894848780911416812961736 + 57742898.002635440290947989578040945667j)
# 1/z3 # (2187403158554855.493785032093089300508 - 2293798915126760.1704684604407698490972j)
# zz # (0.5 + 2278.5259421557841917469604183519606096j)

mpmath.tan(1/z1)
mpmath.tan(1/z2)
mpmath.tan(1/z3)
mpc(real='-1.7837678762508469e-2302190', imag='-1.0')
mpc(real='-5.1858118335619975e-50154845', imag='1.0')
mpc(real='3.8269101467888868e-1992368422870435', imag='-1.0')

1992368422870435/(2302190 * 50154845)
17.255025054352195
mpmath.log(1992368422870435, 2302190 * 50154845)
mpmath.log(1992368422870435, 50154845)
mpmath.log(1992368422870435, 2302190)
mpf('1.0879587296301376')
mpf('1.9868503869082561')
mpf('2.4047516799202513')

mpmath.log(2752057607828896, 50154845 + 2302190)
mpmath.log(2752057607828896, 50154845 - 2302190)
mpmath.log(2752057607828896, 50154845 + 2302190 + mpmath.sqrt(50154845 + 2302190)/2.396458435)
mpmath.log(2752057607828896, 50154845 + 2302190 + mpmath.power(50154845 + 2302190, 0.45083166443))
mpmath.log(2752057607828896, mpmath.power(50154845 + 2302190, 1.0000032411100006))
mpmath.log(2752057607828896, mpmath.power(50154845 + 2302190, 1 + 1/308536.2730098263))
mpf('2.0000064822200012')
mpf('2.0103966692903494') # 2 + 1/96.18465030221165
mpf('2.0000000000000009')
mpf('2.0')
mpf('2.0')

# z1add2 # 0.87413898575545406686740469702212979986
# z1sub2 # 1.1258610142445459331325953029778702001
# z1mul2 # 2.2414119987186745022202773960635905542e-18
# z2add2 # 1.9849568612141802871441720566402519474
# z2sub2 # 0.015043138785819712855827943359748052639
# z2mul2 # 4.2655141668376543245162042712362782941e-17
# z3add2 # 1.9988732052778515248446904914921465352
# z3sub2 # 0.0011267947221484751553095085078534648219
# z3mul2 # 2.4828868319094808632781803280880081959e-32

# z1add3 # 0.82238582851672589349491883396352832599
# z1sub3 # 1.2020763547025810988996303556593451047
# z1mul3 # 3.3766606897505985493269113132286583218e-27
# z2add3 # 3.9110788209229367139213859371208603038
# z2sub3 # -0.0025803442657605367239631169701534475199
# z2mul3 # -3.8960726127637832545815093777955426456e-25
# z3add3 # 3.9932468410909257239166574847253940734
# z3sub3 # -0.000053446035205679588654766365629670671966
# z3mul3 # 5.5281990889954062156397093431637586792e-48

# zdelta1add2 # 1.1262963923104247870884901927692595051
# zdelta1sub2 # 0.87370360768957521291150980723074049487
# zdelta1mul2 # 5.3339355357595733187875142279300045536e-56
# zdelta2add2 # 0.014967394964335880103676433933389795937
# zdelta2sub2 # 1.9850326050356641198963235660666102041
# zdelta2mul2 # 9.7355451999052896014376282345031235345e-56
# zdelta3add2 # 0.0011091129879736853171247795544161274268
# zdelta3sub2 # 1.9988908870120263146828752204455838726
# zdelta3mul2 # 1.7216053115042807231409428153151791225e-101

# zderiv1add2 # 1.1262963923104247869315216739402134975
# zderiv1sub2 # 0.87370360768957521306847832605978650252
# zderiv1mul2 # 3.7534234517601658424689801709291705811e-42
# zderiv2add2 # 0.01496739496433588012990606243352981079
# zderiv2sub2 # 1.9850326050356641198700939375664701892
# zderiv2mul2 # 6.8507808960222004507549964772385116299e-42
# zderiv3add2 # 0.00110606227613695908497141089216078288
# zderiv3sub2 # 1.9988939377238630409150285891078392171
# zderiv3mul2 # 1.2772482285845599648954578671349183871e-87

# zderivdelta1add2 # 1.1262963923104247872365229901162275009
# zderivdelta1sub2 # 0.87370360768957521276347700988377249907
# zderivdelta1mul2 # 3.7534234517601658605969899510458187263e-42
# zderivdelta2add2 # 0.014967394964335880113437792945470086716
# zderivdelta2sub2 # 1.9850326050356641198865622070545299133
# zderivdelta2mul2 # 6.8507808960222004509836351722577828043e-42
# zderivdelta3add2 # 0.0011060622761369590849714108921607804039
# zderivdelta3sub2 # 1.9988939377238630409150285891078392196
# zderivdelta3mul2 # 1.2772482285845599648954578671349183933e-87

# zaccel1add2 # 0.87239761995516905359068729524747308063
# zaccel1sub2 # 1.1276023800448309464093127047525269194
# zaccel1mul2 # 6.3719128235243999653484844656837625606e-66
# zaccel2add2 # 1.9852586980156563455023762364815685973
# zaccel2sub2 # 0.014741301984343654497623763518431402668
# zaccel2mul2 # 1.1006303518300790063470061838939763694e-66
# zaccel3add2 # 1.9989549806215464875266365117707702508
# zaccel3sub2 # 0.0010450193784535124733634882292297491592
# zaccel3mul2 # 6.5709613143491190148923705722270380721e-143

# zacceldelta1add2 # 0.87239761995516905328573737055855745097
# zacceldelta1sub2 # 1.127602380044830946714262629441442549
# zacceldelta1mul2 # 6.3719128235243999958021043843696388449e-66
# zacceldelta2add2 # 1.9852586980156563455187205810188325167
# zacceldelta2sub2 # 0.01474130198434365448127941898116748329
# zacceldelta2mul2 # 1.1006303518300790063834072706519558456e-66
# zacceldelta3add2 # 1.9989549806215464875266365117707702533
# zacceldelta3sub2 # 0.0010450193784535124733634882292297467522
# zacceldelta3mul2 # 6.5709613143491190148923705722270381033e-143

# zlog1add2 # 1.2712015180350678075990617550614341423
# zlog1sub2 # 0.72879848196493219240093824493856585773
# zlog1mul2 # 6.4772299721891807924846033058817145912e-16
# zlog2add2 # 1.8394592474432464675230056640580152406
# zlog2sub2 # 0.16054075255675353247699433594198475945
# zlog2mul2 # 1.9284218814638409910337343785377191116e-15
# zlog3add2 # 1.9011794958837532500792003555376129511
# zlog3sub2 # 0.098820504116246749920799644462387048924
# zlog3mul2 # 1.2578378196906392565696947732409964125e-30

# zlog1add3 # 1.4706185033089975734510065355380292876
# zlog1sub3 # 0.63839519678017569446059131432293836043
# zlog1mul3 # -1.6914625900351399731546405476995872308e-23
# zlog2add3 # 3.1700037131669652646330464190494576254
# zlog2sub3 # -0.081733944138933606210902049828964409311
# zlog2mul3 # -1.0760379564639105667822400732524868858e-22
# zlog3add3 # 3.4604004726191805679956823322224216593
# zlog3sub3 # -0.041007404060857004290923025603997239704
# zlog3mul3 # 1.862209993204147528223403782007073591e-45

# zlogdelta1add2 # 1.2712015180350678073031213706784700596
# zlogdelta1sub2 # 0.72879848196493219269687862932152994042
# zlogdelta1mul2 # 6.4772299721891807783480070104399825682e-16
# zlogdelta2add2 # 1.83945924744324646757492495657608544
# zlogdelta2sub2 # 0.16054075255675353242507504342391456005
# zlogdelta2mul2 # 1.9284218814638409912722339368864213216e-15
# zlogdelta3add2 # 1.9011794958837532502124691275183635068
# zlogdelta3sub2 # 0.098820504116246749787530872481636493167
# zlogdelta3mul2 # 1.2578378196906392569416345756344371943e-30

# zlogdelta1add3 # 1.4706185033089975728568967045596339855
# zlogdelta1sub3 # 0.63839519678017569481446548479579838264
# zlogdelta1mul3 # -1.691462590035139967524538715654809585e-23
# zlogdelta2add3 # 3.1700037131669652648643376809134378589
# zlogdelta2sub3 # -0.081733944138933606173755659596124680718
# zlogdelta2mul3 # -1.076037956463910567014813353377224858e-22
# zlogdelta3add3 # 3.4604004726191805686579386905476054005
# zlogdelta3sub3 # -0.041007404060857004211505749656756195559
# zlogdelta3mul3 # 1.8622099932041475292099674746202989834e-45

# zlogz1add2 # (2.0067749745742154418180540365092429731 - 0.023349692634598252153054382839202004939j)
# zlogz1sub2 # (-0.0067749745742154418180540365092429730921 + 0.023349692634598252153054382839202004938j)
# zlogz2add2 # (1.999959131722419590304532410758533286 - 0.000014298093999512855944380343008704470253j)
# zlogz2sub2 # (0.000040868277580409695467589241466713982245 + 0.000014298093999512855944380343008704468086j)
# zlogz3add2 # 1.9999991316500488740277589848342815045
# zlogz3sub2 # 0.00000086834995112597224101516571849553102248

# zlogz1add3 # (4.0375903239058006565261851468841183188 - 0.14193750127911864971235482004191027563j)
# zlogz1sub3 # (0.0050037584574493308311288079265037484729 - 0.0019955950294213643146698997521562278567j)
# zlogz2add3 # (3.9997547991289421042882414983399339716 - 0.00008578155234768136395513519561993132379j)
# zlogz2sub3 # (0.0000003526402990759625606827067342045580765 + 0.00000019485732200715068463291946653759723835j)
# zlogz3add3 # 3.9999947899048174300637001766117644412
# zlogz3sub3 # 0.000000001144344775695440718422304797008748123

# z1add2 * z2sub2 # 0.013149794080814976562983184203791141774
# z1sub2 * z2add2 # 2.2347855449982674171165179034400354368
# z1add2 * z2add2 # 1.735128177430093157171826209840468458
# z1sub2 * z2sub2 # 0.016936483490824449148672702515704963504
# z1add2 * z2add2 + z1sub2 * z2sub2 # 1.7520646609209176063204989123561734215
# z1add2 * z2sub2 + z1sub2 * z2add2 # 2.2479353390790823936795010876438265785
# z1add2 * z2add2 - z1sub2 * z2sub2 # 1.7181916939392687080231535073247634944
# z1add2 * z2sub2 - z1sub2 * z2add2 # -2.221635750917452440553534719236244295

# zzeta1add2 # 1.4049065315313343414403222825396029546
# zzeta1sub2 # 0.59509346846866565855967771746039704537
# zzeta1mul2 # 9.5114616562820243433726259063222251438e-17
# zzeta2add2 # 1.7539483797966759188665163596746453883
# zzeta2sub2 # 0.24605162020332408113348364032535461173
# zzeta2mul2 # 1.0247515913278584338870953975008445527e-16
# zzeta3add2 # 1.8306352768999937220103437015823677035
# zzeta3sub2 # 0.16936472310000627798965629841763229648
# zzeta3mul2 # 7.0397192235772678934741045161335398623e-32

# zzetaderiv1add2 # 1.0000000199368717795023523461858592772
# zzetaderiv1sub2 # 0.99999998006312822049764765381414072284
# zzetaderiv1mul2 # 9.9369723454625547806200852815820398452e-17
# zzetaderiv2add2 # 1.0000000488838314592605785710100214396
# zzetaderiv2sub2 # 0.99999995111616854073942142898997856036
# zzetaderiv2mul2 # 5.9740725782273446933151072422976813497e-16
# zzetaderiv3add2 # 0.99999999999999887272193443132096700216
# zzetaderiv3sub2 # 1.0000000000000011272780655686790329978
# zzetaderiv3mul2 # 3.1768895927806556521683667456547264102e-31

# zzetaaccel1add2 # 0.000019177600150773255069650591179672720551
# zzetaaccel1sub2 # 1.9999808223998492267449303494088203273
# zzetaaccel1mul2 # 0.14627747793568745057523083213471947714
# zzetaaccel2add2 # 0.000019177483025656004370547992438796858747
# zzetaaccel2sub2 # 1.9999808225169743439956294520075612031
# zzetaaccel2mul2 # 0.14627746625356675862750973581038409237
# zzetaaccel3add2 # 0.000019177136496888919191556426042649276545
# zzetaaccel3sub2 # 1.9999808228635031110808084435739573507
# zzetaaccel3mul2 # 0.14627746790385994272916543730890605895

mpc(z3add2, z3sub2) / mpc(z1add2, z1sub2) / abs(mpc(z3add2, z3sub2) / mpc(z1add2, z1sub2))
(0.61371644198719245508768171970355861374 - 0.78952652193234207893015196671252963264j)
mpc(z3add2, z3sub2) / mpc(z2add2, z2sub2)) / abs(mpc(z3add2, z3sub2) / mpc(z2add2, z2sub2))
(0.99997539700749788127077447079592691181 - 0.0070146546384691954512465171513451595008j)
[mpc(real='0.5', imag='1101.8391111687560134050112143502507975998'), mpc(real='-8.5274345015374979605310778160409734859789e-18', imag='-3.1538381585160643664252138613059295534438e-
16')]

# p1, p2 = 1766854433245813, 5685950043228479
# 1/z1 # (-25729954.847178550059574094337939709273 - 33238890.727699774377280126929623847022j)
# 1/z2 # (-58358303.715998977964910275699682769114 - 47752051.585452314258270674160652886592j)
# 1/z3 # (-85668705101746.345521557332827871311683 + 3168423411423834.65545364767566781184j)
# zz = (0.5 + 1101.8391111687560134050112143502507976j)

mpmath.tan(1/z1)
mpmath.tan(1/z2)
mpmath.tan(1/z3)
mpc(real='3.0032400370939262093883752327890773647645e-28870936', imag='-1.0')
mpc(real='-1.6972385180213956039789243978135826934034e-41476906', imag='-1.0')
mpc(real='1.3610492273655729062334526064678284289808e-2752057607828896', imag='1.0')

2752057607828896/(41476906 * 28870936)
2.2982131441487814
mpmath.log(2752057607828896, 41476906*28870936)
mpmath.log(2752057607828896, 41476906)
mpmath.log(2752057607828896, 28870936)
mpf('1.0239676283082897')
mpf('2.0267852458207072')
mpf('2.0695313335254251')

mpmath.log(2752057607828896, 41476906 + 28870936)
mpmath.log(2752057607828896, 41476906 - 28870936)
mpf('1.9675244177140194') # 2 - mpf('0.032475582285980575') # 0.0695313335254251/0.032475582285980575 = 2.1410342365267203
mpf('2.1744231644212335')

# 
# m +/- sqrt(m^2 - p)
# 

zeigen12add = (z1.imag + z2.real)/2 + mpmath.sqrt((z1.imag + z2.real)**2/4 - (z1.real * z2.imag - z1.imag * z2.real))
zeigen12sub = (z1.imag + z2.real)/2 - mpmath.sqrt((z1.imag + z2.real)**2/4 - (z1.real * z2.imag - z1.imag * z2.real))
zeigen21add = (z2.imag + z1.real)/2 + mpmath.sqrt((z2.imag + z1.real)**2/4 - (z2.real * z1.imag - z2.imag * z1.real))
zeigen21sub = (z2.imag + z1.real)/2 - mpmath.sqrt((z2.imag + z1.real)**2/4 - (z2.real * z1.imag - z2.imag * z1.real))
mpc(real='4.27443465854901288487e-9', imag='7.2465562992600029457e-9')
mpc(real='4.27443465854901288487e-9', imag='-7.2465562992600029457e-9')
mpf('5.87792134024964694197e-9')
mpf('-1.20422451664764079523e-8')

(zeigen12add + zeigen12sub)**2/(zeigen12add**2 + zeigen12sub**2)
(zeigen21add + zeigen21sub)**2/(zeigen21add**2 + zeigen21sub**2)
mpf('0.230050162178016725685')
mpf('0.0895849304544638321281')

zeigen13add = (z1.imag + z3.real)/2 + mpmath.sqrt((z1.imag + z3.real)**2/4 - (z1.real * z3.imag - z1.imag * z3.real))
zeigen13sub = (z1.imag + z3.real)/2 - mpmath.sqrt((z1.imag + z3.real)**2/4 - (z1.real * z3.imag - z1.imag * z3.real))
zeigen31add = (z3.imag + z1.real)/2 + mpmath.sqrt((z3.imag + z1.real)**2/4 - (z3.real * z1.imag - z3.imag * z1.real))
zeigen31sub = (z3.imag + z1.real)/2 - mpmath.sqrt((z3.imag + z1.real)**2/4 - (z3.real * z1.imag - z3.imag * z1.real))
mpf('1.8812466743596809544e-8')
mpf('2.5266348369066268287e-16')
mpf('3.2639985122239989261e-16')
mpf('-1.45625782729873570478e-8')

zeigen23add = (z2.imag + z3.real)/2 + mpmath.sqrt((z2.imag + z3.real)**2/4 - (z2.real * z3.imag - z2.imag * z3.real))
zeigen23sub = (z2.imag + z3.real)/2 - mpmath.sqrt((z2.imag + z3.real)**2/4 - (z2.real * z3.imag - z2.imag * z3.real))
zeigen32add = (z3.imag + z2.real)/2 + mpmath.sqrt((z3.imag + z2.real)**2/4 - (z3.real * z2.imag - z3.imag * z2.real))
zeigen32sub = (z3.imag + z2.real)/2 - mpmath.sqrt((z3.imag + z2.real)**2/4 - (z3.real * z2.imag - z3.imag * z2.real))
mpf('8.39825340248803530243e-9')
mpf('3.93961459007362448294e-16')
mpf('3.22361422971152812431e-16')
mpf('-1.02635983254349409418e-8')




def squares(p1, p2, zz, f):
    squares = {}
    
    prevdensity1, prevdensity2 = 0, 0
    arydensitypoints = []
    arydensitysquareroots = []
    i = 0
    for ipow in [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096]:
        i += 1
        file_print(f, "")
        density = []
        for iz in [3, 1, 2]:
            #skey = "z" + ("sq" * i) + str(iz)
            skey = str(ipow)
            sp = {3:"p1 * p2", 1:"p1", 2:"p2"}
            seq1 = "mpmath.fdiv(1, mpmath.power(mpmath.power(" + sp[iz] + ", " + str(ipow) + "), zz))"
            file_print(f, "squares['" + skey + "'] = " + seq1)
            squares[skey] = eval(seq1)
            seq1 = "(squares['" + skey + "'].real + squares['" + skey + "'].imag)**2/(squares['" + skey + "'].real**2 + squares['" + skey + "'].imag**2)"
            seq2 = "(squares['" + skey + "'].real - squares['" + skey + "'].imag)**2/(squares['" + skey + "'].real**2 + squares['" + skey + "'].imag**2)"
            mpmath.mp.prec = 128
            if iz == 3:
                seq5 = "mpmath.fdiv(1, mpmath.power(mpmath.power(mpmath.sqrt(" + sp[iz] + ") - 1, " + str(ipow) + "), zz))"
                seq6 = "mpmath.fdiv(1, mpmath.power(mpmath.power(mpmath.sqrt(" + sp[iz] + ") + 1, " + str(ipow) + "), zz))"
                point1 = eval(seq5)
                point2 = eval(seq6)
                density.append(mpmath.log((point2.imag - point1.imag)**2 + (point2.real - point1.real)**2))
            seq3 = "mpmath.fdiv(1, mpmath.power(mpmath.power(" + sp[iz] + " - 1, " + str(ipow) + "), zz))"
            seq4 = "mpmath.fdiv(1, mpmath.power(mpmath.power(" + sp[iz] + " + 1, " + str(ipow) + "), zz))"
            point1 = eval(seq3)
            point2 = eval(seq4)
            density.append(mpmath.log((point2.imag - point1.imag)**2 + (point2.real - point1.real)**2))
            mpmath.mp.prec = 64
            file_print(f, seq1)
            file_print(f, seq2)
            file_print(f, squares[skey])
            file_print(f, eval(seq1))
            file_print(f, eval(seq2))
            mpmath.mp.prec = 128
            file_print(f, "mpmath.mpf('" + str(density[-1]) + "') # log of density measure for points")
            if iz == 3:
                file_print(f, "mpmath.mpf('" + str(density[-2]) + "') # log of density measure for square root")
            mpmath.mp.prec = 64
        mpmath.mp.prec = 128
        file_print(f, "")
        file_print(f, "mpmath.mpf('" + str(abs(density[1])) + "') - (mpmath.mpf('" + str(abs(density[2])) + "') + mpmath.mpf('" + str(abs(density[3])) + "'))")
        thisdensity1 = abs(density[1]) - (abs(density[2]) + abs(density[3]))
        file_print(f, "mpmath.mpf('" + str(thisdensity1) + "')")
        if prevdensity1 != 0:
            file_print(f, "mpmath.mpf('" + str(thisdensity1) + "') - mpmath.mpf('" + str(prevdensity1) + "')")
            file_print(f, "mpmath.mpf('" + str(thisdensity1 - prevdensity1) + "')")
            arydensitypoints.append(thisdensity1 - prevdensity1)
        file_print(f, "")
        file_print(f, "mpmath.mpf('" + str(abs(density[1])) + "') - (2 * mpmath.mpf('" + str(abs(density[0])) + "'))")
        thisdensity2 = abs(density[1]) - (2 * abs(density[0]))
        file_print(f, "mpmath.mpf('" + str(thisdensity2) + "')")
        if prevdensity2 != 0:
            file_print(f, "mpmath.mpf('" + str(thisdensity2) + "') - mpmath.mpf('" + str(prevdensity2) + "')")
            file_print(f, "mpmath.mpf('" + str(thisdensity2 - prevdensity2) + "')")
            arydensitysquareroots.append(thisdensity2 - prevdensity2)
        prevdensity1 = abs(thisdensity1)
        prevdensity2 = abs(thisdensity2)
        mpmath.mp.prec = 64
    squaresoffsets(arydensitypoints, arydensitysquareroots, f)


def squareroots(p1, p2, zz, f):
    squareroots = {}
    i = 0
    prevdensity1, prevdensity2 = 0, 0
    arydensitypoints = []
    arydensitysquareroots = []
    for ipow in [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576]:
        i += 1
        file_print(f, "")
        density = []
        thisdensity1, thisdensity2 = 0, 0
        for iz in [3, 1, 2]:
            #skey = "z" + ("sq" * i) + str(iz)
            skey = "1/" + str(ipow)
            sp = {1:"p1", 2:"p2", 3:"p1 * p2"}
            seq1 = "mpmath.fdiv(1, mpmath.power(mpmath.power(" + sp[iz] + ", mpmath.fdiv(1, " + str(ipow) + ")), zz))"
            file_print(f, "squareroots['" + skey + "'] = " + seq1)
            squareroots[skey] = eval(seq1)
            seq1 = "(squareroots['" + skey + "'].real + squareroots['" + skey + "'].imag)**2/(squareroots['" + skey + "'].real**2 + squareroots['" + skey + "'].imag**2)"
            seq2 = "(squareroots['" + skey + "'].real - squareroots['" + skey + "'].imag)**2/(squareroots['" + skey + "'].real**2 + squareroots['" + skey + "'].imag**2)"
            # point1 = mpmath.fdiv(1, mpmath.power(mpmath.power(p1 * p2 - 1, mpmath.fdiv(1, 2)), zz))
            # point2 = mpmath.fdiv(1, mpmath.power(mpmath.power(p1 * p2 + 1, mpmath.fdiv(1, 2)), zz))
            seq3 = "mpmath.fdiv(1, mpmath.power(mpmath.power(" + sp[iz] + " - 1, mpmath.fdiv(1, " + str(ipow) + ")), zz))"
            seq4 = "mpmath.fdiv(1, mpmath.power(mpmath.power(" + sp[iz] + " + 1, mpmath.fdiv(1, " + str(ipow) + ")), zz))"
            mpmath.mp.prec = 128
            if iz == 3:
                seq5 = "mpmath.fdiv(1, mpmath.power(mpmath.power(mpmath.sqrt(" + sp[iz] + ") - 1, mpmath.fdiv(1, " + str(ipow) + ")), zz))"
                seq6 = "mpmath.fdiv(1, mpmath.power(mpmath.power(mpmath.sqrt(" + sp[iz] + ") + 1, mpmath.fdiv(1, " + str(ipow) + ")), zz))"
                point1 = eval(seq5)
                point2 = eval(seq6)
                density.append(mpmath.log((point2.imag - point1.imag)**2 + (point2.real - point1.real)**2))
            point1 = eval(seq3)
            point2 = eval(seq4)
            density.append(mpmath.log((point2.imag - point1.imag)**2 + (point2.real - point1.real)**2))
            mpmath.mp.prec = 64
            file_print(f, seq1)
            file_print(f, seq2)
            file_print(f, squareroots[skey])
            file_print(f, eval(seq1))
            file_print(f, eval(seq2))
            mpmath.mp.prec = 128
            file_print(f, "mpmath.mpf('" + str(density[-1]) + "') # log of density measure for points")
            if iz == 3:
                file_print(f, "mpmath.mpf('" + str(density[-2]) + "') # log of density measure for square root")
            mpmath.mp.prec = 64
        mpmath.mp.prec = 128
        file_print(f, "")
        file_print(f, "mpmath.mpf('" + str(abs(density[1])) + "') - (mpmath.mpf('" + str(abs(density[2])) + "') + mpmath.mpf('" + str(abs(density[3])) + "'))")
        thisdensity1 = abs(density[1]) - (abs(density[2]) + abs(density[3]))
        file_print(f, "mpmath.mpf('" + str(thisdensity1) + "')")
        if prevdensity1 > 0:
            file_print(f, "mpmath.mpf('" + str(thisdensity1) + "') - mpmath.mpf('" + str(prevdensity1) + "')")
            file_print(f, "mpmath.mpf('" + str(thisdensity1 - prevdensity1) + "')")
            arydensitypoints.append(thisdensity1 - prevdensity1)
        file_print(f, "")
        file_print(f, "mpmath.mpf('" + str(abs(density[1])) + "') - (2 * mpmath.mpf('" + str(abs(density[0])) + "'))")
        thisdensity2 = abs(density[1]) - (2 * abs(density[0]))
        file_print(f, "mpmath.mpf('" + str(thisdensity2) + "')")
        if prevdensity2 > 0:
            file_print(f, "mpmath.mpf('" + str(thisdensity2) + "') - mpmath.mpf('" + str(prevdensity2) + "')")
            file_print(f, "mpmath.mpf('" + str(thisdensity2 - prevdensity2) + "')")
            arydensitysquareroots.append(thisdensity2 - prevdensity2)
        prevdensity1 = abs(thisdensity1)
        prevdensity2 = abs(thisdensity2)
        mpmath.mp.prec = 64
    squaresoffsets(arydensitypoints, arydensitysquareroots, f)


def file_print(f, s):
    if f is not None:
        f.write(str(s) + "\n")
    else:
        print(s)


def squaresoffsets(arydensitypoints, arydensitysquareroots, f):
    mpmath.mp.prec = 128
    bfirst = True
    for ad in range(0, len(arydensitypoints)):
        if bfirst:
            file_print(f, "# points")
            bfirst = False
        file_print(f, "mpmath.mpf('" + str(arydensitypoints[ad]) + "')")
    
    bfirst = True
    for ad in range(0, len(arydensitysquareroots)):
        if bfirst:
            file_print(f, "# square roots")
            bfirst = False
        file_print(f, "mpmath.mpf('" + str(arydensitysquareroots[ad]) + "')")
    mpmath.mp.prec = 64





# points
mpmath.mpf('1.3862943542612332714866765488855863183')
mpmath.mpf('1.3862943645481396966055115311098844221')
mpmath.mpf('1.3862943611201879286729920026821433805')
mpmath.mpf('1.3862943576910015974931623059941235622')
mpmath.mpf('1.3862943611200024483340668691772751018')
mpmath.mpf('1.3862943611199334205874739711112647688')
mpmath.mpf('1.3862943611198342210902932312561714033')
mpmath.mpf('1.3862943611199264860173213663642240991')

# square roots
mpmath.mpf('1.3862943542612332714866749698268559854')
mpmath.mpf('1.3862943645481396966055172200862000561')
mpmath.mpf('1.38629436112018792867300214238008321')
mpmath.mpf('1.3862943576910015974932119582179862978')
mpmath.mpf('1.3862943611200024483342560597626713275')
mpmath.mpf('1.38629436111993342058823073505062087')
mpmath.mpf('1.3862943611198342210933202862124607587')
mpmath.mpf('1.3862943611199264860294295864357842274')

mpmath.exp(mpmath.mpf('1.38629436111983'))
mpmath.mpf('3.9999999999997575')
mpath.mpf('1.38629436111983')

mpmath.log(4)
mpmath.mpf('1.3862943611198906188344642429163531361495')




squares['2'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1 * p2, 2), zz))
(squares['2'].real + squares['2'].imag)**2/(squares['2'].real**2 + squares['2'].imag**2)
(squares['2'].real - squares['2'].imag)**2/(squares['2'].real**2 + squares['2'].imag**2)
(-9.93942341619043643e-32 + 5.37882966573430464e-33j)
0.89208381118669317
1.10791618881330683
mpmath.mpf('-268.75694641810609800260449156031419452') # log of density measure for points
mpmath.mpf('-125.98744276057420465910328761001443871') # log of density measure for square root
squares['2'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1, 2), zz))
(squares['2'].real + squares['2'].imag)**2/(squares['2'].real**2 + squares['2'].imag**2)
(squares['2'].real - squares['2'].imag)**2/(squares['2'].real**2 + squares['2'].imag**2)
(-1.41840247543277657e-16 - 5.47916022382870498e-16j)
1.48522706584296567
0.514772934157034331
mpmath.mpf('-123.64984792446779469424251084648799417') # log of density measure for points
squares['2'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p2, 2), zz))
(squares['2'].real + squares['2'].imag)**2/(squares['2'].real**2 + squares['2'].imag**2)
(squares['2'].real - squares['2'].imag)**2/(squares['2'].real**2 + squares['2'].imag**2)
(3.48107705213271281e-17 - 1.72392596666908661e-16j)
0.611967302770432056
1.38803269722956794
mpmath.mpf('-128.32503759668061462396406461903420339') # log of density measure for points

mpmath.mpf('268.75694641810609800260449156031419452') - (mpmath.mpf('123.64984792446779469424251084648799417') + mpmath.mpf('128.32503759668061462396406461903420339'))
mpmath.mpf('16.782060896957688684397916094791996966')

mpmath.mpf('268.75694641810609800260449156031419452') - (2 * mpmath.mpf('125.98744276057420465910328761001443871'))
mpmath.mpf('16.782060896957688684397916340285317109')

squares['4'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1 * p2, 4), zz))
(squares['4'].real + squares['4'].imag)**2/(squares['4'].real**2 + squares['4'].imag**2)
(squares['4'].real - squares['4'].imag)**2/(squares['4'].real**2 + squares['4'].imag**2)
(9.85028197605849318e-63 - 1.06924931062598624e-63j)
0.785428084479964201
1.2145719155200358
mpmath.mpf('-410.14015570272334083721337712397698873') # log of density measure for points
mpmath.mpf('-195.98590022575220944066439290693240782') # log of density measure for square root
squares['4'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1, 4), zz))
(squares['4'].real + squares['4'].imag)**2/(squares['4'].real**2 + squares['4'].imag**2)
(squares['4'].real - squares['4'].imag)**2/(squares['4'].real**2 + squares['4'].imag**2)
(-2.80093311760727961e-31 + 1.55433088495428826e-31j)
0.151446375108417449
1.84855362489158255
mpmath.mpf('-192.47950797159259449337322904371097809') # log of density measure for points
squares['4'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p2, 4), zz))
(squares['4'].real + squares['4'].imag)**2/(squares['4'].real**2 + squares['4'].imag**2)
(squares['4'].real - squares['4'].imag)**2/(squares['4'].real**2 + squares['4'].imag**2)
(-2.85074176412709497e-32 - 1.20022382442949219e-32j)
1.71525726195989032
0.284742738040109676
mpmath.mpf('-199.49229247991182438795555543658842736') # log of density measure for points

mpmath.mpf('410.14015570272334083721337712397698873') - (mpmath.mpf('192.47950797159259449337322904371097809') + mpmath.mpf('199.49229247991182438795555543658842736'))
mpmath.mpf('18.168355251218921955884592643677583284')
mpmath.mpf('18.168355251218921955884592643677583284') - mpmath.mpf('16.782060896957688683750475888700748328')
mpmath.mpf('1.3862943542612332721341167549768349558')

mpmath.mpf('410.14015570272334083721337712397698873') - (2 * mpmath.mpf('195.98590022575220944066439290693240782'))
mpmath.mpf('18.168355251218921955884591310112173090081')
mpmath.mpf('18.168355251218921955884591310112173090081') - mpmath.mpf('16.782060896957688683750475888700748328')
mpmath.mpf('1.3862943542612332721341154214114247620559')

squares['8'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1 * p2, 8), zz))
(squares['8'].real + squares['8'].imag)**2/(squares['8'].real**2 + squares['8'].imag**2)
(squares['8'].real - squares['8'].imag)**2/(squares['8'].real**2 + squares['8'].imag**2)
(9.58847609195886652e-125 - 2.10648144247442479e-125j)
0.580851704512097661
1.41914829548790234
mpmath.mpf('-694.29286865022328089773225136072447099') # log of density measure for points
mpmath.mpf('-337.36910951722810962262107141526304892') # log of density measure for square root
squares['8'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1, 8), zz))
(squares['8'].real + squares['8'].imag)**2/(squares['8'].real**2 + squares['8'].imag**2)
(squares['8'].real - squares['8'].imag)**2/(squares['8'].real**2 + squares['8'].imag**2)
(5.42928182938645444e-62 - 8.70715370277659266e-62j)
0.102044619750534608
1.89795538024946539
mpmath.mpf('-331.52512242696208471046913490539407658') # log of density measure for points
squares['8'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p2, 8), zz))
(squares['8'].real + squares['8'].imag)**2/(squares['8'].real**2 + squares['8'].imag**2)
(squares['8'].real - squares['8'].imag)**2/(squares['8'].real**2 + squares['8'].imag**2)
(6.68619137701030487e-64 + 6.8430563652029987e-64j)
1.99973117084957405
0.000268829150425952067
mpmath.mpf('-343.21309660749413453477301228054292671') # log of density measure for points

mpmath.mpf('694.29286865022328089773225136072447099') - (mpmath.mpf('331.52512242696208471046913490539407658') + mpmath.mpf('343.21309660749413453477301228054292671'))
mpmath.mpf('19.554649615767061652490104174787467706')
mpmath.mpf('19.554649615767061652490104174787467706') - mpmath.mpf('18.168355251218921956116170157713440858')
mpmath.mpf('1.3862943645481396963739340170740268479')

mpmath.mpf('694.29286865022328089773225136072447099') - (2 * mpmath.mpf('337.36910951722810962262107141526304892'))
mpmath.mpf('19.554649615767061652490108530198373151')
mpmath.mpf('19.554649615767061652490108530198373151') - mpmath.mpf('18.168355251218921956116170157713440858')
mpmath.mpf('1.3862943645481396963739383724849322926')

squares['16'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1 * p2, 16), zz))
(squares['16'].real + squares['16'].imag)**2/(squares['16'].real**2 + squares['16'].imag**2)
(squares['16'].real - squares['16'].imag)**2/(squares['16'].real**2 + squares['16'].imag**2)
(8.75016096985776488e-249 - 4.03958938986420873e-249j)
0.238895614992433509
1.76110438500756649
mpmath.mpf('-1263.9845888994868507919009026754985987') # log of density measure for points
mpmath.mpf('-621.52182246129980060536889600146007118') # log of density measure for square root
squares['16'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1, 16), zz))
(squares['16'].real + squares['16'].imag)**2/(squares['16'].real**2 + squares['16'].imag**2)
(squares['16'].real - squares['16'].imag)**2/(squares['16'].real**2 + squares['16'].imag**2)
(-4.63374244208702026e-123 - 9.45471827683198792e-123j)
1.79035609640492945
0.209643903595070552
mpmath.mpf('-611.00264569882095576349542090513285814') # log of density measure for points
squares['16'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p2, 16), zz))
(squares['16'].real + squares['16'].imag)**2/(squares['16'].real**2 + squares['16'].imag**2)
(squares['16'].real - squares['16'].imag)**2/(squares['16'].real**2 + squares['16'].imag**2)
(-2.12226528733832463e-128 + 9.15079689228315391e-127j)
0.953640662947006404
1.0463593370529936
mpmath.mpf('-632.04099922377864544724238559289612951') # log of density measure for points

mpmath.mpf('1263.9845888994868507919009026754985987') - (mpmath.mpf('611.00264569882095576349542090513285814') + mpmath.mpf('632.04099922377864544724238559289612951'))
mpmath.mpf('20.940943976887249581163096177469611087')
mpmath.mpf('20.940943976887249581163096177469611087') - mpmath.mpf('19.554649615767061652388258963242151367')
mpmath.mpf('1.3862943611201879287748372142274597195')

mpmath.mpf('1263.9845888994868507919009026754985987') - (2 * mpmath.mpf('621.52182246129980060536889600146007118'))
mpmath.mpf('20.940943976887249581163110672578456361')
mpmath.mpf('20.940943976887249581163110672578456361') - mpmath.mpf('19.554649615767061652388258963242151367')
mpmath.mpf('1.3862943611201879287748517093363049937')

squares['32'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1 * p2, 32), zz))
(squares['32'].real + squares['32'].imag)**2/(squares['32'].real**2 + squares['32'].imag**2)
(squares['32'].real - squares['32'].imag)**2/(squares['32'].real**2 + squares['32'].imag**2)
(6.02470345597186904e-497 - 7.06941148268826827e-497j)
0.0126506193777780256
1.98734938062222197
mpmath.mpf('-2404.7543237557043975580543691537110595') # log of density measure for points
mpmath.mpf('-1191.2135427105630731896990232614573084') # log of density measure for square root
squares['32'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1, 32), zz))
(squares['32'].real + squares['32'].imag)**2/(squares['32'].real**2 + squares['32'].imag**2)
(squares['32'].real - squares['32'].imag)**2/(squares['32'].real**2 + squares['32'].imag**2)
(-6.79201286746622526e-245 + 8.76214587146644796e-245j)
0.0315802635479131929
1.96841973645208681
mpmath.mpf('-1171.3439866036585884883825084326708323') # log of density measure for points
squares['32'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p2, 32), zz))
(squares['32'].real + squares['32'].imag)**2/(squares['32'].real**2 + squares['32'].imag**2)
(squares['32'].real - squares['32'].imag)**2/(squares['32'].real**2 + squares['32'].imag**2)
(-8.36920436643206157e-253 - 3.88408371919518184e-254j)
1.09261898557782535
0.907381014422174654
mpmath.mpf('-1211.0830988174675578910156022375764926') # log of density measure for points

mpmath.mpf('2404.7543237557043975580543691537110595') - (mpmath.mpf('1171.3439866036585884883825084326708323') + mpmath.mpf('1211.0830988174675578910156022375764926'))
mpmath.mpf('22.327238334578251178656258483463734649')
mpmath.mpf('22.327238334578251178656258483463734649') - mpmath.mpf('20.940943976887249580731698017643793719')
mpmath.mpf('1.3862943576910015979245604658199409298')

mpmath.mpf('2404.7543237557043975580543691537110595') - (2 * mpmath.mpf('1191.2135427105630731896990232614573084'))
mpmath.mpf('22.327238334578251178656322630796442658')
mpmath.mpf('22.327238334578251178656322630796442658') - mpmath.mpf('20.940943976887249580731698017643793719')
mpmath.mpf('1.3862943576910015979246246131526489396')

squares['64'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1 * p2, 64), zz))
(squares['64'].real + squares['64'].imag)**2/(squares['64'].real**2 + squares['64'].imag**2)
(squares['64'].real - squares['64'].imag)**2/(squares['64'].real**2 + squares['64'].imag**2)
(-1.3679526979165357e-993 - 8.51822155828784494e-993j)
1.31310778091937432
0.686892219080625681
mpmath.mpf('-4687.6800878361172715813781886508959658') # log of density measure for points
mpmath.mpf('-2331.9832775702095089771938049801684259') # log of density measure for square root
squares['64'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1, 64), zz))
(squares['64'].real + squares['64'].imag)**2/(squares['64'].real**2 + squares['64'].imag**2)
(squares['64'].real - squares['64'].imag)**2/(squares['64'].real**2 + squares['64'].imag**2)
(-3.06437614810297431e-489 - 1.19025215011232353e-488j)
1.48290350534671342
0.517096494653286577
mpmath.mpf('-2293.412962774453744556991346243017284') # log of density measure for points
squares['64'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p2, 64), zz))
(squares['64'].real + squares['64'].imag)**2/(squares['64'].real**2 + squares['64'].imag**2)
(squares['64'].real - squares['64'].imag)**2/(squares['64'].real**2 + squares['64'].imag**2)
(6.98927206637283143e-505 + 6.50133808445519943e-506j)
1.1844417486572463
0.815558251342753701
mpmath.mpf('-2370.5535923659652733973965170552376721') # log of density measure for points

mpmath.mpf('4687.6800878361172715813781886508959658') - (mpmath.mpf('2293.412962774453744556991346243017284') + mpmath.mpf('2370.5535923659652733973965170552376721'))
mpmath.mpf('23.713532695698253626990325352641009751')
mpmath.mpf('23.713532695698253626990325352641009751') - mpmath.mpf('22.327238334578251178347274574775838119')
mpmath.mpf('1.386294361120002448643050777865171632')

mpmath.mpf('4687.6800878361172715813781886508959658') - (2 * mpmath.mpf('2331.9832775702095089771938049801684259'))
mpmath.mpf('23.713532695698253626990578690559113986')
mpmath.mpf('23.713532695698253626990578690559113986') - mpmath.mpf('22.327238334578251178347274574775838119')
mpmath.mpf('1.3862943611200024486433041157832758674')

squares['128'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1 * p2, 128), zz))
(squares['128'].real + squares['128'].imag)**2/(squares['128'].real**2 + squares['128'].imag**2)
(squares['128'].real - squares['128'].imag)**2/(squares['128'].real**2 + squares['128'].imag**2)
(-7.06888039323426726e-1985 + 2.33050483242213087e-1985j)
0.405272060260417355
1.59472793973958265
mpmath.mpf('-9254.9179103580627293896149697310669346') # log of density measure for points
mpmath.mpf('-4614.9090416506222711710180801527285999') # log of density measure for square root
squares['128'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1, 128), zz))
(squares['128'].real + squares['128'].imag)**2/(squares['128'].real**2 + squares['128'].imag**2)
(squares['128'].real - squares['128'].imag)**2/(squares['128'].real**2 + squares['128'].imag**2)
(-1.32279616907638492e-976 + 7.29476059806497026e-977j)
0.154268325180162042
1.84573167481983796
mpmath.mpf('-4538.9372094771639473130442825678765974') # log of density measure for points
squares['128'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p2, 128), zz))
(squares['128'].real + squares['128'].imag)**2/(squares['128'].real**2 + squares['128'].imag**2)
(squares['128'].real - squares['128'].imag)**2/(squares['128'].real**2 + squares['128'].imag**2)
(4.84272500488956729e-1009 + 9.08792413354571547e-1010j)
1.36255472804976321
0.637445271950236785
mpmath.mpf('-4690.8808738240805950289928878394380627') # log of density measure for points

mpmath.mpf('9254.9179103580627293896149697310669346') - (mpmath.mpf('4538.9372094771639473130442825678765974') + mpmath.mpf('4690.8808738240805950289928878394380627'))
mpmath.mpf('25.099827056818187047577799323752274519')
mpmath.mpf('25.099827056818187047577799323752274519') - mpmath.mpf('23.713532695698253626587215237009331759')
mpmath.mpf('1.3862943611199334209905840867429427607')

mpmath.mpf('9254.9179103580627293896149697310669346') - (2 * mpmath.mpf('4614.9090416506222711710180801527285999'))
mpmath.mpf('25.099827056818187047578809425609734856')
mpmath.mpf('25.099827056818187047578809425609734856') - mpmath.mpf('23.713532695698253626587215237009331759')
mpmath.mpf('1.3862943611199334209915941886004030974')

squares['256'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1 * p2, 256), zz))
(squares['256'].real + squares['256'].imag)**2/(squares['256'].real**2 + squares['256'].imag**2)
(squares['256'].real - squares['256'].imag)**2/(squares['256'].real**2 + squares['256'].imag**2)
(4.45378172399089446e-3969 - 3.29481198324930252e-3969j)
0.0437642614809941703
1.95623573851900583
mpmath.mpf('-18390.779849763073393623676299135449229') # log of density measure for points
mpmath.mpf('-9182.1468641725676861775020847118135165') # log of density measure for square root
squares['256'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1, 256), zz))
(squares['256'].real + squares['256'].imag)**2/(squares['256'].real**2 + squares['256'].imag**2)
(squares['256'].real - squares['256'].imag)**2/(squares['256'].real**2 + squares['256'].imag**2)
(1.2176543830923479e-1952 - 1.92989627468994024e-1952j)
0.0974209330362562762
1.90257906696374372
mpmath.mpf('-9031.3719972437042434439878053057725172') # log of density measure for points
squares['256'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p2, 256), zz))
(squares['256'].real + squares['256'].imag)**2/(squares['256'].real**2 + squares['256'].imag**2)
(squares['256'].real - squares['256'].imag)**2/(squares['256'].real**2 + squares['256'].imag**2)
(2.26260818224118331e-2017 + 8.8020634888122383e-2018j)
1.67577480893903472
0.324225191060965281
mpmath.mpf('-9332.9217311014311289110204012746682654') # log of density measure for points

mpmath.mpf('18390.779849763073393623676299135449229') - (mpmath.mpf('9031.3719972437042434439878053057725172') + mpmath.mpf('9332.9217311014311289110204012746682654'))
mpmath.mpf('26.486121417938021268668092555008445923')
mpmath.mpf('26.486121417938021268668092555008445923') - mpmath.mpf('25.099827056818187046710599830134924559')
mpmath.mpf('1.3862943611198342219574927248735213632')

mpmath.mpf('18390.779849763073393623676299135449229') - (2 * mpmath.mpf('9182.1468641725676861775020847118135165'))
mpmath.mpf('26.486121417938021268672129711822195615')
mpmath.mpf('26.486121417938021268672129711822195615') - mpmath.mpf('25.099827056818187048445323306111731654')
mpmath.mpf('1.3862943611198342202268064057104639608')

squares['512'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1 * p2, 512), zz))
(squares['512'].real + squares['512'].imag)**2/(squares['512'].real**2 + squares['512'].imag**2)
(squares['512'].real - squares['512'].imag)**2/(squares['512'].real**2 + squares['512'].imag**2)
(8.98038563999210185e-7938 - 2.93487467899638733e-7937j)
0.440415903567094641
1.55958409643290536
mpmath.mpf('-36663.890022934214761373318595210971753') # log of density measure for points
mpmath.mpf('-18318.008803577578406809308517956356886') # log of density measure for square root
squares['512'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1, 512), zz))
(squares['512'].real + squares['512'].imag)**2/(squares['512'].real**2 + squares['512'].imag**2)
(squares['512'].real - squares['512'].imag)**2/(squares['512'].real**2 + squares['512'].imag**2)
(-2.24181743439810293e-3904 - 4.69989331557959915e-3904j)
1.77716413798658696
0.222835862013413043
mpmath.mpf('-18017.627867137904726324722058405642315') # log of density measure for points
squares['512'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p2, 512), zz))
(squares['512'].real + squares['512'].imag)**2/(squares['512'].real**2 + squares['512'].imag**2)
(squares['512'].real - squares['512'].imag)**2/(squares['512'].real**2 + squares['512'].imag**2)
(4.34463256973393705e-4034 + 3.98312417407858933e-4034j)
1.99623822270489635
0.00376177729510364805
mpmath.mpf('-18618.389740017252087293911122883956768') # log of density measure for points

mpmath.mpf('36663.890022934214761373318595210971753') - (mpmath.mpf('18017.627867137904726324722058405642315') + mpmath.mpf('18618.389740017252087293911122883956768'))
mpmath.mpf('27.872415779057947754685413921372670022')
mpmath.mpf('27.872415779057947754685413921372670022') - mpmath.mpf('26.486121417938021268406734165523630509')
mpmath.mpf('1.386294361119926486278679755849039513')

mpmath.mpf('36663.890022934214761373318595210971753') - (2 * mpmath.mpf('18318.008803577578406809308517956356886'))
mpmath.mpf('27.872415779057947754701559298257979842')
mpmath.mpf('27.872415779057947754701559298257979842') - mpmath.mpf('26.486121417938021268406734165523630509')
mpmath.mpf('1.3862943611199264862948251327343493333')




# points
mpmath.mpf('-1.3862943473895858308727429605034043085')
mpmath.mpf('-1.3862943267792783071679022296234865412')
mpmath.mpf('-1.3862940700739077300126480969929838236')
mpmath.mpf('-1.386294783041234750447165292350134436')
mpmath.mpf('-1.3862930755763172139427275269186002473')
mpmath.mpf('-1.386296345643355360308955628437702409')
mpmath.mpf('-1.3862852162261697738790331999838323167')
mpmath.mpf('-1.3863021513017947234349519911091049012')
mpmath.mpf('-1.3863001284387714604653859216801966626')
mpmath.mpf('-1.3863469453129677203994395643583854974')
mpmath.mpf('-1.3860430688337689513918470011753191222')
mpmath.mpf('-3.8656789272283523719105930870737674746')
mpmath.mpf('-6.638090221252796321511157886203056503')
mpmath.mpf('-9.4107619078875168086281442981546284624')
mpmath.mpf('-12.186028532351613172414182109531481177')
mpmath.mpf('-14.954146626652565988303681493610988641')
mpmath.mpf('-17.720635950037733358424876257327557463')
mpmath.mpf('-20.478476809882436189406128034131769334')
mpmath.mpf('-23.297448957165859910256036568941094858')

# square roots
mpmath.mpf('-1.3862943473895858308726687780798756948')
mpmath.mpf('-1.3862943267792783071679523934472704201')
mpmath.mpf('-1.3862940700739077300123615405676717504')
mpmath.mpf('-1.3862947830412347504470256873378128141')
mpmath.mpf('-1.3862930755763172139433727331758950121')
mpmath.mpf('-1.3862963456433553603093119065860643464')
mpmath.mpf('-1.3862852162261697738762172391853047687')
mpmath.mpf('-1.3863021513017947234374717007205540898')
mpmath.mpf('-1.3863001284387714604705098569206521105')
mpmath.mpf('-1.3863469453129677203769989628204070217')
mpmath.mpf('-1.386043068833768951428862274690804084')
mpmath.mpf('-3.8656789272283523718708623415679935631')
mpmath.mpf('-6.6380902212527963212696771070792154952')
mpmath.mpf('-9.4107619078875168089568972376408172772')
mpmath.mpf('-12.186028532351613173112701988560934507')
mpmath.mpf('-14.954146626652565987291006660337887961')
mpmath.mpf('-17.720635950037733359874205985523980136')
mpmath.mpf('-20.478476809882436193186796351916564152')
mpmath.mpf('-23.297448957165859951233336699649985565')

mpmath.exp(mpmath.mpf('-3.865678927228352372'))
mpmath.mpf('0.0209486949684777546275') # 1/mpmath.mpf('47.7356704799385125372')
mpmath.power(4, mpmath.mpf('-2.78849790899065601269'))

mpmath.mpf('23.297448957165859951233336699649985565') - mpmath.mpf('20.478476809882436193186796351916564152')
mpf('2.8189721472834237577')
mpmath.mpf('17.720635950037733359874205985523980136') - mpmath.mpf('14.954146626652565987291006660337887961')
mpf('2.766489323385167373')



squareroots['1/2'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1 * p2, mpmath.fdiv(1, 2)), zz))
(squareroots['1/2'].real + squareroots['1/2'].imag)**2/(squareroots['1/2'].real**2 + squareroots['1/2'].imag**2)
(squareroots['1/2'].real - squareroots['1/2'].imag)**2/(squareroots['1/2'].real**2 + squareroots['1/2'].imag**2)
(1.23889394995759852e-8 - 1.27284428123315442e-8j)
0.000365333870306224738
1.99963466612969378
mpmath.mpf('-164.45240734257202044845245342043152081') # log of density measure for points
mpmath.mpf('-75.221467613090564346475545364588865839') # log of density measure for square root
squareroots['1/2'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1, mpmath.fdiv(1, 2)), zz))
(squareroots['1/2'].real + squareroots['1/2'].imag)**2/(squareroots['1/2'].real**2 + squareroots['1/2'].imag**2)
(squareroots['1/2'].real - squareroots['1/2'].imag)**2/(squareroots['1/2'].real**2 + squareroots['1/2'].imag**2)
(-0.0000679253477097661741 - 0.000138478989354573101j)
1.79076262879087916
0.209237371209120835
mpmath.mpf('-73.760470840524058118437564491020951535') # log of density measure for points
squareroots['1/2'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p2, mpmath.fdiv(1, 2)), zz))
(squareroots['1/2'].real + squareroots['1/2'].imag)**2/(squareroots['1/2'].real**2 + squareroots['1/2'].imag**2)
(squareroots['1/2'].real - squareroots['1/2'].imag)**2/(squareroots['1/2'].real**2 + squareroots['1/2'].imag**2)
(0.0000387174402142740272 + 0.000108455695398723342j)
1.63327233393282046
0.366727666067179544
mpmath.mpf('-76.682464385657070574513477380873736059') # log of density measure for points

mpmath.mpf('164.45240734257202044845245342043152081') - (mpmath.mpf('73.760470840524058118437564491020951535') + mpmath.mpf('76.682464385657070574513477380873736059'))
mpmath.mpf('14.009472116390891755501411548536833215')

mpmath.mpf('164.45240734257202044845245342043152081') - (2 * mpmath.mpf('75.221467613090564346475545364588865839'))
mpmath.mpf('14.009472116390891755501362691253789131')

squareroots['1/4'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1 * p2, mpmath.fdiv(1, 4)), zz))
(squareroots['1/4'].real + squareroots['1/4'].imag)**2/(squareroots['1/4'].real**2 + squareroots['1/4'].imag**2)
(squareroots['1/4'].real - squareroots['1/4'].imag)**2/(squareroots['1/4'].real**2 + squareroots['1/4'].imag**2)
(-0.000122782802590489724 + 0.0000518331661429165001j)
0.283400949795976821
1.71659905020402318
mpmath.mpf('-147.99251376084774200514977083319000143') # log of density measure for points
mpmath.mpf('-67.684667995923218040260538460008043995') # log of density measure for square root
squareroots['1/4'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1, mpmath.fdiv(1, 4)), zz))
(squareroots['1/4'].real + squareroots['1/4'].imag)**2/(squareroots['1/4'].real**2 + squareroots['1/4'].imag**2)
(squareroots['1/4'].real - squareroots['1/4'].imag)**2/(squareroots['1/4'].real**2 + squareroots['1/4'].imag**2)
(0.00656946129643364505 - 0.0105396000604911858j)
0.102190745062551489
1.89780925493744851
mpmath.mpf('-66.369770900613362435026374400650893052') # log of density measure for points
squareroots['1/4'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p2, mpmath.fdiv(1, 4)), zz))
(squareroots['1/4'].real + squareroots['1/4'].imag)**2/(squareroots['1/4'].real**2 + squareroots['1/4'].imag**2)
(squareroots['1/4'].real - squareroots['1/4'].imag)**2/(squareroots['1/4'].real**2 + squareroots['1/4'].imag**2)
(-0.0087714536863541521 - 0.00618231021201474709j)
1.94178793656243711
0.0582120634375628872
mpmath.mpf('-68.999565091233073645494727844505679467') # log of density measure for points

mpmath.mpf('147.99251376084774200514977083319000143') - (mpmath.mpf('66.369770900613362435026374400650893052') + mpmath.mpf('68.999565091233073645494727844505679467'))
mpmath.mpf('12.623177769001305924628668588033428907')
mpmath.mpf('12.623177769001305924628668588033428907') - mpmath.mpf('14.00947211639089175563843703287147946')
mpmath.mpf('-1.3862943473895858310097684448380505528')

mpmath.mpf('147.99251376084774200514977083319000143') - (2 * mpmath.mpf('67.684667995923218040260538460008043995'))
mpmath.mpf('12.623177769001305924628693913173913436')
mpmath.mpf('12.623177769001305924628693913173913436') - mpmath.mpf('14.00947211639089175563843703287147946')
mpmath.mpf('-1.3862943473895858310097431196975660238')

squareroots['1/8'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1 * p2, mpmath.fdiv(1, 8)), zz))
(squareroots['1/8'].real + squareroots['1/8'].imag)**2/(squareroots['1/8'].real**2 + squareroots['1/8'].imag**2)
(squareroots['1/8'].real - squareroots['1/8'].imag)**2/(squareroots['1/8'].real**2 + squareroots['1/8'].imag**2)
(0.0022904642426475107 + 0.0113149913405771795j)
1.38891815254533778
0.611081847454662217
mpmath.mpf('-140.45571417802100801060130932615718362') # log of density measure for points
mpmath.mpf('-64.609415367899490196570283903215270303') # log of density measure for square root
squareroots['1/8'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1, mpmath.fdiv(1, 8)), zz))
(squareroots['1/8'].real + squareroots['1/8'].imag)**2/(squareroots['1/8'].real**2 + squareroots['1/8'].imag**2)
(squareroots['1/8'].real - squareroots['1/8'].imag)**2/(squareroots['1/8'].real**2 + squareroots['1/8'].imag**2)
(-0.0974393169036198252 + 0.0540828917700450589j)
0.151358574397100272
1.84864142560289973
mpmath.mpf('-63.36756811121795990273796653131870561') # log of density measure for points
squareroots['1/8'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p2, mpmath.fdiv(1, 8)), zz))
(squareroots['1/8'].real + squareroots['1/8'].imag)**2/(squareroots['1/8'].real**2 + squareroots['1/8'].imag**2)
(squareroots['1/8'].real - squareroots['1/8'].imag)**2/(squareroots['1/8'].real**2 + squareroots['1/8'].imag**2)
(0.0313031883614181225 - 0.0987488900593043395j)
0.423895625446384649
1.57610437455361535
mpmath.mpf('-65.851262624581020490402576436428535646') # log of density measure for points

mpmath.mpf('140.45571417802100801060130932615718362') - (mpmath.mpf('63.36756811121795990273796653131870561') + mpmath.mpf('65.851262624581020490402576436428535646'))
mpmath.mpf('11.236883442222027617460766358409942366')
mpmath.mpf('11.236883442222027617460766358409942366') - mpmath.mpf('12.623177769001305924441436179250786154')
mpmath.mpf('-1.3862943267792783069806698208408437881')

mpmath.mpf('140.45571417802100801060130932615718362') - (2 * mpmath.mpf('64.609415367899490196570283903215270303'))
mpmath.mpf('11.236883442222027617460741519726643016')
mpmath.mpf('11.236883442222027617460741519726643016') - mpmath.mpf('12.623177769001305924441436179250786154')
mpmath.mpf('-1.3862943267792783069806946595241431379')

squareroots['1/16'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1 * p2, mpmath.fdiv(1, 16)), zz))
(squareroots['1/16'].real + squareroots['1/16'].imag)**2/(squareroots['1/16'].real**2 + squareroots['1/16'].imag**2)
(squareroots['1/16'].real - squareroots['1/16'].imag)**2/(squareroots['1/16'].real**2 + squareroots['1/16'].imag**2)
(-0.0831713728030440668 - 0.0680221508870120005j)
1.98012048003953619
0.0198795199604638129
mpmath.mpf('-137.38046184104326305573289986421178907') # log of density measure for points
mpmath.mpf('-63.7649362344475715841422599425264089') # log of density measure for square root
squareroots['1/16'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1, mpmath.fdiv(1, 16)), zz))
(squareroots['1/16'].real + squareroots['1/16'].imag)**2/(squareroots['1/16'].real**2 + squareroots['1/16'].imag**2)
(squareroots['1/16'].real - squareroots['1/16'].imag)**2/(squareroots['1/16'].real**2 + squareroots['1/16'].imag**2)
(0.0836748278344745965 + 0.323173008954567228j)
1.48529962206347363
0.514700377936526365
mpmath.mpf('-62.559613897080203946010998660080798471') # log of density measure for points
squareroots['1/16'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p2, mpmath.fdiv(1, 16)), zz))
(squareroots['1/16'].real + squareroots['1/16'].imag)**2/(squareroots['1/16'].real**2 + squareroots['1/16'].imag**2)
(squareroots['1/16'].real - squareroots['1/16'].imag)**2/(squareroots['1/16'].real**2 + squareroots['1/16'].imag**2)
(-0.25970642324636972 + 0.190116379920311986j)
0.0467486855049179672
1.95325131449508203
mpmath.mpf('-64.970258571814939222273782942714032052') # log of density measure for points

mpmath.mpf('137.38046184104326305573289986421178907') - (mpmath.mpf('62.559613897080203946010998660080798471') + mpmath.mpf('64.970258571814939222273782942714032052'))
mpmath.mpf('9.8505893721481198874481182614169585419')
mpmath.mpf('9.8505893721481198874481182614169585419') - mpmath.mpf('11.236883442222027617261870258147382629')
mpmath.mpf('-1.3862940700739077298137519967304240866')

mpmath.mpf('137.38046184104326305573289986421178907') - (2 * mpmath.mpf('63.7649362344475715841422599425264089'))
mpmath.mpf('9.8505893721481198874483799791589712653')
mpmath.mpf('9.8505893721481198874483799791589712653') - mpmath.mpf('11.236883442222027617261870258147382629')
mpmath.mpf('-1.3862940700739077298134902789884113632')

squareroots['1/32'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1 * p2, mpmath.fdiv(1, 32)), zz))
(squareroots['1/32'].real + squareroots['1/32'].imag)**2/(squareroots['1/32'].real**2 + squareroots['1/32'].imag**2)
(squareroots['1/32'].real - squareroots['1/32'].imag)**2/(squareroots['1/32'].real**2 + squareroots['1/32'].imag**2)
(0.110167864720691197 - 0.308720474248405792j)
0.366913606760734398
1.6330863932392656
mpmath.mpf('-136.53598228567000031169196597174827482') # log of density measure for points
mpmath.mpf('-64.035843848281557587345305839963558185') # log of density measure for square root
squareroots['1/32'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1, mpmath.fdiv(1, 32)), zz))
(squareroots['1/32'].real + squareroots['1/32'].imag)**2/(squareroots['1/32'].real**2 + squareroots['1/32'].imag**2)
(squareroots['1/32'].real - squareroots['1/32'].imag)**2/(squareroots['1/32'].real**2 + squareroots['1/32'].imag**2)
(-0.456894151156401107 - 0.35366288683781016j)
1.96807745434081448
0.0319225456591855195
mpmath.mpf('-62.848783970571271277064812515848139627') # log of density measure for points
squareroots['1/32'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p2, mpmath.fdiv(1, 32)), zz))
(squareroots['1/32'].real + squareroots['1/32'].imag)**2/(squareroots['1/32'].real**2 + squareroots['1/32'].imag**2)
(squareroots['1/32'].real - squareroots['1/32'].imag)**2/(squareroots['1/32'].real**2 + squareroots['1/32'].imag**2)
(0.176281261383766161 + 0.539241602958656567j)
1.59068661676168357
0.409313383238316432
mpmath.mpf('-65.222903725991843897626200486833311088') # log of density measure for points

mpmath.mpf('136.53598228567000031169196597174827482') - (mpmath.mpf('62.848783970571271277064812515848139627') + mpmath.mpf('65.222903725991843897626200486833311088'))
mpmath.mpf('8.4642945891068851370009529690668241059')
mpmath.mpf('8.4642945891068851370009529690668241059') - mpmath.mpf('9.8505893721481198876954721299625816755')
mpmath.mpf('-1.3862947830412347506945191608957575696')

mpmath.mpf('136.53598228567000031169196597174827482') - (2 * mpmath.mpf('64.035843848281557587345305839963558185'))
mpmath.mpf('8.4642945891068851370013542918211584512')
mpmath.mpf('8.4642945891068851370013542918211584512') - mpmath.mpf('9.8505893721481198876954721299625816755')
mpmath.mpf('-1.3862947830412347506941178381414232243')

squareroots['1/64'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1 * p2, mpmath.fdiv(1, 64)), zz))
(squareroots['1/64'].real + squareroots['1/64'].imag)**2/(squareroots['1/64'].real**2 + squareroots['1/64'].imag**2)
(squareroots['1/64'].real - squareroots['1/64'].imag)**2/(squareroots['1/64'].real**2 + squareroots['1/64'].imag**2)
(-0.467951037928493897 + 0.329864076822050316j)
0.0581716863529654664
1.94182831364703453
mpmath.mpf('-136.80689118504755971978680984580678375') # log of density measure for points
mpmath.mpf('-64.864444835758495898364414143580760157') # log of density measure for square root
squareroots['1/64'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1, mpmath.fdiv(1, 64)), zz))
(squareroots['1/64'].real + squareroots['1/64'].imag)**2/(squareroots['1/64'].real**2 + squareroots['1/64'].imag**2)
(squareroots['1/64'].real - squareroots['1/64'].imag)**2/(squareroots['1/64'].real**2 + squareroots['1/64'].imag**2)
(0.24585140508593424 - 0.719261471607599222j)
0.387893488261994207
1.61210651173800579
mpmath.mpf('-63.68651618787675025200870919406620621') # log of density measure for points
squareroots['1/64'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p2, mpmath.fdiv(1, 64)), zz))
(squareroots['1/64'].real + squareroots['1/64'].imag)**2/(squareroots['1/64'].real**2 + squareroots['1/64'].imag**2)
(squareroots['1/64'].real - squareroots['1/64'].imag)**2/(squareroots['1/64'].real**2 + squareroots['1/64'].imag**2)
(-0.609756230700156858 - 0.442178017877298793j)
1.95050014731525583
0.049499852684744168
mpmath.mpf('-66.042373483640241544719875209592353684') # log of density measure for points

mpmath.mpf('136.80689118504755971978680984580678375') - (mpmath.mpf('63.68651618787675025200870919406620621') + mpmath.mpf('66.042373483640241544719875209592353684'))
mpmath.mpf('7.0780015135305679230582254421482238586')
mpmath.mpf('7.0780015135305679230582254421482238586') - mpmath.mpf('8.4642945891068851367589065404217762989')
mpmath.mpf('-1.3862930755763172137006810982735524403')

mpmath.mpf('136.80689118504755971978680984580678375') - (2 * mpmath.mpf('64.864444835758495898364414143580760157'))
mpmath.mpf('7.0780015135305679230579815586452634391')
mpmath.mpf('7.0780015135305679230579815586452634391') - mpmath.mpf('8.4642945891068851367589065404217762989')
mpmath.mpf('-1.3862930755763172137009249817765128598')

squareroots['1/128'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1 * p2, mpmath.fdiv(1, 128)), zz))
(squareroots['1/128'].real + squareroots['1/128'].imag)**2/(squareroots['1/128'].real**2 + squareroots['1/128'].imag**2)
(squareroots['1/128'].real - squareroots['1/128'].imag)**2/(squareroots['1/128'].real**2 + squareroots['1/128'].imag**2)
(0.228666911180329826 + 0.721276364646205998j)
1.57615346346474507
0.423846536535254934
mpmath.mpf('-137.63549018800103328933099212565572369') # log of density measure for points
mpmath.mpf('-65.971892510056910363291161236798262297') # log of density measure for square root
squareroots['1/128'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1, mpmath.fdiv(1, 128)), zz))
(squareroots['1/128'].real + squareroots['1/128'].imag)**2/(squareroots['1/128'].real**2 + squareroots['1/128'].imag**2)
(squareroots['1/128'].real - squareroots['1/128'].imag)**2/(squareroots['1/128'].real**2 + squareroots['1/128'].imag**2)
(0.709214284398994263 - 0.507083322649880897j)
0.0537507391512531578
1.94624926084874684
mpmath.mpf('-64.798529477089435048898492437120578671') # log of density measure for points
squareroots['1/128'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p2, mpmath.fdiv(1, 128)), zz))
(squareroots['1/128'].real + squareroots['1/128'].imag)**2/(squareroots['1/128'].real**2 + squareroots['1/128'].imag**2)
(squareroots['1/128'].real - squareroots['1/128'].imag)**2/(squareroots['1/128'].real**2 + squareroots['1/128'].imag**2)
(-0.267817982668028563 + 0.825519656059460111j)
0.412941274592485152
1.58705872540751485
mpmath.mpf('-67.145255543024385677683229874824623566') # log of density measure for points

mpmath.mpf('137.63549018800103328933099212565572369') - (mpmath.mpf('64.798529477089435048898492437120578671') + mpmath.mpf('67.145255543024385677683229874824623566'))
mpmath.mpf('5.6917051678872125627492698137105214496')
mpmath.mpf('5.6917051678872125627492698137105214496') - mpmath.mpf('7.0780015135305679231138287210711723674')
mpmath.mpf('-1.3862963456433553603645589073606509178')

mpmath.mpf('137.63549018800103328933099212565572369') - (2 * mpmath.mpf('65.971892510056910363291161236798262297'))
mpmath.mpf('5.6917051678872125627486696520591990927')
mpmath.mpf('5.6917051678872125627486696520591990927') - mpmath.mpf('7.0780015135305679231138287210711723674')
mpmath.mpf('-1.3862963456433553603651590690119732747')

squareroots['1/256'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1 * p2, mpmath.fdiv(1, 256)), zz))
(squareroots['1/256'].real + squareroots['1/256'].imag)**2/(squareroots['1/256'].real**2 + squareroots['1/256'].imag**2)
(squareroots['1/256'].real - squareroots['1/256'].imag)**2/(squareroots['1/256'].real**2 + squareroots['1/256'].imag**2)
(0.70189842955526074 + 0.513803945325268476j)
1.95324223994765021
0.0467577600523497909
mpmath.mpf('-138.74294700719316859921623071954274513') # log of density measure for points
mpmath.mpf('-67.218763527766062905171889153334425405') # log of density measure for square root
squareroots['1/256'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1, mpmath.fdiv(1, 256)), zz))
(squareroots['1/256'].real + squareroots['1/256'].imag)**2/(squareroots['1/256'].real**2 + squareroots['1/256'].imag**2)
(squareroots['1/256'].real - squareroots['1/256'].imag)**2/(squareroots['1/256'].real**2 + squareroots['1/256'].imag**2)
(0.889118095635871626 - 0.285160838103980752j)
0.418380839279803001
1.581619160720197
mpmath.mpf('-66.047683302255722756759707185357368124') # log of density measure for points
squareroots['1/256'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p2, mpmath.fdiv(1, 256)), zz))
(squareroots['1/256'].real + squareroots['1/256'].imag)**2/(squareroots['1/256'].real**2 + squareroots['1/256'].imag**2)
(squareroots['1/256'].real - squareroots['1/256'].imag)**2/(squareroots['1/256'].real**2 + squareroots['1/256'].imag**2)
(0.547749149261397641 + 0.753556310559876767j)
1.95119512954853828
0.0488048704514617201
mpmath.mpf('-68.389843753276403053586286920458687877') # log of density measure for points

mpmath.mpf('138.74294700719316859921623071954274513') - (mpmath.mpf('66.047683302255722756759707185357368124') + mpmath.mpf('68.389843753276403053586286920458687877'))
mpmath.mpf('4.3054199516610427888702366137266891329')
mpmath.mpf('4.3054199516610427888702366137266891329') - mpmath.mpf('5.6917051678872125626378053464549111595')
mpmath.mpf('-1.3862852162261697737675687327282220266')

mpmath.mpf('138.74294700719316859921623071954274513') - (2 * mpmath.mpf('67.218763527766062905171889153334425405'))
mpmath.mpf('4.305419951661042788872452412873894324')
mpmath.mpf('4.305419951661042788872452412873894324') - mpmath.mpf('5.6917051678872125626378053464549111595')
mpmath.mpf('-1.3862852162261697737653529335810168355')

squareroots['1/512'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1 * p2, mpmath.fdiv(1, 512)), zz))
(squareroots['1/512'].real + squareroots['1/512'].imag)**2/(squareroots['1/512'].real**2 + squareroots['1/512'].imag**2)
(squareroots['1/512'].real - squareroots['1/512'].imag)**2/(squareroots['1/512'].real**2 + squareroots['1/512'].imag**2)
(-0.886498203800154448 - 0.289794126554765481j)
1.59067450148552722
0.40932549851447278
mpmath.mpf('-139.98981023472041703650118522238379302') # log of density measure for points
mpmath.mpf('-68.535346217180584485533102255115226392') # log of density measure for square root
squareroots['1/512'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1, mpmath.fdiv(1, 512)), zz))
(squareroots['1/512'].real + squareroots['1/512'].imag)**2/(squareroots['1/512'].real**2 + squareroots['1/512'].imag**2)
(squareroots['1/512'].real - squareroots['1/512'].imag)**2/(squareroots['1/512'].real**2 + squareroots['1/512'].imag**2)
(0.954684749607820136 - 0.14934816871282563j)
0.694599621150118748
1.30540037884988125
mpmath.mpf('-67.365407395398811920111914057863675843') # log of density measure for points
squareroots['1/512'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p2, mpmath.fdiv(1, 512)), zz))
(squareroots['1/512'].real + squareroots['1/512'].imag)**2/(squareroots['1/512'].real**2 + squareroots['1/512'].imag**2)
(squareroots['1/512'].real - squareroots['1/512'].imag)**2/(squareroots['1/512'].real**2 + squareroots['1/512'].imag**2)
(-0.860042994878000712 - 0.438092232044033213j)
1.80888505383512028
0.191114946164879723
mpmath.mpf('-69.705285038962357050953986541902532944') # log of density measure for points

mpmath.mpf('139.98981023472041703650118522238379302') - (mpmath.mpf('67.365407395398811920111914057863675843') + mpmath.mpf('69.705285038962357050953986541902532944'))
mpmath.mpf('2.9191178003592480654352846226175842317')
mpmath.mpf('2.9191178003592480654352846226175842317') - mpmath.mpf('4.3054199516610427889325152239763383477')
mpmath.mpf('-1.386302151301794723497230601358754116')

mpmath.mpf('139.98981023472041703650118522238379302') - (2 * mpmath.mpf('68.535346217180584485533102255115226392'))
mpmath.mpf('2.9191178003592480654349807121533402343')
mpmath.mpf('2.9191178003592480654349807121533402343') - mpmath.mpf('4.3054199516610427889325152239763383477')
mpmath.mpf('-1.3863021513017947234975345118229981134')

squareroots['1/1024'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1 * p2, mpmath.fdiv(1, 1024)), zz))
(squareroots['1/1024'].real + squareroots['1/1024'].imag)**2/(squareroots['1/1024'].real**2 + squareroots['1/1024'].imag**2)
(squareroots['1/1024'].real - squareroots['1/1024'].imag)**2/(squareroots['1/1024'].real**2 + squareroots['1/1024'].imag**2)
(0.151928421281174948 - 0.953719271585273475j)
0.68928302980141476
1.31071697019858524
mpmath.mpf('-141.30638715681605777521567566555933512') # log of density measure for points
mpmath.mpf('-69.8867847424477905851256024051633235') # log of density measure for square root
squareroots['1/1024'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1, mpmath.fdiv(1, 1024)), zz))
(squareroots['1/1024'].real + squareroots['1/1024'].imag)**2/(squareroots['1/1024'].real**2 + squareroots['1/1024'].imag**2)
(squareroots['1/1024'].real - squareroots['1/1024'].imag)**2/(squareroots['1/1024'].real**2 + squareroots['1/1024'].imag**2)
(0.980046093595909618 - 0.0761944615098912597j)
0.845442620326841601
1.1545573796731584
mpmath.mpf('-68.717416622530301811201966282679015957') # log of density measure for points
squareroots['1/1024'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p2, mpmath.fdiv(1, 1024)), zz))
(squareroots['1/1024'].real + squareroots['1/1024'].imag)**2/(squareroots['1/1024'].real**2 + squareroots['1/1024'].imag**2)
(squareroots['1/1024'].real - squareroots['1/1024'].imag)**2/(squareroots['1/1024'].real**2 + squareroots['1/1024'].imag**2)
(0.229293089817124902 - 0.955310586100606744j)
0.546109490084612757
1.45389050991538724
mpmath.mpf('-71.056152862365279359043810681942931598') # log of density measure for points

mpmath.mpf('141.30638715681605777521567566555933512') - (mpmath.mpf('68.717416622530301811201966282679015957') + mpmath.mpf('71.056152862365279359043810681942931598'))
mpmath.mpf('1.532817671920476604969898700937387569')
mpmath.mpf('1.532817671920476604969898700937387569') - mpmath.mpf('2.9191178003592480654352846226175842317')
mpmath.mpf('-1.3863001284387714604653859216801966626')

mpmath.mpf('141.30638715681605777521567566555933512') - (2 * mpmath.mpf('69.8867847424477905851256024051633235'))
mpmath.mpf('1.5328176719204766049644708552326881238')
mpmath.mpf('1.5328176719204766049644708552326881238') - mpmath.mpf('2.9191178003592480654349807121533402343')
mpmath.mpf('-1.3863001284387714604705098569206521105')

squareroots['1/2048'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1 * p2, mpmath.fdiv(1, 2048)), zz))
(squareroots['1/2048'].real + squareroots['1/2048'].imag)**2/(squareroots['1/2048'].real**2 + squareroots['1/2048'].imag**2)
(squareroots['1/2048'].real - squareroots['1/2048'].imag)**2/(squareroots['1/2048'].real**2 + squareroots['1/2048'].imag**2)
(0.747553694812264263 - 0.637893490597210059j)
0.0124519049760704433
1.98754809502392956
mpmath.mpf('-142.65777309789018677328923417127338187') # log of density measure for points
mpmath.mpf('-71.255651185641338944350881139430550385') # log of density measure for square root
squareroots['1/2048'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1, mpmath.fdiv(1, 2048)), zz))
(squareroots['1/2048'].real + squareroots['1/2048'].imag)**2/(squareroots['1/2048'].real**2 + squareroots['1/2048'].imag**2)
(squareroots['1/2048'].real - squareroots['1/2048'].imag)**2/(squareroots['1/2048'].real**2 + squareroots['1/2048'].imag**2)
(0.990719340777631045 - 0.038454110247855413j)
0.922488110038647491
1.07751188996135251
mpmath.mpf('-70.086568416655992066179271417638898602') # log of density measure for points
squareroots['1/2048'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p2, mpmath.fdiv(1, 2048)), zz))
(squareroots['1/2048'].real + squareroots['1/2048'].imag)**2/(squareroots['1/2048'].real**2 + squareroots['1/2048'].imag**2)
(squareroots['1/2048'].real - squareroots['1/2048'].imag)**2/(squareroots['1/2048'].real**2 + squareroots['1/2048'].imag**2)
(0.778375159774290933 - 0.613656907022587022j)
0.0276169827475881229
1.97238301725241188
mpmath.mpf('-72.424733954626685822539503617055481198') # log of density measure for points

mpmath.mpf('142.65777309789018677328923417127338187') - (mpmath.mpf('70.086568416655992066179271417638898602') + mpmath.mpf('72.424733954626685822539503617055481198'))
mpmath.mpf('0.1464707266075088845704591365790020716')
mpmath.mpf('0.1464707266075088845704591365790020716') - mpmath.mpf('1.532817671920476604969898700937387569')
mpmath.mpf('-1.3863469453129677203994395643583854974')

mpmath.mpf('142.65777309789018677328923417127338187') - (2 * mpmath.mpf('71.255651185641338944350881139430550385'))
mpmath.mpf('0.14647072660750888458747189241228110204')
mpmath.mpf('0.14647072660750888458747189241228110204') - mpmath.mpf('1.5328176719204766049644708552326881238')
mpmath.mpf('-1.3863469453129677203769989628204070217')

squareroots['1/4096'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1 * p2, mpmath.fdiv(1, 4096)), zz))
(squareroots['1/4096'].real + squareroots['1/4096'].imag)**2/(squareroots['1/4096'].real**2 + squareroots['1/4096'].imag**2)
(squareroots['1/4096'].real - squareroots['1/4096'].imag)**2/(squareroots['1/4096'].real**2 + squareroots['1/4096'].imag**2)
(0.930128153708152885 - 0.342906237196515671j)
0.350891914333169457
1.64910808566683054
mpmath.mpf('-144.02689083336985679996537379561821493') # log of density measure for points
mpmath.mpf('-72.633231587798058433403382088948368955') # log of density measure for square root
squareroots['1/4096'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1, mpmath.fdiv(1, 4096)), zz))
(squareroots['1/4096'].real + squareroots['1/4096'].imag)**2/(squareroots['1/4096'].real**2 + squareroots['1/4096'].imag**2)
(squareroots['1/4096'].real - squareroots['1/4096'].imag)**2/(squareroots['1/4096'].real**2 + squareroots['1/4096'].imag**2)
(-0.995536208785117904 + 0.0193132655088367401j)
0.961214872074972426
1.03878512792502757
mpmath.mpf('-71.464291494278782503069443609349716661') # log of density measure for points
squareroots['1/4096'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p2, mpmath.fdiv(1, 4096)), zz))
(squareroots['1/4096'].real + squareroots['1/4096'].imag)**2/(squareroots['1/4096'].real**2 + squareroots['1/4096'].imag**2)
(squareroots['1/4096'].real - squareroots['1/4096'].imag)**2/(squareroots['1/4096'].real**2 + squareroots['1/4096'].imag**2)
(-0.940626820211388355 + 0.32619573131280645j)
0.380884019260906236
1.61911598073909376
mpmath.mpf('-73.802171681317334363717318050864815317') # log of density measure for points

mpmath.mpf('144.02689083336985679996537379561821493') - (mpmath.mpf('71.464291494278782503069443609349716661') + mpmath.mpf('73.802171681317334363717318050864815317'))
mpmath.mpf('-1.2395723422262600668213878645963170506')
mpmath.mpf('-1.2395723422262600668213878645963170506') - mpmath.mpf('0.1464707266075088845704591365790020716')
mpmath.mpf('-1.3860430688337689513918470011753191222')

mpmath.mpf('144.02689083336985679996537379561821493') - (2 * mpmath.mpf('72.633231587798058433403382088948368955'))
mpmath.mpf('-1.239572342226260066841390382278522982')
mpmath.mpf('-1.239572342226260066841390382278522982') - mpmath.mpf('0.14647072660750888458747189241228110204')
mpmath.mpf('-1.386043068833768951428862274690804084')

squareroots['1/8192'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1 * p2, mpmath.fdiv(1, 8192)), zz))
(squareroots['1/8192'].real + squareroots['1/8192'].imag)**2/(squareroots['1/8192'].real**2 + squareroots['1/8192'].imag**2)
(squareroots['1/8192'].real - squareroots['1/8192'].imag)**2/(squareroots['1/8192'].real**2 + squareroots['1/8192'].imag**2)
(-0.980166325489094629 + 0.17492247401246334j)
0.654092635062732626
1.34590736493726737
mpmath.mpf('-145.40423135387063466959645903633781206') # log of density measure for points
mpmath.mpf('-74.015168969436363487312965497813641321') # log of density measure for square root
squareroots['1/8192'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1, mpmath.fdiv(1, 8192)), zz))
(squareroots['1/8192'].real + squareroots['1/8192'].imag)**2/(squareroots['1/8192'].real**2 + squareroots['1/8192'].imag**2)
(squareroots['1/8192'].real - squareroots['1/8192'].imag)**2/(squareroots['1/8192'].real**2 + squareroots['1/8192'].imag**2)
(0.00967780254259031828 + 0.99781254183697815j)
1.01939621286016233
0.980603787139837674
mpmath.mpf('-72.846300213650123030929881871633199582') # log of density measure for points
squareroots['1/8192'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p2, mpmath.fdiv(1, 8192)), zz))
(squareroots['1/8192'].real + squareroots['1/8192'].imag)**2/(squareroots['1/8192'].real**2 + squareroots['1/8192'].imag**2)
(squareroots['1/8192'].real - squareroots['1/8192'].imag)**2/(squareroots['1/8192'].real**2 + squareroots['1/8192'].imag**2)
(0.165762862417165342 + 0.983922835779371717j)
1.32764343255950738
0.672356567440492623
mpmath.mpf('-75.184037725222603943755782387182062903') # log of density measure for points

mpmath.mpf('145.40423135387063466959645903633781206') - (mpmath.mpf('72.846300213650123030929881871633199582') + mpmath.mpf('75.184037725222603943755782387182062903'))
mpmath.mpf('-2.626106585002092305089205222477450424')
mpmath.mpf('-2.626106585002092305089205222477450424') - mpmath.mpf('1.2395723422262600668213878645963170506')
mpmath.mpf('-3.8656789272283523719105930870737674746')

mpmath.mpf('145.40423135387063466959645903633781206') - (2 * mpmath.mpf('74.015168969436363487312965497813641321'))
mpmath.mpf('-2.6261065850020923050294719592894705812')
mpmath.mpf('-2.6261065850020923050294719592894705812') - mpmath.mpf('1.239572342226260066841390382278522982')
mpmath.mpf('-3.8656789272283523718708623415679935631')

squareroots['1/16384'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1 * p2, mpmath.fdiv(1, 16384)), zz))
(squareroots['1/16384'].real + squareroots['1/16384'].imag)**2/(squareroots['1/16384'].real**2 + squareroots['1/16384'].imag**2)
(squareroots['1/16384'].real - squareroots['1/16384'].imag)**2/(squareroots['1/16384'].real**2 + squareroots['1/16384'].imag**2)
(0.0879948092061976721 + 0.993936321871944556j)
1.17568627035682503
0.82431372964317497
mpmath.mpf('-146.78658604538021863102868807980400979') # log of density measure for points
mpmath.mpf('-75.399284840815461323634446613796877352') # log of density measure for square root
squareroots['1/16384'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1, mpmath.fdiv(1, 16384)), zz))
(squareroots['1/16384'].real + squareroots['1/16384'].imag)**2/(squareroots['1/16384'].real**2 + squareroots['1/16384'].imag**2)
(squareroots['1/16384'].real - squareroots['1/16384'].imag)**2/(squareroots['1/16384'].real**2 + squareroots['1/16384'].imag**2)
(-0.709766608072676401 - 0.702915951869355445j)
1.99995296783598235
0.0000470321640176500393
mpmath.mpf('-74.230451753895738604360704893327828184') # log of density measure for points
squareroots['1/16384'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p2, mpmath.fdiv(1, 16384)), zz))
(squareroots['1/16384'].real + squareroots['1/16384'].imag)**2/(squareroots['1/16384'].real**2 + squareroots['1/16384'].imag**2)
(squareroots['1/16384'].real - squareroots['1/16384'].imag)**2/(squareroots['1/16384'].real**2 + squareroots['1/16384'].imag**2)
(-0.762742142945724966 - 0.644990476060128673j)
1.98610381061622695
0.0138961893837730529
mpmath.mpf('-76.568117927735184043089935850201787684') # log of density measure for points

mpmath.mpf('146.78658604538021863102868807980400979') - (mpmath.mpf('74.230451753895738604360704893327828184') + mpmath.mpf('76.568117927735184043089935850201787684'))
mpmath.mpf('-4.011983636250704016421952663725606079')
mpmath.mpf('-4.011983636250704016421952663725606079') - mpmath.mpf('2.626106585002092305089205222477450424')
mpmath.mpf('-6.638090221252796321511157886203056503')

mpmath.mpf('146.78658604538021863102868807980400979') - (2 * mpmath.mpf('75.399284840815461323634446613796877352'))
mpmath.mpf('-4.0119836362507040162402051477897449141')
mpmath.mpf('-4.0119836362507040162402051477897449141') - mpmath.mpf('2.6261065850020923050294719592894705812')
mpmath.mpf('-6.6380902212527963212696771070792154952')

squareroots['1/32768'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1 * p2, mpmath.fdiv(1, 32768)), zz))
(squareroots['1/32768'].real + squareroots['1/32768'].imag)**2/(squareroots['1/32768'].real**2 + squareroots['1/32768'].imag**2)
(squareroots['1/32768'].real - squareroots['1/32768'].imag)**2/(squareroots['1/32768'].real**2 + squareroots['1/32768'].imag**2)
(-0.736823822447401328 - 0.674473525143724148j)
1.99610396218596809
0.00389603781403190766
mpmath.mpf('-148.17020164249309831086527082585963312') # log of density measure for points
mpmath.mpf('-76.78448995706495555179098145785535274') # log of density measure for square root
squareroots['1/32768'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1, mpmath.fdiv(1, 32768)), zz))
(squareroots['1/32768'].real + squareroots['1/32768'].imag)**2/(squareroots['1/32768'].real**2 + squareroots['1/32768'].imag**2)
(squareroots['1/32768'].real - squareroots['1/32768'].imag)**2/(squareroots['1/32768'].real**2 + squareroots['1/32768'].imag**2)
(0.380238448375109138 - 0.924309410151918195j)
0.296330533053503443
1.70366946694649656
mpmath.mpf('-75.615674704578491700183483076647742347') # log of density measure for points
squareroots['1/32768'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p2, mpmath.fdiv(1, 32768)), zz))
(squareroots['1/32768'].real + squareroots['1/32768'].imag)**2/(squareroots['1/32768'].real**2 + squareroots['1/32768'].imag**2)
(squareroots['1/32768'].real - squareroots['1/32768'].imag)**2/(squareroots['1/32768'].real**2 + squareroots['1/32768'].imag**2)
(0.343621441659881533 - 0.938518959911913716j)
0.354295072928777168
1.64570492707122283
mpmath.mpf('-77.953305209551419402887979383640913153') # log of density measure for points

mpmath.mpf('148.17020164249309831086527082585963312') - (mpmath.mpf('75.615674704578491700183483076647742347') + mpmath.mpf('77.953305209551419402887979383640913153'))
mpmath.mpf('-5.3987782716368127922061916344290223834')
mpmath.mpf('-5.3987782716368127922061916344290223834') - mpmath.mpf('4.011983636250704016421952663725606079')
mpmath.mpf('-9.4107619078875168086281442981546284624')

mpmath.mpf('148.17020164249309831086527082585963312') - (2 * mpmath.mpf('76.78448995706495555179098145785535274'))
mpmath.mpf('-5.3987782716368127927166920898510723632')
mpmath.mpf('-5.3987782716368127927166920898510723632') - mpmath.mpf('4.0119836362507040162402051477897449141')
mpmath.mpf('-9.4107619078875168089568972376408172772')

squareroots['1/65536'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1 * p2, mpmath.fdiv(1, 65536)), zz))
(squareroots['1/65536'].real + squareroots['1/65536'].imag)**2/(squareroots['1/65536'].real**2 + squareroots['1/65536'].imag**2)
(squareroots['1/65536'].real - squareroots['1/65536'].imag)**2/(squareroots['1/65536'].real**2 + squareroots['1/65536'].imag**2)
(0.361999672440504343 - 0.931594109735797846j)
0.324791407767443879
1.67520859223255612
mpmath.mpf('-149.55322913078449556835459305896888824') # log of density measure for points
mpmath.mpf('-78.170239695749647974375301478839375191') # log of density measure for square root
squareroots['1/65536'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1, mpmath.fdiv(1, 65536)), zz))
(squareroots['1/65536'].real + squareroots['1/65536'].imag)**2/(squareroots['1/65536'].real**2 + squareroots['1/65536'].imag**2)
(squareroots['1/65536'].real - squareroots['1/65536'].imag)**2/(squareroots['1/65536'].real**2 + squareroots['1/65536'].imag**2)
(0.830572960859237698 - 0.556428786939866803j)
0.0751952998206098514
1.92480470017939015
mpmath.mpf('-77.001433360479813557778484611173375292') # log of density measure for points
squareroots['1/65536'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p2, mpmath.fdiv(1, 65536)), zz))
(squareroots['1/65536'].real + squareroots['1/65536'].imag)**2/(squareroots['1/65536'].real**2 + squareroots['1/65536'].imag**2)
(squareroots['1/65536'].real - squareroots['1/65536'].imag)**2/(squareroots['1/65536'].real**2 + squareroots['1/65536'].imag**2)
(0.819471797923169161 - 0.57263652165361403j)
0.0609613888192604605
1.93903861118073954
mpmath.mpf('-79.339046031019482390784098922897971739') # log of density measure for points

mpmath.mpf('149.55322913078449556835459305896888824') - (mpmath.mpf('77.001433360479813557778484611173375292') + mpmath.mpf('79.339046031019482390784098922897971739'))
mpmath.mpf('-6.7872502607148003802079904751024587932')
mpmath.mpf('-6.7872502607148003802079904751024587932') - mpmath.mpf('5.3987782716368127922061916344290223834')
mpmath.mpf('-12.186028532351613172414182109531481177')

mpmath.mpf('149.55322913078449556835459305896888824') - (2 * mpmath.mpf('78.170239695749647974375301478839375191'))
mpmath.mpf('-6.7872502607148003803960098987098621438')
mpmath.mpf('-6.7872502607148003803960098987098621438') - mpmath.mpf('5.3987782716368127927166920898510723632')
mpmath.mpf('-12.186028532351613173112701988560934507')

squareroots['1/131072'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1 * p2, mpmath.fdiv(1, 131072)), zz))
(squareroots['1/131072'].real + squareroots['1/131072'].imag)**2/(squareroots['1/131072'].real**2 + squareroots['1/131072'].imag**2)
(squareroots['1/131072'].real - squareroots['1/131072'].imag)**2/(squareroots['1/131072'].real**2 + squareroots['1/131072'].imag**2)
(0.825062178955375594 - 0.564559940752164926j)
0.0678983850247162231
1.93210161497528378
mpmath.mpf('-150.94562712536611338398780434223753198') # log of density measure for points
mpmath.mpf('-79.5562617456519394954414005519327789') # log of density measure for square root
squareroots['1/131072'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1, mpmath.fdiv(1, 131072)), zz))
(squareroots['1/131072'].real + squareroots['1/131072'].imag)**2/(squareroots['1/131072'].real**2 + squareroots['1/131072'].imag**2)
(squareroots['1/131072'].real - squareroots['1/131072'].imag)**2/(squareroots['1/131072'].real**2 + squareroots['1/131072'].imag**2)
(0.956636070854340329 - 0.290825740264497022j)
0.443422152195390929
1.55657784780460907
mpmath.mpf('-78.387459868990419797127250357480317138') # log of density measure for points
squareroots['1/131072'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p2, mpmath.fdiv(1, 131072)), zz))
(squareroots['1/131072'].real + squareroots['1/131072'].imag)**2/(squareroots['1/131072'].real**2 + squareroots['1/131072'].imag**2)
(squareroots['1/131072'].real - squareroots['1/131072'].imag)**2/(squareroots['1/131072'].real**2 + squareroots['1/131072'].imag**2)
(0.953728228164210921 - 0.300209485649730984j)
0.427204967901533696
1.5727950320984663
mpmath.mpf('-80.725063622313459194956245003265744694') # log of density measure for points

mpmath.mpf('150.94562712536611338398780434223753198') - (mpmath.mpf('78.387459868990419797127250357480317138') + mpmath.mpf('80.725063622313459194956245003265744694'))
mpmath.mpf('-8.1668963659377656080956910185085298483')
mpmath.mpf('-8.1668963659377656080956910185085298483') - mpmath.mpf('6.7872502607148003802079904751024587932')
mpmath.mpf('-14.954146626652565988303681493610988641')

mpmath.mpf('150.94562712536611338398780434223753198') - (2 * mpmath.mpf('79.5562617456519394954414005519327789'))
mpmath.mpf('-8.1668963659377656068949967616280258168')
mpmath.mpf('-8.1668963659377656068949967616280258168') - mpmath.mpf('6.7872502607148003803960098987098621438')
mpmath.mpf('-14.954146626652565987291006660337887961')

squareroots['1/262144'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1 * p2, mpmath.fdiv(1, 262144)), zz))
(squareroots['1/262144'].real + squareroots['1/262144'].imag)**2/(squareroots['1/262144'].real**2 + squareroots['1/262144'].imag**2)
(squareroots['1/262144'].real - squareroots['1/262144'].imag)**2/(squareroots['1/262144'].real**2 + squareroots['1/262144'].imag**2)
(0.955193672720645417 - 0.295521189511310358j)
0.435286302309041794
1.56471369769095821
mpmath.mpf('-152.33110031822609338539725937375932979') # log of density measure for points
mpmath.mpf('-80.942419951163030569188234298827642052') # log of density measure for square root
squareroots['1/262144'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1, mpmath.fdiv(1, 262144)), zz))
(squareroots['1/262144'].real + squareroots['1/262144'].imag)**2/(squareroots['1/262144'].real**2 + squareroots['1/262144'].imag**2)
(squareroots['1/262144'].real - squareroots['1/262144'].imag)**2/(squareroots['1/262144'].real**2 + squareroots['1/262144'].imag**2)
(0.989065759572493061 - 0.147020426826928901j)
0.70913530791053564
1.29086469208946436
mpmath.mpf('-79.773620303805668223458753705265373567') # log of density measure for points
squareroots['1/262144'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p2, mpmath.fdiv(1, 262144)), zz))
(squareroots['1/262144'].real + squareroots['1/262144'].imag)**2/(squareroots['1/262144'].real**2 + squareroots['1/262144'].imag**2)
(squareroots['1/262144'].real - squareroots['1/262144'].imag)**2/(squareroots['1/262144'].real**2 + squareroots['1/262144'].imag**2)
(0.988329361302699644 - 0.15187724730449678j)
0.699748967012032508
1.30025103298796749
mpmath.mpf('-82.111219598520392912267690907312983833') # log of density measure for points

mpmath.mpf('152.33110031822609338539725937375932979') - (mpmath.mpf('79.773620303805668223458753705265373567') + mpmath.mpf('82.111219598520392912267690907312983833'))
mpmath.mpf('-9.5537395840999677503291852388190276152')
mpmath.mpf('-9.5537395840999677503291852388190276152') - mpmath.mpf('8.1668963659377656080956910185085298483')
mpmath.mpf('-17.720635950037733358424876257327557463')

mpmath.mpf('152.33110031822609338539725937375932979') - (2 * mpmath.mpf('80.942419951163030569188234298827642052'))
mpmath.mpf('-9.5537395840999677529792092238959543192')
mpmath.mpf('-9.5537395840999677529792092238959543192') - mpmath.mpf('8.1668963659377656068949967616280258168')
mpmath.mpf('-17.720635950037733359874205985523980136')

squareroots['1/524288'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1 * p2, mpmath.fdiv(1, 524288)), zz))
(squareroots['1/524288'].real + squareroots['1/524288'].imag)**2/(squareroots['1/524288'].real**2 + squareroots['1/524288'].imag**2)
(squareroots['1/524288'].real - squareroots['1/524288'].imag)**2/(squareroots['1/524288'].real**2 + squareroots['1/524288'].imag**2)
(0.988700542727827197 - 0.149449290629479515j)
0.70443857088185665
1.29556142911814335
mpmath.mpf('-153.73255524317457438571334123170073364') # log of density measure for points
mpmath.mpf('-82.328646234478521412960464179860671736') # log of density measure for square root
squareroots['1/524288'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1, mpmath.fdiv(1, 524288)), zz))
(squareroots['1/524288'].real + squareroots['1/524288'].imag)**2/(squareroots['1/524288'].real**2 + squareroots['1/524288'].imag**2)
(squareroots['1/524288'].real - squareroots['1/524288'].imag)**2/(squareroots['1/524288'].real**2 + squareroots['1/524288'].imag**2)
(0.997245907151830285 - 0.0737132264833376825j)
0.852969727892203418
1.14703027210779658
mpmath.mpf('-81.159847701773237751291283949994502172') # log of density measure for points
squareroots['1/524288'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p2, mpmath.fdiv(1, 524288)), zz))
(squareroots['1/524288'].real + squareroots['1/524288'].imag)**2/(squareroots['1/524288'].real**2 + squareroots['1/524288'].imag**2)
(squareroots['1/524288'].real - squareroots['1/524288'].imag)**2/(squareroots['1/524288'].real**2 + squareroots['1/524288'].imag**2)
(0.997060723135748634 - 0.0761624862861130774j)
0.848112243572107091
1.15188775642789291
mpmath.mpf('-83.497444767183805073499000077018973187') # log of density measure for points

mpmath.mpf('153.73255524317457438571334123170073364') - (mpmath.mpf('81.159847701773237751291283949994502172') + mpmath.mpf('83.497444767183805073499000077018973187'))
mpmath.mpf('-10.924737225782468439076942795312741719')
mpmath.mpf('-10.924737225782468439076942795312741719') - mpmath.mpf('9.5537395840999677503291852388190276152')
mpmath.mpf('-20.478476809882436189406128034131769334')

mpmath.mpf('153.73255524317457438571334123170073364') - (2 * mpmath.mpf('82.328646234478521412960464179860671736'))
mpmath.mpf('-10.924737225782468440207587128020609833')
mpmath.mpf('-10.924737225782468440207587128020609833') - mpmath.mpf('9.5537395840999677529792092238959543192')
mpmath.mpf('-20.478476809882436193186796351916564152')

squareroots['1/1048576'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1 * p2, mpmath.fdiv(1, 1048576)), zz))
(squareroots['1/1048576'].real + squareroots['1/1048576'].imag)**2/(squareroots['1/1048576'].real**2 + squareroots['1/1048576'].imag**2)
(squareroots['1/1048576'].real - squareroots['1/1048576'].imag)**2/(squareroots['1/1048576'].real**2 + squareroots['1/1048576'].imag**2)
(0.997154067143254588 - 0.0749379135852279206j)
0.850540534844619534
1.14945946515538047
mpmath.mpf('-155.05710138200903279199745475956807646') # log of density measure for points
mpmath.mpf('-83.714906556696212151511602165598726096') # log of density measure for square root
squareroots['1/1048576'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p1, mpmath.fdiv(1, 1048576)), zz))
(squareroots['1/1048576'].real + squareroots['1/1048576'].imag)**2/(squareroots['1/1048576'].real**2 + squareroots['1/1048576'].imag**2)
(squareroots['1/1048576'].real - squareroots['1/1048576'].imag)**2/(squareroots['1/1048576'].real**2 + squareroots['1/1048576'].imag**2)
(0.99930286353441704 - 0.0368823252555399815j)
0.92628430544033844
1.07371569455966156
mpmath.mpf('-82.546108581316967822508952822884704411') # log of density measure for points
squareroots['1/1048576'] = mpmath.fdiv(1, mpmath.power(mpmath.power(p2, mpmath.fdiv(1, 1048576)), zz))
(squareroots['1/1048576'].real + squareroots['1/1048576'].imag)**2/(squareroots['1/1048576'].real**2 + squareroots['1/1048576'].imag**2)
(squareroots['1/1048576'].real - squareroots['1/1048576'].imag)**2/(squareroots['1/1048576'].real**2 + squareroots['1/1048576'].imag**2)
(0.999256255298397424 - 0.0381095869464281298j)
0.923834878733548328
1.07616512126645167
mpmath.mpf('-84.883704532075456440667595710311725189') # log of density measure for points

mpmath.mpf('155.05710138200903279199745475956807646') - (mpmath.mpf('82.546108581316967822508952822884704411') + mpmath.mpf('84.883704532075456440667595710311725189'))
mpmath.mpf('-12.37271173138339147117909377362835314')
mpmath.mpf('-12.37271173138339147117909377362835314') - mpmath.mpf('10.924737225782468439076942795312741719')
mpmath.mpf('-23.297448957165859910256036568941094858')

mpmath.mpf('155.05710138200903279199745475956807646') - (2 * mpmath.mpf('83.714906556696212151511602165598726096'))
mpmath.mpf('-12.372711731383391511025749571629375732')
mpmath.mpf('-12.372711731383391511025749571629375732') - mpmath.mpf('10.924737225782468440207587128020609833')
mpmath.mpf('-23.297448957165859951233336699649985565')



# z1add2 # 0.031912146805551034219841388175626277639
# z1sub2 # 1.9680878531944489657801586118243737224
# z1mul2 # 1.3260771145998677967062099227408631162e-16
# z2add2 # 0.019784307530224521936760992852772004688
# z2sub2 # 1.9802156924697754780632390071472279953
# z2mul2 # 4.2245482129598822822594039819601918798e-17
# z3add2 # 1.0540370462281094925927482284082077126
# z3sub2 # 0.94596295377189050740725177159179228737
# z3mul2 # 7.2664016815710800514755026203395009451e-35

1.3260771145998678e-16 * 4.224548212959882e-17
5.602076704729868e-33
mpmath.log(7.26640168157108e-35, 5.602076704729868e-33)
mpmath.log(5.602076704729868e-33, 7.26640168157108e-35)
1.0585095520310595
0.94472458758752642

# z1add3 # 0.02150350554563612980282154930157555747
# z1sub3 # -10.414584664398063674654024173648377849
# z1mul3 # -5.7600785191507925178328021161825967789e-24
# z2add3 # 0.013277097748471216670394461383688958456
# z2sub3 # 13.29506968906835371394986275537520616
# z2mul3 # 1.3100632916277326924065659984850551586e-24
# z3add3 # 1.083306384826137576589585552903269728
# z3sub3 # -0.92104040564951299574155919270497699693
# z3mul3 # -6.2007838449738092622207843804763858657e-52

5.760078519150792e-24 * 1.3100632916277327e-24
7.546067424832883e-48
mpmath.log(6.200783844973809e-52, 7.546067424832883e-48)
mpmath.log(7.546067424832883e-48, 6.200783844973809e-52)
1.0866951715411064
0.92022126000784676

# zdelta1add2 # 1.9678600065683947868147536055115120197
# zdelta1sub2 # 0.032139993431605213185246394488487980255
# zdelta1mul2 # 7.3251992672566603364771534215992962778e-55
# zdelta2add2 # 1.9803949268521659737355928021591256256
# zdelta2sub2 # 0.019605073147834026264407197840874374435
# zdelta2mul2 # 2.2552238587995685646741891498606801154e-56
# zdelta3add2 # 0.94535182698419828959243390375838897707
# zdelta3sub2 # 1.0546481730158017104075660962416110229
# zdelta3mul2 # 1.2881767222756398302096324586084650021e-104

# zderiv1add2 # 1.9678600065683947868424114722096305393
# zderiv1sub2 # 0.032139993431605213157588527790369460705
# zderiv1mul2 # 5.15465073287995716581079850242878171e-41
# zderiv2add2 # 1.9803949268521659737243054445569863382
# zderiv2sub2 # 0.019605073147834026275694555443013661795
# zderiv2mul2 # 1.5869727078323108032407683179503232137e-42
# zderiv3add2 # 0.94505672872104338981961293553910879277
# zderiv3sub2 # 1.0549432712789566101803870644608912072
# zderiv3mul2 # 9.0363711970642187709974849404128585515e-91

# zderivdelta1add2 # 1.9678600065683947868050195750502194273
# zderivdelta1sub2 # 0.032139993431605213194980424949780572735
# zderivdelta1mul2 # 5.1546507328799571654114699281927848921e-41
# zderivdelta2add2 # 1.9803949268521659737334090908575794779
# zderivdelta2sub2 # 0.019605073147834026266590909142420522128
# zderivdelta2mul2 # 1.5869727078323108032701407851992291382e-42
# zderivdelta3add2 # 0.94505672872104338981961293553910876648
# zderivdelta3sub2 # 1.0549432712789566101803870644608912335
# zderivdelta3mul2 # 9.0363711970642187709974849404128671995e-91

# zaccel1add2 # 0.032828315472726803928813695576249379757
# zaccel1sub2 # 1.9671716845272731960711863044237506202
# zaccel1mul2 # 2.0017827092614190504338861701106139612e-65
# zaccel2add2 # 0.019072216124661498487926639038268841309
# zaccel2sub2 # 1.9809277838753385015120733609617311587
# zaccel2mul2 # 5.965852513839103513836722287976092479e-68
# zaccel3add2 # 1.0576616704160825119704442666943157457
# zaccel3sub2 # 0.94233832958391748802955573330568425425
# zaccel3mul2 # 1.1972063934089361545621397940321259819e-146

# zacceldelta1add2 # 0.032828315472726803966597261254832159701
# zacceldelta1sub2 # 1.9671716845272731960334027387451678403
# zacceldelta1mul2 # 2.0017827092614190502768074325063694617e-65
# zacceldelta2add2 # 0.019072216124661498478946353593019876778
# zacceldelta2sub2 # 1.9809277838753385015210536464069801232
# zacceldelta2mul2 # 5.9658525138391035139453303407158763101e-68
# zacceldelta3add2 # 1.057661670416082511970444266694315772
# zacceldelta3sub2 # 0.94233832958391748802955573330568422796
# zacceldelta3mul2 # 1.1972063934089361545621397940321270734e-146

# zlog1add2 # 0.017575534751925711465945982663427499789
# zlog1sub2 # 1.9824244652480742885340540173365725002
# zlog1mul2 # 7.0374793049625430299192914197698226931e-15
# zlog2add2 # 0.19809617998028541332399846205330642589
# zlog2sub2 # 1.8019038200197145866760015379466935741
# zlog2mul2 # 1.4570051538161084040269070270085988216e-15
# zlog3add2 # 0.62257883958608256141581437922553088319
# zlog3sub2 # 1.3774211604139174385841856207744691168
# zlog3mul2 # 1.8267042699656875218026732940827330467e-31

# zlog1add3 # 0.011786072007335012759178530328685285061
# zlog1sub3 # 14.118912333454413951202755826075814993
# zlog1mul3 # 2.9862898946171567251534736884641054237e-21
# zlog2add3 # 0.14140112773670552398160022419327467394
# zlog2sub3 # 3.879146048044147989737571445648512804
# zlog2mul3 # 8.919291420849085608405436227947271023e-23
# zlog3add3 # 0.52374299510120401377386946267231355956
# zlog3sub3 # -1.7235616397546382203474646020948098203
# zlog3mul3 # 8.323942277015494647524842855746933077e-47

# zlogdelta1add2 # 0.017575534751925711438192971701549777285
# zlogdelta1sub2 # 1.9824244652480742885618070282984502227
# zlogdelta1mul2 # 7.0374793049625430303164273038383762651e-15
# zlogdelta2add2 # 0.19809617998028541329639528359002729635
# zlogdelta2sub2 # 1.8019038200197145867036047164099727037
# zlogdelta2mul2 # 1.4570051538161084041271827069909585643e-15
# zlogdelta3add2 # 0.62257883958608256155349983358066790499
# zlogdelta3sub2 # 1.377421160413917438446500166419332095
# zlogdelta3mul2 # 1.8267042699656875204697651699867859395e-31

# zlogdelta1add3 # 0.011786072007335012740457814494989102741
# zlogdelta1sub3 # 14.118912333454413962515239198474053524
# zlogdelta1mul3 # 2.9862898946171567277362475229354830447e-21
# zlogdelta2add3 # 0.14140112773670552396050404056696891172
# zlogdelta2sub3 # 3.8791460480441479900587566631637506694
# zlogdelta2mul3 # 8.919291420849085609859764992294743916e-23
# zlogdelta3add3 # 0.52374299510120401392002896808178238652
# zlogdelta3sub3 # -1.7235616397546382199982688865491976502
# zlogdelta3mul3 # 8.3239422770154946379757681903850802131e-47

# zlogz1add2 # (2.0145826991440801049599765105762141161 + 0.0051603121997412928681576646806854933332j)
# zlogz1sub2 # (-0.014582699144080104959976510576214116137 - 0.0051603121997412928681576646806854933336j)
# zlogz2add2 # (2.0144727984730115605620127689549241934 + 0.00061168437077600764193160721963693337499j)
# zlogz2sub2 # (-0.014472798473011560562012768954924193422 - 0.00061168437077600764193160721963693337522j)
# zlogz3add2 # (1.9954710453168698613346539594365895932 - 0.0007624589162152010381902171873527214924j)
# zlogz3sub2 # (0.0045289546831301386653460405634104067903 + 0.00076245891621520103819021718735272149237j)

# zlogz1add3 # (4.088624040372668736228052976954114461 + 0.031884157998731014156187154776124424386j)
# zlogz1sub3 # (-0.0013528892686807206193788518615519612091 + 0.0023953854788533992999560636202210381959j)
# zlogz2add3 # (4.0881096730136570062226972281226205571 + 0.0037786897497934799306059625153761540189j)
# zlogz2sub3 # (-0.00015900301034303240188091064641528575462 + 0.0024877424055743460132651252334100547994j)
# zlogz3add3 # (3.972945344531401272615190577865470203 - 0.0045335929967699156722764872508242863416j)
# zlogz3sub3 # (0.00042508152872669414583492751817042278354 + 0.0001083664409160019656415747915276960624j)

# z1add2 * z2sub2 # 0.063192933884751374690560897250378383014
# z1sub2 * z2add2 # 0.038937255334098350124400106604669837114
# z1add2 * z2add2 # 0.00063135972635069374912187910087417226315
# z1sub2 * z2sub2 # 3.8972384510547995814359171170440776076
# z1add2 * z2add2 + z1sub2 * z2sub2 # 3.8978698107811502751850389961449517799
# z1add2 * z2sub2 + z1sub2 * z2add2 # 0.10213018921884972481496100385504822013
# z1add2 * z2add2 - z1sub2 * z2sub2 # -3.8966070913284488876867952379432034354
# z1add2 * z2sub2 - z1sub2 * z2add2 # 0.024255678550653024566160790645708545901

# zzeta1add2 # 0.30992824595080328964796938747385765178
# zzeta1sub2 # 1.6900717540491967103520306125261423482
# zzeta1mul2 # 4.1430526634610957285254090582018753056e-16
# zzeta2add2 # 0.062927829574665605062613230588230074765
# zzeta2sub2 # 1.9370721704253343949373867694117699252
# zzeta2mul2 # 2.3739729132761578191559702803010268872e-16
# zzeta3add2 # 1.5728346564507640235792460065406233106
# zzeta3sub2 # 0.42716534354923597642075399345937668942
# zzeta3mul2 # 5.020968080251346092325912622916847123e-32

# zzetaderiv1add2 # 0.99999989046650128217419681352367882349
# zzetaderiv1sub2 # 1.0000001095334987178258031864763211765
# zzetaderiv1mul2 # 2.9993969668654339546164144959586821132e-15
# zzetaderiv2add2 # 0.99999994598210647619483916627110908919
# zzetaderiv2sub2 # 1.0000000540178935238051608337288909108
# zzetaderiv2mul2 # 7.2948323255700846590115135471874146536e-16
# zzetaderiv3add2 # 1.0000000000000014924708896656634753496
# zzetaderiv3sub2 # 0.99999999999999850752911033433652465039
# zzetaderiv3mul2 # 5.5686733912485452140962150193398625894e-31

2.99939696686543395e-15 * 7.29483232557008466e-16
2.188009795110683e-30
5.56867339124854521e-31 / 2.188009795110683e-30
0.2545086134299891 # 0.256717644757979
math.log(5.56867339124854521e-31, 2.188009795110683e-30)
1.020037036485178
math.log(2.188009795110683e-30, 5.56867339124854521e-31)
0.980356559841963


# zzetaaccel1add2 # 1.9356719959711427361052976356290809577
# zzetaaccel1sub2 # 0.064328004028857263894702364370919042332
# zzetaaccel1mul2 # 0.035443381377255193399667721619001641369
# zzetaaccel2add2 # 1.9356720308763724366988592251112422747
# zzetaaccel2sub2 # 0.064327969123627563301140774888757725328
# zzetaaccel2mul2 # 0.035443385841629681131864842862137391133
# zzetaaccel3add2 # 1.9356720771631891611221164041355279225
# zzetaaccel3sub2 # 0.064327922836810838877883595864472077515
# zzetaaccel3mul2 # 0.035443389279878134341024395449049819074

