import mpmath
mpmath.mp.prec = 128
import mpmath.rational
import math
import numbers
import operator
import numpy
import sympy
import matplotlib
import matplotlib.pyplot
import fractions
import primesieve
# aryprimes = primesieve.primes(8192)
# aryprimes = primesieve.primes(int(2**26.5)) #  44.46 MB
aryprimes = primesieve.primes(int(2**28.5)) # 164.61 MB
setprimes = frozenset(aryprimes)
import random
import itertools
import pickle
import datetime
import time
import types
import io
import os
import os.path
import sys
import gc
import pyjion

__all__ = [
    "aryprimes",
    "setprimes",
    "cls",
    "lenfactors", 
    "lenfactorscount",
    "hshfactors",
    "hshfactorscount",
    "i2",
    "i3",
    "getsize",
    "factors",
    "factorscount",
    "log2",
    "is_mod_zero",
    "mod_eq_zero",
    "mod_ne_zero",
    "cache",
    "Qfraction",
    "target",
    "tgts",
    "one",
    "zero",
    "aryary",
    "setprinted",
    "hshproduct",
    "hshtarget",
    "hshcalculated",
    "aryarykeys",
    "aryaryvalues",
    "len_tgts",
    "create_aryary",
    "loop_add",
    "append_range",
    "get_next",
    "check_numerator",
    "t1",
    "dt",
    "iloopcount",
    "loop",
    "calc_verify_lru_cache",
    "calc_verify_lru_cache_keys",
    "calc_verify",
    "reduce",
    "itertools_combinations",
    "mult_object",
    "calc_a4_cache_small",
    "calc_a4_cache_large",
    "calc_a4",
    "calc_a5_cache_small",
    "calc_a5_cache_large",
    "calc_a5"]



cls = lambda: os.system('cls') or None


lenfactors, lenfactorscount = 2**18, 2**22
hshfactors, hshfactorscount = {}, {}
i2, i3 = 12288, 384

def getsize(obj):
    BLACKLIST = type, types.ModuleType, types.FunctionType
    if isinstance(obj, BLACKLIST):
        raise TypeError('getsize() does not take argument of type: '+ str(type(obj)))
    seen_ids = set()
    size = 0
    objects = [obj]
    need_referents = []
    while objects:
        need_referents = []
        for obj in objects:
            if not isinstance(obj, BLACKLIST) and id(obj) not in seen_ids:
                seen_ids.add(id(obj))
                size += sys.getsizeof(obj)
                need_referents.append(obj)
        objects = gc.get_referents(*need_referents)
    del seen_ids
    del objects
    del need_referents
    return size/2**20


def factors(n, iteration=0, maxiter=1, busecache=False, bexpand=False):
    global lenfactors
    global hshfactors
    rslt = []
    if busecache:
        if n <= lenfactors:
            if n in hshfactors:
                return [x for x in hshfactors[n]]
        else:
            for p in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]:
                while n % p == 0:
                    rslt.append(p)
                    n /= p
                    if n <= lenfactors and n in hshfactors:
                        return sorted(rslt + [x for x in hshfactors[n]])
                    elif n == 1:
                        return rslt
    global aryprimes
    max_p = int(math.sqrt(n))
    if iteration == 0 and bexpand:
        if max_p > 94906265:
            max_p = 94906265
            if aryprimes[-1] < 94906265:
                aryprimes = primesieve.primes(94906265)
        elif aryprimes[-1] < max_p:
            aryprimes = primesieve.primes(max_p)
    p = 0
    bbreak = False
    for p in aryprimes:
        while n % p == 0:
            n = n/p
            rslt.append(p)
            if n == 1:
                bbreak = True
                break
            else:
                max_p = int(math.sqrt(n))
                if busecache and n <= lenfactors:
                    for hf in hshfactors[n]:
                        rslt.append(hf)
                        n = n/hf
                    if n == 1:
                        bbreak = True
                        break
        if p >= max_p or bbreak:
            break
    if n != 1 and int(n) not in rslt:
        # if iteration < maxiter:
        if False:
            for p in factors(n, iteration + 1, maxiter=maxiter):
                rslt.append(int(p))
        else:
            rslt.append(int(n))
    # if busecache and n <= lenfactors:
    #     hshfactors[n] = rslt
    return rslt


def factorscount(n, iteration=0, maxiter=1, busecache=False, bexpand=False):
    global lenfactorscount
    global hshfactorscount
    rslt = {}
    if busecache:
        if n <= lenfactorscount:
            if n in hshfactorscount:
                return {k:v for k, v in hshfactorscount[n].items()}
        else:
            for p in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]:
                while n % p == 0:
                    n = n/p if n < 9007199254740992 else mpmath.fdiv(n, p)
                    rslt[p] = 1 if p not in rslt else rslt[p] + 1
                    if n <= lenfactorscount and n in hshfactorscount:
                        for k in hshfactorscount[n].keys():
                            rslt[k] = rslt[k] + hshfactorscount[n][k] if k in rslt else hshfactorscount[n][k]
                        return rslt
    global aryprimes
    max_p = int(math.sqrt(n)) if n < 9007199254740992 else int(mpmath.nint(mpmath.sqrt(n)))
    if iteration == 0 and bexpand:
        if max_p > 94906265:
            max_p = 94906265
            if aryprimes[-1] < 94906265:
                aryprimes = primesieve.primes(94906265)
        elif aryprimes[-1] < max_p:
            aryprimes = primesieve.primes(max_p)
    bbreak = False
    for p in aryprimes:
        while n % p == 0:
            n = n/p if n < 9007199254740992 else mpmath.fdiv(n, p)
            rslt[p] = 1 if p not in rslt else rslt[p] + 1
            if n == 1:
                bbreak = True
                break
            else:
                max_p = int(math.sqrt(n)) if n < 9007199254740992 else int(mpmath.nint(mpmath.sqrt(n)))
                if busecache and n <= lenfactorscount:
                    for k in hshfactorscount[n].keys():
                        rslt[k] = rslt[k] + hshfactorscount[n][k] if k in rslt else hshfactorscount[n][k]
                        n = n/(k**hshfactorscount[n][k]) if n < 9007199254740992 else mpmath.fdiv(n, k**hshfactorscount[n][k])
                    if n == 1:
                        bbreak = True
                        break
        if p >= max_p or bbreak:
            break
    if n != 1 and int(n) not in rslt:
        # if iteration < maxiter:
        if False:
            # note, calling factors() from factorscount()
            for p in factors(n, iteration + 1, maxiter=maxiter, busecache=busecache):
                rslt[int(p)] = 1 if int(p) not in rslt else rslt[int(p)] + 1
        else:
            rslt[int(n)] = 1
    # if busecache and n <= lenfactorscount:
    #     hshfactorscount[n] = rslt
    return rslt



# quantum.hshfactors = {n:quantum.factors(n, busecache=False, bexpand=False) for n in range(2, quantum.lenfactors + 1)}
# quantum.hshfactorscount = {n:quantum.factorscount(n, busecache=False, bexpand=False) for n in range(2, quantum.lenfactorscount + 1)}
hshfactors = {n:factors(n, busecache=False, bexpand=False) for n in range(2, lenfactors + 1)}
hshfactorscount = {n:factorscount(n, busecache=False, bexpand=False) for n in range(2, lenfactorscount + 1)}


def log2(ary):
    global aryprimes
    if aryprimes[-1] < max(ary):
        aryprimes = primesieve.primes(max(ary))
    imul = 1
    for a in ary:
        for p in [p for p in aryprimes if p < a]:
            while a != p and a % p == 0:
                a = int(a/p)
            if a == 1:
                a = p
        imul *= a
    return math.log(imul, 2)


def is_mod_zero(n1, n2ary):
    for n2 in n2ary:
        if n1 > n2:
            if n1 % n2 == 0:
                return True
        else:
            if n2 % n1 == 0:
                return True
    return False


def mod_eq_zero(n1, ary2):
    for n2 in ary2:
        if n1 % n2 == 0:
            return True
    return False

def mod_ne_zero(n1, ary2):
    for n2 in ary2:
        if n1 % n2 == 0:
            return False
    return True


class cache:
    def __init__(self, isize, obj=None):
        self.max_size = isize
        if obj is None or str(type(obj)).find("__main__.cache") <= 0:
            self.lru = {}
            self.lru_keys = [[],]
            self.len = 0
        else:
            # {k2:tuple(x for x in calc_a4_cache_small.lru[k2]) for k2 in [k1 for k1 in calc_a4_cache_small.lru.keys()][:10]}
            self.lru = {k2:tuple(x for x in obj.lru[k2]) for k2 in [k1 for k1 in obj.lru.keys()]}
            self.lru_keys = [[y for y in x] for x in obj.lru_keys]
            self.len = obj.len
    
    def append(self, tpl):
        self.lru_keys.append(tpl)
        self.len += 1
        while self.len > self.max_size:
            for key in self.lru_keys[0]:
                try:
                    _ = self.lru.pop(key)
                except:
                    pass
            self.len -= len(self.lru_keys[0])
            self.lru_keys.remove(self.lru_keys[0])
    
    def remove(self, key):
        try:
            _ = self.lru.pop(key)
        except:
            pass
        for lk in range(0, len(self.lru_keys)):
            if key in self.lru_keys[lk]:
                self.lru_keys[lk].remove(key)
                break
        self.len -= 1
    
    def move_to_front(self, tpl):
        for lk in range(0, len(self.lru_keys)):
            if key in self.lru_keys[lk]:
                self.lru_keys[lk].remove(key)
                break
        self.lru_keys[-1].append(tpl)
    
    def __setitem__(self, key1, itm1):
        key1 = tuple(key1[:]) if type(key1) is list else key1[:]
        self.lru[key1] = itm1
        idx = self.len // 256
        if idx > len(self.lru_keys) - 1:
            self.lru_keys.append([key1,])
        else:
            self.lru_keys[idx].append(key1)
        self.len += 1
        while self.len > self.max_size:
            for key2 in self.lru_keys[0]:
                try:
                    _ = self.lru.pop(key2)
                except:
                    pass
            self.len -= len(self.lru_keys[0])
            _ = self.lru_keys.pop(0)
    
    def __getitem__(self, key1):
        # print("__getitem__(" + str(key1) + ")")
        if type(key1) is list:
            key1 = tuple(key1)
        # return self.lru[key1]
        if True:
            len_lru_keys = len(self.lru_keys)
            idx = min(self.len // 256 - 2, len_lru_keys - 2)
            if self.len > 256 and key1 not in self.lru_keys[-1]:
                while idx >= 0 and key1 not in self.lru_keys[idx]:
                    idx -= 1
                if idx >= 0 and idx < len_lru_keys - 1:
                    self.lru_keys[idx].remove(key1)
                    self.lru_keys[-1].append(key1)
                    if len(self.lru_keys[-1]) >= 512:
                        self.lru_keys = self.lru_keys[:-1] + [self.lru_keys[-1][:256]] + [self.lru_keys[-1][256:]]
            try:
                return self.lru[key1]
            except:
                pass
            return 1
        if False:
            # if type(key1) is int:
            previ, thisi = 0, 0
            for ary in self.lru_keys:
                previ = thisi
                thisi += len(ary)
                if thisi >= key1:
                    return self.lru[ary[key1 - previ]]
            if key1 > thisi:
                return -1
    
    def __contains__(self, key1):
        if type(key1) is list:
            key1 = tuple(key1)
        return key1 in self.lru
    
    def __len__(self):
        return self.len
    
    def index(self, obj):
        idx = 0
        for lk in range(0, len(self.lru_keys)):
            if obj in self.lru_keys[lk]:
                return idx + self.lru_keys[lk].index(obj)
            else:
                idx += len(self.lru_keys[lk])
        return -1
    
    def pop(self, key1):
        try:
            _ = self.lru.pop(key1)
        except:
            pass
        for lk in range(0, len(self.lru_keys)):
            if key1 in self.lru_keys[lk]:
                self.lru_keys[lk].remove(key1)
                break


class Qfraction(fractions.Fraction):
    lru_cache = cache(65536)
    mult_cache = {2:{}, 3:{}, 4:{}, 5:{}, 6:{}, 7:{}, 8:{}, 9:{}, 10:{}, 11:{}, 12:{}, 13:{}, 14:{}}
    len_mult_cache = {i:0 for i in range(2, 14 + 1)}
    setprimes = set()
    
    def __new__(cls, num=0, den=None, fact=None, _normalize=False):
        # super().__new__(num, den)
        # super(Qfraction, cls).__new__(**kwargs)
        # fractions.Fraction.__new__(cls, numerator=num, denominator=den)
        # if den is None:
        #     print(f"Error, num is {num}, den is {den}")
        self = super(Qfraction, cls).__new__(cls, numerator=num, denominator=den, _normalize=_normalize)
        self.factors = factorscount(den) if fact is None else fact.copy()
        self.len = len(self.factors)
        self.is_prime = True if den in self.factors and self.factors[den] == 1 else False
        return self
    
    def __getstate__(self):
        return {'num':self._numerator, 'den':self._denominator, 'factors':[(k, v) for k, v in self.factors.items()]}
    
    def __setstate__(self, hsh):
        self._numerator = hsh['num']
        self._denominator = hsh['den']
        self.factors = {tpl[0]:tpl[1] for tpl in hsh['factors']}
        self.len = len(self.factors)
        self.is_prime = True if self._denominator in self.factors and self.factors[self._denominator] == 1 else False
    
    def _operator_fallbacks(monomorphic_operator, fallback_operator):
        def forward(a, b):
            if isinstance(b, (int, Qfraction)):
                return monomorphic_operator(a, b)
            elif isinstance(b, fractions.Fraction):
                return monomorphic_operator(a, Qfraction(b.numerator, b.denominator))
            elif isinstance(b, float):
                return fallback_operator(float(a), b)
            elif isinstance(b, complex):
                return fallback_operator(complex(a), b)
            else:
                return NotImplemented
        forward.__name__ = '__' + fallback_operator.__name__ + '__'
        forward.__doc__ = monomorphic_operator.__doc__
        
        def reverse(b, a):
            if isinstance(a, Qfraction):
                return monomorphic_operator(a, b)
            elif isinstance(a, fractions.Fraction):
                # print("a is fractions.Fraction")
                return monomorphic_operator(Qfraction(a.numerator, a.denominator), b)
            elif isinstance(a, numbers.Rational):
                # print("a is numbers.Rational")
                # This will get hit for two Qfractions
                # Includes ints.
                return monomorphic_operator(a, b)
            elif isinstance(a, numbers.Real):
                # print("a is numbers.Real")
                return fallback_operator(float(a), float(b))
            elif isinstance(a, numbers.Complex):
                print("a is numbers.Complex")
                return fallback_operator(complex(a), complex(b))
            else:
                return NotImplemented
        reverse.__name__ = '__r' + fallback_operator.__name__ + '__'
        reverse.__doc__ = monomorphic_operator.__doc__
        
        return forward, reverse
    
    def _mul(a, b):
        """a * b"""
        tpl = (a._denominator, b._denominator) if b._denominator > a._denominator else (b._denominator, a._denominator)
        if a._numerator == 1 and b._numerator == 1 and tpl[1] <= Qfraction.len_mult_cache[2]:
            return Qfraction(1, Qfraction.mult_cache[2][tpl]) if tpl in Qfraction.mult_cache[2] else Qfraction(1, tpl[1] if (tpl[1] > tpl[0] and tpl[1] % tpl[0] == 0) else tpl[0] * tpl[1])
        else:
            q = Qfraction(a._numerator, a._denominator, a.factors)
            for fact in b.factors.keys():
                if fact in q.factors:
                    if b.factors[fact] > q.factors[fact]:
                        q._denominator *= fact**(b.factors[fact] - q.factors[fact])
                        q.factors[fact] = b.factors[fact]
                else:
                    if b.factors[fact] == 1:
                        q._denominator *= fact
                    else:
                        q._denominator *= fact**b.factors[fact]
                    q.factors[fact] = b.factors[fact]
            return q
    
    __mul__, __rmul__ = _operator_fallbacks(_mul, operator.mul)
    
    # 
    # Qfraction(1, 6) * Qfraction(1, 26) + Qfraction(1, 27) * Qfraction(1, 99)
    # fractions.Fraction(1, 6*13) + fractions.Fraction(1, 27*11) # (125, 7722)
    # 
    def _add(a, b):
        """a + b"""
        # print("_add " + str(a) + " + " + str(b))
        # print("_add " + str(a) + " + " + str(b))
        # print("_add " + str(a.factors) + " + " + str(b.factors))
        na, da = a.numerator, a.denominator
        nb, db = b.numerator, b.denominator
        f = b.factors.copy()
        # g = math.gcd(da, db)
        g = 1
        for fact in a.factors:
            if fact in b.factors:
                if a.factors[fact] != b.factors[fact]:
                    # g *= fact**abs(a.factors[fact] - b.factors[fact])
                    g *= fact**min(a.factors[fact], b.factors[fact])
                    f[fact] = max(a.factors[fact], b.factors[fact])
                else:
                    g *= fact**a.factors[fact]
            else:
                f[fact] = a.factors[fact]
        # print("g is " + str(g) + " and gcd(da, db) is " + str(math.gcd(da, db)))
        if g == 1:
            return Qfraction(na * db + da * nb, da * db, fact=f, _normalize=False)
        else:
            s = da // g
            t = na * (db // g) + nb * s
            g2 = math.gcd(t, g)
            if g2 == 1:
                return Qfraction(t, s * db, _normalize=False)
            else:
                return Qfraction(t // g2, s * (db // g2), _normalize=False)
    
    __add__, __radd__ = _operator_fallbacks(_add, operator.add)
    
    def _sub(a, b):
        """a - b"""
        # print("_sub " + str(a) + " + " + str(b))
        # print("_sub " + str(a.factors) + " + " + str(b.factors))
        na, da = a.numerator, a.denominator
        nb, db = b.numerator, b.denominator
        f = b.factors.copy()
        # g = math.gcd(da, db)
        g = 1
        for fact in a.factors:
            if fact in b.factors:
                if a.factors[fact] != b.factors[fact]:
                    # g *= fact**abs(a.factors[fact] - b.factors[fact])
                    g *= fact**min(a.factors[fact], b.factors[fact])
                    f[fact] = max(a.factors[fact], b.factors[fact])
                else:
                    g *= fact**a.factors[fact]
            else:
                f[fact] = a.factors[fact]
        # print("g is " + str(g) + " and gcd(da, db) is " + str(math.gcd(da, db)))
        if g == 1:
            return Qfraction(na * db - da * nb, da * db, fact=f, _normalize=False)
        else:
            s = da // g
            t = na * (db // g) - nb * s
            g2 = math.gcd(t, g)
            if g2 == 1:
                return Qfraction(t, s * db, _normalize=False)
            else:
                return Qfraction(t // g2, s * (db // g2), _normalize=False)
    
    __sub__, __rsub__ = _operator_fallbacks(_sub, operator.sub)
    
    # Important!
    def __neg__(self):
        # Qfraction(num=0, den=None, fact=None, _normalize=False)
        return Qfraction(-self._numerator, self._denominator, self.factors, _normalize=False)
    
    # Qfraction.prod([Qfraction(1, x) for x in [3, 5, 23, 64, 341, 352]], 6)
    # Qfraction.prod([Qfraction(1, x) for x in [25, 26, 28, 35]], 4)
    @staticmethod
    def prod(ary1, ary1_len=None):
        if ary1_len is None:
            ary1_len = len(ary1)
        tpl1 = tuple(ary1)
        # ary1 = [Qfraction(1, 8), Qfraction(1, 9), Qfraction(1, 156), Qfraction(1, 364)]
        if ary1_len >= 4:
            if tpl1 in Qfraction.lru_cache and Qfraction.lru_cache[tpl1] != 1:
                return Qfraction.lru_cache[tpl1]
            elif tuple(ary1[:-1]) in Qfraction.lru_cache and Qfraction.lru_cache[tuple(ary1[:-1])] != 1:
                ary1 = sorted([ary1[-1], Qfraction.lru_cache[tuple(ary1[:-1])]], reverse=True)
                ary1_len = 2
        if ary1_len == 2:
            tpl2 = (ary1[0]._denominator, ary1[1]._denominator) if ary1[1]._denominator > ary1[0]._denominator else (ary1[1]._denominator, ary1[0]._denominator)
            if tpl2[1] <= Qfraction.len_mult_cache[2]:
                if tpl2 in Qfraction.mult_cache[2]:
                    return Qfraction(ary1[0]._numerator * ary1[1]._numerator, Qfraction.mult_cache[2][tpl2])
                else:
                    if (tpl2[1] > tpl2[0] and tpl2[1] % tpl2[0] == 0):
                        tpl2 = (1, tpl2[1])
                    return Qfraction(ary1[0]._numerator * ary1[1]._numerator, tpl2[0] * tpl2[1])
            else:
                if tuple(ary1) not in Qfraction.lru_cache or Qfraction.lru_cache[tuple(ary1)] == 1:
                    Qfraction.lru_cache[tuple(ary1)] = ary1[0] * ary1[1]
                return Qfraction.lru_cache[tuple(ary1)]
        elif ary1_len == 3:
            tpl3 = tuple(sorted([a1._denominator for a1 in ary1]))
            if tpl3[2] <= Qfraction.len_mult_cache[3]:
                if tpl3 in Qfraction.mult_cache[3]:
                    return Qfraction(ary1[0]._numerator * ary1[1]._numerator * ary1[2]._numerator, Qfraction.mult_cache[3][tpl3])
                else:
                    if tpl1 not in Qfraction.lru_cache or Qfraction.lru_cache[tpl1] == 1:
                        if (tpl3[1] > tpl3[0] and tpl3[1] % tpl3[0] == 0) or (tpl3[2] > tpl3[0] and tpl3[2] % tpl3[0] == 0):
                            tpl3 = (1, tpl3[1], tpl3[2])
                        if (tpl3[2] > tpl3[1] and tpl3[2] % tpl3[1] == 0):
                            tpl3 = (tpl3[0], 1, tpl3[2])
                        Qfraction.lru_cache[tpl1] = Qfraction(ary1[0]._numerator * ary1[1]._numerator * ary1[2]._numerator, tpl3[0] * tpl3[1] * tpl3[2])
                    return Qfraction.lru_cache[tpl1]
            else:
                if tpl1 not in Qfraction.lru_cache or Qfraction.lru_cache[tpl1] == 1:
                    Qfraction.lru_cache[tpl1] = ary1[0] * ary1[1] * ary1[2]
                return Qfraction.lru_cache[tpl1]
        else:
            rslt = 0
            if ary1_len == 4:
                rslt = Qfraction.prod(ary1[0:2], 2) * Qfraction.prod(ary1[2:4], 2)
            elif ary1_len == 5:
                rslt = Qfraction.prod(ary1[0:3], 3) * Qfraction.prod(ary1[3:5], 2)
            elif ary1_len == 6:
                rslt = Qfraction.prod(ary1[0:3], 3) * Qfraction.prod(ary1[3:6], 3)
            elif ary1_len == 7:
                rslt = Qfraction.prod(ary1[0:3], 3) * Qfraction.prod(ary1[3:5], 2) * Qfraction.prod(ary1[5:7], 2)
            elif ary1_len == 8:
                rslt = Qfraction.prod(ary1[0:3], 3) * Qfraction.prod(ary1[3:6], 3) * Qfraction.prod(ary1[6:8], 2)
            elif ary1_len == 9:
                rslt = Qfraction.prod(ary1[0:3], 3) * Qfraction.prod(ary1[3:6], 3) * Qfraction.prod(ary1[6:9], 3)
            elif ary1_len == 10:
                rslt = Qfraction.prod(ary1[0:3], 3) * Qfraction.prod(ary1[3:6], 3) * Qfraction.prod(ary1[6:8], 2) * Qfraction.prod(ary1[8:10], 2)
            elif ary1_len == 11:
                rslt = Qfraction.prod(ary1[0:3], 3) * Qfraction.prod(ary1[3:6], 3) * Qfraction.prod(ary1[6:9], 3) * Qfraction.prod(ary1[9:11], 2)
            elif ary1_len == 12:
                rslt = Qfraction.prod(ary1[0:3], 3) * Qfraction.prod(ary1[3:6], 3) * Qfraction.prod(ary1[6:9], 3) * Qfraction.prod(ary1[9:12], 3)
            Qfraction.lru_cache[tpl1] = rslt
            return Qfraction.lru_cache[tpl1]



class target:
    def __init__(self, num, den, limit=0, bln_float=False):
        self.fraction = fractions.Fraction(num, den) if limit == 0 else fractions.Fraction(num, den).limit_denominator(limit)
        self.qfraction = Qfraction(num, den)
        self.factors = sorted(factors(den))
        self.len_factors = len(self.factors)
        # self.numerator = self.fraction.numerator
        # self.denominator = self.fraction.denominator
        self.is_float = bln_float
    @property
    def numerator(self):
        return self.fraction.numerator
    @property
    def denominator(self):
        return self.fraction.denominator
    def __hash__(self):
        return hash(self.fraction)
    def __eq__(self, other):
        return self.fraction == other.fraction if type(other) is target else self.fraction == other
    def __str__(self):
        return self.fraction.__str__()
    def __repr__(self):
        return self.fraction.__repr__()
    def __int__(self):
        return int(round(self.fraction.numerator/self.fraction.denominator, 0))
    def __float__(self):
        return self.fraction.numerator/self.fraction.denominator
    def __round__(self, idigits):
        return round(self.fraction.numerator/self.fraction.denominator, idigits)

tgts = [target(1, 2),]


one = fractions.Fraction(1, 1)
zero = fractions.Fraction(0, 1)
aryary = {(1, 2):[], (1, 3):[], (2, 3):[], (1, 4):[], (3, 4):[]}
setprinted = set()
hshproduct = {}
hshtarget = {}
hshcalculated = {}
# aryary = {}
aryarykeys = set()
aryaryvalues = set()
len_tgts = len(tgts)
for i in range(0, len_tgts):
    hshtarget[tgts[i].fraction] = []
    if tuple([tgts[i].numerator, tgts[i].denominator]) not in aryary:
        aryary[tuple([tgts[i].numerator, tgts[i].denominator])] = []


def is_mod_zero(n1, n2ary):
    for n2 in n2ary:
        if n1 > n2 and n1 % n2 == 0:
            return True
        elif n2 % n1 == 0:
            return True
    return False


def create_aryary(filename1txt, baryaryvalues, bcalcverify, maxlog2):
    global aryary
    global aryarykeys
    global aryaryvalues
    arykeys = []
    bprint = False
    if not os.path.exists(filename1txt):
        return
    # f1 = open("C:\\Users\\djaxl\\OneDrive\\Desktop\\Python\\Tuples.txt", "r")
    f1 = open(filename1txt, "r")
    icountblank = 0
    while True:
        strline = f1.readline()
        if strline is None:
            break
        elif len(strline) == 0:
            icountblank += 1
            if icountblank >= 3:
                break
        else:
            try:
                # (13, 25), [3, 4, 43, 59, 5075]
                aryline = strline.split("), [")
                if aryline[1][-4] == " ***" or aryline[1][-4] == "***\n":
                    aryline[1] = aryline[1][:-4]
                aryline0 = aryline[0][1:] if aryline[0][0] == "(" else aryline[0]
                aryline1 = aryline[1][:-1] if aryline[1][-1] == "\n" else aryline[1]
                aryline1 = aryline1[:-1] if aryline1[-1] == "]" else aryline1
                tpl = tuple([int(x) for x in aryline0.split(", ")])
                ary = sorted([int(x) for x in aryline1.split(", ")])
                if tpl not in aryary:
                    aryary[tpl] = [ary]
                elif ary not in aryary[tpl]:
                    aryary[tpl].append(ary)
                if bcalcverify and tpl not in arykeys:
                    arykeys.append(tpl)
            except:
                print("Error, aryline is " + str(aryline))
                print("       aryline0 is " + str(aryline0))
                print("       aryline1 is " + str(aryline1))
                print("       tpl is " + str(tpl))
                print("       ary is " + str(ary))
                raise
    
    if True:
        for arykey in aryary.keys():
            aryarykeys.add(tuple(arykey))
            if baryaryvalues:
                for ary in aryary[arykey]:
                    aryaryvalues.add(tuple(ary))
    
    icountkeys = len(arykeys)
    icountremoved = 0
    if bcalcverify:
        # arykeys = [x for x in aryary.keys()]
        for tpl in arykeys:
            for ary in aryary[tpl]:
                if calc_verify(ary, maxlog2, bprint)[0] != fractions.Fraction(tpl[0], tpl[1]):
                    icountremoved += 1
                    aryary[tpl].remove(ary)
        print("create_aryary() created " + str(icountkeys - icountremoved) + " out of " + str(icountkeys) + " tuples")
    f1.close()


# 
# 
# 
def loop_add(ary, f1a, f1b, ca4=None, tgt=None, baddprinted=True):
    frac = ca4 if ca4 is not None else tgt
    if frac < 0:
        return
    # print("loop_add, type(ary) is " + str(type(ary)))
    # print("loop_add, type(f1a) is " + str(type(f1a)))
    # print("loop_add, type(f1b) is " + str(type(f1b)))
    # print("loop_add, type(ca4) is " + str(type(ca4)))
    # print("loop_add, type(tgt) is " + str(type(tgt)))
    # print("loop_add, type(frac) is " + str(type(frac)))
     
    global setprinted
    global hshtarget
    global hshproduct
    iprod = mpmath.fprod(ary)
    sortedary = sorted(ary)
    if baddprinted:
        setprinted.add(tuple(sortedary))
    if frac not in hshtarget:
        hshtarget[frac] = [sortedary]
    elif sortedary not in hshtarget[frac]:
        hshtarget[frac].append(sortedary)
    if iprod not in hshproduct:
        hshproduct[iprod] = [sortedary]
    elif sortedary not in hshproduct[iprod]:
        hshproduct[iprod].append(sortedary)
    
    flog = 0
    hshverified = {0:"", 1:" ***", 2:" xxx", 4:" ???"}
    intverified = 0
    if frac.denominator == 2 or frac.denominator == 3 or frac.denominator == 4 or frac.denominator == 5 or frac.denominator == 6:
        # 2**28 =  268435456
        # 2**30 = 1073741824
        # 2**32 = 4294967296
        # if math.prod(ary) > 16777216:
        # if math.prod(ary) > 1073741824:
        # if math.prod(ary) > 4294967296:
        if math.prod(ary) > 268435456:
            flog = round(math.log(math.prod(ary), 2), 4)
            # print("warning, did not call calc_verify() for " + "{:,.0f}".format(math.prod(ary)) + " (2**" + str(flog) + ")")
            intverified = 4
        else:
            cv = calc_verify(ary, 32, busecache=False, bquick1=False, bquick2=False)[0]
            if type(cv) is tuple and type(cv[0]) is fractions.Fraction:
                cv = cv[0]
            intverified = 1 if cv.denominator == 2 or cv.denominator == 3 or cv.denominator == 4 or cv.denominator == 5 or cv.denominator == 6 else 2
    if f1a and frac.denominator <= 64:
        f1a.write("(" + str(frac.numerator) + ", " + str(frac.denominator) + "), [" + ", ".join([str(x) for x in sortedary]) + "]" + hshverified[intverified] + "\n")
    if f1b and frac.denominator > 64:
        f1b.write("(" + str(frac.numerator) + ", " + str(frac.denominator) + "), [" + ", ".join([str(x) for x in sortedary]) + "]" + hshverified[intverified] + "\n")
    # if tuple(sortedary) not in setprinted:
    strverified = (" # " + "{:,.0f}".format(math.prod(sortedary)) + ((" (2**" + str(flog) + ")") if flog > 0 else "") + hshverified[intverified]) if intverified == 1 or intverified == 4 else hshverified[intverified]
    print("aryary[(" + str(frac.numerator) + ", " + str(frac.denominator) + ")].append([" + ", ".join([str(x) for x in sortedary]) + "])" + strverified)



# 
# aryrange = [x for x in range(minl, maxl + 1)]
# ary = [i, j, k]
# imax = maxl
# 
def append_range(aryrange, ary, imax):
    if ary[0] != 2:
        ifound = 0
        for i2 in range(4, ary[-1] + 1, 2):
            if i2 in ary:
                ifound = i2
                break
        if ifound > 0:
            for iadd in range(imax + 2, min(2 * imax, 768) + 1):
                if iadd % 2 == 0 and iadd % ifound != 0 and iadd % 4 != 0 and iadd % 8 != 0 and iadd % 16 != 0 and iadd % 32 != 0 and iadd % 64 != 0 and iadd % 128 != 0 and iadd not in [256, 1024, 2048, 4096, 8192, 16384] and iadd not in ary:
                    aryrange.append(iadd)
    if ary[0] != 3 and ary[1] != 3:
        ifound = 0
        for i3 in range(6, ary[-1] + 1, 3):
            if i3 in ary:
                ifound = i3
                break
        if ifound > 0:
            for iadd in range(imax + 2, min(3 * imax, 768) + 1):
                if iadd % 3 == 0 and iadd % ifound != 0 and iadd % 9 != 0 and iadd % 27 != 0 and iadd % 81 != 0 and iadd not in [243, 729, 2187, 6561, 19683] and iadd not in ary:
                    aryrange.append(iadd)
    if ary[0] != 5 and ary[1] != 5 and ary[2] != 5:
        ifound = 0
        for i5 in range(10, ary[-1] + 1, 5):
            if i5 in ary:
                ifound = i5
                break
        if ifound > 0:
            for iadd in range(imax + 2, min(5 * imax, 768) + 1):
                if iadd % 5 == 0 and iadd % ifound != 0 and iadd % 25 != 0 and iadd % 125 != 0 and iadd not in [625, 3125, 15625] and iadd not in ary:
                    aryrange.append(iadd)


def get_next(ca4, inext1a, tgt, ary1):
    # print("get_next() ca4 is " + str(ca4) + " (" + str(type(ca4)) + ")")
    # print("get_next() inext1 is " + str(inext1))
    # print("get_next() tgt is " + str(tgt))
    # print("get_next() ary1 is " + str(ary1))
    if inext1a <= 0:
        return []
    global one
    global zero
    if inext1a.numerator < ary1[-1]:
        # if inext1a.numerator < (16/17) * ary1[-1]:
        #     return []
        # else:
        inext1a = fractions.Fraction(ary1[-1] + 1)
    while is_mod_zero(inext1a.numerator, ary1):
        inext1a += 1
    fact = [x for x in tgt.factors]
    len_fact = tgt.len_factors
    bbreak = False
    # for x in [i, j, k, l, m, n]:
    for x in ary1:
        f = 0
        while f < len_fact - 1:
            while f < len_fact and x % fact[f] == 0 and x > 1:
                x /= fact[f]
                fact.remove(fact[f])
                len_fact -= 1
                if len_fact == 0:
                    bbreak = True
                    break
            # except IndexError:
            #     print("get_next() ca4 is " + str(ca4))
            #     print("get_next() inext1 is " + str(inext1))
            #     print("get_next() tgt is " + str(tgt) + " with factors " + str(tgt.factors))
            #     print("get_next() ary1 is " + str(ary1))
            #     print("get_next() fact is " + str(fact))
            #     print("get_next() f is " + str(f))
            if bbreak:
                break
            f += 1
        if bbreak:
            break
    arynext1 = []
    len_arynext1 = 0
    if inext1a > 0:
        arynext1 = [(inext1a, zero)]
        len_arynext1 = 1
        ca4 = ca4 + one/inext1a - (one/inext1a * ca4)
    inext1b, inext2 = inext1a, zero
    if len_fact > 0:
        arynext1 = []
        if len_fact >= 2:
            fary = []
            if len_fact == 2:
                fary = [(0, fact[0]*fact[1]), (fact[0]*fact[1], 0), (fact[0], fact[1]), (fact[1], fact[0])]
            elif len_fact == 3:
                fary = [(0, fact[0]*fact[1]*fact[2]), (fact[0]*fact[1]*fact[2], 0), (fact[0], fact[1]*fact[2]), (fact[1]*fact[2], fact[0]), (fact[1], fact[0]*fact[2]), (fact[0]*fact[2], fact[1]), (fact[2], fact[0]*fact[1]), (fact[0]*fact[1], fact[2])]
            elif len_fact == 4:
                fary = [(0, fact[0]*fact[1]*fact[2]*fact[3]), (fact[0]*fact[1]*fact[2]*fact[3], 0), (fact[0], fact[1]*fact[2]*fact[3]), (fact[1]*fact[2]*fact[3], fact[0]), (fact[1], fact[0]*fact[2]*fact[3]), (fact[0]*fact[2]*fact[3], fact[1]), (fact[2], fact[0]*fact[1]*fact[3]), (fact[0]*fact[1]*fact[3], fact[2]), (fact[3], fact[0]*fact[1]*fact[2]), (fact[0]*fact[1]*fact[2], fact[3]), (fact[0]*fact[1], fact[2]*fact[3]), (fact[2]*fact[3], fact[0]*fact[1]), (fact[0]*fact[3], fact[1]*fact[2]), (fact[1]*fact[2], fact[0]*fact[3])]
            elif len_fact >= 5:
                fary = [(0, fact[0]*fact[1]*fact[2]*fact[3]*fact[4]), (fact[0]*fact[1]*fact[2]*fact[3]*fact[4], 0), (fact[0], fact[1]*fact[2]*fact[3]*fact[4]), (fact[1]*fact[2]*fact[3]*fact[4], fact[0]), (fact[1], fact[0]*fact[2]*fact[3]*fact[4]), (fact[0]*fact[2]*fact[3]*fact[4], fact[1]), (fact[2], fact[0]*fact[1]*fact[3]*fact[4]), (fact[0]*fact[1]*fact[3]*fact[4], fact[2]), (fact[3], fact[0]*fact[1]*fact[2]*fact[4]), (fact[0]*fact[1]*fact[2]*fact[4], fact[3]), (fact[4], fact[0]*fact[1]*fact[2]*fact[3]), (fact[0]*fact[1]*fact[2]*fact[3], fact[4]), (fact[0]*fact[1], fact[2]*fact[3]*fact[4]), (fact[2]*fact[3]*fact[4], fact[0]*fact[1]), (fact[0]*fact[2], fact[1]*fact[3]*fact[4]), (fact[1]*fact[3]*fact[4], fact[0]*fact[2]), (fact[0]*fact[3], fact[1]*fact[2]*fact[4]), (fact[1]*fact[2]*fact[4], fact[0]*fact[3]), (fact[0]*fact[4], fact[1]*fact[2]*fact[3]), (fact[1]*fact[2]*fact[3], fact[0]*fact[4]), (fact[1]*fact[2], fact[0]*fact[3]*fact[4]), (fact[0]*fact[3]*fact[4], fact[1]*fact[2]), (fact[1]*fact[3], fact[0]*fact[2]*fact[4]), (fact[0]*fact[2]*fact[4], fact[1]*fact[3]), (fact[1]*fact[4], fact[0]*fact[2]*fact[3]), (fact[0]*fact[2]*fact[3], fact[1]*fact[4]), (fact[2]*fact[3], fact[0]*fact[1]*fact[4]), (fact[0]*fact[1]*fact[4], fact[2]*fact[3]), (fact[2]*fact[4], fact[0]*fact[1]*fact[3]), (fact[0]*fact[1]*fact[3], fact[2]*fact[4]), (fact[3]*fact[4], fact[0]*fact[1]*fact[2]), (fact[0]*fact[1]*fact[2], fact[3]*fact[4])]
            # print("fary is " + str(fary))
            for f1, f2 in fary:
                # print("f1 is " + str(f1))
                # print("f2 is " + str(f2))
                if f1 > 0:
                    inext1b = inext1a + (f1 - inext1a.numerator % f1)
                    if inext1b > 0:
                        while is_mod_zero(inext1b.numerator, ary1):
                            inext1b += 1
                    inext1b = inext1b + (f1 - inext1b.numerator % f1)
                elif tgt.fraction > ca4:
                    inext2 = (one - ca4)/(tgt.fraction - ca4)
                    if inext2 > 0 and inext2.denominator == 1:
                        while is_mod_zero(inext2.numerator, ary1 + [inext1a.numerator]):
                            inext2 += 1
                    inext2 = inext2 + (f2 - inext2.numerator % f2)
                if f1 > 0 and f2 > 0:
                    inext2 = inext1b + (f2 - inext1b.numerator % f2)
                    if inext2 > 0:
                        while is_mod_zero(inext2.numerator, ary1 + [inext1b.numerator]):
                            inext2 += 1
                    inext2 = inext2 + (f2 - inext2.numerator % f2)
                elif f2 == 0:
                    inext2 = inext1b + 1
                    if inext2 > 0:
                        while is_mod_zero(inext2.numerator, ary1 + [inext1b.numerator]):
                            inext2 += 1
                # print("inext1b is " + str(inext1b))
                # print("inext2 is " + str(inext2))
                # print("arynext1 is " + str(arynext1))
                if inext1b < inext2:
                    if (inext1b, inext2) not in arynext1:
                        arynext1.append((inext1b, inext2))
                else:
                    if (inext2, inext1b) not in arynext1:
                        arynext1.append((inext2, inext1b))
        else:
            # 
            # inext1, fact = 19, [6, 23]
            # inext1 + fact[0] - inext1.numerator % fact[0] # 24
            # inext1 + fact[1] - inext1.numerator % fact[1] # 23
            # this should give the same value as fact[0] * math.ceil(inext1.numerator/fact[0])
            # 
            inext2 = inext1a + (fact[0] - inext1a.numerator % fact[0])
            arynext1 = [(inext1a, inext2)]
            if inext1b > 0:
                inext1b = inext2
                inext2 = inext1b + 1
                while is_mod_zero(inext2.numerator, ary1 + [inext1b.numerator]):
                    inext2 += 1
            arynext1.append((inext1b, inext2))
            # for p1 in [2, 3, 5, 7, 11, 13]:
            # for p1 in [2, 3, 5]:
            # for p1 in [2, 4, 8, 16, 32, 64, 128, 256, 3, 9, 27, 81, 243, 5, 25, 125, 7, 49, 11, 121, 12, 144, 13, 169, 14, 196, 15, 225]:
            for key, vals in [(2, (2, 4, 8, 16, 32, 64, 128, 256)), (3, (3, 9, 27, 81, 243)), (5, (5, 25, 125)), (6, (6, 36, 216)), (7, (7, 49)), (10, (10, 100)), (11, (11, 121)), (12, (12, 144)), (13, (13, 169)), (14, (14, 196)), (15, (15, 225))]:
                if key not in ary1 and is_mod_zero(key, ary1):
                    bfirst = True
                    for val in vals:
                        if bfirst or val not in ary1:
                            for tpl in [(inext2, val * inext1a), (inext2, val * inext1b), (inext1a, val * inext2), (inext1b, val * inext2)]:
                                if not is_mod_zero(tpl[1], ary1):
                                    arynext1.append(sorted(tpl))
                        bfirst = False
    
    # print("arynext1 is " + str(arynext1))
    for an1 in arynext1:
        iattempts = 0
        inext1b = an1[0]
        inext2 = an1[1]
        while iattempts < 2:
            if inext1b <= 0 or inext2 <= 0:
                break
            ca4 = ca4 + one/inext1b - (one/inext1b * ca4)
            if tgt.fraction - ca4 == 0:
                if (inext1b, one) not in arynext1:
                    arynext1.append((inext1b, one))
                break
            else:
                inext2 = (one - ca4)/(tgt.fraction - ca4)
                if inext2 > 0 and inext2.denominator == 1:
                    while is_mod_zero(inext2.numerator, ary1 + [inext1b.numerator,]):
                        inext2 += 1
                    break
                if inext2 <= ary1[-1]:
                    break
            iattempts += 1
            inext1b += 1
            if inext1b > 0:
                while is_mod_zero(inext1b.numerator, ary1):
                    inext1b += 1
        if inext1b > 0 and inext1b != an1[0] and (inext1b, inext2) not in arynext1:
            arynext1.append((inext1b, inext2))
    # if type(ca4) is not fractions.Fraction:
    if not isinstance(ca4, (fractions.Fraction, Qfraction)):
        print("get_next() ca4 is " + str(ca4) + " (" + str(type(ca4)) + ")")
    # return [an1 if an1[1] > 0 else (zero, zero) for an1 in arynext1]
    return [an1 for an1 in arynext1 if an1[0] > 0 and an1[0].denominator == 1]


def check_numerator(numerator):
    global aryprimes
    if numerator < 16777216:
        return True
    else:
        # primes up to 499
        for p in aryprimes[:95]:
            if numerator % p == 0:
                numerator /= p
                if numerator < 16777216:
                    return True
    return False



# 
# i, j, k, l, m, n, o, p, q, r, s, t
# 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2
# 
iloopcount = 0
t1 = 0
dt = 0
def loop(tgts, tpli, tplj, tplk, tpll, tplm, tpln, tplo, tplp, tplq, tplr, filename1txt, filename2csv, bfibonacci, bfactorial, bpowers, baryaryvalues=False, bdebug=False):
    _mini, maxi = tpli[0] if type(tpli) is tuple else None, tpli[1] if type(tpli) is tuple else tpli
    _minj, maxj = tplj[0] if type(tplj) is tuple else None, tplj[1] if type(tplj) is tuple else tplj
    _mink, maxk = tplk[0] if type(tplk) is tuple else None, tplk[1] if type(tplk) is tuple else tplk
    _minl, maxl = tpll[0] if type(tpll) is tuple else None, tpll[1] if type(tpll) is tuple else tpll
    _minm, maxm = tplm[0] if type(tplm) is tuple else None, tplm[1] if type(tplm) is tuple else tplm
    _minn, maxn = tpln[0] if type(tpln) is tuple else None, tpln[1] if type(tpln) is tuple else tpln
    _mino, maxo = tplo[0] if type(tplo) is tuple else None, tplo[1] if type(tplo) is tuple else tplo
    _minp, maxp = tplp[0] if type(tplp) is tuple else None, tplp[1] if type(tplp) is tuple else tplp
    _minq, maxq = tplq[0] if type(tplq) is tuple else None, tplq[1] if type(tplq) is tuple else tplq
    _minr, maxr = tplr[0] if type(tplr) is tuple else None, tplr[1] if type(tplr) is tuple else tplr
    _mins, maxs = 0, 0
    global one
    global zero
    global aryprimes
    global aryary
    global aryarykeys
    global aryaryvalues
    global hshtarget
    global hshproduct
    global hshcalculated
    global setprinted
    one = fractions.Fraction(1, 1)
    zero = fractions.Fraction(0, 1)
    if aryprimes[-1] < 8000:
        aryprimes = primesieve.primes(8192)
    
    # Fibonacci numbers, Lucas numbers, solutions to Pell equations
    dens = set()
    min_den = False
    if bfibonacci:
        for val in [144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155] + [109, 360, 1189, 3927, 12970, 42837, 141481, 467280, 1543321, 5097243, 16835050, 55602393, 183642229, 606529080, 2003229469, 6616217487, 21851881930, 72171863277, 238367471761, 787274278560, 2600190307441] + [305, 1292, 5473, 23184, 98209, 416020, 1762289, 7465176, 31622993, 133957148, 567451585, 2403763488, 10182505537, 43133785636, 182717648081, 774004377960, 3278735159921, 13888945017644, 58834515230497, 249227005939632, 1055742538989025] + [135, 701, 3640, 18901, 98145, 509626, 2646275, 13741001, 71351280, 370497401, 1923838285, 9989688826, 51872282415, 269351100901, 1398627786920, 7262490035501, 37711077964425, 195817879857626] + [228, 1405, 8658, 53353, 328776, 2026009, 12484830, 76934989, 474094764, 2921503573, 18003116202, 110940200785, 683644320912, 4212806126257, 25960481078454, 159975692596981, 985814636660340, 6074863512559021, 37434995712014466, 230684837784645817] + [171, 341, 683, 1365, 2731, 5461, 10923, 21845, 43691, 87381, 174763, 349525, 699051, 1398101, 2796203, 5592405, 11184811, 22369621, 44739243, 89478485, 178956971, 357913941, 715827883, 1431655765, 2863311531, 5726623061] + [217, 508, 1159, 2683, 6160, 14209, 32689, 75316, 173383, 399331, 919480, 2117473, 4875913, 11228332, 25856071, 59541067, 137109280, 315732481, 727060321, 1674257764, 3855438727, 8878212019, 20444528200] + [120, 328, 896, 2448, 6688, 18272, 49920, 136384, 372608, 1017984, 2781184, 7598336, 20759040, 56714752, 154947584, 423324672, 1156544512, 3159738368, 8632565760, 23584608256, 64434348032, 176037912576, 480944521216, 1313964867584] + [171, 648, 2457, 9315, 35316, 133893, 507627, 1924560, 7296561, 27663363, 104879772, 397629405, 1507527531, 5715470808, 21668995017, 82153397475, 311467177476, 1180861724853, 4476986706987, 16973545295520] + [149, 274, 504, 927, 1705, 3136, 5768, 10609, 19513, 35890, 66012, 121415, 223317, 410744, 755476, 1389537, 2555757, 4700770, 8646064, 15902591, 29249425, 53798080, 98950096, 181997601, 334745777, 615693474, 1132436852] + [108, 208, 401, 773, 1490, 2872, 5536, 10671, 20569, 39648, 76424, 147312, 283953, 547337, 1055026, 2033628, 3919944, 7555935, 14564533, 28074040, 54114452, 104308960, 201061985, 387559437, 747044834, 1439975216, 2775641472] + [120, 236, 464, 912, 1793, 3525, 6930, 13624, 26784, 52656, 103519, 203513, 400096, 786568, 1546352, 3040048, 5976577, 11749641, 23099186, 45411804, 89277256, 175514464, 345052351, 678355061, 1333610936, 2621810068] + [125, 248, 492, 976, 1936, 3840, 7617, 15109, 29970, 59448, 117920, 233904, 463968, 920319, 1825529, 3621088, 7182728, 14247536, 28261168, 56058368, 111196417, 220567305, 437513522, 867844316, 1721441096, 3414621024] + [127, 2024, 32257, 514088, 8193151, 130576328, 2081028097, 33165873224, 528572943487, 8424001222568, 134255446617601, 2139663144659048, 34100354867927167, 543466014742175624, 8661355881006882817] + [765, 12192, 194307, 3096720, 49353213, 786554688, 12535521795, 199781794032, 3183973182717, 50743789129440, 808716652888323, 12888722657083728, 205410845860451325, 3273684811110137472, 52173546131901748227, 831503053299317834160] + [649, 170, 197, 127, 9801, 1520, 2049, 3482, 199, 161, 24335, 649, 66249, 485, 151, 19603, 530, 1766319049] + [180, 1820, 273, 320, 531, 3588, 9100, 2574, 226153980, 5967, 936, 413, 267000, 430] + [253, 160, 599, 1079, 718, 3955, 1801, 10064, 15467, 14725, 61126, 16951, 166427, 217280, 282001, 933841, 87838, 2713685, 2977199, 5163856, 14095453, 1396115, 43682474, 39494129, 91553293, 210035680] + [144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155] + [123, 199, 322, 521, 843, 1364, 2207, 3571, 5778, 9349, 15127, 24476, 39603, 64079, 103682, 167761, 271443, 439204, 710647, 1149851, 1860498, 3010349, 4870847, 7881196, 12752043, 20633239, 33385282, 54018521, 87403803] + [271, 457, 627, 287, 1541, 967, 2115, 4049, 181, 8279, 7917, 8641, 24475, 7193, 41757, 56143, 27371, 139657, 84915, 194399, 364229, 24569, 753027, 703889, 802165, 2209943, 605613, 3814273] + [181, 275, 449, 101, 999, 797, 1201, 2795, 393, 5197, 5983, 4411, 16377, 7555, 25199, 40309, 10089, 90707, 70529, 110885, 251943, 30173, 473713, 534059, 413367, 1481485] + [169, 408, 985, 2378, 5741, 13860, 33461, 80782, 195025, 470832, 1136689, 2744210, 6625109, 15994428, 38613965, 93222358, 225058681, 543339720, 1311738121, 3166815962, 7645370045, 18457556052, 44560482149, 107578520350, 259717522849] + [198, 478, 1154, 2786, 6726, 16238, 39202, 94642, 228486, 551614, 1331714, 3215042, 7761798, 18738638, 45239074, 109216786, 263672646, 636562078, 1536796802, 3710155682, 8957108166, 21624372014, 52205852194, 126036076402, 304278004998] + [263, 460, 131, 1118, 2629, 1904, 4079, 13870, 15503, 10604, 67717, 103622, 4093, 302680, 617639, 327238, 1198441, 3378596, 3161869, 3812050, 17109707, 22783264, 5762593, 79874978, 142462177, 45299420, 336787691]:
            dens.add(val)
    if bfactorial:
        for val in [2*3*4*5, 2*3*4*5*6, 2*3*4*5*6*7, 2*3*4*5*6*7*8, 2*3*4*5*6*7*8*9, 2*3*4*5*6*7*8*9*10, 2*3*4*5*6*7*8*9*10*11, 2*3*4*5*6*7*8*9*10*11*12, 2*3*4*5*6*7*8*9*10*11*12*13, 2*3*4*5*6*7*8*9*10*11*12*13*14, 2*3*4*5*6*7*8*9*10*11*12*13*14*15, 2*3*5*7, 2*3*5*7*11, 2*3*5*7*11*13, 2*3*5*7*11*13*17, 2*3*5*7*11*13*17*19, 2*3*5*7*11*13*17*19*23, 2*3*5*7*11*13*17*19*23*29, 2*3*5*7*11*13*17*19*23*29*31]:
            dens.add(val)
    if bpowers:
        for val in [121, 125, 128, 144, 169, 196, 216, 225, 243, 256, 289, 324, 343, 361, 400, 441, 484, 512, 529, 576, 625, 729, 1000, 1024, 1296, 1331, 1728, 2048, 2187, 2197, 2401, 2744, 3125, 3375, 4096, 4913, 5832, 6561, 6859, 7776, 8000, 8192, 9261, 10000, 10648, 12167, 13824, 14641, 15625, 16384, 16807, 19683, 20736, 28561, 32768, 38416, 46656, 50625, 59049, 65536, 78125, 83521, 100000, 104976, 117649, 130321, 131072, 160000, 161051, 177147, 194481, 234256, 248832, 262144, 279841, 279936, 331776, 371293, 390625, 524288, 531441, 537824, 759375, 823543, 1000000, 1048576, 1419857, 1594323, 1679616, 1771561, 1889568, 1953125, 2097152, 2476099, 2985984, 3200000, 4084101, 4194304, 4782969, 4826809, 5153632, 5764801, 6436343, 7529536, 7962624, 8388608, 9765625, 10000000, 10077696, 11390625, 14348907, 16777216, 19487171, 24137569, 34012224, 35831808, 40353607, 43046721, 47045881, 48828125, 60466176, 62748517, 64000000, 67108864, 85766121, 100000000, 105413504, 113379904, 129140163, 134217728, 148035889, 170859375, 191102976, 214358881, 244140625, 268435456, 282475249, 362797056, 387420489, 410338673, 429981696, 612220032, 815730721, 893871739, 1000000000, 1073741824, 1162261467, 1220703125, 1280000000, 1475789056, 1801088541, 1977326743, 2176782336, 2357947691, 2494357888, 2562890625, 3404825447, 3486784401]:
            dens.add(val)
    if bfibonacci or bfactorial or bpowers:
        min_den = min(dens)
    
    # [tgt for tgt in tgts if tgt.is_float]
    irr8 = set([round(tgt, 8) for tgt in tgts if tgt.is_float and tgt.denominator > int(2**37.5)])
        
    create_aryary(filename1txt, baryaryvalues, False, 32)
    aryaryvalues = set()
    aryarykeys = set()
    if True:
        for arykey in aryary.keys():
            aryarykeys.add(tuple(arykey))
            if baryaryvalues:
                for ary in aryary[arykey]:
                    aryaryvalues.add(tuple(ary))
    
    t1 = time.time()
    bhshcalculated = False
    if bhshcalculated:
        f2 = open(filename2csv, "r")
        icountblank = 0
        while True:
            strline = f2.readline()
            if strline is None:
                break
            elif len(strline) == 0:
                icountblank += 1
                if icountblank >= 3:
                    break
            else:
                # 3,4,7,71,71
                aryline = [int(x) for x in strline.split(",")]
                if (aryline[0], aryline[1], aryline[2]) not in hshcalculated:
                    hshcalculated[(aryline[0], aryline[1], aryline[2])] = aryline[3:]
        f2.close()
    # f1 is txt
    # f2 is csv
    f1a = open(filename1txt.replace(".txt", ".a.txt"), "a") if filename1txt is not None and filename1txt != "" else None
    f1b = open(filename1txt.replace(".txt", ".b.txt"), "a") if filename1txt is not None and filename1txt != "" else None
    f2 = open(filename2csv, "a") if filename2csv is not None and filename2csv != "" else None
    if _mini is None:
        _mini = 2
    print("")
    print("baryaryvalues is " + str(baryaryvalues))
    print("bhshcalculated is " + str(bhshcalculated))
    print("bfibonacci is " + str(bfibonacci))
    print("bfactorial is " + str(bfactorial))
    print("bpowers is " + str(bpowers))
    print("bdebug is " + str(bdebug))
    print("(_mini, maxi) is " + str((_mini, maxi)))
    print("(_minj, _maxj) is " + str((_minj, maxj)))
    print("")
    
    t1 = time.time()
    iloopcount = 0
    for i in range(_mini, maxi + 1):
        minj = i + 1 if _minj is None else max(_minj, i + 1)
        for j in range(minj, maxj + 1):
            if j % i == 0:
                continue
            ca4 = None
            mink = j + 1 if _mink is None else max(_mink, j + 1)
            bcontinue = True
            if not baryaryvalues or (i, j) not in aryaryvalues:
                # for tgt in tgts:
                ca4 = calc_a4(tgts[0].fraction, [i, j], banytgt=False, busecache=True)[1]
                # if type(ca4) is not fractions.Fraction:
                #     print("warning line 13648, type(ca4) is " + str(type(ca4)))
                # print("line 5724 (i, j)=" + str((i, j)) + ", tgt=" + str(tgt.fraction))
                if (i, j) not in setprinted:
                    if (ca4 in tgts) or (ca4.denominator <= 72) or (min_den and ca4.denominator >= min_den and ca4.denominator in dens) or (len(irr8) > 0 and round(ca4, 8) in irr8):
                        if len_tgts == 1:
                            bcontinue = False
                        loop_add([i, j], f1a, f1b, ca4, None, True)
                    # print("line 5732 ca4=" + str(ca4))
                for tgt in tgts:
                    inext1 = (one - ca4)/(tgt.fraction - ca4) if tgt.fraction > ca4 else one
                    if inext1 > j and inext1.denominator == 1 and tuple(sorted((i, j, inext1.numerator))) not in setprinted and not is_mod_zero(inext1.numerator, [i, j]):
                        ca4 = calc_a4(tgt.fraction, [i, j, inext1.numerator], banytgt=False, busecache=True)[1]
                        # if type(ca4) is not fractions.Fraction:
                        #     print("warning line 13663, type(ca4) is " + str(type(ca4)))
                        if (ca4 in tgts) or (ca4.denominator <= 72) or (min_den and ca4.denominator >= min_den and ca4.denominator in dens) or (len(irr8) > 0 and round(ca4, 8) in irr8):
                            loop_add([i, j, inext1.numerator], f1a, f1b, ca4, None, True)
            if bcontinue:
                # print("line 14016")
                for k in range(mink, maxk + 1):
                    if k % i == 0 or k % j == 0:
                        continue
                    if True and (k == mink or k == maxk or k % 10 == 0):
                        dt = time.time() - t1
                        sdt = str(round(dt/60, 2)) + " minutes" if dt/60 < 120 else str(round(dt/3600, 2)) + " hours"
                        print(f"# ({i}, {j}, {k}) ({sdt})")
                    # print("line 11678")
                    ca4 = None
                    minl = k + 1 if _minl is None else max(_minl, k + 1)
                    if bhshcalculated and (i, j, k) in hshcalculated:
                        hshl = hshcalculated[(i, j, k)][0]
                        hshm = hshcalculated[(i, j, k)][1] if len(hshcalculated[(i, j, k)]) >= 2 else 0
                        if hshl >= maxl and hshm >= maxm:
                            continue
                        if hshl < maxl and hshl > minl:
                            minl = hshl + 1
                        bcontinue = True
                    if not baryaryvalues or (i, j, k) not in aryaryvalues:
                        aryk, ca4 = calc_a4(tgts[0].fraction, [i, j, k], baddsum=True, banytgt=False, busecache=True)
                        # if type(ca4) is not fractions.Fraction:
                        #     print("warning line 13690, type(ca4) is " + str(type(ca4)))
                        if (i, j, k) not in setprinted:
                            if (ca4 in tgts) or (ca4.denominator <= 72) or (min_den and ca4.denominator >= min_den and ca4.denominator in dens) or (len(irr8) > 0 and round(ca4, 8) in irr8):
                                # if len_tgts == 1 or ca4 == tgts[0]:
                                if len_tgts == 1:
                                    bcontinue = False
                                loop_add([i, j, k], f1a, f1b, ca4, None, True)
                        for tgt in tgts:
                            inext1 = (one - ca4)/(tgt.fraction - ca4) if tgt.fraction > ca4 else one
                            if inext1 > k and inext1.denominator == 1 and tuple(sorted((i, j, k, inext1.numerator))) not in setprinted and not is_mod_zero(inext1.numerator, [i, j, k]):
                                ca4 = calc_a4(tgt.fraction, [i, j, k, inext1.numerator], a2a=aryk, banytgt=False, busecache=False)[1]
                                # if type(ca4) is not fractions.Fraction:
                                #     print("warning line 13703, type(ca4) is " + str(type(ca4)))
                                if (ca4 in tgts) or (ca4.denominator <= 48) or (min_den and ca4.denominator >= min_den and ca4.denominator in dens):
                                    loop_add([i, j, k, inext1.numerator], f1a, f1b, ca4, None, True)
                    if bcontinue:
                        lrange = [x for x in range(minl, maxl + 1)]
                        # append_range(lrange, [i, j, k], maxl)
                        for l in sorted(lrange):
                            iloopcount += 1
                            if True and (l == minl or l == maxl or l % 20 == 0):
                                dt = time.time() - t1
                                sdt = str(round(dt/60, 2)) + " minutes" if dt/60 < 120 else str(round(dt/3600, 2)) + " hours"
                                svec = f"{iloopcount}/{round(dt/60, 2)} = {round(iloopcount/(dt/60), 2)}" if dt > 0 else ""
                                print(f"# ({i}, {j}, {k}, {l}) ({sdt}) ({svec})")
                            if bdebug:
                                print("looping for l, " + str([i, j, k, l]))
                            if l % i == 0 or l % j == 0 or l % k == 0:
                                continue
                            ca4 = None
                            minm = l + 1 if _minm is None else max(_minm, l + 1)
                            if bhshcalculated and (i, j, k) in hshcalculated:
                                hshl = hshcalculated[(i, j, k)][0]
                                hshm = hshcalculated[(i, j, k)][1] if len(hshcalculated[(i, j, k)]) >= 2 else 0
                                if hshl >= l and hshm >= maxm:
                                    continue
                                if hshm < maxm and hshm > minm:
                                    minm = hshm + 1
                            bcontinue = True
                            if not baryaryvalues or (i, j, k, l) not in aryaryvalues:
                                aryl, ca4 = calc_a4(tgts[0].fraction, [i, j, k, l], a2a=aryk, baddsum=True, banytgt=False, busecache=True)
                                # if type(ca4) is not fractions.Fraction:
                                #     print("warning line 13716, type(ca4) is " + str(type(ca4)))
                                if (i, j, k, l) not in setprinted:
                                    if (ca4 in tgts) or (ca4.denominator <= 72) or (min_den and ca4.denominator >= min_den and ca4.denominator in dens) or (len(irr8) > 0 and round(ca4, 8) in irr8):
                                        # if len_tgts == 1 or ca4 == tgts[0]:
                                        if len_tgts == 1:
                                            bcontinue = False
                                        loop_add([i, j, k, l], f1a, f1b, ca4, None, True)
                                    minnext = (16/17) * l
                                    for tgt in tgts:
                                        inext1 = (one - ca4)/(tgt.fraction - ca4) if tgt.fraction > ca4 else one
                                        if inext1 > l and inext1.denominator == 1 and tuple(sorted((i, j, k, l, inext1.numerator))) not in setprinted and not is_mod_zero(inext1.numerator, [i, j, k, l]):
                                            ca4 = calc_a4(tgt.fraction, [i, j, k, l, inext1.numerator], a2a=aryl, banytgt=False, busecache=True)[1]
                                            # if type(ca4) is not fractions.Fraction:
                                            #     print("warning line 13726, type(ca4) is " + str(type(ca4)))
                                            if (ca4 in tgts) or (ca4.denominator <= 72) or (min_den and ca4.denominator >= min_den and ca4.denominator in dens) or (len(irr8) > 0 and round(ca4, 8) in irr8):
                                                loop_add([i, j, k, l, inext1.numerator], f1a, f1b, ca4, None, True)
                                        if inext1 > minnext and inext1.denominator != 1:
                                            inext1 = fractions.Fraction(math.ceil(inext1.numerator/inext1.denominator))
                                        for inext1, inext2 in get_next(ca4, inext1, tgt, [i, j, k, l]):
                                            
                                            thisary, prevary, bln_is_mod_zero = [], [], True
                                            if inext2 == one or inext2 == zero:
                                                thisary = sorted((i, j, k, l, inext1.numerator))
                                                prevary = [i, j, k, l]
                                                bln_is_mod_zero = is_mod_zero(inext1.numerator, prevary)
                                                inext2 = one
                                            else:
                                                thisary = sorted((i, j, k, l, inext1.numerator, inext2.numerator))
                                                prevary = [i, j, k, l, inext1.numerator]
                                                bln_is_mod_zero = is_mod_zero(inext2.numerator, prevary)
                                                
                                            if inext2 > 0 and inext2.denominator == 1 and check_numerator(inext2.numerator) and tuple(thisary) not in setprinted and not bln_is_mod_zero:
                                                ca4 = calc_a4(tgt.fraction, thisary, a2a=aryl, banytgt=False, busecache=True)[1]
                                                # if type(ca4) is not fractions.Fraction:
                                                #     print("warning line 13747, type(ca4) is " + str(type(ca4)))
                                                if (ca4 in tgts) or (ca4.denominator <= 72) or (min_den and ca4.denominator >= min_den and ca4.denominator in dens) or (len(irr8) > 0 and round(ca4, 8) in irr8):
                                                    loop_add(thisary, f1a, f1b, ca4, None, True)
                                                if inext2 != one and inext2 != zero:
                                                    inext3 = (one - ca4)/(tgt.fraction - ca4) if tgt.fraction > ca4 else one
                                                    if inext3 > 0 and inext3.denominator == 1 and check_numerator(inext3.numerator) and tuple(sorted((i, j, k, l, inext1.numerator, inext2.numerator, inext3.numerator))) not in setprinted and not is_mod_zero(inext3.numerator, [i, j, k, l, inext1.numerator, inext2.numerator]):
                                                        ca4 = calc_a4(tgt.fraction, [i, j, k, l, inext1.numerator, inext2.numerator, inext3.numerator], a2a=aryl, banytgt=False, busecache=False)[1]
                                                        # if type(ca4) is not fractions.Fraction:
                                                        #     print("warning line 13755, type(ca4) is " + str(type(ca4)))
                                                        if (ca4 in tgts) or (ca4.denominator <= 72) or (min_den and ca4.denominator >= min_den and ca4.denominator in dens) or (len(irr8) > 0 and round(ca4, 8) in irr8):
                                                            loop_add([i, j, k, l, inext1.numerator, inext2.numerator, inext3.numerator], f1a, f1b, ca4, None, True)
                            if bcontinue:
                                mrange = [x for x in range(minm, maxm + 1)]
                                # append_range(mrange, [i, j, k, l], maxm)
                                for m in sorted(mrange):
                                    iloopcount += 1
                                    if True and (m == minm or m == maxm or m % 16 == 0):
                                        dt = time.time() - t1
                                        sdt = str(round(dt/60, 2)) + " minutes" if dt/60 < 120 else str(round(dt/3600, 2)) + " hours"
                                        svec = f"{iloopcount}/{round(dt/60, 2)} = {round(iloopcount/(dt/60), 2)}" if dt > 0 else ""
                                        print(f"# ({i}, {j}, {k}, {l}, {m}) ({sdt}) ({svec})")
                                        f1a.flush()
                                        f1b.flush()
                                        f2.write(f"{i},{j},{k},{l},{m}\n")
                                        f2.flush()
                                    if bdebug:
                                        print("looping for m, " + str([i, j, k, l, m]))
                                    if m % i == 0 or m % j == 0 or m % k == 0 or m % l == 0:
                                        continue
                                    ca4 = None
                                    minn = m + 1 if _minn is None else max(_minn, m + 1)
                                    if bhshcalculated and (i, j, k) in hshcalculated:
                                        hshl = hshcalculated[(i, j, k)][0]
                                        hshm = hshcalculated[(i, j, k)][1] if len(hshcalculated[(i, j, k)]) >= 2 else 0
                                        hshn = hshcalculated[(i, j, k)][2] if len(hshcalculated[(i, j, k)]) >= 3 else 0
                                        if hshl >= l and hshm >= m and hshn >= maxn:
                                            continue
                                        if hshn < maxn and hshn > minn:
                                            minn = hshn + 1
                                    bcontinue = True
                                    if not baryaryvalues or (i, j, k, l, m) not in aryaryvalues:
                                        # calc_a2(fractions.Fraction(1, 2), [3, 7, 10, 64, 71])[1]
                                        arym, ca4 = calc_a4(tgts[0].fraction, [i, j, k, l, m], a2a=aryl, baddsum=True, banytgt=False, busecache=True)
                                        # if type(ca4) is not fractions.Fraction:
                                        #     print("warning line 13747, type(ca4) is " + str(type(ca4)))
                                        
                                        if (i, j, k, l, m) not in setprinted:
                                            if (ca4 in tgts) or (ca4.denominator <= 72) or (min_den and ca4.denominator >= min_den and ca4.denominator in dens) or (len(irr8) > 0 and round(ca4, 8) in irr8):
                                                # if len_tgts == 1 or ca4 == tgts[0]:
                                                if len_tgts == 1:
                                                    bcontinue = False
                                                loop_add([i, j, k, l, m], f1a, f1b, ca4, None, True)
                                            minnext = (16/17) * m
                                            for tgt in tgts:
                                                inext1 = (one - ca4)/(tgt.fraction - ca4) if tgt.fraction > ca4 else one
                                                if inext1 > m and inext1.denominator == 1 and tuple(sorted((i, j, k, l, m, inext1.numerator))) not in setprinted and not is_mod_zero(inext1.numerator, [i, j, k, l, m]):
                                                    ca4 = calc_a4(tgt.fraction, [i, j, k, l, m, inext1.numerator], a2a=arym, banytgt=False, busecache=True)[1]
                                                    # if type(ca4) is not fractions.Fraction:
                                                    #     print("warning line 13793, type(ca4) is " + str(type(ca4)))
                                                    if (ca4 in tgts) or (ca4.denominator <= 72) or (min_den and ca4.denominator >= min_den and ca4.denominator in dens) or (len(irr8) > 0 and round(ca4, 8) in irr8):
                                                        loop_add([i, j, k, l, m, inext1.numerator], f1a, f1b, ca4, None, True)
                                                if inext1 > minnext and inext1.denominator != 1:
                                                    inext1 = fractions.Fraction(math.ceil(inext1.numerator/inext1.denominator))
                                                    for inext1, inext2 in get_next(ca4, inext1, tgt, [i, j, k, l, m]):
                                                        
                                                        thisary, prevary, bln_is_mod_zero = [], [], True
                                                        if inext2 == one or inext2 == zero:
                                                            thisary = sorted((i, j, k, l, m, inext1.numerator))
                                                            prevary = [i, j, k, l, m]
                                                            bln_is_mod_zero = is_mod_zero(inext1.numerator, prevary)
                                                            inext2 = one
                                                        else:
                                                            thisary = sorted((i, j, k, l, m, inext1.numerator, inext2.numerator))
                                                            prevary = [i, j, k, l, m, inext1.numerator]
                                                            bln_is_mod_zero = is_mod_zero(inext2.numerator, prevary)
                                                                    
                                                        if inext2 > 0 and inext2.denominator == 1 and check_numerator(inext2.numerator) and tuple(thisary) not in setprinted and not bln_is_mod_zero:
                                                            ca4 = calc_a4(tgt.fraction, thisary, a2a=arym, banytgt=False, busecache=True)[1]
                                                            # if type(ca4) is not fractions.Fraction:
                                                            #     print("warning line 13812, type(ca4) is " + str(type(ca4)))
                                                            if (ca4 in tgts) or (ca4.denominator <= 72) or (min_den and ca4.denominator >= min_den and ca4.denominator in dens) or (len(irr8) > 0 and round(ca4, 8) in irr8):
                                                                loop_add(thisary, f1a, f1b, ca4, None, True)
                                                            if inext2 != one and inext2 != zero:
                                                                inext3 = (one - ca4)/(tgt.fraction - ca4) if tgt.fraction > ca4 else one
                                                                if inext3 > 0 and inext3.denominator == 1 and check_numerator(inext3.numerator) and tuple(sorted((i, j, k, l, m, inext1.numerator, inext2.numerator, inext3.numerator))) not in setprinted and not is_mod_zero(inext3.numerator, [i, j, k, l, m, inext1.numerator, inext2.numerator]):
                                                                    ca4 = calc_a4(tgt.fraction, [i, j, k, l, m, inext1.numerator, inext2.numerator, inext3.numerator], a2a=arym, banytgt=False, busecache=False)[1]
                                                                    if (ca4 in tgts) or (ca4.denominator <= 72) or (min_den and ca4.denominator >= min_den and ca4.denominator in dens) or (len(irr8) > 0 and round(ca4, 8) in irr8):
                                                                        loop_add([i, j, k, l, m, inext1.numerator, inext2.numerator, inext3.numerator], f1a, f1b, ca4, None, True)
                                    if bcontinue:
                                        nrange = [x for x in range(minn, maxn + 1)]
                                        # append_range(nrange, [i, j, k, l, m], maxn)
                                        for n in sorted(nrange):
                                            iloopcount += 1
                                            if n % 16 == 0 or n == nrange[0] or n == maxn or n == nrange[-1]:
                                                dt = time.time() - t1
                                                sdt = str(round(dt/60, 2)) + " minutes" if dt/60 < 120 else str(round(dt/3600, 2)) + " hours"
                                                svec = f"{iloopcount}/{round(dt/60, 2)} = {round(iloopcount/(dt/60), 2)}" if dt > 0 else ""
                                                print(f"# ({i}, {j}, {k}, {l}, {m}, {n}) ({sdt}) ({svec})")
                                            if n % 32 == 0 or n == nrange[0] or n == maxn or n == nrange[-1]:
                                                f1a.flush()
                                                f1b.flush()
                                                f2.write(f"{i},{j},{k},{l},{m},{n}\n")
                                                f2.flush()
                                            if bdebug:
                                                print("looping for n, " + str([i, j, k, l, m, n]))
                                            if n % i == 0 or n % j == 0 or n % k == 0 or n % l == 0 or n % m == 0:
                                                continue
                                            ca4 = None
                                            mino = n + 1 if _mino is None else max(_mino, n + 1)
                                            bcontinue = True
                                            if not baryaryvalues or (i, j, k, l, m, n) not in aryaryvalues:
                                                aryn, ca4 = calc_a4(tgts[0].fraction, [i, j, k, l, m, n], a2a=arym, baddsum=True, banytgt=False, busecache=True)
                                                # if type(ca4) is not fractions.Fraction:
                                                #     print("warning line 13851, type(ca4) is " + str(type(ca4)))
                                                if (i, j, k, l, m, n) not in setprinted:
                                                    if (ca4 in tgts) or (ca4.denominator <= 72) or (min_den and ca4.denominator >= min_den and ca4.denominator in dens) or (len(irr8) > 0 and round(ca4, 8) in irr8):
                                                        # if len_tgts == 1 or ca4 == tgts[0]:
                                                        if len_tgts == 1:
                                                            bcontinue = False
                                                        loop_add([i, j, k, l, m, n], f1a, f1b, ca4, None, True)
                                                    minnext = (16/17) * n
                                                    for tgt in tgts:
                                                        inext1 = (one - ca4)/(tgt.fraction - ca4) if tgt.fraction > ca4 else one
                                                        # inext1 = fractions.Fraction(1394823660460800, 358544625563771) # 3.890237256429648
                                                        # inext1 = fractions.Fraction(726470656490, 1)
                                                        if inext1 > n and inext1.denominator == 1 and tuple(sorted((i, j, k, l, m, n, inext1.numerator))) not in setprinted and not is_mod_zero(inext1.numerator, [i, j, k, l, m, n]):
                                                            ca4 = calc_a4(tgt.fraction, [i, j, k, l, m, n, inext1.numerator], a2a=aryn, banytgt=False, busecache=False)[1]
                                                            # if type(ca4) is not fractions.Fraction:
                                                            #     print("warning line 13864, type(ca4) is " + str(type(ca4)))
                                                            if (ca4 in tgts) or (ca4.denominator <= 72) or (min_den and ca4.denominator >= min_den and ca4.denominator in dens) or (len(irr8) > 0 and round(ca4, 8) in irr8):
                                                                loop_add([i, j, k, l, m, n, inext1.numerator], f1a, f1b, ca4, None, True)
                                                        if inext1 > minnext and inext1.denominator != 1:
                                                            # tgt = quantum.target(1, 2)
                                                            # ca4 = quantum.calc_a4(tgt.fraction, [3, 10, 11, 17, 65, 71], a2a=[], banytgt=False, busecache=False)[1]
                                                            # inext1 = (quantum.one - ca4)/(tgt.fraction - ca4) if fractions.Fraction(1, 2) > ca4 else quantum.one
                                                            # inext1 = fractions.Fraction(math.ceil(inext1.numerator/inext1.denominator))
                                                            # quantum.get_next(ca4, inext1, tgt, [3, 10, 11, 17, 65, 71])
                                                            inext1 = fractions.Fraction(math.ceil(inext1.numerator/inext1.denominator))
                                                            for inext1, inext2 in get_next(ca4, inext1, tgt, [i, j, k, l, m, n]):
                                                                # inext1, inext2 = fractions.Fraction(726470656490, 1), fractions.Fraction(726470656493, 1)
                                                                
                                                                thisary, prevary, bln_is_mod_zero = [], [], True
                                                                if inext2 == one or inext2 == zero:
                                                                    thisary = sorted((i, j, k, l, m, n, inext1.numerator))
                                                                    prevary = [i, j, k, l, m, n]
                                                                    bln_is_mod_zero = is_mod_zero(inext1.numerator, prevary)
                                                                    inext2 = one
                                                                else:
                                                                    thisary = sorted((i, j, k, l, m, n, inext1.numerator, inext2.numerator))
                                                                    prevary = [i, j, k, l, m, n, inext1.numerator]
                                                                    bln_is_mod_zero = is_mod_zero(inext2.numerator, prevary)
                                                                
                                                                if inext2 > 0 and inext2.denominator == 1 and check_numerator(inext2.numerator) and tuple(thisary) not in setprinted and not bln_is_mod_zero:
                                                                    ca4 = calc_a4(tgt.fraction, thisary, a2a=aryn, banytgt=False, busecache=False)[1]
                                                                    # if type(ca4) is not fractions.Fraction:
                                                                    #     print("warning line 13885, type(ca4) is " + str(type(ca4)))
                                                                    if (ca4 in tgts) or (ca4.denominator <= 72) or (min_den and ca4.denominator >= min_den and ca4.denominator in dens) or (len(irr8) > 0 and round(ca4, 8) in irr8):
                                                                        loop_add(thisary, f1a, f1b, ca4, None, True)
                                            if bcontinue:
                                                orange = [x for x in range(mino, maxo + 1)]
                                                # append_range(nrange, [i, j, k, l, m, n], maxo)
                                                for o in sorted(orange):
                                                    iloopcount += 1
                                                    if o % 64 == 0 or o == orange[0] or o == maxo or o == orange[-1]:
                                                        f2.write(f"{i},{j},{k},{l},{m},{n},{o}\n")
                                                    if o % 32 == 0 or o == orange[0] or o == maxo or o == orange[-1]:
                                                        dt = time.time() - t1
                                                        sdt = str(round(dt/60, 2)) + " minutes" if dt/60 < 120 else str(round(dt/3600, 2)) + " hours"
                                                        svec = f"{iloopcount}/{round(dt/60, 2)} = {round(iloopcount/(dt/60), 2)}" if dt > 0 else ""
                                                        print(f"# ({i}, {j}, {k}, {l}, {m}, {n}, {o}) ({sdt}) ({svec})")
                                                    if bdebug:
                                                        print("looping for o, " + str([i, j, k, l, m, n, o]))
                                                    if o % i == 0 or o % j == 0 or o % k == 0 or o % l == 0 or o % m == 0 or o % n == 0:
                                                        continue
                                                    ca4 = None
                                                    minp = o + 1 if _minp is None else max(_minp, o + 1)
                                                    bcontinue = True
                                                    if (not baryaryvalues or (i, j, k, l, m, n, o) not in aryaryvalues) and ((i, j, k, l, m, n, o) not in setprinted):
                                                        aryo, ca4 = calc_a4(tgts[0].fraction, [i, j, k, l, m, n, o], a2a=aryn, baddsum=True, banytgt=False, busecache=True)
                                                        # if type(ca4) is not fractions.Fraction:
                                                        #     print("warning line 13898, type(ca4) is " + str(type(ca4)))
                                                        if (i, j, k, l, m, n, o) not in setprinted:
                                                            if (ca4 in tgts) or (ca4.denominator <= 72) or (min_den and ca4.denominator >= min_den and ca4.denominator in dens) or (len(irr8) > 0 and round(ca4, 8) in irr8):
                                                                # if len_tgts == 1 or ca4 == tgts[0]:
                                                                if len_tgts == 1:
                                                                    bcontinue = False
                                                                loop_add([i, j, k, l, m, n, o], f1a, f1b, ca4, None, True)
                                                            minnext = (16/17) * o
                                                            for tgt in tgts:
                                                                inext1 = (one - ca4)/(tgt.fraction - ca4) if tgt.fraction > ca4 else one
                                                                if inext1 > o and inext1.denominator == 1 and tuple(sorted((i, j, k, l, m, n, o, inext1.numerator))) not in setprinted and not is_mod_zero(inext1.numerator, [i, j, k, l, m, n, o]):
                                                                    ca4 = calc_a4(tgt.fraction, [i, j, k, l, m, n, o, inext1.numerator], a2a=aryo, banytgt=False, busecache=False)[1]
                                                                    # if type(ca4) is not fractions.Fraction:
                                                                    #     print("warning line 13911, type(ca4) is " + str(type(ca4)))
                                                                    if (ca4 in tgts) or (ca4.denominator <= 72) or (min_den and ca4.denominator >= min_den and ca4.denominator in dens) or (len(irr8) > 0 and round(ca4, 8) in irr8):
                                                                        loop_add([i, j, k, l, m, n, o, inext1.numerator], f1a, f1b, ca4, None, True)
                                                                if inext1 > minnext and inext1.denominator != 1:
                                                                    inext1 = fractions.Fraction(math.ceil(inext1.numerator/inext1.denominator))
                                                                    for inext1, inext2 in get_next(ca4, inext1, tgt, [i, j, k, l, m, n, o]):
                                                                        if inext2 > 0 and inext2.denominator == 1 and check_numerator(inext2.numerator) and tuple(sorted((i, j, k, l, m, n, o, inext1.numerator, inext2.numerator))) not in setprinted and not is_mod_zero(inext2.numerator, [i, j, k, l, m, n, o, inext1.numerator]):
                                                                            ca4 = calc_a4(tgt.fraction, [i, j, k, l, m, n, o, inext1.numerator, inext2.numerator], a2a=aryo, banytgt=False, busecache=False)[1]
                                                                            # if type(ca4) is not fractions.Fraction:
                                                                            #     print("warning line 13920, type(ca4) is " + str(type(ca4)))
                                                                            if (ca4 in tgts) or (ca4.denominator <= 72) or (min_den and ca4.denominator >= min_den and ca4.denominator in dens) or (len(irr8) > 0 and round(ca4, 8) in irr8):
                                                                                loop_add([i, j, k, l, m, n, o, inext1.numerator, inext2.numerator], f1a, f1b, ca4, None, True)
                                                    if bcontinue:
                                                        prange = [x for x in range(minp, maxp + 1)]
                                                        # append_range(prange, [i, j, k, l, m, n, o], maxp)
                                                        for p in sorted(prange):
                                                            iloopcount += 1
                                                            if False:
                                                                dt = time.time() - t1
                                                                svec = f"{iloopcount}/{round(dt/60, 2)} = {round(iloopcount/(dt/60), 2)}" if dt > 0 else ""
                                                                print("looping for p, " + str([i, j, k, l, m, n, o, p]) + " ({svec})")
                                                            if p % i == 0 or p % j == 0 or p % k == 0 or p % l == 0 or p % m == 0 or p % n == 0 or p % o == 0:
                                                                continue
                                                            ca4 = None
                                                            minq = p + 1 if _minq is None else max(_minq, p + 1)
                                                            bcontinue = True
                                                            if (not baryaryvalues or (i, j, k, l, m, n, o, p) not in aryaryvalues) and ((i, j, k, l, m, n, o, p) not in setprinted):
                                                                aryp, ca4 = calc_a4(tgts[0].fraction, [i, j, k, l, m, n, o, p], a2a=aryo, baddsum=True, banytgt=False, busecache=True)
                                                                if (i, j, k, l, m, n, o, p) not in setprinted:
                                                                    if (ca4 in tgts) or (ca4.denominator <= 72) or (min_den and ca4.denominator >= min_den and ca4.denominator in dens) or (len(irr8) > 0 and round(ca4, 8) in irr8):
                                                                        # if len_tgts == 1 or ca4 == tgts[0]:
                                                                        if len_tgts == 1:
                                                                            bcontinue = False
                                                                        loop_add([i, j, k, l, m, n, o, p], f1a, f1b, ca4, None, True)
                                                                    minnext = (16/17) * p
                                                                    for tgt in tgts:
                                                                        inext1 = (one - ca4)/(tgt.fraction - ca4) if tgt.fraction > ca4 else one
                                                                        if inext1 > p and inext1.denominator == 1 and tuple(sorted((i, j, k, l, m, n, o, p, inext1.numerator))) not in setprinted and not is_mod_zero(inext1.numerator, [i, j, k, l, m, n, o, p]):
                                                                            ca4 = calc_a4(tgt.fraction, [i, j, k, l, m, n, o, p, inext1.numerator], a2a=aryp, banytgt=False, busecache=False)[1]
                                                                            if (ca4 in tgts) or (ca4.denominator <= 72) or (min_den and ca4.denominator >= min_den and ca4.denominator in dens) or (len(irr8) > 0 and round(ca4, 8) in irr8):
                                                                                loop_add([i, j, k, l, m, n, o, p, inext1.numerator], f1a, f1b, ca4, None, True)
                                                                        if inext1 > minnext and inext1.denominator != 1:
                                                                            inext1 = fractions.Fraction(math.ceil(inext1.numerator/inext1.denominator))
                                                                            for inext1, inext2 in get_next(ca4, inext1, tgt, [i, j, k, l, m, n, o, p]):
                                                                                if inext2 > 0 and inext2.denominator == 1 and check_numerator(inext2.numerator) and tuple(sorted((i, j, k, l, m, n, o, p, inext1.numerator, inext2.numerator))) not in setprinted and not is_mod_zero(inext2.numerator, [i, j, k, l, m, n, o, p, inext1.numerator]):
                                                                                    ca4 = calc_a4(tgt.fraction, [i, j, k, l, m, n, o, p, inext1.numerator, inext2.numerator], a2a=aryp, banytgt=False, busecache=False)[1]
                                                                                    if (ca4 in tgts) or (ca4.denominator <= 48) or (min_den and ca4.denominator >= min_den and ca4.denominator in dens) or (len(irr8) > 0 and round(ca4, 8) in irr8):
                                                                                        loop_add([i, j, k, l, m, n, o, p, inext1.numerator, inext2.numerator], f1a, f1b, ca4, None, True)
                                                            if bcontinue:
                                                                qrange = [x for x in range(minq, maxq + 1)]
                                                                # append_range(qrange, [i, j, k, l, m, n, o, p], maxq)
                                                                for q in sorted(qrange):
                                                                    iloopcount += 1
                                                                    if False:
                                                                        dt = time.time() - t1
                                                                        svec = f"{iloopcount}/{round(dt/60, 2)} = {round(iloopcount/(dt/60), 2)}" if dt > 0 else ""
                                                                        print("looping for q, " + str([i, j, k, l, m, n, o, p, q]))
                                                                    if q % i == 0 or q % j == 0 or q % k == 0 or q % l == 0 or q % m == 0 or q % n == 0 or q % o == 0 or q % p == 0:
                                                                        continue
                                                                    ca4 = None
                                                                    minr = q + 1 if _minr is None else max(_minr, q + 1)
                                                                    bcontinue = True
                                                                    if (not baryaryvalues or (i, j, k, l, m, n, o, p, q) not in aryaryvalues) and ((i, j, k, l, m, n, o, p, q) not in setprinted):
                                                                        aryq, ca4 = calc_a4(tgts[0].fraction, [i, j, k, l, m, n, o, p, q], a2a=aryp, baddsum=True, banytgt=False, busecache=True)
                                                                        if (i, j, k, l, m, n, o, p, q) not in setprinted:
                                                                            if (ca4 in tgts) or (ca4.denominator <= 72) or (min_den and ca4.denominator >= min_den and ca4.denominator in dens) or (len(irr8) > 0 and round(ca4, 8) in irr8):
                                                                                # if len_tgts == 1 or ca4 == tgts[0]:
                                                                                if len_tgts == 1:
                                                                                    bcontinue = False
                                                                                loop_add([i, j, k, l, m, n, o, p, q], f1a, f1b, ca4, None, True)
                                                                            minnext = (16/17) * q
                                                                            for tgt in tgts:
                                                                                inext1 = (one - ca4)/(tgt.fraction - ca4) if tgt.fraction > ca4 else one
                                                                                if inext1 > q and inext1.denominator == 1 and tuple(sorted((i, j, k, l, m, n, o, p, q, inext1.numerator))) not in setprinted and not is_mod_zero(inext1.numerator, [i, j, k, l, m, n, o, p, q]):
                                                                                    ca4 = calc_a4(tgt.fraction, [i, j, k, l, m, n, o, p, q, inext1.numerator], a2a=aryq, banytgt=False, busecache=False)[1]
                                                                                    if (ca4 in tgts) or (ca4.denominator <= 72) or (min_den and ca4.denominator >= min_den and ca4.denominator in dens) or (len(irr8) > 0 and round(ca4, 8) in irr8):
                                                                                        loop_add([i, j, k, l, m, n, o, p, q, inext1.numerator], f1a, f1b, ca4, None, True)
                                                                                if inext1 > minnext and inext1.denominator != 1:
                                                                                    inext1 = fractions.Fraction(math.ceil(inext1.numerator/inext1.denominator))
                                                                                    for inext1, inext2 in get_next(ca4, inext1, tgt, [i, j, k, l, m, n, o, p, q]):
                                                                                        if inext2 > 0 and inext2.denominator == 1 and check_numerator(inext2.numerator) and tuple(sorted((i, j, k, l, m, n, o, p, q, inext1.numerator, inext2.numerator))) not in setprinted and not is_mod_zero(inext2.numerator, [i, j, k, l, m, n, o, p, q, inext1.numerator]):
                                                                                            ca4 = calc_a4(tgt.fraction, [i, j, k, l, m, n, o, p, q, inext1.numerator, inext2.numerator], a2a=aryq, banytgt=False, busecache=False)[1]
                                                                                            if (ca4 in tgts) or (ca4.denominator <= 72) or (min_den and ca4.denominator >= min_den and ca4.denominator in dens) or (len(irr8) > 0 and round(ca4, 8) in irr8):
                                                                                                # 11
                                                                                                loop_add([i, j, k, l, m, n, o, p, q, inext1.numerator, inext2.numerator], f1a, f1b, ca4, None, True)
                                                                    if bcontinue:
                                                                        rrange = [x for x in range(minr, maxr + 1)]
                                                                        # append_range(rrange, [i, j, k, l, m, n, o, p, q], maxr)
                                                                        for r in sorted(rrange):
                                                                            iloopcount += 1
                                                                            if False:
                                                                                svec = f"{iloopcount}/{round(dt/60, 2)} = {round(iloopcount/(dt/60), 2)}" if dt > 0 else ""
                                                                                print("looping for r, " + str([i, j, k, l, m, n, o, p, q, r]) + " ({svec})")
                                                                            if r % i == 0 or r % j == 0 or r % k == 0 or r % l == 0 or r % m == 0 or r % n == 0 or r % o == 0 or r % p == 0 or r % q == 0:
                                                                                continue
                                                                            ca4 = None
                                                                            mins = r + 1 if _mins is None else max(_mins, r + 1)
                                                                            bcontinue = True
                                                                            if (not baryaryvalues or (i, j, k, l, m, n, o, p, q, r) not in aryaryvalues) and ((i, j, k, l, m, n, o, p, q, r) not in setprinted):
                                                                                aryr, ca4 = calc_a4(tgts[0].fraction, [i, j, k, l, m, n, o, p, q, r], a2a=aryq, baddsum=True, banytgt=False, busecache=True)
                                                                                if (i, j, k, l, m, n, o, p, q, r) not in setprinted:
                                                                                    if (ca4 in tgts) or (ca4.denominator <= 72) or (min_den and ca4.denominator >= min_den and ca4.denominator in dens) or (len(irr8) > 0 and round(ca4, 8) in irr8):
                                                                                        # if len_tgts == 1 or ca4 == tgts[0]:
                                                                                        if len_tgts == 1:
                                                                                            bcontinue = False
                                                                                        loop_add([i, j, k, l, m, n, o, p, q, r], f1a, f1b, ca4, None, True)
                                                                                    minnext = (16/17) * r
                                                                                    for tgt in tgts:
                                                                                        inext1 = (one - ca4)/(tgt.fraction - ca4) if tgt.fraction > ca4 else one
                                                                                        if inext1 > r and inext1.denominator == 1 and tuple(sorted((i, j, k, l, m, n, o, p, q, r, inext1.numerator))) not in setprinted and not is_mod_zero(inext1.numerator, [i, j, k, l, m, n, o, p, q, r]):
                                                                                            ca4 = calc_a4(tgt.fraction, [i, j, k, l, m, n, o, p, q, r, inext1.numerator], a2a=aryr, banytgt=False, busecache=False)[1]
                                                                                            if (ca4 in tgts) or (ca4.denominator <= 72) or (min_den and ca4.denominator >= min_den and ca4.denominator in dens) or (len(irr8) > 0 and round(ca4, 8) in irr8):
                                                                                                loop_add([i, j, k, l, m, n, o, p, q, r, inext1.numerator], f1a, f1b, ca4, None, True)
                                                                                        if inext1 > minnext and inext1.denominator != 1:
                                                                                            inext1 = fractions.Fraction(math.ceil(inext1.numerator/inext1.denominator))
                                                                                            for inext1, inext2 in get_next(ca4, inext1, tgt, [i, j, k, l, m, n, o, p, q, r]):
                                                                                                if inext2 > 0 and inext2.denominator == 1 and check_numerator(inext2.numerator) and tuple(sorted((i, j, k, l, m, n, o, p, q, inext1.numerator, inext2.numerator))) not in setprinted and not is_mod_zero(inext2.numerator, [i, j, k, l, m, n, o, p, q, inext1.numerator]):
                                                                                                    ca4 = calc_a4(tgt.fraction, [i, j, k, l, m, n, o, p, q, r, inext1.numerator, inext2.numerator], a2a=aryr, banytgt=False, busecache=False)[1]
                                                                                                    if (ca4 in tgts) or (ca4.denominator <= 72) or (min_den and ca4.denominator >= min_den and ca4.denominator in dens) or (len(irr8) > 0 and round(ca4, 8) in irr8):
                                                                                                        # 12
                                                                                                        loop_add([i, j, k, l, m, n, o, p, q, r, inext1.numerator, inext2.numerator], f1a, f1b, ca4, None, True)
                                    f1a.flush()
                                    f1b.flush()
                        f2.write(f"{i},{j},{k},{maxl},{maxm}\n")
                        f2.flush()
                        f1a.flush()
                        f1b.flush()
    f1a.close()
    f1b.close()
    f2.close()




def loop_one_tgt(tgt, tpli, tplj, tplk, tpll, tplm, tpln, tplo, tplp, tplq, filename1txt, filename2csv, bfibonacci, bfactorial, bpowers, baryaryvalues=False, bdebug=False):
    _mini, maxi = tpli[0] if type(tpli) is tuple else None, tpli[1] if type(tpli) is tuple else tpli
    _minj, maxj = tplj[0] if type(tplj) is tuple else None, tplj[1] if type(tplj) is tuple else tplj
    _mink, maxk = tplk[0] if type(tplk) is tuple else None, tplk[1] if type(tplk) is tuple else tplk
    _minl, maxl = tpll[0] if type(tpll) is tuple else None, tpll[1] if type(tpll) is tuple else tpll
    _minm, maxm = tplm[0] if type(tplm) is tuple else None, tplm[1] if type(tplm) is tuple else tplm
    _minn, maxn = tpln[0] if type(tpln) is tuple else None, tpln[1] if type(tpln) is tuple else tpln
    _mino, maxo = tplo[0] if type(tplo) is tuple else None, tplo[1] if type(tplo) is tuple else tplo
    _minp, maxp = tplp[0] if type(tplp) is tuple else None, tplp[1] if type(tplp) is tuple else tplp
    _minq, maxq = tplq[0] if type(tplq) is tuple else None, tplq[1] if type(tplq) is tuple else tplq
    _minr, maxr = 0, 0
    global one
    global zero
    global aryprimes
    global aryary
    global aryarykeys
    global aryaryvalues
    global hshtarget
    global hshproduct
    global hshcalculated
    global setprinted
    one = Qfraction(1, 1)
    zero = fractions.Fraction(0, 1)
    if aryprimes[-1] < 8000:
        aryprimes = primesieve.primes(8192)
    
    create_aryary(filename1txt, baryaryvalues, False, 32)
    aryaryvalues = set()
    aryarykeys = set()
    if True:
        for arykey in aryary.keys():
            aryarykeys.add(tuple(arykey))
            if baryaryvalues:
                for ary in aryary[arykey]:
                    aryaryvalues.add(tuple(ary))
    
    t1 = time.time()
    # f1 is txt
    # f2 is csv
    f1a = open(filename1txt.replace(".txt", ".a.txt"), "a") if filename1txt is not None and filename1txt != "" else None
    f1b = open(filename1txt.replace(".txt", ".b.txt"), "a") if filename1txt is not None and filename1txt != "" else None
    f2 = open(filename2csv, "a") if filename2csv is not None and filename2csv != "" else None
    if _mini is None:
        _mini = 2
    print("")
    print("baryaryvalues is " + str(baryaryvalues))
    # print("bhshcalculated is " + str(bhshcalculated))
    # print("bfibonacci is " + str(bfibonacci))
    # print("bfactorial is " + str(bfactorial))
    # print("bpowers is " + str(bpowers))
    print("bdebug is " + str(bdebug))
    print("(_mini, maxi) is " + str((_mini, maxi)))
    print("(_minj, _maxj) is " + str((_minj, maxj)))
    print("")
    for i in range(_mini, maxi + 1):
        qi = Qfraction(1, i)
        minj = i + 1 if _minj is None else max(_minj, i + 1)
        for j in range(minj, maxj + 1):
            if j % i == 0:
                continue
            qj = Qfraction(1, j)
            ca5 = None
            mink = j + 1 if _mink is None else max(_mink, j + 1)
            bcontinue = True
            if not baryaryvalues or (i, j) not in aryaryvalues:
                ca5 = calc_a5(tgt.fraction, [qi, qj], busecache=True)[1]
                if (i, j) not in setprinted:
                    if (ca5 == tgt) or (ca5.denominator <= 72):
                        if (ca5 == tgt):
                            bcontinue = False
                        loop_add([i, j], f1a, f1b, ca5, None, True)
                inext1 = (one - ca5)/(tgt.qfraction - ca5) if tgt.fraction > ca5 else one
                if inext1 > j and inext1.denominator == 1 and tuple(sorted((i, j, inext1.numerator))) not in setprinted and not is_mod_zero(inext1.numerator, [i, j]):
                    ca5 = calc_a5(tgt.fraction, [qi, qj, Qfraction(1, inext1.numerator)], busecache=True)[1]
                    if (ca5 == tgt) or (ca5.denominator <= 72):
                        loop_add([i, j, inext1.numerator], f1a, f1b, ca5, None, True)
            if bcontinue:
                for k in range(mink, maxk + 1):
                    if True and (k == mink or k == maxk or k % 10 == 0):
                        dt = time.time() - t1
                        sdt = str(round(dt/60, 2)) + " minutes" if dt/60 < 120 else str(round(dt/3600, 2)) + " hours"
                        print(f"# ({i}, {j}, {k}) ({sdt})")
                    if k % i == 0 or k % j == 0:
                        continue
                    ca5 = None
                    qk = Qfraction(1, k)
                    minl = k + 1 if _minl is None else max(_minl, k + 1)
                    bcontinue = True
                    if not baryaryvalues or (i, j, k) not in aryaryvalues:
                        aryk, ca5 = calc_a5(tgts[0].fraction, [qi, qj, qk], baddsum=True, busecache=True)
                        if (i, j, k) not in setprinted:
                            if (ca5 == tgt) or (ca5.denominator <= 72):
                                if (ca5 == tgt):
                                    bcontinue = False
                                loop_add([i, j, k], f1a, f1b, ca5, None, True)
                        inext1 = (one - ca5)/(tgt.qfraction - ca5) if tgt.fraction > ca5 else one
                        if inext1 > k and inext1.denominator == 1 and tuple(sorted((i, j, k, inext1.numerator))) not in setprinted and not is_mod_zero(inext1.numerator, [i, j, k]):
                            ca5 = calc_a5(tgt.fraction, [qi, qj, qk, Qfraction(1, inext1.numerator)], q2a=aryk, busecache=False)[1]
                            if (ca5 == tgt) or (ca5.denominator <= 72):
                                loop_add([i, j, k, inext1.numerator], f1a, f1b, ca5, None, True)
                    if bcontinue:
                        lrange = [x for x in range(minl, maxl + 1)]
                        for l in sorted(lrange):
                            if True and (l == minl or l == maxl or l % 20 == 0):
                                dt = time.time() - t1
                                sdt = str(round(dt/60, 2)) + " minutes" if dt/60 < 120 else str(round(dt/3600, 2)) + " hours"
                                print(f"# ({i}, {j}, {k}, {l}) ({sdt})")
                                f2.write(f"{i},{j},{k},{l}\n")
                            if l % i == 0 or l % j == 0 or l % k == 0:
                                continue
                            if bdebug:
                                print("looping for l, " + str([i, j, k, l]))
                            ca5 = None
                            ql = Qfraction(1, l)
                            minm = l + 1 if _minm is None else max(_minm, l + 1)
                            bcontinue = True
                            if not baryaryvalues or (i, j, k, l) not in aryaryvalues:
                                aryl, ca5 = calc_a5(tgts[0].fraction, [qi, qj, qk, ql], q2a=aryk, baddsum=True, busecache=True)
                                if (i, j, k, l) not in setprinted:
                                    if (ca5 == tgt) or (ca5.denominator <= 72):
                                        if (ca5 == tgt):
                                            bcontinue = False
                                        loop_add([i, j, k, l], f1a, f1b, ca5, None, True)
                                    minnext = (16/17) * l
                                    inext1 = (one - ca5)/(tgt.qfraction - ca5) if tgt.fraction > ca5 else one
                                    if inext1 > l and inext1.denominator == 1 and tuple(sorted((i, j, k, l, inext1.numerator))) not in setprinted and not is_mod_zero(inext1.numerator, [i, j, k, l]):
                                        ca5 = calc_a5(tgt.fraction, [qi, qj, qk, ql, Qfraction(1, inext1.numerator)], q2a=aryl, busecache=True)[1]
                                        if (ca5 == tgt) or (ca5.denominator <= 72):
                                            loop_add([i, j, k, l, inext1.numerator], f1a, f1b, ca5, None, True)
                                    if inext1 > minnext and inext1.denominator != 1:
                                        inext1 = fractions.Fraction(math.ceil(inext1.numerator/inext1.denominator))
                                    for inext1, inext2 in get_next(ca5, inext1, tgt, [i, j, k, l]):
                                        
                                        thisary, prevary, bln_is_mod_zero = [], [], True
                                        if inext2 == one or inext2 == zero:
                                            thisary = sorted((qi, qj, qk, ql, Qfraction(1, inext1.numerator)), reverse=True)
                                            prevary = [i, j, k, l]
                                            bln_is_mod_zero = is_mod_zero(inext1.numerator, prevary)
                                            inext2 = one
                                        else:
                                            thisary = sorted((qi, qj, qk, ql, Qfraction(1, inext1.numerator), Qfraction(1, inext2.numerator)), reverse=True)
                                            prevary = [i, j, k, l, inext1.numerator]
                                            bln_is_mod_zero = is_mod_zero(inext2.numerator, prevary)
                                            
                                        if inext2 > 0 and inext2.denominator == 1 and check_numerator(inext2.numerator) and tuple(thisary) not in setprinted and not bln_is_mod_zero:
                                            ca5 = calc_a5(tgt.fraction, thisary, q2a=aryl, busecache=True)[1]
                                            if (ca5 == tgt) or (ca5.denominator <= 72):
                                                loop_add([ta.denominator for ta in thisary], f1a, f1b, ca5, None, True)
                                            if inext2 != one and inext2 != zero:
                                                inext3 = (one - ca5)/(tgt.qfraction - ca5) if tgt.fraction > ca5 else one
                                                if inext3 > 0 and inext3.denominator == 1 and check_numerator(inext3.numerator) and tuple(sorted((i, j, k, l, inext1.numerator, inext2.numerator, inext3.numerator))) not in setprinted and not is_mod_zero(inext3.numerator, [i, j, k, l, inext1.numerator, inext2.numerator]):
                                                    ca5 = calc_a5(tgt.fraction, [qi, qj, qk, ql, Qfraction(1, inext1.numerator), Qfraction(1, inext2.numerator), Qfraction(1, inext3.numerator)], q2a=aryl, busecache=False)[1]
                                                    if (ca5 == tgt) or (ca5.denominator <= 72):
                                                        loop_add([i, j, k, l, inext1.numerator, inext2.numerator, inext3.numerator], f1a, f1b, ca5, None, True)
                            if bcontinue:
                                mrange = [x for x in range(minm, maxm + 1)]
                                for m in sorted(mrange):
                                    if (minl == maxl) and (m == minm or m == maxm or m % 32 == 0):
                                        dt = time.time() - t1
                                        sdt = str(round(dt/60, 2)) + " minutes" if dt/60 < 120 else str(round(dt/3600, 2)) + " hours"
                                        print(f"# ({i}, {j}, {k}, {l}, {m}) ({sdt})")
                                        f2.write(f"{i},{j},{k},{l},{m}\n")
                                        f1a.flush()
                                        f1b.flush()
                                        f2.flush()
                                    if m % i == 0 or m % j == 0 or m % k == 0 or m % l == 0:
                                        continue
                                    if bdebug:
                                        print("looping for m, " + str([i, j, k, l, m]))
                                    ca5 = None
                                    qm = Qfraction(1, m)
                                    minn = m + 1 if _minn is None else max(_minn, m + 1)
                                    bcontinue = True
                                    if not baryaryvalues or (i, j, k, l, m) not in aryaryvalues:
                                        arym, ca5 = calc_a5(tgts[0].fraction, [qi, qj, qk, ql, qm], q2a=aryl, baddsum=True, busecache=True)
                                        
                                        if (i, j, k, l, m) not in setprinted:
                                            if (ca5 == tgt) or (ca5.denominator <= 72):
                                                if (ca5 == tgt):
                                                    bcontinue = False
                                                loop_add([i, j, k, l, m], f1a, f1b, ca5, None, True)
                                            minnext = (16/17) * m
                                            inext1 = (one - ca5)/(tgt.qfraction - ca5) if tgt.fraction > ca5 else one
                                            if inext1 > m and inext1.denominator == 1 and tuple(sorted((i, j, k, l, m, inext1.numerator))) not in setprinted and not is_mod_zero(inext1.numerator, [i, j, k, l, m]):
                                                ca5 = calc_a5(tgt.fraction, [qi, qj, qk, ql, qm, Qfraction(1, inext1.numerator)], q2a=arym, busecache=True)[1]
                                                if (ca5 == tgt) or (ca5.denominator <= 72):
                                                    loop_add([i, j, k, l, m, inext1.numerator], f1a, f1b, ca5, None, True)
                                            if inext1 > minnext and inext1.denominator != 1:
                                                inext1 = fractions.Fraction(math.ceil(inext1.numerator/inext1.denominator))
                                                for inext1, inext2 in get_next(ca5, inext1, tgt, [i, j, k, l, m]):
                                                    
                                                    thisary, prevary, bln_is_mod_zero = [], [], True
                                                    if inext2 == one or inext2 == zero:
                                                        thisary = sorted((qi, qj, qk, ql, qm, Qfraction(1, inext1.numerator)), reverse=True)
                                                        prevary = [i, j, k, l, m]
                                                        bln_is_mod_zero = is_mod_zero(inext1.numerator, prevary)
                                                        inext2 = one
                                                    else:
                                                        thisary = sorted((qi, qj, qk, ql, qm, Qfraction(1, inext1.numerator), Qfraction(1, inext2.numerator)), reverse=True)
                                                        prevary = [i, j, k, l, m, inext1.numerator]
                                                        bln_is_mod_zero = is_mod_zero(inext2.numerator, prevary)
                                                        
                                                    if inext2 > 0 and inext2.denominator == 1 and check_numerator(inext2.numerator) and tuple(thisary) not in setprinted and not bln_is_mod_zero:
                                                        ca5 = calc_a5(tgt.fraction, thisary, q2a=arym, busecache=True)[1]
                                                        if (ca5 == tgt) or (ca5.denominator <= 72):
                                                            if (ca5 == tgt):
                                                                bcontinue = False
                                                            loop_add([ta.denominator for ta in thisary], f1a, f1b, ca5, None, True)
                                                        if inext2 != one and inext2 != zero:
                                                            inext3 = (one - ca5)/(tgt.qfraction - ca5) if tgt.fraction > ca5 else one
                                                            if inext3 > 0 and inext3.denominator == 1 and check_numerator(inext3.numerator) and tuple(sorted((i, j, k, l, m, inext1.numerator, inext2.numerator, inext3.numerator))) not in setprinted and not is_mod_zero(inext3.numerator, [i, j, k, l, m, inext1.numerator, inext2.numerator]):
                                                                ca5 = calc_a5(tgt.fraction, [qi, qj, qk, ql, qm, Qfraction(1, inext1.numerator), Qfraction(1, inext2.numerator), Qfraction(1, inext3.numerator)], q2a=arym, busecache=False)[1]
                                                                if (ca5 == tgt) or (ca5.denominator <= 72):
                                                                    loop_add([i, j, k, l, m, inext1.numerator, inext2.numerator, inext3.numerator], f1a, f1b, ca5, None, True)
                                    if bcontinue:
                                        nrange = [x for x in range(minn, maxn + 1)]
                                        # append_range(nrange, [i, j, k, l, m], maxn)
                                        for n in sorted(nrange):
                                            if n % i == 0 or n % j == 0 or n % k == 0 or n % l == 0 or n % m == 0:
                                                continue
                                            # if (minm == maxm) and (n == nrange[0] or n == maxn or n == nrange[-1] or n % 10 == 0):
                                            if n % 10 == 0 or n == nrange[0] or n == maxn or n == nrange[-1]:
                                                dt = time.time() - t1
                                                sdt = str(round(dt/60, 2)) + " minutes" if dt/60 < 120 else str(round(dt/3600, 2)) + " hours"
                                                print(f"# ({i}, {j}, {k}, {l}, {m}, {n}) ({sdt})")
                                                f2.write(f"{i},{j},{k},{l},{m},{n}\n")
                                                f1a.flush()
                                                f1b.flush()
                                                f2.flush()
                                            if False:
                                                print("looping for n, " + str([i, j, k, l, m, n]))
                                            ca5 = None
                                            qn = Qfraction(1, n)
                                            mino = n + 1 if _mino is None else max(_mino, n + 1)
                                            bcontinue = True
                                            if not baryaryvalues or (i, j, k, l, m, n) not in aryaryvalues:
                                                aryn, ca5 = calc_a5(tgt.fraction, [qi, qj, qk, ql, qm, qn], q2a=arym, baddsum=True, busecache=True)
                                                if (i, j, k, l, m, n) not in setprinted:
                                                    if (ca5 == tgt) or (ca5.denominator <= 72):
                                                        if (ca5 == tgt):
                                                            bcontinue = False
                                                        loop_add([i, j, k, l, m, n], f1a, f1b, ca5, None, True)
                                                    minnext = (16/17) * n
                                                    inext1 = (one - ca5)/(tgt.qfraction - ca5) if tgt.fraction > ca5 else one
                                                    if inext1 > n and inext1.denominator == 1 and tuple(sorted((i, j, k, l, m, n, inext1.numerator))) not in setprinted and not is_mod_zero(inext1.numerator, [i, j, k, l, m, n]):
                                                        ca5 = calc_a5(tgt.fraction, [qi, qj, qk, ql, qm, qn, Qfraction(1, inext1.numerator)], q2a=aryn, busecache=False)[1]
                                                        if (ca5 == tgt) or (ca5.denominator <= 72):
                                                            loop_add([i, j, k, l, m, n, inext1.numerator], f1a, f1b, ca5, None, True)
                                                    if inext1 > minnext and inext1.denominator != 1:
                                                        inext1 = fractions.Fraction(math.ceil(inext1.numerator/inext1.denominator))
                                                        for inext1, inext2 in get_next(ca5, inext1, tgt, [i, j, k, l, m, n]):
                                                            # inext1, inext2 = fractions.Fraction(726470656490, 1), fractions.Fraction(726470656493, 1)
                                                            
                                                            thisary, prevary, bln_is_mod_zero = [], [], True
                                                            if inext2 == one or inext2 == zero:
                                                                thisary = sorted((qi, qj, qk, ql, qm, qn, Qfraction(1, inext1.numerator)), reverse=True)
                                                                prevary = [i, j, k, l, m, n]
                                                                bln_is_mod_zero = is_mod_zero(inext1.numerator, prevary)
                                                                inext2 = one
                                                            else:
                                                                thisary = sorted((qi, qj, qk, ql, qm, qn, Qfraction(1, inext1.numerator), Qfraction(1, inext2.numerator)), reverse=True)
                                                                prevary = [i, j, k, l, m, n, inext1.numerator]
                                                                bln_is_mod_zero = is_mod_zero(inext2.numerator, prevary)
                                                            
                                                            if inext2 > 0 and inext2.denominator == 1 and check_numerator(inext2.numerator) and tuple(thisary) not in setprinted and not bln_is_mod_zero:
                                                                ca5 = calc_a5(tgt.fraction, thisary, q2a=aryn, busecache=False)[1]
                                                                if (ca5 == tgt) or (ca5.denominator <= 72):
                                                                    loop_add([ta.denominator for ta in thisary], f1a, f1b, ca5, None, True)
                                            if bcontinue:
                                                orange = [x for x in range(mino, maxo + 1)]
                                                # append_range(nrange, [i, j, k, l, m, n], maxo)
                                                for o in sorted(orange):
                                                    if o % i == 0 or o % j == 0 or o % k == 0 or o % l == 0 or o % m == 0 or o % n == 0:
                                                        continue
                                                    if o % 32 == 0 or o == orange[0] or o == maxo or o == orange[-1]:
                                                        dt = time.time() - t1
                                                        sdt = str(round(dt/60, 2)) + " minutes" if dt/60 < 120 else str(round(dt/3600, 2)) + " hours"
                                                        print(f"# ({i}, {j}, {k}, {l}, {m}, {n}, {o}) ({sdt})")
                                                    if o % 64 == 0 or o == orange[0] or o == maxo or o == orange[-1]:
                                                        f2.write(f"{i},{j},{k},{l},{m},{n},{o}\n")
                                                    if False:
                                                        print("looping for o, " + str([i, j, k, l, m, n, o]))
                                                    ca5 = None
                                                    qo = Qfraction(1, o)
                                                    minp = o + 1 if _minp is None else max(_minp, o + 1)
                                                    bcontinue = True
                                                    if (not baryaryvalues or (i, j, k, l, m, n, o) not in aryaryvalues) and ((i, j, k, l, m, n, o) not in setprinted):
                                                        aryo, ca5 = calc_a5(tgts[0].fraction, [qi, qj, qk, ql, qm, qn, qo], q2a=aryn, baddsum=True, busecache=True)
                                                        if (i, j, k, l, m, n, o) not in setprinted:
                                                            if (ca5 == tgt) or (ca5.denominator <= 72):
                                                                if (ca5 == tgt):
                                                                    bcontinue = False
                                                                loop_add([i, j, k, l, m, n, o], f1a, f1b, ca5, None, True)
                                                            minnext = (16/17) * o
                                                            inext1 = (one - ca5)/(tgt.qfraction - ca5) if tgt.fraction > ca5 else one
                                                            if inext1 > o and inext1.denominator == 1 and tuple(sorted((i, j, k, l, m, n, o, inext1.numerator))) not in setprinted and not is_mod_zero(inext1.numerator, [i, j, k, l, m, n, o]):
                                                                ca5 = calc_a5(tgt.fraction, [qi, qj, qk, ql, qm, qn, qo, Qfraction(1, inext1.numerator)], q2a=aryo, busecache=False)[1]
                                                                if (ca5 == tgt) or (ca5.denominator <= 72):
                                                                    loop_add([i, j, k, l, m, n, o, inext1.numerator], f1a, f1b, ca5, None, True)
                                                            if inext1 > minnext and inext1.denominator != 1:
                                                                inext1 = fractions.Fraction(math.ceil(inext1.numerator/inext1.denominator))
                                                                for inext1, inext2 in get_next(ca5, inext1, tgt, [i, j, k, l, m, n, o]):
                                                                    if inext2 > 0 and inext2.denominator == 1 and check_numerator(inext2.numerator) and tuple(sorted((i, j, k, l, m, n, o, inext1.numerator, inext2.numerator))) not in setprinted and not is_mod_zero(inext2.numerator, [i, j, k, l, m, n, o, inext1.numerator]):
                                                                        ca5 = calc_a5(tgt.fraction, [qi, qj, qk, ql, qm, qn, qo, Qfraction(1, inext1.numerator), Qfraction(1, inext2.numerator)], q2a=aryo, busecache=False)[1]
                                                                        if (ca5 == tgt) or (ca5.denominator <= 72):
                                                                            loop_add([i, j, k, l, m, n, o, inext1.numerator, inext2.numerator], f1a, f1b, ca5, None, True)
                                                    if bcontinue:
                                                        prange = [x for x in range(minp, maxp + 1)]
                                                        # append_range(prange, [i, j, k, l, m, n, o], maxp)
                                                        for p in sorted(prange):
                                                            if p % i == 0 or p % j == 0 or p % k == 0 or p % l == 0 or p % m == 0 or p % n == 0 or p % o == 0:
                                                                continue
                                                            if False:
                                                                print("looping for p, " + str([i, j, k, l, m, n, o, p]))
                                                            ca5 = None
                                                            qp = Qfraction(1, p)
                                                            minq = p + 1 if _minq is None else max(_minq, p + 1)
                                                            bcontinue = True
                                                            if (not baryaryvalues or (i, j, k, l, m, n, o, p) not in aryaryvalues) and ((i, j, k, l, m, n, o, p) not in setprinted):
                                                                aryp, ca5 = calc_a5(tgts[0].fraction, [qi, qj, qk, ql, qm, qn, qo, qp], q2a=aryo, baddsum=True, busecache=True)
                                                                if (i, j, k, l, m, n, o, p) not in setprinted:
                                                                    if (ca5 == tgt) or (ca5.denominator <= 72):
                                                                        if (ca5 == tgt):
                                                                            bcontinue = False
                                                                        loop_add([i, j, k, l, m, n, o, p], f1a, f1b, ca5, None, True)
                                                                    minnext = (16/17) * p
                                                                    inext1 = (one - ca5)/(tgt.qfraction - ca5) if tgt.fraction > ca5 else one
                                                                    if inext1 > p and inext1.denominator == 1 and tuple(sorted((i, j, k, l, m, n, o, p, inext1.numerator))) not in setprinted and not is_mod_zero(inext1.numerator, [i, j, k, l, m, n, o, p]):
                                                                        ca5 = calc_a5(tgt.fraction, [qi, qj, qk, ql, qm, qn, qo, qp, Qfraction(1, inext1.numerator)], q2a=aryp, busecache=False)[1]
                                                                        if (ca5 == tgt) or (ca5.denominator <= 72):
                                                                            loop_add([i, j, k, l, m, n, o, p, inext1.numerator], f1a, f1b, ca5, None, True)
                                                                    if inext1 > minnext and inext1.denominator != 1:
                                                                        inext1 = fractions.Fraction(math.ceil(inext1.numerator/inext1.denominator))
                                                                        for inext1, inext2 in get_next(ca5, inext1, tgt, [i, j, k, l, m, n, o, p]):
                                                                            if inext2 > 0 and inext2.denominator == 1 and check_numerator(inext2.numerator) and tuple(sorted((i, j, k, l, m, n, o, p, inext1.numerator, inext2.numerator))) not in setprinted and not is_mod_zero(inext2.numerator, [i, j, k, l, m, n, o, p, inext1.numerator]):
                                                                                ca5 = calc_a5(tgt.fraction, [qi, qj, qk, ql, qm, qn, qo, qp, Qfraction(1, inext1.numerator), Qfraction(1, inext2.numerator)], q2a=aryp, busecache=False)[1]
                                                                                if (ca5 == tgt) or (ca5.denominator <= 72):
                                                                                    loop_add([i, j, k, l, m, n, o, p, inext1.numerator, inext2.numerator], f1a, f1b, ca5, None, True)
                                                            if bcontinue:
                                                                qrange = [x for x in range(minq, maxq + 1)]
                                                                # append_range(qrange, [i, j, k, l, m, n, o, p], maxq)
                                                                for q in sorted(qrange):
                                                                    if q % i == 0 or q % j == 0 or q % k == 0 or q % l == 0 or q % m == 0 or q % n == 0 or q % o == 0 or q % p == 0:
                                                                        continue
                                                                    if False:
                                                                        print("looping for q, " + str([i, j, k, l, m, n, o, p, q]))
                                                                    ca5 = None
                                                                    qq = Qfraction(1, q)
                                                                    minr = q + 1 if _minr is None else max(_minr, q + 1)
                                                                    bcontinue = True
                                                                    if (not baryaryvalues or (i, j, k, l, m, n, o, p, q) not in aryaryvalues) and ((i, j, k, l, m, n, o, p, q) not in setprinted):
                                                                        aryq, ca5 = calc_a5(tgts[0].fraction, [qi, qj, qk, ql, qm, qn, qo, qp, qq], q2a=aryp, baddsum=True, busecache=True)
                                                                        if (i, j, k, l, m, n, o, p, q) not in setprinted:
                                                                            if (ca5 == tgt) or (ca5.denominator <= 72):
                                                                                if (ca5 == tgt):
                                                                                    bcontinue = False
                                                                                loop_add([i, j, k, l, m, n, o, p, q], f1a, f1b, ca5, None, True)
                                                                            minnext = (16/17) * q
                                                                            inext1 = (one - ca5)/(tgt.qfraction - ca5) if tgt.fraction > ca5 else one
                                                                            if inext1 > q and inext1.denominator == 1 and tuple(sorted((i, j, k, l, m, n, o, p, q, inext1.numerator))) not in setprinted and not is_mod_zero(inext1.numerator, [i, j, k, l, m, n, o, p, q]):
                                                                                ca5 = calc_a5(tgt.fraction, [qi, qj, qk, ql, qm, qn, qo, qp, qq, Qfraction(1, inext1.numerator)], q2a=aryq, busecache=False)[1]
                                                                                if (ca5 in tgts) or (ca5.denominator <= 72):
                                                                                    loop_add([i, j, k, l, m, n, o, p, q, inext1.numerator], f1a, f1b, ca5, None, True)
                                                                            if inext1 > minnext and inext1.denominator != 1:
                                                                                inext1 = fractions.Fraction(math.ceil(inext1.numerator/inext1.denominator))
                                                                                for inext1, inext2 in get_next(ca5, inext1, tgt, [i, j, k, l, m, n, o, p, q]):
                                                                                    if inext2 > 0 and inext2.denominator == 1 and check_numerator(inext2.numerator) and tuple(sorted((i, j, k, l, m, n, o, p, q, inext1.numerator, inext2.numerator))) not in setprinted and not is_mod_zero(inext2.numerator, [i, j, k, l, m, n, o, p, q, inext1.numerator]):
                                                                                        ca5 = calc_a5(tgt.fraction, [qi, qj, qk, ql, qm, qn, qo, qp, qq, Qfraction(1, inext1.numerator), Qfraction(1, inext2.numerator)], q2a=aryq, busecache=False)[1]
                                                                                        if (ca5 == tgt) or (ca5.denominator <= 72):
                                                                                            loop_add([i, j, k, l, m, n, o, p, q, inext1.numerator, inext2.numerator], f1a, f1b, ca5, None, True)
                                    f1a.flush()
                                    f1b.flush()
                        f2.write(f"{i},{j},{k},{maxl},{maxm}\n")
                        f2.flush()
                        f1a.flush()
                        f1b.flush()
    f1a.close()
    f1b.close()
    f2.close()




def mod_ne_zero(n, a1):
    for a2 in a1:
        if n % a2 != 0:
            return True
    return False



calc_verify_lru_cache = {}
calc_verify_lru_cache_keys = []
def calc_verify(aa, maxlog2, bverbose=False, busecache=True, bquick1=True, bquick2=False):
    global calc_verify_lru_cache
    global calc_verify_lru_cache_keys
    global aryprimes
    t1 = time.time()
    if type(aa[0]) is not list:
        aa = [aa,]
    len_aa = len(aa)
    len_a = [0,] * len_aa
    max_i = [0,] * len_aa
    max_max_i = 0
    hshcount = {}
    aryremoved = []
    idx = -1
    for a in aa:
        idx += 1
        if aryprimes[-1] < max(a):
            aryprimes = primesieve.primes(max(a))
        if 0 in a:
            a.remove(0)
        if 1 in a:
            a.remove(1)
        a = sorted(a)
        for i in range(0, min(len(a), 4)):
            hshcount[a[i]] = 1 if a[i] not in hshcount else hshcount[a[i]] + 1
        len_a[idx] = len(a)
        max_i[idx] = math.prod(a)
        if max_i[idx] > max_max_i:
            max_max_i = max_i[idx]
        
        i = 0
        while i < len_a[idx] - 1:
            i += 1
            j = i
            while j > 0:
                j -= 1
                if i != j and a[i] % a[j] == 0:
                    aryremoved.append(a[i])
                    if bverbose:
                        print("removing " + str(a[i]))
                    a.remove(a[i])
                    len_a[idx] = len(a)
                    i -= 1
    if len(aryremoved) > 0:
        return (fractions.Fraction(-1, 1), -1)
    ary_all = sorted([x for x in hshcount.keys() if hshcount[x] == len_aa])
    
    
    maxt = 3
    
    # print("calc_verify(" + str(a) + ")")
    if False:
        ap = []
        for i in range(0, len(a)):
            for j in range(0, len(aryprimes)):
                p = aryprimes[j]
                if a[i] % p == 0:
                    for ipow in range(2, 4 + 1):
                        if a[i] % (aryprimes[j]**ipow) == 0:
                            p = aryprimes[j]**ipow
                    if p not in ap:
                        if aryprimes[j] in ap:
                            ap.remove(aryprimes[j])
                        ap.append(p)
        
        istart = 0
        # while ap[istart] in [2, 3]:
        #     istart += 1
        max_i = int(math.prod(ap[istart:]))
        if math.log(max_i, 2) > maxlog2:
            return fractions.Fraction(3, 4), 0.75
        
        plus = 0
        plusplus = 1
        for i in range(0, len(a)):
            if max_i % a[i] == 0:
                plusplus *= a[i]
        for p in aryprimes:
            while plusplus % p**2 == 0:
                plusplus = int(plusplus/p)
        # print("max_i is " + str(max_i) + ", plus is " + str(plus) + ", plusplus is " + str(plusplus))
        while mod_ne_zero(max_i + plus, a):
            plus += plusplus
        max_i += plus
    
    
    if busecache:
        cache_key = ([x[:] for x in a])
        if cache_key in calc_verify_lru_cache:
            calc_verify_lru_cache_keys.remove(cache_key)
            calc_verify_lru_cache_keys.append(cache_key)
            tpl = calc_verify_lru_cache[cache_key]
            return tpl[0], tpl[1] 
    
    if bquick1:
        max_max_i = 0
        idx = -1
        for a in aa:
            idx += 1
            max_i[idx] = math.prod(a[0:(len_a[idx] - 1)])
            if max_i[idx] > max_max_i:
                max_max_i = max_i[idx]
        if math.log(max_max_i, 2) > maxlog2:
            return fractions.Fraction(3, 4), 0.75
        if False:
            if bverbose:
                print("max_i is " + ("*".join([str(p) for p in ap])) + " + " + str(plus) + " = " + str(max_i))
        if bverbose:
            print("")
            print(str(a))
        
        sum1, sum2 = [0,] * len_aa, [0,] * len_aa
        for i in range(1, max_max_i + 1):
            for idx in range(0, len_aa):
                for j in range(0, len_a[idx] - 1):
                    if i >= aa[idx][j] and i % aa[idx][j] == 0:
                        sum1[idx] += 1
                        break
        
        idx = -1
        for a in aa:
            idx += 1
            sum1[idx] *= a[-1]
        
        # for [3, 7, 8] sum1 is 3, 6, 7, 9, 12, 14, 15, 18, 21 = 9 * 8 = 72
        if bverbose:
            print(f"sum1 is {sum1[idx]}")
            print(f"max_i is {max_i[idx]}")
        
        thisfloor = 0
        prevfloor = 0
        icount = 0
        for i in range(max_max_i, max_max_i*a[-1] + 1, max_max_i):
            thisfloor = math.floor(i/a[-1])
            if (thisfloor - prevfloor > 0):
                icount = 0
                for imult in range(prevfloor + 1, thisfloor + 1):
                    bfound = False
                    for j in range(0, len_a - 1):
                        if (imult * a[-1]) % a[j] == 0:
                            bfound = True
                            break
                    if bfound:
                        icount += 1
                sum1 += icount
            prevfloor = thisfloor
        
        max_i *= a[-1] 
        # for [3, 7, 8] sum1 is 8, 16, 32, 40, 64, 80, 88, 104, 128, 136, 152, 160 = 12 + 72 = 84
        #               max_i is 3 * 7 * 8 = 168
        if bverbose:
            print("sum1 is " + str(sum1))
            print("max_i is " + str(max_i))
        
        if max_i % sum1 == 0:
            max_i /= sum1
            sum1 = 1
        if sum1 != 1 and max_i != 1:
            for i in range(0, len_a):
                while sum1 % a[i] == 0 and max_i % a[i] == 0:
                    sum1 /= a[i]
                    max_i /= a[i]
                    if sum1 == 1 or max_i == 1:
                        break
        if sum1 != 1 and max_i != 1:
            for i in range(0, len(aryprimes)):
                while sum1 % aryprimes[i] == 0 and max_i % aryprimes[i] == 0:
                    sum1 /= aryprimes[i]
                    max_i /= aryprimes[i]
                    if sum1 == 1 or max_i == 1:
                        break
    elif bquick2:
        max_max_i = 0
        idx = -1
        for a in aa:
            idx += 1
            max_i[idx] /= a[-1]
            if max_i[idx] > max_max_i:
                max_max_i = max_i[idx]
        
        if math.log(max_max_i, 2) > maxlog2:
            return fractions.Fraction(0, 1), 0.0
        if bverbose:
            print(f"max_max_i is {max_max_i:,.0f}")
            print(datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        
        sum1, sum2 = [0,] * len_aa, [0,] * len_aa
        for i in range(1, max_max_i + 1):
            ball = False
            for aa1 in ary_all:
                if i >= aa1 and i % aa1 == 0:
                    ball = True
                    for idx in range(0, len_aa):
                        if i <= max_i[idx]:
                            sum1[idx] += 1
                    break
            if not ball:
                idx = -1
                for a in aa:
                    idx += 1
                    if i <= max_i[idx]:
                        bfound = False
                        for a1 in a:
                            if (a1 not in ary_all) and (i >= a1 and i % a1 == 0):
                                bfound = True
                                sum1[idx] += 1
                                break
                        if not bfound:
                            sum2[idx] += 1
        
        idx = -1
        for a in aa:
            idx += 1
            sum1[idx] *= a[-1]
            sum2[idx] *= a[-1]
            for i in range(a[-1], max_i * a[-1], a[-1]):
                bfound = False
                for a1 in a[:-1]:
                    if i >= a1 and i % a1 == 0:
                        bfound = True
                        break
                if not bfound:
                    sum1[idx] += 1
                    sum2[idx] -= 1
    
    else:
        if math.log(max_max_i, 2) > maxlog2:
            return fractions.Fraction(0, 1), 0.0
        if bverbose:
            print(f"max_max_i is {max_max_i:,.0f}")
            print(datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        
        sum1, sum2 = [0,] * len_aa, [0,] * len_aa
        for i in range(1, max_max_i + 1):
            ball = False
            for aa1 in ary_all:
                if i >= aa1 and i % aa1 == 0:
                    ball = True
                    for idx in range(0, len_aa):
                        if i <= max_i[idx]:
                            sum1[idx] += 1
                    break
            if not ball:
                idx = -1
                for a in aa:
                    idx += 1
                    if i <= max_i[idx]:
                        bfound = False
                        for a1 in a:
                            if (a1 not in ary_all) and (i >= a1 and i % a1 == 0):
                                bfound = True
                                sum1[idx] += 1
                                break
                        if not bfound:
                            sum2[idx] += 1
    
    if bverbose:
        for idx in range(0, len_aa):
            print("")
            print(str(aa[idx]))
            print(f"max_i is {max_i[idx]:,.0f}")
            print(f"sum1 is {sum1[idx]:,.0f}")
            print(f"sum2 is {sum2[idx]:,.0f}")
            sum1sum2 = sum1[idx] + sum2[idx]
            print(f"sum1 + sum2 is {sum1sum2:,.0f}")
            print((fractions.Fraction(int(sum1[idx]), int(max_i[idx])), mpmath.fdiv(sum1[idx], max_i[idx])))
            
        print(f"max_max_i is {max_max_i:,.0f}")
        print("time elapsed " + str(round((time.time() - t1)/60, 2)) + " minutes")
    
    tpl = [(0, 0),] * len_aa
    idx = -1
    for a in aa:
        idx += 1
        cache_key = tuple(a[:])
        tpl[idx] = (fractions.Fraction(int(sum1[idx]), int(max_i[idx])), mpmath.fdiv(sum1[idx], max_i[idx]))
        if busecache and (mpmath.log(max_max_i, 2) > 18 or time.time() - t1 > maxt) and cache_key not in calc_verify_lru_cache:
            if len(calc_verify_lru_cache_keys) >= 16384:
                _ = calc_verify_lru_cache.pop(calc_verify_lru_cache_keys[0])
                calc_verify_lru_cache_keys.remove(calc_verify_lru_cache_keys[0])
            calc_verify_lru_cache_keys.append(cache_key)
            calc_verify_lru_cache[cache_key] = tpl[idx]
    
    return tpl



# len_mult_cache = {i:0 for i in range(2, 14 + 1)}
def reduce(iary1, ilen, p, busecache=True, bcombine=False):
    if ilen == 2:
        if iary1[0] == 1 or iary1[1] == 1:
            return iary1[:], []
    elif ilen == 3:
        if (iary1[0] == 1 and iary1[1] == 1) or (iary1[0] == 1 and iary1[2] == 1) or (iary1[1] == 1 and iary1[2] == 1):
            return iary1[:], []
    # if p > math.sqrt(iary1[-1]):
    #     return iary1[:], []
    if busecache:
        global mult_cache
        global len_mult_cache
        # mult_cache = Qfraction.mult_cache
        # len_mult_cache = Qfraction.len_mult_cache
        if ilen == 2:
            if iary1[1] <= len_mult_cache[2]:
                return ([1, mult_cache[2][tuple(iary1)]], [1]) if tuple(iary1) in mult_cache[2] else (iary1, [])
        elif ilen == 3:
            if iary1[2] <= len_mult_cache[3]:
                return ([1, 1, mult_cache[3][tuple(iary1)]], [1]) if tuple(iary1) in mult_cache[3] else (iary1, [])
            elif iary1[2] <= len_mult_cache[2]:
                aryremoved = []
                if tuple(iary1[0:2]) in mult_cache[2]:
                    iary1, aryremoved = [1, mult_cache[2][tuple(iary1[0:2])], iary1[2]], [1]
                # else:
                #     iary1 = [1, iary1[0] * iary[1], iary1[2]]
                if (min(iary1[1:3]), max(iary1[1:3])) in mult_cache[2]:
                    iary1, aryremoved = [1, 1, mult_cache[2][(min(iary1[1:3]), max(iary1[1:3]))]], [1]
                # else:
                #     iary1 = [1, 1, iary1[1] * iary1[2]]
                return iary1, aryremoved
    iary2 = iary1[:]
    aryremoved = []
    iter = 0
    while iary2[0] % p == 0 and iary2[1] % p == 0 and iter < 16:
        iter += 1
        iary2[0] /= p
        iary2[1] /= p
        if len(aryremoved) > 0 and aryremoved[-1] % p == 0:
            aryremoved[-1] = aryremoved[-1]*p
        else:
            aryremoved.append(p)
    if iter == 16:
        print("Warning, 16 iterations for " + str(iary1) + ", " + str(ilen) + ", " + str(p))
    if ilen == 3:
        # if iary2[0] != 1 and iary2[2] != 1:
        if True:
            while iary2[0] % p == 0 and iary2[2] % p == 0:
                iary2[0] /= p
                iary2[2] /= p
                if len(aryremoved) > 0 and aryremoved[-1] % p == 0:
                    aryremoved[-1] = aryremoved[-1]*p
                else:
                    aryremoved.append(p)
        # if iary2[1] != 1 and iary2[2] != 1:
        if True:
            while iary2[1] % p == 0 and iary2[2] % p == 0:
                # bchanged = True
                iary2[1] /= p
                iary2[2] /= p
                if len(aryremoved) > 0 and aryremoved[-1] % p == 0:
                    aryremoved[-1] = aryremoved[-1]*p
                else:
                    aryremoved.append(p)
    if len(aryremoved) > 0:
        if ilen == 2:
            if iary2[0] % p == 0:
                iary1[1] = iary2[1]
            elif iary2[1] % p == 0:
                iary1[0] = iary2[0]
            else:
                # print("set iary1[1] to be " + str(iary2[1]))
                iary1[1] = iary2[1]
        elif ilen == 3:
            if iary2[0] % p == 0 and iary2[2] % p == 0:
                iary1[1] = iary2[1]
            elif iary2[0] % p == 0 and iary2[1] % p == 0:
                iary1[2] = iary2[2]
            elif iary2[1] % p == 0 and iary2[2] % p == 0:
                iary1[0] = iary2[0]
            elif iary2[0] % p == 0:
                iary1[1] == iary2[1]
                iary1[2] == iary2[2]
            elif iary2[1] % p == 0:
                iary1[0] == iary2[0]
                iary1[2] == iary2[2]
            elif iary2[2] % p == 0:
                iary1[0] == iary2[0]
                iary1[1] == iary2[1]
            else:
                iary1[1] == iary2[1]
                iary1[2] == iary2[2]                
        # if i1a == 1:
        #     i1a = p
        # elif i2a % p != 0:
        #     i2a *= p
    if ilen == 2:
        return ([1, int(iary1[0] * iary1[1])], aryremoved) if bcombine else ([int(i) for i in iary1], aryremoved)
    elif ilen == 3:
        return ([1, 1, int(iary1[0] * iary1[1] * iary1[2])], aryremoved) if bcombine else ([int(i) for i in iary1], aryremoved)



# setprimes = quantum.setprimes
mult_cache = Qfraction.mult_cache
len_mult_cache = Qfraction.len_mult_cache


itertools_combinations = {i:[tpl for tpl in itertools.combinations([j for j in range (0, i)], 2)] for i in range(2, 12 + 1)}
class mult_object:
    # mult_object.mult_object_cache = cache(65536)
    # mo.lru_cache[(2, 3, 5, 7, 11, 13, 17)]
    mult_object_cache = cache(65536)
    
    def __init__(self):
        global mult_object_cache
        self.lru_cache = mult_object.mult_object_cache
    
    # ary1, len_ary1 = [5, 6, 13, 51], 4
    # ary1, len_ary1 = [7, 17, 52, 134], 4
    # ary1, len_ary1 = [3, 17, 52, 134], 4
    # Exception for [1, 1, 210, 1, 352, 1760] with len 6
    # Exception for [1, 1, 210, 1, 352, 1760] with len 6      # 36960
    # Exception for [5, 6, 7, 11, 32, 38, 71, 131] with len 8 # 6531534240?
    # Exception for [1, 1, 210, 1, 1, 10208] with len 6
    # Exception for [6, 7, 11, 32, 38, 109, 124] with len 7
    # def mult(self, ary1, len_ary1, bverbose=False):
    #     before_ary1 = ary1[:]
    #     try:
    #         return self.mult2(ary1, len_ary1)
    #     except:
    #         print("Exception for before:" + str(before_ary1) + ", after:" + str(ary1) + " with len " + str(len_ary1))
    #         raise
    
    # 
    # 
    # calc_a4(None, [3, 7, 11, 38, 95, 256, 320], busecache=False)
    # 
    def mult(self, ary1, len_ary1, bverbose=False):
        global mult_cache
        global len_mult_cache
        global setprimes
        tpl1 = tuple(ary1[:])
        len_tpl1 = len_ary1
        blnprint, strprint = False, ""
        # x, y = True, "", ary1[0], math.prod(ary1[1:])
        if blnprint and ((x % 2 == 0 and y % 2 == 0) or (x % 5 == 0 and y % 5 == 0)):
            strprint = f"{x} * {y} = "
        if len_tpl1 >= 6:
            if tpl1 in self.lru_cache and self.lru_cache[tpl1] != 1:
                return self.lru_cache[tpl1]
            else:
                ballprime = True
                for a1 in ary1:
                    if a1 not in setprimes:
                        ballprime = False
                        break
                if ballprime:
                    self.lru_cache[tpl1] = math.prod(ary1)
                    if tpl1 in self.lru_cache and self.lru_cache[tpl1] != 1:
                        return self.lru_cache[tpl1]
                    return math.prod(ary1)
                elif tpl1[:-1] in self.lru_cache and self.lru_cache[tpl1[:-1]] != 1:
                    ary1 = sorted([ary1[-1], self.lru_cache[tpl1[:-1]]])
                    len_ary1 = 2
        if ary1[-1] <= len_mult_cache[len_ary1]:
            if tuple(ary1) in mult_cache[len_ary1]:
                return mult_cache[len_ary1][tuple(ary1)]
            else:
                if (len_ary1 >= 2 and ary1[1] > ary1[0] and ary1[1] % ary1[0] == 0) or (len_ary1 >= 3 and ary1[2] > ary1[0] and ary1[2] % ary1[0] == 0) or (len_ary1 >= 4 and ary1[3] > ary1[0] and ary1[3] % ary1[0] == 0) or (len_ary1 >= 5 and ary1[4] > ary1[0] and ary1[4] % ary1[0] == 0):
                    ary1[0] = 1
                if (len_ary1 >= 3 and ary1[2] > ary1[1] and ary1[2] % ary1[1] == 0) or (len_ary1 >= 4 and ary1[3] > ary1[1] and ary1[3] % ary1[1] == 0) or (len_ary1 >= 5 and ary1[4] > ary1[1] and ary1[4] % ary1[1] == 0):
                    ary1[1] = 1
                if (len_ary1 >= 4 and ary1[3] > ary1[2] and ary1[3] % ary1[2] == 0) or (len_ary1 >= 5 and ary1[4] > ary1[2] and ary1[4] % ary1[2] == 0):
                    ary1[2] = 1
                if (len_ary1 >= 5 and ary1[4] > ary1[3] and ary1[4] % ary1[3] == 0):
                    ary1[3] = 1
                return math.prod(ary1)
        else:
            tpl1 = tuple(ary1)
            len_tpl1 = len_ary1
            if len_ary1 >= 6 and tpl1[:-2] in self.lru_cache and self.lru_cache[tpl1[:-2]] != 1:
                ary1 = sorted([self.lru_cache[tpl1[:-2]], ary1[-2], ary1[-1]])
                if (ary1[1] > ary1[0] and ary1[1] % ary1[0] == 0) or (ary1[2] > ary1[0] and ary1[2] % ary1[0] == 0):
                    ary1[0] = 1
                if (ary1[2] > ary1[1] and ary1[2] % ary1[1] == 0):
                    ary1[1] = 1
                len_ary1 = 3
            
            if len_ary1 >= 4 and ary1[3] <= len_mult_cache[4]:
                if tuple(ary1[:4]) in mult_cache[4]:
                    ary1[0], ary1[1], ary1[2], ary1[3] = 1, 1, 1, mult_cache[4][tuple(ary1[:4])]
                else:
                    if (ary1[1] > ary1[0] and ary1[1] % ary1[0] == 0) or (ary1[2] > ary1[0] and ary1[2] % ary1[0] == 0) or (ary1[3] > ary1[0] and ary1[3] % ary1[0] == 0):
                        ary1[0] = 1
                    if (ary1[2] > ary1[1] and ary1[2] % ary1[1] == 0) or (ary1[3] > ary1[1] and ary1[3] % ary1[1] == 0):
                        ary1[1] = 1
                    if (ary1[3] > ary1[2] and ary1[3] % ary1[2] == 0):
                        ary1[2] = 1
                    ary1[0], ary1[1], ary1[2], ary1[3] = 1, 1, 1, ary1[0] * ary1[1] * ary1[2] * ary1[3]
                if len_ary1 >= 7 and ary1[6] <= len_mult_cache[3]:
                    if tuple(ary1[4:7]) in mult_cache[3]:
                        ary1[4], ary1[5], ary1[6] = 1, 1, mult_cache[3][tuple(ary1[4:7])]
                    else:
                        if (ary1[5] > ary1[4] and ary1[5] % ary1[4] == 0) or (ary1[6] > ary1[4] and ary1[6] % ary1[4] == 0):
                            ary1[4] = 1
                        if (ary1[6] > ary1[5] and ary1[6] % ary1[5] == 0):
                            ary1[5] = 1
                        ary1[4], ary1[5], ary1[6] = 1, 1, ary1[4] * ary1[5] * ary1[6]
                    if len_ary1 >= 10 and ary1[9] <= len_mult_cache[3]:
                        if tuple(ary1[7:10]) in mult_cache[3]:
                            ary1[7], ary1[8], ary1[9] = 1, 1, mult_cache[3][tuple(ary1[7:10])]
                        else:
                            if (max(ary1[6], ary1[7]) % min(ary1[6], ary1[7]) == 0):
                                ary1[6], ary1[7] = 1, max(ary1[6], ary1[7])
                            else:
                                ary1[6], ary1[7] = 1, ary1[6] * ary1[7]
                    elif len_ary1 >= 9 and ary1[8] <= len_mult_cache[2]:
                        if tuple(ary1[7:9]) in mult_cache[2]:
                            ary1[7], ary1[8] = 1, mult_cache[2][tuple(ary1[7:9])]
                        else:
                            if (max(ary1[7], ary1[8]) % min(ary1[7], ary1[8]) == 0):
                                ary1[7], ary1[8] = 1, max(ary1[7], ary1[8])
                            else:
                                ary1[7], ary1[8] = 1, ary1[7] * ary1[8]
                elif len_ary1 >= 6 and ary1[5] <= len_mult_cache[2]:
                    if tuple(ary1[4:6]) in mult_cache[2]:
                        ary1[4], ary1[5] = 1, mult_cache[2][tuple(ary1[4:6])]
                    else:
                        if (max(ary1[4], ary1[5]) % min(ary1[4], ary1[5]) == 0):
                            ary1[4], ary1[5] = 1, max(ary1[4], ary1[5])
                        else:
                            ary1[4], ary1[5] = 1, ary1[4] * ary1[5]
                    if len_ary1 >= 8 and ary1[7] <= len_mult_cache[2]:
                        if tuple(ary1[6:8]) in mult_cache[2]:
                            ary1[6], ary1[7] = 1, mult_cache[2][tuple(ary1[6:8])]
                        else:
                            if (max(ary1[6], ary1[7]) % min(ary1[6], ary1[7]) == 0):
                                ary1[6], ary1[7] = 1, max(ary1[6], ary1[7])
                            else:
                                ary1[6], ary1[7] = 1, ary1[6] * ary1[7]
                elif len_ary1 >= 5 and max(ary1[3:5]) <= len_mult_cache[2]:
                    if (min(ary1[3:5]), max(ary1[3:5])) in mult_cache[2]:
                        ary1[3], ary1[4] = 1, mult_cache[2][(min(ary1[3:5]), max(ary1[3:5]))]
                    else:
                        if (max(ary1[3], ary1[4]) % min(ary1[3], ary1[4]) == 0):
                            ary1[3], ary1[4] = 1, max(ary1[3], ary1[4])
                        else:
                            ary1[3], ary1[4] = 1, ary1[3] * ary1[4]
            elif len_ary1 >= 3 and ary1[2] <= len_mult_cache[3]:
                if tuple(ary1[:3]) in mult_cache[3]:
                    ary1[0], ary1[1], ary1[2] = 1, 1, mult_cache[3][tuple(ary1[:3])]
                else:
                    # print("line 18083, len_ary1 is " + str(len_ary1))
                    if (ary1[1] > ary1[0] and ary1[1] % ary1[0] == 0) or (ary1[2] > ary1[0] and ary1[2] % ary1[0] == 0):
                        ary1[0] = 1
                    if (ary1[2] > ary1[1] and ary1[2] % ary1[1] == 0):
                        ary1[1] = 1
                    ary1[0], ary1[1], ary1[2] = 1, 1, ary1[0] * ary1[1] * ary1[2]
                if len_ary1 >= 6 and ary1[5] <= len_mult_cache[3]:
                    if tuple(ary1[3:6]) in mult_cache[3]:
                        ary1[3], ary1[4], ary1[5] = 1, 1, mult_cache[3][tuple(ary1[3:6])]
                    else:
                        if (ary1[4] > ary1[3] and ary1[4] % ary1[3] == 0) or (ary1[5] > ary1[3] and ary1[5] % ary1[3] == 0):
                            ary1[3] = 1
                        if (ary1[5] > ary1[4] and ary1[5] % ary1[4] == 0):
                            ary1[4] = 1
                        ary1[3], ary1[4], ary1[5] = 1, 1, ary1[3] * ary1[4] * ary1[5]
                    if len_ary1 >= 9 and ary1[8] <= len_mult_cache[3]:
                        if tuple(ary1[6:9]) in mult_cache[3]:
                            ary1[6], ary1[7], ary1[8] = 1, 1, mult_cache[3][tuple(ary1[6:9])]
                        else:
                            if (ary1[7] > ary1[6] and ary1[7] % ary1[6] == 0) or (ary1[8] > ary1[6] and ary1[8] % ary1[6] == 0):
                                ary1[6] = 1
                            if (ary1[8] > ary1[7] and ary1[8] % ary1[7] == 0):
                                ary1[7] = 1
                            ary1[6], ary1[7], ary1[8] = 1, 1, ary1[6] * ary1[7] * ary1[8]
                        if max(ary1[5], ary1[8]) <= len_mult_cache[2]:
                            if (min(ary1[5], ary1[8]), max(ary1[5], ary1[8])) in mult_cache[2]:
                                ary1[5], ary1[8] = 1, mult_cache[2][(min(ary1[5], ary1[8]), max(ary1[5], ary1[8]))]
                            else:
                                if (max(ary1[5], ary1[8]) % min(ary1[5], ary1[8]) == 0):
                                    ary1[5], ary1[8] = 1, max(ary1[5], ary1[8])
                                else:
                                    ary1[5], ary1[8] = 1, ary1[5] * ary1[8]
                    elif len_ary1 >= 8 and ary1[7] <= len_mult_cache[2]:
                        if tuple(ary1[6:8]) in mult_cache[2]:
                            ary1[6], ary1[7] = 1, mult_cache[2][tuple(ary1[6:8])]
                        else:
                            if (max(ary1[6], ary1[7]) % min(ary1[6], ary1[7]) == 0):
                                ary1[6], ary1[7] = 1, max(ary1[6], ary1[7])
                            else:
                                ary1[6], ary1[7] = 1, ary1[6] * ary1[7]
                        if max(ary1[5], ary1[7]) <= len_mult_cache[2]:
                            if (min(ary1[5], ary1[7]), max(ary1[5], ary1[7])) in mult_cache[2]:
                                ary1[5], ary1[7] = 1, mult_cache[2][(min(ary1[5], ary1[7]), max(ary1[5], ary1[7]))]
                            else:
                                if (max(ary1[5], ary1[7]) % min(ary1[5], ary1[7]) == 0):
                                    ary1[5], ary1[7] = 1, max(ary1[5], ary1[7])
                                else:
                                    ary1[5], ary1[7] = 1, ary1[5] * ary1[7]
                    elif len_ary1 >= 7 and max(ary1[5:7]) <= len_mult_cache[2]:
                        if (min(ary1[5:7]), max(ary1[5:7])) in mult_cache[2]:
                            ary1[5], ary1[6] = 1, mult_cache[2][(min(ary1[5:7]), max(ary1[5:7]))]
                        else:
                            if (max(ary1[5], ary1[6]) % min(ary1[5], ary1[6]) == 0):
                                ary1[5], ary1[6] = 1, max(ary1[5], ary1[6])
                            else:
                                ary1[5], ary1[6] = 1, ary1[5] * ary1[6]
                        if max(ary1[2], ary1[6]) <= len_mult_cache[2]:
                            if (min(ary1[2], ary1[6]), max(ary1[2], ary1[6])) in mult_cache[2]:
                                ary1[2], ary1[6] = 1, mult_cache[2][(min(ary1[2], ary1[6]), max(ary1[2], ary1[6]))]
                            else:
                                if (max(ary1[2], ary1[6]) % min(ary1[2], ary1[6]) == 0):
                                    ary1[2], ary1[6] = 1, max(ary1[2], ary1[6])
                                else:
                                    ary1[2], ary1[6] = 1, ary1[2] * ary1[6]
                elif len_ary1 >= 5 and ary1[4] <= len_mult_cache[2]:
                    if tuple(ary1[3:5]) in mult_cache[2]:
                        ary1[3], ary1[4] = 1, mult_cache[2][tuple(ary1[3:5])]
                    else:
                        if (max(ary1[3], ary1[4]) % min(ary1[3], ary1[4]) == 0):
                            ary1[3], ary1[4] = 1, max(ary1[3], ary1[4])
                        else:
                            ary1[3], ary1[4] = 1, ary1[3] * ary1[4]
                    if len_ary1 >= 7 and ary1[6] <= len_mult_cache[2]:
                        if tuple(ary1[5:7]) in mult_cache[2]:
                            ary1[5], ary1[6] = 1, mult_cache[2][tuple(ary1[5:7])]
                        else:
                            if (max(ary1[5], ary1[6]) % min(ary1[5], ary1[6]) == 0):
                                ary1[5], ary1[6] = 1, max(ary1[5], ary1[6])
                            else:
                                ary1[5], ary1[6] = 1, ary1[5] * ary1[6]
                        if len_ary1 >= 9 and ary1[8] <= len_mult_cache[2]:
                            if tuple(ary1[7:9]) in mult_cache[2]:
                                ary1[7], ary1[8] = 1, mult_cache[2][tuple(ary1[7:9])]
                            else:
                                if (max(ary1[7], ary1[8]) % min(ary1[7], ary1[8]) == 0):
                                    ary1[7], ary1[8] = 1, max(ary1[7], ary1[8])
                                else:
                                    ary1[7], ary1[8] = 1, ary1[7] * ary1[8]
                            if max(ary1[6], ary1[8]) <= len_mult_cache[2]:
                                if (min(ary1[6], ary1[8]), max(ary1[6], ary1[8])) in mult_cache[2]:
                                    ary1[6], ary1[8] = 1, mult_cache[2][(min(ary1[6], ary1[8]), max(ary1[6], ary1[8]))]
                                else:
                                    if (max(ary1[6], ary1[8]) % min(ary1[6], ary1[8]) == 0):
                                        ary1[6], ary1[8] = 1, max(ary1[6], ary1[8])
                                    else:
                                        ary1[6], ary1[8] = 1, ary1[6] * ary1[8]
                        elif len_ary1 >= 8 and max(ary1[6:8]) <= len_mult_cache[2]:
                            if (min(ary1[6:8]), max(ary1[6:8])) in mult_cache[2]:
                                ary1[6], ary1[7] = 1, mult_cache[2][(min(ary1[6:8]), max(ary1[6:8]))]
                            else:
                                if (max(ary1[6], ary1[7]) % min(ary1[6], ary1[7]) == 0):
                                    ary1[6], ary1[7] = 1, max(ary1[6], ary1[7])
                                else:
                                    ary1[6], ary1[7] = 1, ary1[6] * ary1[7]
                            if max(ary1[4], ary1[7]) <= len_mult_cache[2]:
                                if (min(ary1[4], ary1[7]), max(ary1[4], ary1[7])) in mult_cache[2]:
                                    ary1[4], ary1[7] = 1, mult_cache[2][(min(ary1[4], ary1[7]), max(ary1[4], ary1[7]))]
                                else:
                                    if (max(ary1[4], ary1[7]) % min(ary1[4], ary1[7]) == 0):
                                        ary1[4], ary1[7] = 1, max(ary1[4], ary1[7])
                                    else:
                                        ary1[4], ary1[7] = 1, ary1[4] * ary1[7]
                    elif len_ary1 >= 6 and max(ary1[4:6]) <= len_mult_cache[2]:
                        if (min(ary1[4:6]), max(ary1[4:6])) in mult_cache[2]:
                            ary1[4], ary1[5] = 1, mult_cache[2][(min(ary1[4:6]), max(ary1[4:6]))]
                        else:
                            if (max(ary1[4], ary1[5]) % min(ary1[4], ary1[5]) == 0):
                                ary1[4], ary1[5] = 1, max(ary1[4], ary1[5])
                            else:
                                ary1[4], ary1[5] = 1, ary1[4] * ary1[5]
                        if max(ary1[2], ary1[5]) <= len_mult_cache[2]:
                            if (min(ary1[2], ary1[5]), max(ary1[2], ary1[5])) in mult_cache[2]:
                                ary1[2], ary1[5] = 1, mult_cache[2][(min(ary1[2], ary1[5]), max(ary1[2], ary1[5]))]
                            else:
                                if (max(ary1[2], ary1[5]) % min(ary1[2], ary1[5]) == 0):
                                    ary1[2], ary1[5] = 1, max(ary1[2], ary1[5])
                                else:
                                    ary1[2], ary1[5] = 1, ary1[2] * ary1[5]
                elif len_ary1 >= 4 and max(ary1[2:4]) <= len_mult_cache[2]:
                    if (min(ary1[2:4]), max(ary1[2:4])) in mult_cache[2]:
                        ary1[2], ary1[3] = 1, mult_cache[2][(min(ary1[2:4]), max(ary1[2:4]))]
                    else:
                        if (max(ary1[2], ary1[3]) % min(ary1[2], ary1[3]) == 0):
                            ary1[2], ary1[3] = 1, max(ary1[2], ary1[3])
                        else:
                            ary1[2], ary1[3] = 1, ary1[2] * ary1[3]
            elif len_ary1 >= 2 and ary1[1] <= len_mult_cache[2]:
                if tuple(ary1[:2]) in mult_cache[2]:
                    ary1[0], ary1[1] = 1, mult_cache[2][tuple(ary1[:2])]
                else:
                    if (max(ary1[0], ary1[1]) % min(ary1[0], ary1[1]) == 0):
                        ary1[0], ary1[1] = 1, max(ary1[0], ary1[1])
                    else:
                        ary1[0], ary1[1] = 1, ary1[0] * ary1[1]
                if len_ary1 >= 4 and ary1[3] <= len_mult_cache[2]:
                    if tuple(ary1[2:4]) in mult_cache[2]:
                        ary1[2], ary1[3] = 1, mult_cache[2][tuple(ary1[2:4])]
                    else:
                        if (max(ary1[2], ary1[3]) % min(ary1[2], ary1[3]) == 0):
                            ary1[2], ary1[3] = 1, max(ary1[2], ary1[3])
                        else:
                            ary1[2], ary1[3] = 1, ary1[2] * ary1[3]
                    if len_ary1 >= 6 and ary1[5] <= len_mult_cache[2]:
                        if tuple(ary1[4:6]) in mult_cache[2]:
                            ary1[4], ary1[5] = 1, mult_cache[2][tuple(ary1[4:6])]
                        else:
                            if (max(ary1[4], ary1[5]) % min(ary1[4], ary1[5]) == 0):
                                ary1[4], ary1[5] = 1, max(ary1[4], ary1[5])
                            else:
                                ary1[4], ary1[5] = 1, ary1[4] * ary1[5]
                        if len_ary1 >= 8 and ary1[7] <= len_mult_cache[2]:
                            if tuple(ary1[6:8]) in mult_cache[2]:
                                ary1[6], ary1[7] = 1, mult_cache[2][tuple(ary1[6:8])]
                            else:
                                if (max(ary1[6], ary1[7]) % min(ary1[6], ary1[7]) == 0):
                                    ary1[6], ary1[7] = 1, max(ary1[6], ary1[7])
                                else:
                                    ary1[6], ary1[7] = 1, ary1[6] * ary1[7]
                            if max(ary1[5], ary1[7]) <= len_mult_cache[2]:
                                if (min(ary1[5], ary1[7]), max(ary1[5], ary1[7])) in mult_cache[2]:
                                    ary1[5], ary1[7] = 1, mult_cache[2][(min(ary1[5], ary1[7]), max(ary1[5], ary1[7]))]
                                else:
                                    if (max(ary1[5], ary1[7]) and min(ary1[5], ary1[7]) == 0):
                                        ary1[5], ary1[7] = 1, max(ary1[5], ary1[7])
                                    else:
                                        ary1[5], ary1[7] = 1, ary1[5] * ary1[7]
                        elif len_ary1 >= 7 and max(ary1[5:7]) <= len_mult_cache[2]:
                            if (min(ary1[5:7]), max(ary1[5:7])) in mult_cache[2]:
                                ary1[5], ary1[6] = 1, mult_cache[2][(min(ary1[5:7]), max(ary1[5:7]))]
                            else:
                                if (max(ary1[5], ary1[6]) % min(ary1[5], ary1[6]) == 0):
                                    ary1[5], ary1[6] = 1, max(ary1[5], ary1[6])
                                else:
                                    ary1[5], ary1[6] = 1, ary1[5] * ary1[6]
                            if max(ary1[3], ary1[6]) <= len_mult_cache[2]:
                                if (min(ary1[3], ary1[6]), max(ary1[3], ary1[6])) in mult_cache[2]:
                                    ary1[3], ary1[6] = 1, mult_cache[2][(min(ary1[3], ary1[6]), max(ary1[3], ary1[6]))]
                                else:
                                    if (max(ary1[3], ary1[6]) % min(ary1[3], ary1[6]) == 0):
                                        ary1[3], ary1[6] = 1, max(ary1[3], ary1[6])
                                    else:
                                        ary1[3], ary1[6] = 1, ary1[3] * ary1[6]
                    elif len_ary1 >= 5 and ary1[4] <= len_mult_cache[2]:
                        if (min(ary1[3:5]), max(ary1[3:5])) in mult_cache[2]:
                            ary1[3], ary1[4] = 1, mult_cache[2][(min(ary1[3:5]), max(ary1[3:5]))]
                        else:
                            if (max(ary1[3], ary1[4]) % min(ary1[3], ary1[4]) == 0):
                                ary1[3], ary1[4] = 1, max(ary1[3], ary1[4])
                            else:
                                ary1[3], ary1[4] = 1, ary1[3] * ary1[4]
                        if max(ary1[1], ary1[4]) <= len_mult_cache[2]:
                            if (min(ary1[1], ary1[4]), max(ary1[1], ary1[4])) in mult_cache[2]:
                                ary1[1], ary1[4] = 1, mult_cache[2][(min(ary1[1], ary1[4]), max(ary1[1], ary1[4]))]
                            else:
                                if (max(ary1[1], ary1[4]) % min(ary1[1], ary1[4]) == 0):
                                    ary1[1], ary1[4] = 1, max(ary1[1], ary1[4])
                                else:
                                    ary1[1], ary1[4] = 1, ary1[1] * ary1[4]
                elif len_ary1 >= 3 and max(ary1[1:3]) <= len_mult_cache[2]:
                    if (min(ary1[1:3]), max(ary1[1:3])) in mult_cache[2]:
                        ary1[1], ary1[2] = 1, mult_cache[2][(min(ary1[1:3]), max(ary1[1:3]))]
                    else:
                        if (max(ary1[1], ary1[2]) % min(ary1[1], ary1[2]) == 0):
                            ary1[1], ary1[2] = 1, max(ary1[1], ary1[2])
                        else:
                            ary1[1], ary1[2] = 1, ary1[1] * ary1[2]
            ary1 = sorted([x for x in ary1 if x > 1])
            len_ary1 = len(ary1)
            if bverbose:
                print("ary1 is " + str(ary1))
            if len_ary1 == 1:
                if blnprint and strprint != "":
                    print(strprint + str(ary1[0]))
                return ary1[0]
            elif len_ary1 == 2:
                if ary1[1] <= len_mult_cache[2]:
                    if tuple(ary1) in mult_cache[2]:
                        if blnprint and strprint != "":
                            print(strprint + str(mult_cache[2][tuple(ary1)]))
                        return mult_cache[2][tuple(ary1)]
                    else:
                        if (max(ary1[0], ary1[1]) % min(ary1[0], ary1[1]) == 0):
                            if blnprint and strprint != "":
                                print(strprint + str(max(ary1[0], ary1[1])))
                            return max(ary1[0], ary1[1])
                        else:
                            if blnprint and strprint != "":
                                print(strprint + str(ary1[0] * ary1[1]))
                            return ary1[0] * ary1[1]
                elif ary1[0] in setprimes:
                    if ary1[1] % ary1[0] != 0:
                        if blnprint and strprint != "":
                            print(strprint + str(ary1[0] * ary1[1]))
                        return ary1[0] * ary1[1]
                    else: 
                        if blnprint and strprint != "":
                            print(strprint + str(ary1[1]))
                        return ary1[1]
                elif ary1[1] in setprimes:
                    if ary1[0] % ary1[1] != 0:
                        if blnprint and strprint != "":
                            print(strprint + str(ary1[0] * ary1[1]))
                        return ary1[0] * ary1[1] 
                    else:
                        if blnprint and strprint != "":
                            print(strprint + str(ary1[0]))
                        return ary1[0]
            elif len_ary1 == 3:
                if ary1[2] <= len_mult_cache[3]:
                    if tuple(ary1) in mult_cache[3]:
                        return mult_cache[3][tuple(ary1)]
                    else:
                        if (ary1[1] > ary1[0] and ary1[1] % ary1[0] == 0) or (ary1[2] > ary1[0] and ary1[2] % ary1[0] == 0):
                            ary1[0] = 1
                        if (ary1[2] > ary1[1] and ary1[2] % ary1[1] == 0):
                            ary1[1] = 1
                        return ary1[0] * ary1[1] * ary1[2]
                elif ary1[2] <= len_mult_cache[2]:
                    if tuple(ary1[:2]) in mult_cache[2]:
                        ary1 = sorted([ary1[2], mult_cache[2][tuple(ary1[:2])]])
                    else:
                        if (max(ary1[0], ary1[1]) % min(ary1[0], ary1[1]) == 0):
                            ary1 = sorted([ary1[2], max(ary1[0], ary1[1])])
                        else:
                            ary1 = sorted([ary1[2], ary1[0] * ary1[1]])
                    len_ary1 = 2
                    if ary1[1] <= len_mult_cache[2]:
                        if tuple(ary1) in mult_cache[2]:
                            if blnprint and strprint != "":
                                print(strprint + str(mult_cache[2][tuple(ary1)]))
                            return mult_cache[2][tuple(ary1)]
                        else:
                            if (max(ary1[0], ary1[1]) % min(ary1[0], ary1[1]) == 0):
                                if blnprint and strprint != "":
                                    print(strprint + str(max(ary1[0], ary1[1])))
                                return max(ary1[0], ary1[1])
                            else:
                                if blnprint and strprint != "":
                                    print(strprint + str(ary1[0] * ary1[1]))
                                return ary1[0] * ary1[1]
                if len_ary1 == 2:
                    if ary1[0] in setprimes:
                        if ary1[1] % ary1[0] != 0:
                            if blnprint and strprint != "":
                                print(strprint + str(ary1[0] * ary1[1]))
                            return ary1[0] * ary1[1]
                        else: 
                            if blnprint and strprint != "":
                                print(strprint + str(ary1[1]))
                            return ary1[1] 
                    elif ary1[1] in setprimes:
                        if ary1[0] % ary1[1] != 0:
                            if blnprint and strprint != "":
                                print(strprint + str(ary1[0] * ary1[1]))
                            return ary1[0] * ary1[1] 
                        else:
                            if blnprint and strprint != "":
                                print(strprint + str(ary1[0]))
                            return ary1[0] 
                elif len_ary1 == 3:
                    if ary1[0] in setprimes and ary1[1] in setprimes:
                        if ary1[2] % ary1[0] != 0 and ary1[2] % ary1[1] != 0:
                            if blnprint and strprint != "":
                                print(strprint + str(ary1[0] * ary1[1] * ary1[2]))
                            return ary1[0] * ary1[1] * ary1[2]
                        elif ary1[2] % ary1[0] == 0 and ary1[2] % ary1[1] == 0: 
                            if blnprint and strprint != "":
                                print(strprint + str(ary1[2]))
                            return ary1[2]
                    elif ary1[1] in setprimes and ary1[2] in setprimes:
                        if ary1[0] % ary1[1] != 0 and ary1[0] % ary1[2] != 0:
                            if blnprint and strprint != "":
                                print(strprint + str(ary1[0] * ary1[1] * ary1[2]))
                            return ary1[0] * ary1[1] * ary1[2]
                        elif ary1[0] % ary1[1] == 0 and ary1[0] % ary1[2] == 0: 
                            if blnprint and strprint != "":
                                print(strprint + str(ary1[0]))
                            return ary1[0]
                    elif ary1[0] in setprimes and ary1[2] in setprimes:
                        if ary1[1] % ary1[0] != 0 and ary1[1] % ary1[2] != 0:
                            if blnprint and strprint != "":
                                print(strprint + str(ary1[0] * ary1[1] * ary1[2]))
                            return ary1[0] * ary1[1] * ary1[2]
                        elif ary1[1] % ary1[0] == 0 and ary1[1] % ary1[2] == 0: 
                            if blnprint and strprint != "":
                                print(strprint + str(ary1[1]))
                            return ary1[1]
            global aryprimes
            global arysmallprimes
            global itertools_combinations
            global lenfactorscount
            maxp = int(math.sqrt(ary1[-1]))
            # maxp = ary1[-1]//2
            # print("before itertools_combinations, ary1 is " + str(ary1))
            # itertools_combinations is a hash
            for idx in itertools_combinations[len_ary1]:
                if ary1[idx[0]] == 1 or ary1[idx[1]] == 1:
                    continue
                if ary1[idx[0]] <= len_mult_cache[2] and ary1[idx[1]] <= len_mult_cache[2]:
                    if (ary1[idx[0]], ary1[idx[1]]) in mult_cache[2]:
                        self.bchanged = True
                        ary1[idx[0]], ary1[idx[1]] = 1, mult_cache[2][(ary1[idx[0]], ary1[idx[1]])]
                        # print("line 18146, ary1 is " + str(ary1))
                elif ary1[idx[0]] <= lenfactorscount and ary1[idx[1]] <= lenfactorscount:
                    fact0 = factorscount(ary1[idx[0]], busecache=True)
                    fact1 = factorscount(ary1[idx[1]], busecache=True)
                    bchanged0 = False
                    bchanged1 = False
                    if len(fact0) <= len(fact1):
                        # [f0 for f0 in fact0.keys()]
                        for f0 in [k0 for k0 in fact0.keys()]:
                            if f0 in fact1:
                                if fact0[f0] > fact1[f0]:
                                    bchanged1 = True
                                    _ = fact1.pop(f0)
                                elif fact0[f0] < fact1[f0]:
                                    bchanged0 = True
                                    _ = fact0.pop(f0)
                                else:
                                    bchanged0 = True
                                    _ = fact0.pop(f0)
                    else:
                        # [f1 for f1 in fact1.keys()]
                        for f1 in [k1 for k1 in fact1.keys()]:
                            if f1 in fact0:
                                if fact0[f1] > fact1[f1]:
                                    bchanged1 = True
                                    _ = fact1.pop(f1)
                                elif fact0[f1] < fact1[f1]:
                                    bchanged0 = True
                                    _ = fact0.pop(f1)
                                else:
                                    bchanged0 = True
                                    _ = fact0.pop(f1)
                    if bchanged0:
                        ary1[idx[0]] = math.prod(f0**fact0[f0] for f0 in fact0.keys()) if len(fact0) > 0 else 1
                        # print("bchanged0, ary1 is " + str(ary1))
                    if bchanged1:
                        # [f"{f1}**{fact1[f1]}" for f1 in fact1.keys()]
                        ary1[idx[1]] = math.prod(f1**fact1[f1] for f1 in fact1.keys()) if len(fact1) > 0 else 1
                        # print("bchanged1, ary1 is " + str(ary1))
                else:
                    for p in aryprimes:
                        # if (ary1[idx[0]] not in arysmallprimes) or (ary1[idx[1]] not in arysmallprimes) and (ary1[idx[0]] % ary1[idx[1]] != 0) and (ary1[idx[1]] % ary1[idx[0]] != 0):
                        (ary1[idx[0]], ary1[idx[1]]), arychanged = reduce([ary1[idx[0]], ary1[idx[1]]], 2, p, busecache=True, bcombine=False)
                        # if len(arychanged) > 0:
                        #     ary1[idx[0]], ary1[idx[1]] = ary2
                        #     print("len(arychanged) > 0, ary1 is " + str(ary1))
                        if p >= maxp:
                            break
            # print("ary1 is " + str(ary1))
            if len_tpl1 >= 5:
                self.lru_cache[tpl1] = math.prod(ary1)
                if blnprint and strprint != "":
                    print(strprint + str(self.lru_cache[tpl1]))
                if tpl1 in self.lru_cache and self.lru_cache[tpl1] != 1:
                    return self.lru_cache[tpl1]
            if blnprint and strprint != "":
                print(strprint + str(math.prod(ary1)))
            return math.prod(ary1)




calc_a4_cache_small = cache(65536)
calc_a4_cache_large = cache(131072)
def calc_a4(tgt, a, a2a=[], baddsum=False, banytgt=False, busecache=True, bverbose=False):
    global aryprimes
    global calc_a4_cache_small
    global calc_a4_cache_large
    # print("calc_a4(" + str(a) + ")")
    one = fractions.Fraction(1, 1)
    mo = mult_object()
    a = [int(x) for x in a if x >= 2 and x % 1 == 0]
    len_a = len(a)
    len_a2a = len(a2a)
    if len_a <= 1:
        return [fractions.Fraction(1, a[0])], fractions.Fraction(1, a[0])
    
    if not busecache or ((tuple(a) not in calc_a4_cache_small) and (tuple(a) not in calc_a4_cache_large)):
        if aryprimes[-1] < max(a):
            if max(a) < 94906265:
                aryprimes = primesieve.primes(max(a))
            elif math.sqrt(max(a)) > 94906265:
                aryprimes = primesieve.primes(math.sqrt(max(a)))
            elif aryprimes[-1] < 94906265:
                aryprimes = primesieve.primes(2**24)
    a2b = []
    if busecache and tuple(a) in calc_a4_cache_large:
        a2b, rslt = calc_a4_cache_large[a]
    elif not busecache:
        if tuple(a) in calc_a4_cache_small:
            # try:
            a2b, rslt = calc_a4_cache_small[a]
            # except ValueError:
            # print("Not found in calc_a4_cache_small " + str(a))
        elif tuple(a) in calc_a4_cache_large:
            # try:
            a2b, rslt = calc_a4_cache_large[a]        
            # except ValueError:
            # print("Not found in calc_a4_cache_large " + str(a))
    if len(a2b) == 0:
        a2b = a2a[:] + [fractions.Fraction(0, 1)] * (12 - len_a2a) if len_a2a > 0 else [fractions.Fraction(1, a[0]), fractions.Fraction(0, 1), fractions.Fraction(0, 1), fractions.Fraction(0, 1), fractions.Fraction(0, 1), fractions.Fraction(0, 1), fractions.Fraction(0, 1), fractions.Fraction(0, 1), fractions.Fraction(0, 1), fractions.Fraction(0, 1), fractions.Fraction(0, 1), fractions.Fraction(0, 1)]
        if len_a >= 2 and len_a2a < 2:
            a2b[1] = fractions.Fraction(1, a[1]) - fractions.Fraction(1, mo.mult([a[0], a[1]], 2))
            
        if len_a >= 3 and len_a2a < 3:
            a2b[2] = fractions.Fraction(1, a[2]) - fractions.Fraction(1, mo.mult([a[0], a[2]], 2)) - fractions.Fraction(1, mo.mult([a[1], a[2]], 2)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2]], 3))
            
        if len_a >= 4 and len_a2a < 4:
            a2b[3] = fractions.Fraction(1, a[3]) - fractions.Fraction(1, mo.mult([a[0], a[3]], 2)) - fractions.Fraction(1, mo.mult([a[1], a[3]], 2)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3]], 3)) - fractions.Fraction(1, mo.mult([a[2], a[3]], 2)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3]], 3)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3]], 4))
            
        if len_a >= 5 and len_a2a < 5:
            # 1/a[4] - 1/(a[0] * a[4]) - 1/(a[1] * a[4]) + 1/(a[0] * a[1] * a[4])
            a2b[4] = fractions.Fraction(1, a[4]) - fractions.Fraction(1, mo.mult([a[0], a[4]], 2)) - fractions.Fraction(1, mo.mult([a[1], a[4]], 2)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4]], 3)) - fractions.Fraction(1, mo.mult([a[2], a[4]], 2)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4]], 3)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4]], 4)) - fractions.Fraction(1, mo.mult([a[3], a[4]], 2)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4]], 3)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4]], 3)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4]], 5))
            
        if len_a >= 6 and len_a2a < 6:
            a2b[5] = fractions.Fraction(1, a[5]) - fractions.Fraction(1, mo.mult([a[0], a[5]], 2)) - fractions.Fraction(1, mo.mult([a[1], a[5]], 2)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[5]], 3)) - fractions.Fraction(1, mo.mult([a[2], a[5]], 2)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[5]], 3)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[5]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5]], 4)) - fractions.Fraction(1, mo.mult([a[3], a[5]], 2)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[5]], 3)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[5]], 3)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[5]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5]], 5)) - fractions.Fraction(1, mo.mult([a[4], a[5]], 2)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[5]], 3)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[5]], 3)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[5]], 3)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[5]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5]], 5)) - fractions.Fraction(1, mo.mult(a[0:6], 6))
            
        if len_a >= 7 and len_a2a < 7:
            #        fractions.Fraction(1, a[6]) - fractions.Fraction(1, mo.mult([a[5], a[6]], 2)) - fractions.Fraction(1, mo.mult([a[4], a[6]], 2)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[6]], 3)) - fractions.Fraction(1, mo.mult([a[3], a[6]], 2)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[6]], 3)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[6]], 3)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[6]], 2)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[6]], 3)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[6]], 3)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[6]], 3)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[6]], 2)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[6]], 3)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[6]], 3)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[6]], 3)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[6]], 3)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[6]], 2)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[6]], 3)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[6]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[6]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[6]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[6]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6]], 6)) + fractions.Fraction(1, mo.mult(a[0:7], 7))
            a2b[6] = fractions.Fraction(1, a[6]) - fractions.Fraction(1, mo.mult([a[0], a[6]], 2)) - fractions.Fraction(1, mo.mult([a[1], a[6]], 2)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[6]], 3)) - fractions.Fraction(1, mo.mult([a[2], a[6]], 2)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[6]], 3)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[6]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[3], a[6]], 2)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[6]], 3)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[6]], 3)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[6]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6]], 5)) - fractions.Fraction(1, mo.mult([a[4], a[6]], 2)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[6]], 3)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[6]], 3)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[6]], 3)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[6]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6]], 6)) - fractions.Fraction(1, mo.mult([a[5], a[6]], 2)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[6]], 3)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[6]], 3)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[6]], 3)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[6]], 3)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[6]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6]], 6)) + fractions.Fraction(1, mo.mult(a[0:7], 7))
            
        if len_a >= 8 and len_a2a < 8:
            a2b[7] = fractions.Fraction(1, a[7]) - fractions.Fraction(1, mo.mult([a[6], a[7]], 2)) - fractions.Fraction(1, mo.mult([a[5], a[7]], 2)) + fractions.Fraction(1, mo.mult([a[5], a[6], a[7]], 3)) - fractions.Fraction(1, mo.mult([a[4], a[7]], 2)) + fractions.Fraction(1, mo.mult([a[4], a[6], a[7]], 3)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[7]], 3)) - fractions.Fraction(1, mo.mult([a[4], a[5], a[6], a[7]], 4)) - fractions.Fraction(1, mo.mult([a[3], a[7]], 2)) + fractions.Fraction(1, mo.mult([a[3], a[6], a[7]], 3)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[7]], 3)) - fractions.Fraction(1, mo.mult([a[3], a[5], a[6], a[7]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[7]], 3)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[6], a[7]], 4)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[7]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6], a[7]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[7]], 2)) + fractions.Fraction(1, mo.mult([a[2], a[6], a[7]], 3)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[7]], 3)) - fractions.Fraction(1, mo.mult([a[2], a[5], a[6], a[7]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[7]], 3)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[6], a[7]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[7]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6], a[7]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[7]], 3)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[6], a[7]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[7]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6], a[7]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[7]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6], a[7]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[7]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6], a[7]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[7]], 2)) + fractions.Fraction(1, mo.mult([a[1], a[6], a[7]], 3)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[7]], 3)) - fractions.Fraction(1, mo.mult([a[1], a[5], a[6], a[7]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[7]], 3)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[6], a[7]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[7]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6], a[7]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[7]], 3)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[6], a[7]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[7]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6], a[7]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[7]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6], a[7]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[7]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6], a[7]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[7]], 3)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[6], a[7]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[7]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6], a[7]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[7]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6], a[7]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[7]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6], a[7]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[7]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6], a[7]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[7]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6], a[7]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[7]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6], a[7]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[7]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6], a[7]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[7]], 2)) + fractions.Fraction(1, mo.mult([a[0], a[6], a[7]], 3)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[7]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[5], a[6], a[7]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[7]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[6], a[7]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[7]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6], a[7]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[7]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[6], a[7]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[7]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6], a[7]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[7]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6], a[7]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[7]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6], a[7]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[7]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[6], a[7]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[7]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6], a[7]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[7]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6], a[7]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[7]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6], a[7]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[7]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6], a[7]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[7]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6], a[7]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[7]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6], a[7]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[7]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6], a[7]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[7]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[6], a[7]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[7]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6], a[7]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[7]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6], a[7]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[7]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6], a[7]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[7]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6], a[7]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[7]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6], a[7]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[7]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6], a[7]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[7]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6], a[7]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[7]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6], a[7]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[7]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6], a[7]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[7]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6], a[7]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[7]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6], a[7]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[7]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6], a[7]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[7]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6], a[7]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[7]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6], a[7]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[7]], 7)) - fractions.Fraction(1, mo.mult(a[0:8], 8))
            
        if len_a >= 9 and len_a2a < 9:
            a2b[8] = fractions.Fraction(1, a[8]) - fractions.Fraction(1, mo.mult([a[7], a[8]], 2)) - fractions.Fraction(1, mo.mult([a[6], a[8]], 2)) + fractions.Fraction(1, mo.mult([a[6], a[7], a[8]], 3)) - fractions.Fraction(1, mo.mult([a[5], a[8]], 2)) + fractions.Fraction(1, mo.mult([a[5], a[7], a[8]], 3)) + fractions.Fraction(1, mo.mult([a[5], a[6], a[8]], 3)) - fractions.Fraction(1, mo.mult([a[5], a[6], a[7], a[8]], 4)) - fractions.Fraction(1, mo.mult([a[4], a[8]], 2)) + fractions.Fraction(1, mo.mult([a[4], a[7], a[8]], 3)) + fractions.Fraction(1, mo.mult([a[4], a[6], a[8]], 3)) - fractions.Fraction(1, mo.mult([a[4], a[6], a[7], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[8]], 3)) - fractions.Fraction(1, mo.mult([a[4], a[5], a[7], a[8]], 4)) - fractions.Fraction(1, mo.mult([a[4], a[5], a[6], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[6], a[7], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[8]], 2)) + fractions.Fraction(1, mo.mult([a[3], a[7], a[8]], 3)) + fractions.Fraction(1, mo.mult([a[3], a[6], a[8]], 3)) - fractions.Fraction(1, mo.mult([a[3], a[6], a[7], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[8]], 3)) - fractions.Fraction(1, mo.mult([a[3], a[5], a[7], a[8]], 4)) - fractions.Fraction(1, mo.mult([a[3], a[5], a[6], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[6], a[7], a[8]], 5)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[8]], 3)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[7], a[8]], 4)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[6], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[6], a[7], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[7], a[8]], 5)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6], a[7], a[8]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[8]], 2)) + fractions.Fraction(1, mo.mult([a[2], a[7], a[8]], 3)) + fractions.Fraction(1, mo.mult([a[2], a[6], a[8]], 3)) - fractions.Fraction(1, mo.mult([a[2], a[6], a[7], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[8]], 3)) - fractions.Fraction(1, mo.mult([a[2], a[5], a[7], a[8]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[5], a[6], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[6], a[7], a[8]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[8]], 3)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[7], a[8]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[6], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[6], a[7], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[7], a[8]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6], a[7], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[8]], 3)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[7], a[8]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[6], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[6], a[7], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[7], a[8]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6], a[7], a[8]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[7], a[8]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6], a[7], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[7], a[8]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6], a[7], a[8]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[8]], 2)) + fractions.Fraction(1, mo.mult([a[1], a[7], a[8]], 3)) + fractions.Fraction(1, mo.mult([a[1], a[6], a[8]], 3)) - fractions.Fraction(1, mo.mult([a[1], a[6], a[7], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[8]], 3)) - fractions.Fraction(1, mo.mult([a[1], a[5], a[7], a[8]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[5], a[6], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[6], a[7], a[8]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[8]], 3)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[7], a[8]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[6], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[6], a[7], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[7], a[8]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6], a[7], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[8]], 3)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[7], a[8]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[6], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[6], a[7], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[7], a[8]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6], a[7], a[8]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[7], a[8]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6], a[7], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[7], a[8]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6], a[7], a[8]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[8]], 3)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[7], a[8]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[6], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[6], a[7], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[7], a[8]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6], a[7], a[8]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[7], a[8]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6], a[7], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[7], a[8]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6], a[7], a[8]], 7))
            a2b[8] += -fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[7], a[8]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6], a[7], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[7], a[8]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6], a[7], a[8]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[7], a[8]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6], a[7], a[8]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[7], a[8]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6], a[8]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[8]], 2)) + fractions.Fraction(1, mo.mult([a[0], a[7], a[8]], 3)) + fractions.Fraction(1, mo.mult([a[0], a[6], a[8]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[6], a[7], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[8]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[5], a[7], a[8]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[5], a[6], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[6], a[7], a[8]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[8]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[7], a[8]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[6], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[6], a[7], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[7], a[8]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6], a[7], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[8]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[7], a[8]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[6], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[6], a[7], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[7], a[8]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6], a[7], a[8]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[7], a[8]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6], a[7], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[7], a[8]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6], a[7], a[8]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[8]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[7], a[8]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[6], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[6], a[7], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[7], a[8]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6], a[7], a[8]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[7], a[8]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6], a[7], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[7], a[8]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6], a[7], a[8]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[7], a[8]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6], a[7], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[7], a[8]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6], a[7], a[8]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[7], a[8]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6], a[7], a[8]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[7], a[8]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6], a[8]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6], a[7], a[8]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[8]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[7], a[8]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[6], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[6], a[7], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[7], a[8]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6], a[7], a[8]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[7], a[8]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6], a[7], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[7], a[8]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6], a[7], a[8]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[7], a[8]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6], a[7], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[7], a[8]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6], a[7], a[8]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[7], a[8]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6], a[7], a[8]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[7], a[8]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6], a[8]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[8]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[8]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[7], a[8]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6], a[7], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[7], a[8]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6], a[7], a[8]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[7], a[8]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6], a[7], a[8]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[7], a[8]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6], a[8]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6], a[7], a[8]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[8]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[7], a[8]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6], a[7], a[8]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[7], a[8]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6], a[8]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6], a[7], a[8]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[8]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[7], a[8]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6], a[8]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6], a[7], a[8]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[8]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[7], a[8]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[8]], 8)) + fractions.Fraction(1, mo.mult(a[0:9], 9))
                        
        if len_a >= 10 and len_a2a < 10:
            a2b[9] = fractions.Fraction(1, a[9]) - fractions.Fraction(1, mo.mult([a[0], a[9]], 2)) - fractions.Fraction(1, mo.mult([a[1], a[9]], 2)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[9]], 3)) - fractions.Fraction(1, mo.mult([a[2], a[9]], 2)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[9]], 3)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[9]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[3], a[9]], 2)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[9]], 3)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[9]], 3)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[9]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[9]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[9]], 5)) - fractions.Fraction(1, mo.mult([a[4], a[9]], 2)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[9]], 3)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[9]], 3)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[9]], 3)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[9]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[9]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[9]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[5], a[9]], 2)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[9]], 3)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[9]], 3)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[9]], 3)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[9]], 3)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[9]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[9]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[9]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[9]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[9]], 7)) - fractions.Fraction(1, mo.mult([a[6], a[9]], 2)) + fractions.Fraction(1, mo.mult([a[0], a[6], a[9]], 3)) + fractions.Fraction(1, mo.mult([a[1], a[6], a[9]], 3)) + fractions.Fraction(1, mo.mult([a[2], a[6], a[9]], 3)) + fractions.Fraction(1, mo.mult([a[3], a[6], a[9]], 3)) + fractions.Fraction(1, mo.mult([a[4], a[6], a[9]], 3)) + fractions.Fraction(1, mo.mult([a[5], a[6], a[9]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[6], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[6], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[6], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[6], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[6], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[6], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[6], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[6], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[6], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[6], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[5], a[6], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[5], a[6], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[5], a[6], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[3], a[5], a[6], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[4], a[5], a[6], a[9]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6], a[9]], 5))
            a2b[9] += -fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6], a[9]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6], a[9]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[7], a[9]], 2)) + fractions.Fraction(1, mo.mult([a[0], a[7], a[9]], 3)) + fractions.Fraction(1, mo.mult([a[1], a[7], a[9]], 3)) + fractions.Fraction(1, mo.mult([a[2], a[7], a[9]], 3)) + fractions.Fraction(1, mo.mult([a[3], a[7], a[9]], 3)) + fractions.Fraction(1, mo.mult([a[4], a[7], a[9]], 3)) + fractions.Fraction(1, mo.mult([a[5], a[7], a[9]], 3)) + fractions.Fraction(1, mo.mult([a[6], a[7], a[9]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[7], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[7], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[7], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[7], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[7], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[7], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[7], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[7], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[7], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[7], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[5], a[7], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[5], a[7], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[5], a[7], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[3], a[5], a[7], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[4], a[5], a[7], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[6], a[7], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[6], a[7], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[6], a[7], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[3], a[6], a[7], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[4], a[6], a[7], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[5], a[6], a[7], a[9]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[6], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[6], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[6], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[6], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[6], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[6], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[6], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[6], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[6], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[6], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[6], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[6], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[6], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[6], a[7], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[6], a[7], a[9]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6], a[7], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6], a[7], a[9]], 6))
            a2b[9] += fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[7], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[7], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[7], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[7], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[7], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[7], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6], a[7], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6], a[7], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6], a[7], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6], a[7], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6], a[7], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6], a[7], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6], a[7], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6], a[7], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6], a[7], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6], a[7], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6], a[7], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6], a[7], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6], a[7], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6], a[7], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6], a[7], a[9]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[7], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6], a[7], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6], a[7], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6], a[7], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6], a[7], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[9]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[9]], 9)) - fractions.Fraction(1, mo.mult([a[8], a[9]], 2)) + fractions.Fraction(1, mo.mult([a[0], a[8], a[9]], 3)) + fractions.Fraction(1, mo.mult([a[1], a[8], a[9]], 3)) + fractions.Fraction(1, mo.mult([a[2], a[8], a[9]], 3)) + fractions.Fraction(1, mo.mult([a[3], a[8], a[9]], 3)) + fractions.Fraction(1, mo.mult([a[4], a[8], a[9]], 3)) + fractions.Fraction(1, mo.mult([a[5], a[8], a[9]], 3)) + fractions.Fraction(1, mo.mult([a[6], a[8], a[9]], 3)) + fractions.Fraction(1, mo.mult([a[7], a[8], a[9]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[8], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[8], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[8], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[8], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[8], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[8], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[8], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[8], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[8], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[8], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[5], a[8], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[5], a[8], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[5], a[8], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[3], a[5], a[8], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[4], a[5], a[8], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[6], a[8], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[6], a[8], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[6], a[8], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[3], a[6], a[8], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[4], a[6], a[8], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[5], a[6], a[8], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[7], a[8], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[7], a[8], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[7], a[8], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[3], a[7], a[8], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[4], a[7], a[8], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[5], a[7], a[8], a[9]], 4)) - fractions.Fraction(1, mo.mult([a[6], a[7], a[8], a[9]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[6], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[6], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[6], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[6], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[6], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[6], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[6], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[6], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[6], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[6], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[6], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[6], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[6], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[6], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[6], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[7], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[7], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[7], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[7], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[7], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[7], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[7], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[7], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[7], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[7], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[7], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[7], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[7], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[7], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[7], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[6], a[7], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[6], a[7], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[6], a[7], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[3], a[6], a[7], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[4], a[6], a[7], a[8], a[9]], 5)) + fractions.Fraction(1, mo.mult([a[5], a[6], a[7], a[8], a[9]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[6], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[6], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[6], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[6], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[6], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[6], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[6], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[6], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[6], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[6], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[5], a[6], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[5], a[6], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[5], a[6], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[3], a[5], a[6], a[7], a[8], a[9]], 6)) - fractions.Fraction(1, mo.mult([a[4], a[5], a[6], a[7], a[8], a[9]], 6))
            a2b[9] += fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6], a[7], a[8], a[9]], 7)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6], a[7], a[8], a[9]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[8], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6], a[8], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6], a[8], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6], a[8], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6], a[8], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6], a[8], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6], a[8], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[7], a[8], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[7], a[8], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[7], a[8], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[7], a[8], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[7], a[8], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[7], a[8], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6], a[7], a[8], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6], a[7], a[8], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6], a[7], a[8], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6], a[7], a[8], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6], a[7], a[8], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6], a[7], a[8], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6], a[7], a[8], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6], a[7], a[8], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6], a[7], a[8], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6], a[7], a[8], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6], a[7], a[8], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6], a[7], a[8], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6], a[7], a[8], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[9]], 8)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[8], a[9]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[7], a[8], a[9]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6], a[7], a[8], a[9]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6], a[7], a[8], a[9]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6], a[7], a[8], a[9]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[9]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9]], 9)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9]], 9)) - fractions.Fraction(1, mo.mult(a[0:10], 10))
            
        if len_a >= 11 and len_a2a < 11:
            a2b[10] = fractions.Fraction(1, a[10]) - fractions.Fraction(1, mo.mult([a[9], a[10]], 2)) - fractions.Fraction(1, mo.mult([a[8], a[10]], 2)) + fractions.Fraction(1, mo.mult([a[8], a[9], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[7], a[10]], 2)) + fractions.Fraction(1, mo.mult([a[7], a[9], a[10]], 3)) + fractions.Fraction(1, mo.mult([a[7], a[8], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[7], a[8], a[9], a[10]], 4)) - fractions.Fraction(1, mo.mult([a[6], a[10]], 2)) + fractions.Fraction(1, mo.mult([a[6], a[9], a[10]], 3)) + fractions.Fraction(1, mo.mult([a[6], a[8], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[6], a[8], a[9], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[6], a[7], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[6], a[7], a[9], a[10]], 4)) - fractions.Fraction(1, mo.mult([a[6], a[7], a[8], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[6], a[7], a[8], a[9], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[5], a[10]], 2)) + fractions.Fraction(1, mo.mult([a[5], a[9], a[10]], 3)) + fractions.Fraction(1, mo.mult([a[5], a[8], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[5], a[8], a[9], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[5], a[7], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[5], a[7], a[9], a[10]], 4)) - fractions.Fraction(1, mo.mult([a[5], a[7], a[8], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[5], a[7], a[8], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[5], a[6], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[5], a[6], a[9], a[10]], 4)) - fractions.Fraction(1, mo.mult([a[5], a[6], a[8], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[5], a[6], a[8], a[9], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[5], a[6], a[7], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[5], a[6], a[7], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[5], a[6], a[7], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[5], a[6], a[7], a[8], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[4], a[10]], 2)) + fractions.Fraction(1, mo.mult([a[4], a[9], a[10]], 3)) + fractions.Fraction(1, mo.mult([a[4], a[8], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[4], a[8], a[9], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[4], a[7], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[4], a[7], a[9], a[10]], 4)) - fractions.Fraction(1, mo.mult([a[4], a[7], a[8], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[4], a[7], a[8], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[4], a[6], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[4], a[6], a[9], a[10]], 4)) - fractions.Fraction(1, mo.mult([a[4], a[6], a[8], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[4], a[6], a[8], a[9], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[4], a[6], a[7], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[4], a[6], a[7], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[4], a[6], a[7], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[4], a[6], a[7], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[4], a[5], a[9], a[10]], 4)) - fractions.Fraction(1, mo.mult([a[4], a[5], a[8], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[8], a[9], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[4], a[5], a[7], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[7], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[7], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[4], a[5], a[7], a[8], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[4], a[5], a[6], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[6], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[6], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[4], a[5], a[6], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[6], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[4], a[5], a[6], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[4], a[5], a[6], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[6], a[7], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[3], a[10]], 2)) + fractions.Fraction(1, mo.mult([a[3], a[9], a[10]], 3)) + fractions.Fraction(1, mo.mult([a[3], a[8], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[3], a[8], a[9], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[7], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[3], a[7], a[9], a[10]], 4)) - fractions.Fraction(1, mo.mult([a[3], a[7], a[8], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[7], a[8], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[3], a[6], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[3], a[6], a[9], a[10]], 4)) - fractions.Fraction(1, mo.mult([a[3], a[6], a[8], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[6], a[8], a[9], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[6], a[7], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[6], a[7], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[3], a[6], a[7], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[6], a[7], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[3], a[5], a[9], a[10]], 4)) - fractions.Fraction(1, mo.mult([a[3], a[5], a[8], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[8], a[9], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[5], a[7], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[7], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[7], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[5], a[7], a[8], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[3], a[5], a[6], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[6], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[6], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[5], a[6], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[6], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[5], a[6], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[3], a[5], a[6], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[6], a[7], a[8], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[9], a[10]], 4)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[8], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[8], a[9], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[7], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[7], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[7], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[7], a[8], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[6], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[6], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[6], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[6], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[6], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[6], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[6], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[6], a[7], a[8], a[9], a[10]], 7))
            a2b[10] += -fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[7], a[8], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[2], a[10]], 2)) + fractions.Fraction(1, mo.mult([a[2], a[9], a[10]], 3)) + fractions.Fraction(1, mo.mult([a[2], a[8], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[2], a[8], a[9], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[7], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[2], a[7], a[9], a[10]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[7], a[8], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[7], a[8], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[6], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[2], a[6], a[9], a[10]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[6], a[8], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[6], a[8], a[9], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[6], a[7], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[6], a[7], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[6], a[7], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[6], a[7], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[2], a[5], a[9], a[10]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[5], a[8], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[8], a[9], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[5], a[7], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[7], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[7], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[5], a[7], a[8], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[5], a[6], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[6], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[6], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[5], a[6], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[6], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[5], a[6], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[5], a[6], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[6], a[7], a[8], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[9], a[10]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[8], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[8], a[9], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[7], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[7], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[7], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[7], a[8], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[6], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[6], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[6], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[6], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[6], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[6], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[6], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[6], a[7], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[7], a[8], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6], a[7], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[9], a[10]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[8], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[8], a[9], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[7], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[7], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[7], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[7], a[8], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[6], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[6], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[6], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[6], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[6], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[6], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[6], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[6], a[7], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[7], a[8], a[10]], 6))
            a2b[10] += fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[7], a[8], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6], a[7], a[8], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[7], a[8], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6], a[7], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[7], a[8], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6], a[7], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6], a[7], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10]], 9)) - fractions.Fraction(1, mo.mult([a[1], a[10]], 2)) + fractions.Fraction(1, mo.mult([a[1], a[9], a[10]], 3)) + fractions.Fraction(1, mo.mult([a[1], a[8], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[1], a[8], a[9], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[7], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[1], a[7], a[9], a[10]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[7], a[8], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[7], a[8], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[6], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[1], a[6], a[9], a[10]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[6], a[8], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[6], a[8], a[9], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[6], a[7], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[6], a[7], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[6], a[7], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[6], a[7], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[1], a[5], a[9], a[10]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[5], a[8], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[8], a[9], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[5], a[7], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[7], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[7], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[5], a[7], a[8], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[5], a[6], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[6], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[6], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[5], a[6], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[6], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[5], a[6], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[5], a[6], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[6], a[7], a[8], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[9], a[10]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[8], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[8], a[9], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[7], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[7], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[7], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[7], a[8], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[6], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[6], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[6], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[6], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[6], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[6], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[6], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[6], a[7], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[7], a[8], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6], a[8], a[10]], 6))
            a2b[10] += fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6], a[7], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[9], a[10]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[8], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[8], a[9], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[7], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[7], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[7], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[7], a[8], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[6], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[6], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[6], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[6], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[6], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[6], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[6], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[6], a[7], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[7], a[8], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6], a[7], a[8], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[7], a[8], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6], a[7], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[7], a[8], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6], a[7], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6], a[7], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10]], 9)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[9], a[10]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[8], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[8], a[9], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[7], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[7], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[7], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[7], a[8], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[6], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[6], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[6], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[6], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[6], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[6], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[6], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[6], a[7], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[7], a[8], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6], a[8], a[9], a[10]], 7))
            a2b[10] += -fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6], a[7], a[8], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[7], a[8], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6], a[7], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[7], a[8], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6], a[7], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6], a[7], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6], a[7], a[8], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6], a[7], a[8], a[9], a[10]], 9)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[7], a[8], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6], a[7], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[7], a[8], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6], a[7], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6], a[7], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6], a[7], a[8], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6], a[7], a[8], a[9], a[10]], 9)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[7], a[8], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6], a[7], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6], a[7], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6], a[7], a[8], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6], a[7], a[8], a[9], a[10]], 9)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[7], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[7], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[7], a[8], a[10]], 8))
            a2b[10] += fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[7], a[8], a[9], a[10]], 9)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6], a[8], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6], a[8], a[9], a[10]], 9)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[9], a[10]], 9)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[10]], 9)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10]], 10)) - fractions.Fraction(1, mo.mult([a[0], a[10]], 2)) + fractions.Fraction(1, mo.mult([a[0], a[9], a[10]], 3)) + fractions.Fraction(1, mo.mult([a[0], a[8], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[8], a[9], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[7], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[7], a[9], a[10]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[7], a[8], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[7], a[8], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[6], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[6], a[9], a[10]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[6], a[8], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[6], a[8], a[9], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[6], a[7], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[6], a[7], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[6], a[7], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[6], a[7], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[5], a[9], a[10]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[5], a[8], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[8], a[9], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[5], a[7], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[7], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[7], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[5], a[7], a[8], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[5], a[6], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[6], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[6], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[5], a[6], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[6], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[5], a[6], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[5], a[6], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[6], a[7], a[8], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[9], a[10]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[8], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[8], a[9], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[7], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[7], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[7], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[7], a[8], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[6], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[6], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[6], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[6], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[6], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[6], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[6], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[6], a[7], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[7], a[8], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6], a[7], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[9], a[10]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[8], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[8], a[9], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[7], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[7], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[7], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[7], a[8], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[6], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[6], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[6], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[6], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[6], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[6], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[6], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[6], a[7], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[7], a[8], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6], a[8], a[9], a[10]], 7))
            a2b[10] += -fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6], a[7], a[8], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[7], a[8], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6], a[7], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[7], a[8], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6], a[7], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6], a[7], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6], a[7], a[8], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[9], a[10]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[8], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[8], a[9], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[7], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[7], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[7], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[7], a[8], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[6], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[6], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[6], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[6], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[6], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[6], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[6], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[6], a[7], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[7], a[8], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6], a[7], a[8], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[7], a[8], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6], a[7], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[7], a[8], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6], a[8], a[10]], 7))
            a2b[10] += -fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6], a[7], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6], a[7], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6], a[7], a[8], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6], a[7], a[8], a[9], a[10]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[7], a[8], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6], a[7], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[7], a[8], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6], a[7], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6], a[7], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6], a[7], a[8], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6], a[7], a[8], a[9], a[10]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[7], a[8], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6], a[7], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6], a[7], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6], a[7], a[8], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6], a[7], a[8], a[9], a[10]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[7], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[7], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[7], a[8], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[7], a[8], a[9], a[10]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6], a[8], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6], a[8], a[9], a[10]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6], a[7], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6], a[7], a[9], a[10]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[10]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10]], 10)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[10]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[9], a[10]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[8], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[8], a[9], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[7], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[7], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[7], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[7], a[8], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[6], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[6], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[6], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[6], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[6], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[6], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[6], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[6], a[7], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[7], a[8], a[10]], 6))
            a2b[10] += fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[7], a[8], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6], a[7], a[8], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[7], a[8], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6], a[7], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[7], a[8], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6], a[7], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6], a[7], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6], a[7], a[8], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6], a[7], a[8], a[9], a[10]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[7], a[8], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6], a[7], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[7], a[8], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6], a[7], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6], a[7], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6], a[7], a[8], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6], a[7], a[8], a[9], a[10]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[7], a[8], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6], a[7], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6], a[7], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6], a[7], a[8], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6], a[7], a[8], a[9], a[10]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[8], a[10]], 7))
            a2b[10] += -fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[7], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[7], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[7], a[8], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[7], a[8], a[9], a[10]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6], a[8], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6], a[8], a[9], a[10]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[9], a[10]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[10]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10]], 10)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[10]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[9], a[10]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[8], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[8], a[9], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[7], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[7], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[7], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[7], a[8], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6], a[7], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[7], a[8], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6], a[7], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6], a[7], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6], a[7], a[8], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6], a[7], a[8], a[9], a[10]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[7], a[8], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6], a[7], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6], a[7], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6], a[7], a[8], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6], a[7], a[8], a[9], a[10]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[7], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[7], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[7], a[8], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[7], a[8], a[9], a[10]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6], a[8], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6], a[8], a[9], a[10]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6], a[7], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6], a[7], a[9], a[10]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6], a[7], a[8], a[10]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6], a[7], a[8], a[9], a[10]], 10)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[10]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[9], a[10]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[8], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[8], a[9], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[7], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[7], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[7], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[7], a[8], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6], a[7], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6], a[7], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6], a[7], a[8], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6], a[7], a[8], a[9], a[10]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[7], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[7], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[7], a[8], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[7], a[8], a[9], a[10]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6], a[8], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6], a[8], a[9], a[10]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6], a[7], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6], a[7], a[9], a[10]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6], a[7], a[8], a[10]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6], a[7], a[8], a[9], a[10]], 10)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[10]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[9], a[10]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[8], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[8], a[9], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[7], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[7], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[7], a[8], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[7], a[8], a[9], a[10]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6], a[8], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6], a[8], a[9], a[10]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6], a[7], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6], a[7], a[9], a[10]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6], a[7], a[8], a[10]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6], a[7], a[8], a[9], a[10]], 10)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[10]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[9], a[10]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[8], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[8], a[9], a[10]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[7], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[7], a[9], a[10]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[7], a[8], a[10]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[7], a[8], a[9], a[10]], 10)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[10]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[9], a[10]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[8], a[10]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[8], a[9], a[10]], 10)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[10]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[9], a[10]], 10)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[10]], 10)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10]], 11))
            
        if len_a >= 12 and len_a2a < 12:
            a2b[11] = fractions.Fraction(1, a[11]) - fractions.Fraction(1, mo.mult([a[10], a[11]], 2)) - fractions.Fraction(1, mo.mult([a[9], a[11]], 2)) + fractions.Fraction(1, mo.mult([a[9], a[10], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[8], a[11]], 2)) + fractions.Fraction(1, mo.mult([a[8], a[10], a[11]], 3)) + fractions.Fraction(1, mo.mult([a[8], a[9], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[8], a[9], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[7], a[11]], 2)) + fractions.Fraction(1, mo.mult([a[7], a[10], a[11]], 3)) + fractions.Fraction(1, mo.mult([a[7], a[9], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[7], a[9], a[10], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[7], a[8], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[7], a[8], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[7], a[8], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[7], a[8], a[9], a[10], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[6], a[11]], 2)) + fractions.Fraction(1, mo.mult([a[6], a[10], a[11]], 3)) + fractions.Fraction(1, mo.mult([a[6], a[9], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[6], a[9], a[10], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[6], a[8], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[6], a[8], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[6], a[8], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[6], a[8], a[9], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[6], a[7], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[6], a[7], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[6], a[7], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[6], a[7], a[9], a[10], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[6], a[7], a[8], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[6], a[7], a[8], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[6], a[7], a[8], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[6], a[7], a[8], a[9], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[5], a[11]], 2)) + fractions.Fraction(1, mo.mult([a[5], a[10], a[11]], 3)) + fractions.Fraction(1, mo.mult([a[5], a[9], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[5], a[9], a[10], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[5], a[8], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[5], a[8], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[5], a[8], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[5], a[8], a[9], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[5], a[7], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[5], a[7], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[5], a[7], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[5], a[7], a[9], a[10], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[5], a[7], a[8], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[5], a[7], a[8], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[5], a[7], a[8], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[5], a[7], a[8], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[5], a[6], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[5], a[6], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[5], a[6], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[5], a[6], a[9], a[10], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[5], a[6], a[8], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[5], a[6], a[8], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[5], a[6], a[8], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[5], a[6], a[8], a[9], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[5], a[6], a[7], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[5], a[6], a[7], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[5], a[6], a[7], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[5], a[6], a[7], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[5], a[6], a[7], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[5], a[6], a[7], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[5], a[6], a[7], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[5], a[6], a[7], a[8], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[4], a[11]], 2)) + fractions.Fraction(1, mo.mult([a[4], a[10], a[11]], 3)) + fractions.Fraction(1, mo.mult([a[4], a[9], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[4], a[9], a[10], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[4], a[8], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[4], a[8], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[4], a[8], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[4], a[8], a[9], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[4], a[7], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[4], a[7], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[4], a[7], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[4], a[7], a[9], a[10], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[4], a[7], a[8], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[4], a[7], a[8], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[4], a[7], a[8], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[4], a[7], a[8], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[4], a[6], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[4], a[6], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[4], a[6], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[4], a[6], a[9], a[10], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[4], a[6], a[8], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[4], a[6], a[8], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[4], a[6], a[8], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[4], a[6], a[8], a[9], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[4], a[6], a[7], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[4], a[6], a[7], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[4], a[6], a[7], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[4], a[6], a[7], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[4], a[6], a[7], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[4], a[6], a[7], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[4], a[6], a[7], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[4], a[6], a[7], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[4], a[5], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[4], a[5], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[9], a[10], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[4], a[5], a[8], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[8], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[8], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[4], a[5], a[8], a[9], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[4], a[5], a[7], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[7], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[7], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[4], a[5], a[7], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[7], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[4], a[5], a[7], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[4], a[5], a[7], a[8], a[9], a[11]], 6))
            a2b[11] += fractions.Fraction(1, mo.mult([a[4], a[5], a[7], a[8], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[4], a[5], a[6], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[6], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[6], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[4], a[5], a[6], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[6], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[4], a[5], a[6], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[4], a[5], a[6], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[6], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[6], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[4], a[5], a[6], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[4], a[5], a[6], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[6], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[4], a[5], a[6], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[6], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[6], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[3], a[11]], 2)) + fractions.Fraction(1, mo.mult([a[3], a[10], a[11]], 3)) + fractions.Fraction(1, mo.mult([a[3], a[9], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[3], a[9], a[10], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[8], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[3], a[8], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[3], a[8], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[8], a[9], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[3], a[7], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[3], a[7], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[3], a[7], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[7], a[9], a[10], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[7], a[8], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[7], a[8], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[3], a[7], a[8], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[7], a[8], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[3], a[6], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[3], a[6], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[3], a[6], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[6], a[9], a[10], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[6], a[8], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[6], a[8], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[3], a[6], a[8], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[6], a[8], a[9], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[3], a[6], a[7], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[6], a[7], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[3], a[6], a[7], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[6], a[7], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[3], a[6], a[7], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[6], a[7], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[3], a[6], a[7], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[3], a[6], a[7], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[3], a[5], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[3], a[5], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[9], a[10], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[5], a[8], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[8], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[8], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[5], a[8], a[9], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[3], a[5], a[7], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[7], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[7], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[5], a[7], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[7], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[5], a[7], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[3], a[5], a[7], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[7], a[8], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[3], a[5], a[6], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[6], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[6], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[5], a[6], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[6], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[5], a[6], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[3], a[5], a[6], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[6], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[6], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[5], a[6], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[3], a[5], a[6], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[6], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[3], a[5], a[6], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[6], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[6], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[3], a[5], a[6], a[7], a[8], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[9], a[10], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[8], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[8], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[8], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[8], a[9], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[7], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[7], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[7], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[7], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[7], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[7], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[7], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[7], a[8], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[6], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[6], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[6], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[6], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[6], a[8], a[11]], 5))
            a2b[11] += -fractions.Fraction(1, mo.mult([a[3], a[4], a[6], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[6], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[6], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[6], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[6], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[6], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[6], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[6], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[6], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[6], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[6], a[7], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[7], a[8], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[2], a[11]], 2)) + fractions.Fraction(1, mo.mult([a[2], a[10], a[11]], 3)) + fractions.Fraction(1, mo.mult([a[2], a[9], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[2], a[9], a[10], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[8], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[2], a[8], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[8], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[8], a[9], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[7], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[2], a[7], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[7], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[7], a[9], a[10], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[7], a[8], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[7], a[8], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[7], a[8], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[7], a[8], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[6], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[2], a[6], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[6], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[6], a[9], a[10], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[6], a[8], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[6], a[8], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[6], a[8], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[6], a[8], a[9], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[6], a[7], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[6], a[7], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[6], a[7], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[6], a[7], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[6], a[7], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[6], a[7], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[6], a[7], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[6], a[7], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[2], a[5], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[5], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[9], a[10], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[5], a[8], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[8], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[8], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[5], a[8], a[9], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[5], a[7], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[7], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[7], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[5], a[7], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[7], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[5], a[7], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[5], a[7], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[7], a[8], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[5], a[6], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[6], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[6], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[5], a[6], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[6], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[5], a[6], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[5], a[6], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[6], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[6], a[7], a[11]], 5))
            a2b[11] += -fractions.Fraction(1, mo.mult([a[2], a[5], a[6], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[5], a[6], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[6], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[5], a[6], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[6], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[6], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[5], a[6], a[7], a[8], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[9], a[10], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[8], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[8], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[8], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[8], a[9], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[7], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[7], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[7], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[7], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[7], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[7], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[7], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[7], a[8], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[6], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[6], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[6], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[6], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[6], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[6], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[6], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[6], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[6], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[6], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[6], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[6], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[6], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[6], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[6], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[6], a[7], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[7], a[8], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[9], a[10], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[8], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[8], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[8], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[8], a[9], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[7], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[7], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[7], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[7], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[7], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[7], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[7], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[7], a[8], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[6], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[6], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[6], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[6], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[6], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[6], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[6], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[6], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[6], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[6], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[6], a[7], a[9], a[11]], 6))
            a2b[11] += fractions.Fraction(1, mo.mult([a[2], a[3], a[6], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[6], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[6], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[6], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[6], a[7], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[7], a[8], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6], a[7], a[8], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[7], a[8], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6], a[7], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[7], a[8], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6], a[9], a[10], a[11]], 8))
            a2b[11] += fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6], a[7], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6], a[7], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6], a[7], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6], a[7], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11]], 10)) - fractions.Fraction(1, mo.mult([a[1], a[11]], 2)) + fractions.Fraction(1, mo.mult([a[1], a[10], a[11]], 3)) + fractions.Fraction(1, mo.mult([a[1], a[9], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[1], a[9], a[10], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[8], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[1], a[8], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[8], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[8], a[9], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[7], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[1], a[7], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[7], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[7], a[9], a[10], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[7], a[8], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[7], a[8], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[7], a[8], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[7], a[8], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[6], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[1], a[6], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[6], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[6], a[9], a[10], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[6], a[8], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[6], a[8], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[6], a[8], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[6], a[8], a[9], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[6], a[7], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[6], a[7], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[6], a[7], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[6], a[7], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[6], a[7], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[6], a[7], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[6], a[7], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[6], a[7], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[1], a[5], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[5], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[9], a[10], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[5], a[8], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[8], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[8], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[5], a[8], a[9], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[5], a[7], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[7], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[7], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[5], a[7], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[7], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[5], a[7], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[5], a[7], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[7], a[8], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[5], a[6], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[6], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[6], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[5], a[6], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[6], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[5], a[6], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[5], a[6], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[6], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[6], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[5], a[6], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[5], a[6], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[6], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[5], a[6], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[6], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[6], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[5], a[6], a[7], a[8], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[9], a[10], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[8], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[8], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[8], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[8], a[9], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[7], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[7], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[7], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[7], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[7], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[7], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[7], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[7], a[8], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[6], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[6], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[6], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[6], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[6], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[6], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[6], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[6], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[6], a[7], a[11]], 5))
            a2b[11] += -fractions.Fraction(1, mo.mult([a[1], a[4], a[6], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[6], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[6], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[6], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[6], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[6], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[6], a[7], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[7], a[8], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[9], a[10], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[8], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[8], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[8], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[8], a[9], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[7], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[7], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[7], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[7], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[7], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[7], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[7], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[7], a[8], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[6], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[6], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[6], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[6], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[6], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[6], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[6], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[6], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[6], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[6], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[6], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[6], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[6], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[6], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[6], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[6], a[7], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[7], a[8], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6], a[7], a[11]], 6))
            a2b[11] += fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6], a[7], a[8], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[7], a[8], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6], a[7], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[7], a[8], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6], a[7], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6], a[7], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6], a[7], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6], a[7], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11]], 10)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[9], a[10], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[8], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[8], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[8], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[8], a[9], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[7], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[7], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[7], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[7], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[7], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[7], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[7], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[7], a[8], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[6], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[6], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[6], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[6], a[9], a[10], a[11]], 6))
            a2b[11] += fractions.Fraction(1, mo.mult([a[1], a[2], a[6], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[6], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[6], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[6], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[6], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[6], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[6], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[6], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[6], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[6], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[6], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[6], a[7], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[7], a[8], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6], a[7], a[8], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[7], a[8], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6], a[7], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[7], a[8], a[9], a[10], a[11]], 9))
            a2b[11] += -fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6], a[7], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6], a[7], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6], a[7], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6], a[7], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6], a[7], a[8], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6], a[7], a[8], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6], a[7], a[8], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11]], 10)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[7], a[8], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6], a[7], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[7], a[8], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6], a[7], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6], a[7], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6], a[7], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6], a[7], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6], a[7], a[8], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6], a[7], a[8], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6], a[7], a[8], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6], a[7], a[8], a[9], a[10], a[11]], 10)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[7], a[11]], 6))
            a2b[11] += fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[7], a[8], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6], a[7], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6], a[7], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6], a[7], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6], a[7], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6], a[7], a[8], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6], a[7], a[8], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6], a[7], a[8], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6], a[7], a[8], a[9], a[10], a[11]], 10)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[7], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[7], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[7], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[7], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[7], a[8], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[7], a[8], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[7], a[8], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[7], a[8], a[9], a[10], a[11]], 10)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6], a[8], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6], a[8], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6], a[8], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6], a[8], a[9], a[10], a[11]], 10)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[9], a[10], a[11]], 10)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[10], a[11]], 10)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[11]], 10)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11]], 11)) - fractions.Fraction(1, mo.mult([a[0], a[11]], 2)) + fractions.Fraction(1, mo.mult([a[0], a[10], a[11]], 3)) + fractions.Fraction(1, mo.mult([a[0], a[9], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[9], a[10], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[8], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[8], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[8], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[8], a[9], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[7], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[7], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[7], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[7], a[9], a[10], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[7], a[8], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[7], a[8], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[7], a[8], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[7], a[8], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[6], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[6], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[6], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[6], a[9], a[10], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[6], a[8], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[6], a[8], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[6], a[8], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[6], a[8], a[9], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[6], a[7], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[6], a[7], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[6], a[7], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[6], a[7], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[6], a[7], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[6], a[7], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[6], a[7], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[6], a[7], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[5], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[5], a[9], a[11]], 4))
            a2b[11] += fractions.Fraction(1, mo.mult([a[0], a[5], a[9], a[10], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[5], a[8], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[8], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[8], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[5], a[8], a[9], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[5], a[7], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[7], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[7], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[5], a[7], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[7], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[5], a[7], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[5], a[7], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[7], a[8], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[5], a[6], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[6], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[6], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[5], a[6], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[6], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[5], a[6], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[5], a[6], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[6], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[6], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[5], a[6], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[5], a[6], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[6], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[5], a[6], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[6], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[6], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[5], a[6], a[7], a[8], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[9], a[10], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[8], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[8], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[8], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[8], a[9], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[7], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[7], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[7], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[7], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[7], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[7], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[7], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[7], a[8], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[6], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[6], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[6], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[6], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[6], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[6], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[6], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[6], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[6], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[6], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[6], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[6], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[6], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[6], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[6], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[6], a[7], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[7], a[8], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[9], a[10], a[11]], 5))
            a2b[11] += -fractions.Fraction(1, mo.mult([a[0], a[3], a[8], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[8], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[8], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[8], a[9], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[7], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[7], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[7], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[7], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[7], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[7], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[7], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[7], a[8], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[6], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[6], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[6], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[6], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[6], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[6], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[6], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[6], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[6], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[6], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[6], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[6], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[6], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[6], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[6], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[6], a[7], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[7], a[8], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6], a[7], a[8], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[7], a[8], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6], a[7], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[9], a[11]], 6))
            a2b[11] += fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[7], a[8], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6], a[7], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6], a[7], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6], a[7], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6], a[7], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6], a[7], a[8], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6], a[7], a[8], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11]], 10)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[9], a[10], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[8], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[8], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[8], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[8], a[9], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[7], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[7], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[7], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[7], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[7], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[7], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[7], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[7], a[8], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[6], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[6], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[6], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[6], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[6], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[6], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[6], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[6], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[6], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[6], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[6], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[6], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[6], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[6], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[6], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[6], a[7], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[7], a[8], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6], a[7], a[8], a[11]], 7))
            a2b[11] += -fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6], a[7], a[8], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[7], a[8], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6], a[7], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[7], a[8], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6], a[7], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6], a[7], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6], a[7], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6], a[7], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6], a[7], a[8], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6], a[7], a[8], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6], a[7], a[8], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11]], 10)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[7], a[8], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6], a[8], a[9], a[11]], 7))
            a2b[11] += -fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6], a[7], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[7], a[8], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6], a[7], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6], a[7], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6], a[7], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6], a[7], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6], a[7], a[8], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6], a[7], a[8], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6], a[7], a[8], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6], a[7], a[8], a[9], a[10], a[11]], 10)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[7], a[8], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6], a[7], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6], a[7], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6], a[7], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6], a[7], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6], a[7], a[8], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6], a[7], a[8], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6], a[7], a[8], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6], a[7], a[8], a[9], a[10], a[11]], 10)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[7], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[7], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[7], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[7], a[9], a[10], a[11]], 9))
            a2b[11] += -fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[7], a[8], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[7], a[8], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[7], a[8], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[7], a[8], a[9], a[10], a[11]], 10)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6], a[8], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6], a[8], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6], a[8], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6], a[8], a[9], a[10], a[11]], 10)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6], a[7], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6], a[7], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6], a[7], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6], a[7], a[9], a[10], a[11]], 10)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[10], a[11]], 10)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[11]], 10)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11]], 11)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[11]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[10], a[11]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[9], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[9], a[10], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[8], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[8], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[8], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[8], a[9], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[7], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[7], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[7], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[7], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[7], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[7], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[7], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[7], a[8], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[6], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[6], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[6], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[6], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[6], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[6], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[6], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[6], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[6], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[6], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[6], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[6], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[6], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[6], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[6], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[6], a[7], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[7], a[8], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6], a[7], a[8], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[8], a[9], a[11]], 6))
            a2b[11] += fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[7], a[8], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6], a[7], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[7], a[8], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6], a[7], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6], a[7], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6], a[7], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6], a[7], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6], a[7], a[8], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6], a[7], a[8], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6], a[7], a[8], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11]], 10)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[7], a[8], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6], a[7], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[11]], 5))
            a2b[11] += -fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[7], a[8], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6], a[7], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6], a[7], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6], a[7], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6], a[7], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6], a[7], a[8], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6], a[7], a[8], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6], a[7], a[8], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6], a[7], a[8], a[9], a[10], a[11]], 10)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[7], a[8], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6], a[7], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6], a[7], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6], a[7], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6], a[7], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6], a[7], a[8], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6], a[7], a[8], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6], a[7], a[8], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6], a[7], a[8], a[9], a[10], a[11]], 10)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[7], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[7], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[7], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[7], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[7], a[8], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[7], a[8], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[7], a[8], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[7], a[8], a[9], a[10], a[11]], 10)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6], a[8], a[11]], 8))
            a2b[11] += fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6], a[8], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6], a[8], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6], a[8], a[9], a[10], a[11]], 10)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[9], a[10], a[11]], 10)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[10], a[11]], 10)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[11]], 10)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11]], 11)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[11]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[10], a[11]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[9], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[9], a[10], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[8], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[8], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[8], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[8], a[9], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[7], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[7], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[7], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[7], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[7], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[7], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[7], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[7], a[8], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6], a[7], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[7], a[8], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6], a[7], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6], a[7], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6], a[7], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6], a[7], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6], a[7], a[8], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6], a[7], a[8], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6], a[7], a[8], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6], a[7], a[8], a[9], a[10], a[11]], 10)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[7], a[9], a[10], a[11]], 8))
            a2b[11] += fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[7], a[8], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6], a[7], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6], a[7], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6], a[7], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6], a[7], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6], a[7], a[8], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6], a[7], a[8], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6], a[7], a[8], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6], a[7], a[8], a[9], a[10], a[11]], 10)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[7], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[7], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[7], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[7], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[7], a[8], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[7], a[8], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[7], a[8], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[7], a[8], a[9], a[10], a[11]], 10)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6], a[8], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6], a[8], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6], a[8], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6], a[8], a[9], a[10], a[11]], 10)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6], a[7], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6], a[7], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6], a[7], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6], a[7], a[9], a[10], a[11]], 10)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6], a[7], a[8], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6], a[7], a[8], a[10], a[11]], 10)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6], a[7], a[8], a[9], a[11]], 10)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11]], 11)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[11]], 5)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[10], a[11]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[9], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[9], a[10], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[8], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[8], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[8], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[8], a[9], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[7], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[7], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[7], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[7], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[7], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[7], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[7], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[7], a[8], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6], a[7], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6], a[7], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6], a[7], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6], a[7], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6], a[7], a[8], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6], a[7], a[8], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6], a[7], a[8], a[9], a[11]], 9))
            a2b[11] += -fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6], a[7], a[8], a[9], a[10], a[11]], 10)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[7], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[7], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[7], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[7], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[7], a[8], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[7], a[8], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[7], a[8], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[7], a[8], a[9], a[10], a[11]], 10)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6], a[8], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6], a[8], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6], a[8], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6], a[8], a[9], a[10], a[11]], 10)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6], a[7], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6], a[7], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6], a[7], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6], a[7], a[9], a[10], a[11]], 10)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6], a[7], a[8], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6], a[7], a[8], a[10], a[11]], 10)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6], a[7], a[8], a[9], a[11]], 10)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6], a[7], a[8], a[9], a[10], a[11]], 11)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[11]], 6)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[10], a[11]], 7)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[9], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[9], a[10], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[8], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[8], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[8], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[8], a[9], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[7], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[7], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[7], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[7], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[7], a[8], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[7], a[8], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[7], a[8], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[7], a[8], a[9], a[10], a[11]], 10)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6], a[8], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6], a[8], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6], a[8], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6], a[8], a[9], a[10], a[11]], 10)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6], a[7], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6], a[7], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6], a[7], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6], a[7], a[9], a[10], a[11]], 10)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6], a[7], a[8], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6], a[7], a[8], a[10], a[11]], 10)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6], a[7], a[8], a[9], a[11]], 10)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6], a[7], a[8], a[9], a[10], a[11]], 11)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[11]], 7)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[10], a[11]], 8)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[9], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[9], a[10], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[8], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[8], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[8], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[8], a[9], a[10], a[11]], 10)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[7], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[7], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[7], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[7], a[9], a[10], a[11]], 10)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[7], a[8], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[7], a[8], a[10], a[11]], 10)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[7], a[8], a[9], a[11]], 10)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[7], a[8], a[9], a[10], a[11]], 11)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[11]], 8)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[10], a[11]], 9)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[9], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[9], a[10], a[11]], 10)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[8], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[8], a[10], a[11]], 10)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[8], a[9], a[11]], 10)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[8], a[9], a[10], a[11]], 11)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[11]], 9)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[10], a[11]], 10)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[9], a[11]], 10)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[9], a[10], a[11]], 11)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[11]], 10)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[10], a[11]], 11)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[11]], 11)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11]], 12))
            #         # ---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|
        if bverbose:
            print("a2b is " + str(a2b).replace("Fraction", "fractions.Fraction"))
        rslt = fractions.Fraction(0, 1)
        for i in range(0, len_a):
            if bverbose:
                print("adding a2b[" + str(i) + "] fractions." + str(a2b[i]))
            rslt += a2b[i]
        
        if busecache and tuple(a) not in calc_a4_cache_large:
            calc_a4_cache_large[tuple(a)] = (a2b[:len_a], rslt)
        elif not busecache and tuple(a) not in calc_a4_cache_small:
            calc_a4_cache_small[tuple(a)] = (a2b[:len_a], rslt)
        
        if baddsum:
            a2b = [fractions.Fraction(0, 1),] * len_a
            a2b[len_a - 1] = rslt
    
    if bverbose:
        print("banytgt " + str(banytgt))
    if banytgt:
        newrslt = rslt + fractions.Fraction(1, rslt.denominator)
        if banytgt:
            if rslt.denominator > 64 and newrslt.numerator <= 64 and newrslt.denominator <= 64:
                rslt = newrslt
        elif newrslt == tgt:
            rslt = newrslt
    # if type(rslt) is not fractions.Fraction:
    #     print("calc_a4() warning, rslt is wrong type")loop_one_tgt mod_ne_zer
    
    return a2b[:len_a], rslt



calc_a5_cache_small = cache(4096)
calc_a5_cache_large = cache(131072)
def calc_a5(tgt, q, q2a=[], baddsum=False, busecache=True, bverbose=False):
    global aryprimes
    global calc_a5_cache_small
    global calc_a5_cache_large
    if bverbose:
        print("calc_a5(" + str(q) + ")")
    one = Qfraction(1, 1)
    # q = [int(x) for x in q if x >= 2 and x % 1 == 0]
    len_q = len(q)
    len_q2a = len(q2a)
    if bverbose:
        print(f"len(q) is {len_q}")
    if len_q <= 1:
        return [q[0]], q[0]
    
    if not busecache or ((tuple(q) not in calc_a5_cache_small) and (tuple(q) not in calc_a5_cache_large)):
        if aryprimes[-1] < min(q).denominator:
            if min(q).denominator < 94906265:
                aryprimes = primesieve.primes(min(q).denominator)
            elif math.sqrt(min(q).denominator) > 94906265:
                aryprimes = primesieve.primes(math.sqrt(min(q).denominator))
            elif aryprimes[-1] < 94906265:
                aryprimes = primesieve.primes(2**24)
    q2b = []
    if busecache and tuple(q) in calc_a5_cache_large:
        q2b, rslt = calc_a5_cache_large[tuple(q)]
    elif not busecache:
        if tuple(q) in calc_a5_cache_small:
            # try:
            if calc_a5_cache_small[tuple(q)] != 1:
                q2b, rslt = calc_a5_cache_small[tuple(q)]
            # except ValueError:
            # print("Not found in calc_a5_cache_small " + str(q))
        elif tuple(q) in calc_a5_cache_large:
            # try:
            if calc_a5_cache_large[tuple(q)] != 1:
                q2b, rslt = calc_a5_cache_large[tuple(q)]        
            # except ValueError:
            # print("Not found in calc_a5_cache_large " + str(q))
    if len(q2b) == 0:
        q2b = q2a[:] + [Qfraction(0, 1)] * (12 - len_q2a) if len_q2a > 0 else [q[0], Qfraction(0, 1), Qfraction(0, 1), Qfraction(0, 1), Qfraction(0, 1), Qfraction(0, 1), Qfraction(0, 1), Qfraction(0, 1), Qfraction(0, 1), Qfraction(0, 1), Qfraction(0, 1), Qfraction(0, 1)]
        if bverbose:
            print(f"len_q is {len_q}")
            print(f"len_q2a is {len_q2a}")
            print("q[0] is " + str(q[0]))
            print("q[1] is " + str(q[1]))
        if len_q >= 2 and len_q2a < 2:
            # q = [Qfraction(1, 4), Qfraction(1, 58)]
            # q[1] - Qfraction.prod([q[0], q[1]], 2)
            q2b[1] = q[1] - Qfraction.prod(q[0:2], 2)
            # print("q2b[1] is " + str(q2b[1]))
            
        if len_q >= 3 and len_q2a < 3:
            q2b[2] = q[2] - Qfraction.prod([q[0], q[2]], 2) - Qfraction.prod([q[1], q[2]], 2) + Qfraction.prod(q[0:3], 3)
            
        if len_q >= 4 and len_q2a < 4:
            q2b[3] = q[3] - Qfraction.prod([q[0], q[3]], 2) - Qfraction.prod([q[1], q[3]], 2) - Qfraction.prod([q[2], q[3]], 2) + Qfraction.prod([q[0], q[1], q[3]], 3) + Qfraction.prod([q[0], q[2], q[3]], 3) + Qfraction.prod([q[1], q[2], q[3]], 3) - Qfraction.prod(q[0:4], 4)
            
        if len_q >= 5 and len_q2a < 5:
            # a2b[4] = fractions.Fraction(1, a[4]) - fractions.Fraction(1, mo.mult([a[0], a[4]], 2)) - fractions.Fraction(1, mo.mult([a[1], a[4]], 2)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4]], 3)) - fractions.Fraction(1, mo.mult([a[2], a[4]], 2)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4]], 3)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4]], 4)) - fractions.Fraction(1, mo.mult([a[3], a[4]], 2)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4]], 3)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4]], 3)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4]], 3)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4]], 4)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4]], 5))
            q2b[4] = q[4] - Qfraction.prod([q[0], q[4]], 2) - Qfraction.prod([q[1], q[4]], 2) - Qfraction.prod([q[2], q[4]], 2) - Qfraction.prod([q[3], q[4]], 2) + Qfraction.prod([q[0], q[1], q[4]], 3) + Qfraction.prod([q[0], q[2], q[4]], 3) + Qfraction.prod([q[0], q[3], q[4]], 3) + Qfraction.prod([q[1], q[2], q[4]], 3) + Qfraction.prod([q[1], q[3], q[4]], 3) + Qfraction.prod([q[2], q[3], q[4]], 3) - Qfraction.prod([q[0], q[1], q[2], q[4]], 4) - Qfraction.prod([q[0], q[1], q[3], q[4]], 4) - Qfraction.prod([q[0], q[2], q[3], q[4]], 4) - Qfraction.prod([q[1], q[2], q[3], q[4]], 4) + Qfraction.prod(q[0:5], 5)
            
        if len_q >= 6 and len_q2a < 6:
            q2b[5] = q[5] - Qfraction.prod([q[0], q[5]], 2) - Qfraction.prod([q[1], q[5]], 2) - Qfraction.prod([q[2], q[5]], 2) - Qfraction.prod([q[3], q[5]], 2) - Qfraction.prod([q[4], q[5]], 2) + Qfraction.prod([q[0], q[1], q[5]], 3) + Qfraction.prod([q[0], q[2], q[5]], 3) + Qfraction.prod([q[0], q[3], q[5]], 3) + Qfraction.prod([q[0], q[4], q[5]], 3) + Qfraction.prod([q[1], q[2], q[5]], 3) + Qfraction.prod([q[1], q[3], q[5]], 3) + Qfraction.prod([q[1], q[4], q[5]], 3) + Qfraction.prod([q[2], q[3], q[5]], 3) + Qfraction.prod([q[2], q[4], q[5]], 3) + Qfraction.prod([q[3], q[4], q[5]], 3) - Qfraction.prod([q[0], q[1], q[2], q[5]], 4) - Qfraction.prod([q[0], q[1], q[3], q[5]], 4) - Qfraction.prod([q[0], q[1], q[4], q[5]], 4) - Qfraction.prod([q[0], q[2], q[3], q[5]], 4) - Qfraction.prod([q[0], q[2], q[4], q[5]], 4) - Qfraction.prod([q[0], q[3], q[4], q[5]], 4) - Qfraction.prod([q[1], q[2], q[3], q[5]], 4) - Qfraction.prod([q[1], q[2], q[4], q[5]], 4) - Qfraction.prod([q[1], q[3], q[4], q[5]], 4) - Qfraction.prod([q[2], q[3], q[4], q[5]], 4) + Qfraction.prod([q[0], q[1], q[2], q[3], q[5]], 5) + Qfraction.prod([q[0], q[1], q[2], q[4], q[5]], 5) + Qfraction.prod([q[0], q[1], q[3], q[4], q[5]], 5) + Qfraction.prod([q[0], q[2], q[3], q[4], q[5]], 5) + Qfraction.prod([q[1], q[2], q[3], q[4], q[5]], 5) - Qfraction.prod(q[0:6], 6)
            
        if len_q >= 7 and len_q2a < 7:
            #  fractions.Fraction(1, a[6]) - fractions.Fraction(1, mo.mult([a[0], a[6]], 2)) - fractions.Fraction(1, mo.mult([a[1], a[6]], 2)) - fractions.Fraction(1, mo.mult([a[2], a[6]], 2)) - fractions.Fraction(1, mo.mult([a[3], a[6]], 2)) - fractions.Fraction(1, mo.mult([a[4], a[6]], 2)) - fractions.Fraction(1, mo.mult([a[5], a[6]], 2))
            #  fractions.Fraction(1, mo.mult([a[0], a[3], a[6]], 3)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[6]], 3)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[6]], 3)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[6]], 3)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[6]], 3)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[6]], 3)) + fractions.Fraction(1, mo.mult([a[0], a[4], a[6]], 3)) + fractions.Fraction(1, mo.mult([a[1], a[4], a[6]], 3)) + fractions.Fraction(1, mo.mult([a[2], a[4], a[6]], 3)) + fractions.Fraction(1, mo.mult([a[3], a[4], a[6]], 3)) + fractions.Fraction(1, mo.mult([a[0], a[5], a[6]], 3)) + fractions.Fraction(1, mo.mult([a[1], a[5], a[6]], 3)) + fractions.Fraction(1, mo.mult([a[2], a[5], a[6]], 3)) + fractions.Fraction(1, mo.mult([a[3], a[5], a[6]], 3)) + fractions.Fraction(1, mo.mult([a[4], a[5], a[6]], 3))
            # -fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[5], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[5], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[5], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[3], a[5], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[3], a[5], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[3], a[5], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[0], a[4], a[5], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[1], a[4], a[5], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[2], a[4], a[5], a[6]], 4)) - fractions.Fraction(1, mo.mult([a[3], a[4], a[5], a[6]], 4))
            #  fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[6]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[6]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[6]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[6]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[6]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[5], a[6]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[5], a[6]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[5], a[6]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[5], a[6]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[1], a[4], a[5], a[6]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[2], a[4], a[5], a[6]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[2], a[4], a[5], a[6]], 5)) + fractions.Fraction(1, mo.mult([a[0], a[3], a[4], a[5], a[6]], 5)) + fractions.Fraction(1, mo.mult([a[1], a[3], a[4], a[5], a[6]], 5)) + fractions.Fraction(1, mo.mult([a[2], a[3], a[4], a[5], a[6]], 5))
            # -fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[4], a[6]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[3], a[5], a[6]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[2], a[4], a[5], a[6]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[1], a[3], a[4], a[5], a[6]], 6)) - fractions.Fraction(1, mo.mult([a[0], a[2], a[3], a[4], a[5], a[6]], 6)) - fractions.Fraction(1, mo.mult([a[1], a[2], a[3], a[4], a[5], a[6]], 6)) + fractions.Fraction(1, mo.mult(a[0:7], 7))
            q2b[6] = q[6] - Qfraction.prod([q[0], q[6]], 2) - Qfraction.prod([q[1], q[6]], 2) - Qfraction.prod([q[2], q[6]], 2) - Qfraction.prod([q[3], q[6]], 2) - Qfraction.prod([q[4], q[6]], 2) - Qfraction.prod([q[5], q[6]], 2) + Qfraction.prod([q[0], q[1], q[6]], 3) + Qfraction.prod([q[0], q[2], q[6]], 3) + Qfraction.prod([q[0], q[3], q[6]], 3) + Qfraction.prod([q[0], q[4], q[6]], 3) + Qfraction.prod([q[0], q[5], q[6]], 3) + Qfraction.prod([q[1], q[2], q[6]], 3) + Qfraction.prod([q[1], q[3], q[6]], 3) + Qfraction.prod([q[1], q[4], q[6]], 3) + Qfraction.prod([q[1], q[5], q[6]], 3) + Qfraction.prod([q[2], q[3], q[6]], 3) + Qfraction.prod([q[2], q[4], q[6]], 3) + Qfraction.prod([q[2], q[5], q[6]], 3) + Qfraction.prod([q[3], q[4], q[6]], 3) + Qfraction.prod([q[3], q[5], q[6]], 3) + Qfraction.prod([q[4], q[5], q[6]], 3) - Qfraction.prod([q[0], q[1], q[2], q[6]], 4) - Qfraction.prod([q[0], q[1], q[3], q[6]], 4) - Qfraction.prod([q[0], q[1], q[4], q[6]], 4) - Qfraction.prod([q[0], q[1], q[5], q[6]], 4) - Qfraction.prod([q[0], q[2], q[3], q[6]], 4) - Qfraction.prod([q[0], q[2], q[4], q[6]], 4) - Qfraction.prod([q[0], q[2], q[5], q[6]], 4) - Qfraction.prod([q[0], q[3], q[4], q[6]], 4) - Qfraction.prod([q[0], q[3], q[5], q[6]], 4) - Qfraction.prod([q[0], q[4], q[5], q[6]], 4) - Qfraction.prod([q[1], q[2], q[3], q[6]], 4) - Qfraction.prod([q[1], q[2], q[4], q[6]], 4) - Qfraction.prod([q[1], q[2], q[5], q[6]], 4) - Qfraction.prod([q[1], q[3], q[4], q[6]], 4) - Qfraction.prod([q[1], q[3], q[5], q[6]], 4) - Qfraction.prod([q[1], q[4], q[5], q[6]], 4) - Qfraction.prod([q[2], q[3], q[4], q[6]], 4) - Qfraction.prod([q[2], q[3], q[5], q[6]], 4) - Qfraction.prod([q[2], q[4], q[5], q[6]], 4) - Qfraction.prod([q[3], q[4], q[5], q[6]], 4) + Qfraction.prod([q[0], q[1], q[2], q[3], q[6]], 5) + Qfraction.prod([q[0], q[1], q[2], q[4], q[6]], 5) + Qfraction.prod([q[0], q[1], q[2], q[5], q[6]], 5) + Qfraction.prod([q[0], q[1], q[3], q[4], q[6]], 5) + Qfraction.prod([q[0], q[1], q[3], q[5], q[6]], 5) + Qfraction.prod([q[0], q[1], q[4], q[5], q[6]], 5) + Qfraction.prod([q[0], q[2], q[3], q[4], q[6]], 5) + Qfraction.prod([q[0], q[2], q[3], q[5], q[6]], 5) + Qfraction.prod([q[0], q[2], q[4], q[5], q[6]], 5) + Qfraction.prod([q[0], q[3], q[4], q[5], q[6]], 5) + Qfraction.prod([q[1], q[2], q[3], q[4], q[6]], 5) + Qfraction.prod([q[1], q[2], q[3], q[5], q[6]], 5) + Qfraction.prod([q[1], q[2], q[4], q[5], q[6]], 5) + Qfraction.prod([q[1], q[3], q[4], q[5], q[6]], 5) + Qfraction.prod([q[2], q[3], q[4], q[5], q[6]], 5) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[6]], 6) - Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[6]], 6) - Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[6]], 6) - Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[6]], 6) - Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[6]], 6) - Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[6]], 6) + Qfraction.prod(q[0:7], 7)
            
        if len_q >= 8 and len_q2a < 8:
            q2b[7] = q[7] - Qfraction.prod([q[0], q[7]], 2) - Qfraction.prod([q[1], q[7]], 2) - Qfraction.prod([q[2], q[7]], 2) - Qfraction.prod([q[3], q[7]], 2) - Qfraction.prod([q[4], q[7]], 2) - Qfraction.prod([q[5], q[7]], 2) - Qfraction.prod([q[6], q[7]], 2) + Qfraction.prod([q[0], q[1], q[7]], 3) + Qfraction.prod([q[0], q[2], q[7]], 3) + Qfraction.prod([q[0], q[3], q[7]], 3) + Qfraction.prod([q[0], q[4], q[7]], 3) + Qfraction.prod([q[0], q[5], q[7]], 3) + Qfraction.prod([q[0], q[6], q[7]], 3) + Qfraction.prod([q[1], q[2], q[7]], 3) + Qfraction.prod([q[1], q[3], q[7]], 3) + Qfraction.prod([q[1], q[4], q[7]], 3) + Qfraction.prod([q[1], q[5], q[7]], 3) + Qfraction.prod([q[1], q[6], q[7]], 3) + Qfraction.prod([q[2], q[3], q[7]], 3) + Qfraction.prod([q[2], q[4], q[7]], 3) + Qfraction.prod([q[2], q[5], q[7]], 3) + Qfraction.prod([q[2], q[6], q[7]], 3) + Qfraction.prod([q[3], q[4], q[7]], 3) + Qfraction.prod([q[3], q[5], q[7]], 3) + Qfraction.prod([q[3], q[6], q[7]], 3) + Qfraction.prod([q[4], q[5], q[7]], 3) + Qfraction.prod([q[4], q[6], q[7]], 3) + Qfraction.prod([q[5], q[6], q[7]], 3) - Qfraction.prod([q[0], q[1], q[2], q[7]], 4) - Qfraction.prod([q[0], q[1], q[3], q[7]], 4) - Qfraction.prod([q[0], q[1], q[4], q[7]], 4) - Qfraction.prod([q[0], q[1], q[5], q[7]], 4) - Qfraction.prod([q[0], q[1], q[6], q[7]], 4) - Qfraction.prod([q[0], q[2], q[3], q[7]], 4) - Qfraction.prod([q[0], q[2], q[4], q[7]], 4) - Qfraction.prod([q[0], q[2], q[5], q[7]], 4) - Qfraction.prod([q[0], q[2], q[6], q[7]], 4) - Qfraction.prod([q[0], q[3], q[4], q[7]], 4) - Qfraction.prod([q[0], q[3], q[5], q[7]], 4) - Qfraction.prod([q[0], q[3], q[6], q[7]], 4) - Qfraction.prod([q[0], q[4], q[5], q[7]], 4) - Qfraction.prod([q[0], q[4], q[6], q[7]], 4) - Qfraction.prod([q[0], q[5], q[6], q[7]], 4) - Qfraction.prod([q[1], q[2], q[3], q[7]], 4) - Qfraction.prod([q[1], q[2], q[4], q[7]], 4) - Qfraction.prod([q[1], q[2], q[5], q[7]], 4) - Qfraction.prod([q[1], q[2], q[6], q[7]], 4) - Qfraction.prod([q[1], q[3], q[4], q[7]], 4) - Qfraction.prod([q[1], q[3], q[5], q[7]], 4) - Qfraction.prod([q[1], q[3], q[6], q[7]], 4) - Qfraction.prod([q[1], q[4], q[5], q[7]], 4) - Qfraction.prod([q[1], q[4], q[6], q[7]], 4) - Qfraction.prod([q[1], q[5], q[6], q[7]], 4) - Qfraction.prod([q[2], q[3], q[4], q[7]], 4) - Qfraction.prod([q[2], q[3], q[5], q[7]], 4) - Qfraction.prod([q[2], q[3], q[6], q[7]], 4) - Qfraction.prod([q[2], q[4], q[5], q[7]], 4) - Qfraction.prod([q[2], q[4], q[6], q[7]], 4) - Qfraction.prod([q[2], q[5], q[6], q[7]], 4) - Qfraction.prod([q[3], q[4], q[5], q[7]], 4) - Qfraction.prod([q[3], q[4], q[6], q[7]], 4) - Qfraction.prod([q[3], q[5], q[6], q[7]], 4) - Qfraction.prod([q[4], q[5], q[6], q[7]], 4) + Qfraction.prod([q[0], q[1], q[2], q[3], q[7]], 5) + Qfraction.prod([q[0], q[1], q[2], q[4], q[7]], 5) + Qfraction.prod([q[0], q[1], q[2], q[5], q[7]], 5) + Qfraction.prod([q[0], q[1], q[2], q[6], q[7]], 5) + Qfraction.prod([q[0], q[1], q[3], q[4], q[7]], 5) + Qfraction.prod([q[0], q[1], q[3], q[5], q[7]], 5) + Qfraction.prod([q[0], q[1], q[3], q[6], q[7]], 5) + Qfraction.prod([q[0], q[1], q[4], q[5], q[7]], 5)
            q2b[7] +=  Qfraction.prod([q[0], q[1], q[4], q[6], q[7]], 5) + Qfraction.prod([q[0], q[1], q[5], q[6], q[7]], 5) + Qfraction.prod([q[0], q[2], q[3], q[4], q[7]], 5) + Qfraction.prod([q[0], q[2], q[3], q[5], q[7]], 5) + Qfraction.prod([q[0], q[2], q[3], q[6], q[7]], 5) + Qfraction.prod([q[0], q[2], q[4], q[5], q[7]], 5) + Qfraction.prod([q[0], q[2], q[4], q[6], q[7]], 5) + Qfraction.prod([q[0], q[2], q[5], q[6], q[7]], 5) + Qfraction.prod([q[0], q[3], q[4], q[5], q[7]], 5) + Qfraction.prod([q[0], q[3], q[4], q[6], q[7]], 5) + Qfraction.prod([q[0], q[3], q[5], q[6], q[7]], 5) + Qfraction.prod([q[0], q[4], q[5], q[6], q[7]], 5) + Qfraction.prod([q[1], q[2], q[3], q[4], q[7]], 5) + Qfraction.prod([q[1], q[2], q[3], q[5], q[7]], 5) + Qfraction.prod([q[1], q[2], q[3], q[6], q[7]], 5) + Qfraction.prod([q[1], q[2], q[4], q[5], q[7]], 5) + Qfraction.prod([q[1], q[2], q[4], q[6], q[7]], 5) + Qfraction.prod([q[1], q[2], q[5], q[6], q[7]], 5) + Qfraction.prod([q[1], q[3], q[4], q[5], q[7]], 5) + Qfraction.prod([q[1], q[3], q[4], q[6], q[7]], 5) + Qfraction.prod([q[1], q[3], q[5], q[6], q[7]], 5) + Qfraction.prod([q[1], q[4], q[5], q[6], q[7]], 5) + Qfraction.prod([q[2], q[3], q[4], q[5], q[7]], 5) + Qfraction.prod([q[2], q[3], q[4], q[6], q[7]], 5) + Qfraction.prod([q[2], q[3], q[5], q[6], q[7]], 5) + Qfraction.prod([q[2], q[4], q[5], q[6], q[7]], 5) + Qfraction.prod([q[3], q[4], q[5], q[6], q[7]], 5) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[7]], 6) - Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[7]], 6) - Qfraction.prod([q[0], q[1], q[2], q[3], q[6], q[7]], 6) - Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[7]], 6) - Qfraction.prod([q[0], q[1], q[2], q[4], q[6], q[7]], 6) - Qfraction.prod([q[0], q[1], q[2], q[5], q[6], q[7]], 6) - Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[7]], 6) - Qfraction.prod([q[0], q[1], q[3], q[4], q[6], q[7]], 6) - Qfraction.prod([q[0], q[1], q[3], q[5], q[6], q[7]], 6) - Qfraction.prod([q[0], q[1], q[4], q[5], q[6], q[7]], 6) - Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[7]], 6) - Qfraction.prod([q[0], q[2], q[3], q[4], q[6], q[7]], 6) - Qfraction.prod([q[0], q[2], q[3], q[5], q[6], q[7]], 6) - Qfraction.prod([q[0], q[2], q[4], q[5], q[6], q[7]], 6) - Qfraction.prod([q[0], q[3], q[4], q[5], q[6], q[7]], 6) - Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[7]], 6) - Qfraction.prod([q[1], q[2], q[3], q[4], q[6], q[7]], 6) - Qfraction.prod([q[1], q[2], q[3], q[5], q[6], q[7]], 6) - Qfraction.prod([q[1], q[2], q[4], q[5], q[6], q[7]], 6) - Qfraction.prod([q[1], q[3], q[4], q[5], q[6], q[7]], 6) - Qfraction.prod([q[2], q[3], q[4], q[5], q[6], q[7]], 6) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[7]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[6], q[7]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[6], q[7]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[6], q[7]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[6], q[7]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[6], q[7]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[6], q[7]], 7) - Qfraction.prod(q[0:8], 8)
            
        if len_q >= 9 and len_q2a < 9:
            q2b[8] = q[8] - Qfraction.prod([q[0], q[8]], 2) - Qfraction.prod([q[1], q[8]], 2) - Qfraction.prod([q[2], q[8]], 2) - Qfraction.prod([q[3], q[8]], 2) - Qfraction.prod([q[4], q[8]], 2) - Qfraction.prod([q[5], q[8]], 2) - Qfraction.prod([q[6], q[8]], 2) - Qfraction.prod([q[7], q[8]], 2) + Qfraction.prod([q[0], q[1], q[8]], 3) + Qfraction.prod([q[0], q[2], q[8]], 3) + Qfraction.prod([q[0], q[3], q[8]], 3) + Qfraction.prod([q[0], q[4], q[8]], 3) + Qfraction.prod([q[0], q[5], q[8]], 3) + Qfraction.prod([q[0], q[6], q[8]], 3) + Qfraction.prod([q[0], q[7], q[8]], 3) + Qfraction.prod([q[1], q[2], q[8]], 3) + Qfraction.prod([q[1], q[3], q[8]], 3) + Qfraction.prod([q[1], q[4], q[8]], 3) + Qfraction.prod([q[1], q[5], q[8]], 3) + Qfraction.prod([q[1], q[6], q[8]], 3) + Qfraction.prod([q[1], q[7], q[8]], 3) + Qfraction.prod([q[2], q[3], q[8]], 3) + Qfraction.prod([q[2], q[4], q[8]], 3) + Qfraction.prod([q[2], q[5], q[8]], 3) + Qfraction.prod([q[2], q[6], q[8]], 3) + Qfraction.prod([q[2], q[7], q[8]], 3) + Qfraction.prod([q[3], q[4], q[8]], 3) + Qfraction.prod([q[3], q[5], q[8]], 3) + Qfraction.prod([q[3], q[6], q[8]], 3) + Qfraction.prod([q[3], q[7], q[8]], 3) + Qfraction.prod([q[4], q[5], q[8]], 3) + Qfraction.prod([q[4], q[6], q[8]], 3) + Qfraction.prod([q[4], q[7], q[8]], 3) + Qfraction.prod([q[5], q[6], q[8]], 3) + Qfraction.prod([q[5], q[7], q[8]], 3) + Qfraction.prod([q[6], q[7], q[8]], 3) - Qfraction.prod([q[0], q[1], q[2], q[8]], 4) - Qfraction.prod([q[0], q[1], q[3], q[8]], 4) - Qfraction.prod([q[0], q[1], q[4], q[8]], 4) - Qfraction.prod([q[0], q[1], q[5], q[8]], 4) - Qfraction.prod([q[0], q[1], q[6], q[8]], 4) - Qfraction.prod([q[0], q[1], q[7], q[8]], 4) - Qfraction.prod([q[0], q[2], q[3], q[8]], 4) - Qfraction.prod([q[0], q[2], q[4], q[8]], 4) - Qfraction.prod([q[0], q[2], q[5], q[8]], 4) - Qfraction.prod([q[0], q[2], q[6], q[8]], 4) - Qfraction.prod([q[0], q[2], q[7], q[8]], 4) - Qfraction.prod([q[0], q[3], q[4], q[8]], 4) - Qfraction.prod([q[0], q[3], q[5], q[8]], 4) - Qfraction.prod([q[0], q[3], q[6], q[8]], 4) - Qfraction.prod([q[0], q[3], q[7], q[8]], 4) - Qfraction.prod([q[0], q[4], q[5], q[8]], 4) - Qfraction.prod([q[0], q[4], q[6], q[8]], 4) - Qfraction.prod([q[0], q[4], q[7], q[8]], 4) - Qfraction.prod([q[0], q[5], q[6], q[8]], 4) - Qfraction.prod([q[0], q[5], q[7], q[8]], 4) - Qfraction.prod([q[0], q[6], q[7], q[8]], 4) - Qfraction.prod([q[1], q[2], q[3], q[8]], 4) - Qfraction.prod([q[1], q[2], q[4], q[8]], 4) - Qfraction.prod([q[1], q[2], q[5], q[8]], 4) - Qfraction.prod([q[1], q[2], q[6], q[8]], 4) - Qfraction.prod([q[1], q[2], q[7], q[8]], 4) - Qfraction.prod([q[1], q[3], q[4], q[8]], 4) - Qfraction.prod([q[1], q[3], q[5], q[8]], 4) - Qfraction.prod([q[1], q[3], q[6], q[8]], 4) - Qfraction.prod([q[1], q[3], q[7], q[8]], 4) - Qfraction.prod([q[1], q[4], q[5], q[8]], 4) - Qfraction.prod([q[1], q[4], q[6], q[8]], 4) - Qfraction.prod([q[1], q[4], q[7], q[8]], 4) - Qfraction.prod([q[1], q[5], q[6], q[8]], 4) - Qfraction.prod([q[1], q[5], q[7], q[8]], 4) - Qfraction.prod([q[1], q[6], q[7], q[8]], 4) - Qfraction.prod([q[2], q[3], q[4], q[8]], 4) - Qfraction.prod([q[2], q[3], q[5], q[8]], 4) - Qfraction.prod([q[2], q[3], q[6], q[8]], 4) - Qfraction.prod([q[2], q[3], q[7], q[8]], 4) - Qfraction.prod([q[2], q[4], q[5], q[8]], 4) - Qfraction.prod([q[2], q[4], q[6], q[8]], 4) - Qfraction.prod([q[2], q[4], q[7], q[8]], 4) - Qfraction.prod([q[2], q[5], q[6], q[8]], 4) - Qfraction.prod([q[2], q[5], q[7], q[8]], 4) - Qfraction.prod([q[2], q[6], q[7], q[8]], 4) - Qfraction.prod([q[3], q[4], q[5], q[8]], 4) - Qfraction.prod([q[3], q[4], q[6], q[8]], 4) - Qfraction.prod([q[3], q[4], q[7], q[8]], 4) - Qfraction.prod([q[3], q[5], q[6], q[8]], 4) - Qfraction.prod([q[3], q[5], q[7], q[8]], 4) - Qfraction.prod([q[3], q[6], q[7], q[8]], 4) - Qfraction.prod([q[4], q[5], q[6], q[8]], 4) - Qfraction.prod([q[4], q[5], q[7], q[8]], 4) - Qfraction.prod([q[4], q[6], q[7], q[8]], 4) - Qfraction.prod([q[5], q[6], q[7], q[8]], 4) + Qfraction.prod([q[0], q[1], q[2], q[3], q[8]], 5) + Qfraction.prod([q[0], q[1], q[2], q[4], q[8]], 5) + Qfraction.prod([q[0], q[1], q[2], q[5], q[8]], 5) + Qfraction.prod([q[0], q[1], q[2], q[6], q[8]], 5) + Qfraction.prod([q[0], q[1], q[2], q[7], q[8]], 5) + Qfraction.prod([q[0], q[1], q[3], q[4], q[8]], 5) + Qfraction.prod([q[0], q[1], q[3], q[5], q[8]], 5) + Qfraction.prod([q[0], q[1], q[3], q[6], q[8]], 5) + Qfraction.prod([q[0], q[1], q[3], q[7], q[8]], 5) + Qfraction.prod([q[0], q[1], q[4], q[5], q[8]], 5) + Qfraction.prod([q[0], q[1], q[4], q[6], q[8]], 5) + Qfraction.prod([q[0], q[1], q[4], q[7], q[8]], 5) + Qfraction.prod([q[0], q[1], q[5], q[6], q[8]], 5) + Qfraction.prod([q[0], q[1], q[5], q[7], q[8]], 5) + Qfraction.prod([q[0], q[1], q[6], q[7], q[8]], 5) + Qfraction.prod([q[0], q[2], q[3], q[4], q[8]], 5) + Qfraction.prod([q[0], q[2], q[3], q[5], q[8]], 5) + Qfraction.prod([q[0], q[2], q[3], q[6], q[8]], 5) + Qfraction.prod([q[0], q[2], q[3], q[7], q[8]], 5) + Qfraction.prod([q[0], q[2], q[4], q[5], q[8]], 5) + Qfraction.prod([q[0], q[2], q[4], q[6], q[8]], 5) + Qfraction.prod([q[0], q[2], q[4], q[7], q[8]], 5) + Qfraction.prod([q[0], q[2], q[5], q[6], q[8]], 5) + Qfraction.prod([q[0], q[2], q[5], q[7], q[8]], 5) + Qfraction.prod([q[0], q[2], q[6], q[7], q[8]], 5) + Qfraction.prod([q[0], q[3], q[4], q[5], q[8]], 5) + Qfraction.prod([q[0], q[3], q[4], q[6], q[8]], 5) + Qfraction.prod([q[0], q[3], q[4], q[7], q[8]], 5) + Qfraction.prod([q[0], q[3], q[5], q[6], q[8]], 5) + Qfraction.prod([q[0], q[3], q[5], q[7], q[8]], 5) + Qfraction.prod([q[0], q[3], q[6], q[7], q[8]], 5) + Qfraction.prod([q[0], q[4], q[5], q[6], q[8]], 5) + Qfraction.prod([q[0], q[4], q[5], q[7], q[8]], 5) + Qfraction.prod([q[0], q[4], q[6], q[7], q[8]], 5) + Qfraction.prod([q[0], q[5], q[6], q[7], q[8]], 5) + Qfraction.prod([q[1], q[2], q[3], q[4], q[8]], 5) + Qfraction.prod([q[1], q[2], q[3], q[5], q[8]], 5) + Qfraction.prod([q[1], q[2], q[3], q[6], q[8]], 5) + Qfraction.prod([q[1], q[2], q[3], q[7], q[8]], 5) + Qfraction.prod([q[1], q[2], q[4], q[5], q[8]], 5) + Qfraction.prod([q[1], q[2], q[4], q[6], q[8]], 5) + Qfraction.prod([q[1], q[2], q[4], q[7], q[8]], 5) + Qfraction.prod([q[1], q[2], q[5], q[6], q[8]], 5) + Qfraction.prod([q[1], q[2], q[5], q[7], q[8]], 5) + Qfraction.prod([q[1], q[2], q[6], q[7], q[8]], 5) + Qfraction.prod([q[1], q[3], q[4], q[5], q[8]], 5) + Qfraction.prod([q[1], q[3], q[4], q[6], q[8]], 5) + Qfraction.prod([q[1], q[3], q[4], q[7], q[8]], 5) + Qfraction.prod([q[1], q[3], q[5], q[6], q[8]], 5) + Qfraction.prod([q[1], q[3], q[5], q[7], q[8]], 5) + Qfraction.prod([q[1], q[3], q[6], q[7], q[8]], 5) + Qfraction.prod([q[1], q[4], q[5], q[6], q[8]], 5) + Qfraction.prod([q[1], q[4], q[5], q[7], q[8]], 5) + Qfraction.prod([q[1], q[4], q[6], q[7], q[8]], 5) + Qfraction.prod([q[1], q[5], q[6], q[7], q[8]], 5) + Qfraction.prod([q[2], q[3], q[4], q[5], q[8]], 5) + Qfraction.prod([q[2], q[3], q[4], q[6], q[8]], 5) + Qfraction.prod([q[2], q[3], q[4], q[7], q[8]], 5) + Qfraction.prod([q[2], q[3], q[5], q[6], q[8]], 5) + Qfraction.prod([q[2], q[3], q[5], q[7], q[8]], 5) + Qfraction.prod([q[2], q[3], q[6], q[7], q[8]], 5) + Qfraction.prod([q[2], q[4], q[5], q[6], q[8]], 5) + Qfraction.prod([q[2], q[4], q[5], q[7], q[8]], 5) + Qfraction.prod([q[2], q[4], q[6], q[7], q[8]], 5) + Qfraction.prod([q[2], q[5], q[6], q[7], q[8]], 5) + Qfraction.prod([q[3], q[4], q[5], q[6], q[8]], 5) + Qfraction.prod([q[3], q[4], q[5], q[7], q[8]], 5) + Qfraction.prod([q[3], q[4], q[6], q[7], q[8]], 5) + Qfraction.prod([q[3], q[5], q[6], q[7], q[8]], 5) + Qfraction.prod([q[4], q[5], q[6], q[7], q[8]], 5) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[8]], 6) - Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[8]], 6) - Qfraction.prod([q[0], q[1], q[2], q[3], q[6], q[8]], 6) - Qfraction.prod([q[0], q[1], q[2], q[3], q[7], q[8]], 6) - Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[8]], 6) - Qfraction.prod([q[0], q[1], q[2], q[4], q[6], q[8]], 6) - Qfraction.prod([q[0], q[1], q[2], q[4], q[7], q[8]], 6) - Qfraction.prod([q[0], q[1], q[2], q[5], q[6], q[8]], 6) - Qfraction.prod([q[0], q[1], q[2], q[5], q[7], q[8]], 6)
            q2b[8] += -Qfraction.prod([q[0], q[1], q[2], q[6], q[7], q[8]], 6) - Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[8]], 6) - Qfraction.prod([q[0], q[1], q[3], q[4], q[6], q[8]], 6) - Qfraction.prod([q[0], q[1], q[3], q[4], q[7], q[8]], 6) - Qfraction.prod([q[0], q[1], q[3], q[5], q[6], q[8]], 6) - Qfraction.prod([q[0], q[1], q[3], q[5], q[7], q[8]], 6) - Qfraction.prod([q[0], q[1], q[3], q[6], q[7], q[8]], 6) - Qfraction.prod([q[0], q[1], q[4], q[5], q[6], q[8]], 6) - Qfraction.prod([q[0], q[1], q[4], q[5], q[7], q[8]], 6) - Qfraction.prod([q[0], q[1], q[4], q[6], q[7], q[8]], 6) - Qfraction.prod([q[0], q[1], q[5], q[6], q[7], q[8]], 6) - Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[8]], 6) - Qfraction.prod([q[0], q[2], q[3], q[4], q[6], q[8]], 6) - Qfraction.prod([q[0], q[2], q[3], q[4], q[7], q[8]], 6) - Qfraction.prod([q[0], q[2], q[3], q[5], q[6], q[8]], 6) - Qfraction.prod([q[0], q[2], q[3], q[5], q[7], q[8]], 6) - Qfraction.prod([q[0], q[2], q[3], q[6], q[7], q[8]], 6) - Qfraction.prod([q[0], q[2], q[4], q[5], q[6], q[8]], 6) - Qfraction.prod([q[0], q[2], q[4], q[5], q[7], q[8]], 6) - Qfraction.prod([q[0], q[2], q[4], q[6], q[7], q[8]], 6) - Qfraction.prod([q[0], q[2], q[5], q[6], q[7], q[8]], 6) - Qfraction.prod([q[0], q[3], q[4], q[5], q[6], q[8]], 6) - Qfraction.prod([q[0], q[3], q[4], q[5], q[7], q[8]], 6) - Qfraction.prod([q[0], q[3], q[4], q[6], q[7], q[8]], 6) - Qfraction.prod([q[0], q[3], q[5], q[6], q[7], q[8]], 6) - Qfraction.prod([q[0], q[4], q[5], q[6], q[7], q[8]], 6) - Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[8]], 6) - Qfraction.prod([q[1], q[2], q[3], q[4], q[6], q[8]], 6) - Qfraction.prod([q[1], q[2], q[3], q[4], q[7], q[8]], 6) - Qfraction.prod([q[1], q[2], q[3], q[5], q[6], q[8]], 6) - Qfraction.prod([q[1], q[2], q[3], q[5], q[7], q[8]], 6) - Qfraction.prod([q[1], q[2], q[3], q[6], q[7], q[8]], 6) - Qfraction.prod([q[1], q[2], q[4], q[5], q[6], q[8]], 6) - Qfraction.prod([q[1], q[2], q[4], q[5], q[7], q[8]], 6) - Qfraction.prod([q[1], q[2], q[4], q[6], q[7], q[8]], 6) - Qfraction.prod([q[1], q[2], q[5], q[6], q[7], q[8]], 6) - Qfraction.prod([q[1], q[3], q[4], q[5], q[6], q[8]], 6) - Qfraction.prod([q[1], q[3], q[4], q[5], q[7], q[8]], 6) - Qfraction.prod([q[1], q[3], q[4], q[6], q[7], q[8]], 6) - Qfraction.prod([q[1], q[3], q[5], q[6], q[7], q[8]], 6) - Qfraction.prod([q[1], q[4], q[5], q[6], q[7], q[8]], 6) - Qfraction.prod([q[2], q[3], q[4], q[5], q[6], q[8]], 6) - Qfraction.prod([q[2], q[3], q[4], q[5], q[7], q[8]], 6) - Qfraction.prod([q[2], q[3], q[4], q[6], q[7], q[8]], 6) - Qfraction.prod([q[2], q[3], q[5], q[6], q[7], q[8]], 6) - Qfraction.prod([q[2], q[4], q[5], q[6], q[7], q[8]], 6) - Qfraction.prod([q[3], q[4], q[5], q[6], q[7], q[8]], 6) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[8]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[6], q[8]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[7], q[8]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[6], q[8]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[7], q[8]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[6], q[7], q[8]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[6], q[8]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[7], q[8]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[6], q[7], q[8]], 7) + Qfraction.prod([q[0], q[1], q[2], q[5], q[6], q[7], q[8]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[6], q[8]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[7], q[8]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[6], q[7], q[8]], 7) + Qfraction.prod([q[0], q[1], q[3], q[5], q[6], q[7], q[8]], 7) + Qfraction.prod([q[0], q[1], q[4], q[5], q[6], q[7], q[8]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[6], q[8]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[7], q[8]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[6], q[7], q[8]], 7) + Qfraction.prod([q[0], q[2], q[3], q[5], q[6], q[7], q[8]], 7) + Qfraction.prod([q[0], q[2], q[4], q[5], q[6], q[7], q[8]], 7) + Qfraction.prod([q[0], q[3], q[4], q[5], q[6], q[7], q[8]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[6], q[8]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[7], q[8]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[6], q[7], q[8]], 7) + Qfraction.prod([q[1], q[2], q[3], q[5], q[6], q[7], q[8]], 7) + Qfraction.prod([q[1], q[2], q[4], q[5], q[6], q[7], q[8]], 7) + Qfraction.prod([q[1], q[3], q[4], q[5], q[6], q[7], q[8]], 7) + Qfraction.prod([q[2], q[3], q[4], q[5], q[6], q[7], q[8]], 7) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[8]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[7], q[8]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[6], q[7], q[8]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[6], q[7], q[8]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[6], q[7], q[8]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[6], q[7], q[8]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[6], q[7], q[8]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[8]], 8) + Qfraction.prod(q[0:9], 9)
            
        if len_q >= 10 and len_q2a < 10:
            q2b[9] = q[9] - Qfraction.prod([q[0], q[9]], 2) - Qfraction.prod([q[1], q[9]], 2) - Qfraction.prod([q[2], q[9]], 2) - Qfraction.prod([q[3], q[9]], 2) - Qfraction.prod([q[4], q[9]], 2) - Qfraction.prod([q[5], q[9]], 2) - Qfraction.prod([q[6], q[9]], 2) - Qfraction.prod([q[7], q[9]], 2) - Qfraction.prod([q[8], q[9]], 2) + Qfraction.prod([q[0], q[1], q[9]], 3) + Qfraction.prod([q[0], q[2], q[9]], 3) + Qfraction.prod([q[0], q[3], q[9]], 3) + Qfraction.prod([q[0], q[4], q[9]], 3) + Qfraction.prod([q[0], q[5], q[9]], 3) + Qfraction.prod([q[0], q[6], q[9]], 3) + Qfraction.prod([q[0], q[7], q[9]], 3) + Qfraction.prod([q[0], q[8], q[9]], 3) + Qfraction.prod([q[1], q[2], q[9]], 3) + Qfraction.prod([q[1], q[3], q[9]], 3) + Qfraction.prod([q[1], q[4], q[9]], 3) + Qfraction.prod([q[1], q[5], q[9]], 3) + Qfraction.prod([q[1], q[6], q[9]], 3) + Qfraction.prod([q[1], q[7], q[9]], 3) + Qfraction.prod([q[1], q[8], q[9]], 3) + Qfraction.prod([q[2], q[3], q[9]], 3) + Qfraction.prod([q[2], q[4], q[9]], 3) + Qfraction.prod([q[2], q[5], q[9]], 3) + Qfraction.prod([q[2], q[6], q[9]], 3) + Qfraction.prod([q[2], q[7], q[9]], 3) + Qfraction.prod([q[2], q[8], q[9]], 3) + Qfraction.prod([q[3], q[4], q[9]], 3) + Qfraction.prod([q[3], q[5], q[9]], 3) + Qfraction.prod([q[3], q[6], q[9]], 3) + Qfraction.prod([q[3], q[7], q[9]], 3) + Qfraction.prod([q[3], q[8], q[9]], 3) + Qfraction.prod([q[4], q[5], q[9]], 3) + Qfraction.prod([q[4], q[6], q[9]], 3) + Qfraction.prod([q[4], q[7], q[9]], 3) + Qfraction.prod([q[4], q[8], q[9]], 3) + Qfraction.prod([q[5], q[6], q[9]], 3) + Qfraction.prod([q[5], q[7], q[9]], 3) + Qfraction.prod([q[5], q[8], q[9]], 3) + Qfraction.prod([q[6], q[7], q[9]], 3) + Qfraction.prod([q[6], q[8], q[9]], 3) + Qfraction.prod([q[7], q[8], q[9]], 3) - Qfraction.prod([q[0], q[1], q[2], q[9]], 4) - Qfraction.prod([q[0], q[1], q[3], q[9]], 4) - Qfraction.prod([q[0], q[1], q[4], q[9]], 4) - Qfraction.prod([q[0], q[1], q[5], q[9]], 4) - Qfraction.prod([q[0], q[1], q[6], q[9]], 4) - Qfraction.prod([q[0], q[1], q[7], q[9]], 4) - Qfraction.prod([q[0], q[1], q[8], q[9]], 4) - Qfraction.prod([q[0], q[2], q[3], q[9]], 4) - Qfraction.prod([q[0], q[2], q[4], q[9]], 4) - Qfraction.prod([q[0], q[2], q[5], q[9]], 4) - Qfraction.prod([q[0], q[2], q[6], q[9]], 4) - Qfraction.prod([q[0], q[2], q[7], q[9]], 4) - Qfraction.prod([q[0], q[2], q[8], q[9]], 4) - Qfraction.prod([q[0], q[3], q[4], q[9]], 4) - Qfraction.prod([q[0], q[3], q[5], q[9]], 4) - Qfraction.prod([q[0], q[3], q[6], q[9]], 4) - Qfraction.prod([q[0], q[3], q[7], q[9]], 4) - Qfraction.prod([q[0], q[3], q[8], q[9]], 4) - Qfraction.prod([q[0], q[4], q[5], q[9]], 4) - Qfraction.prod([q[0], q[4], q[6], q[9]], 4) - Qfraction.prod([q[0], q[4], q[7], q[9]], 4) - Qfraction.prod([q[0], q[4], q[8], q[9]], 4) - Qfraction.prod([q[0], q[5], q[6], q[9]], 4) - Qfraction.prod([q[0], q[5], q[7], q[9]], 4) - Qfraction.prod([q[0], q[5], q[8], q[9]], 4) - Qfraction.prod([q[0], q[6], q[7], q[9]], 4) - Qfraction.prod([q[0], q[6], q[8], q[9]], 4) - Qfraction.prod([q[0], q[7], q[8], q[9]], 4) - Qfraction.prod([q[1], q[2], q[3], q[9]], 4) - Qfraction.prod([q[1], q[2], q[4], q[9]], 4) - Qfraction.prod([q[1], q[2], q[5], q[9]], 4) - Qfraction.prod([q[1], q[2], q[6], q[9]], 4) - Qfraction.prod([q[1], q[2], q[7], q[9]], 4) - Qfraction.prod([q[1], q[2], q[8], q[9]], 4) - Qfraction.prod([q[1], q[3], q[4], q[9]], 4) - Qfraction.prod([q[1], q[3], q[5], q[9]], 4) - Qfraction.prod([q[1], q[3], q[6], q[9]], 4) - Qfraction.prod([q[1], q[3], q[7], q[9]], 4) - Qfraction.prod([q[1], q[3], q[8], q[9]], 4) - Qfraction.prod([q[1], q[4], q[5], q[9]], 4) - Qfraction.prod([q[1], q[4], q[6], q[9]], 4) - Qfraction.prod([q[1], q[4], q[7], q[9]], 4) - Qfraction.prod([q[1], q[4], q[8], q[9]], 4) - Qfraction.prod([q[1], q[5], q[6], q[9]], 4) - Qfraction.prod([q[1], q[5], q[7], q[9]], 4) - Qfraction.prod([q[1], q[5], q[8], q[9]], 4) - Qfraction.prod([q[1], q[6], q[7], q[9]], 4) - Qfraction.prod([q[1], q[6], q[8], q[9]], 4) - Qfraction.prod([q[1], q[7], q[8], q[9]], 4) - Qfraction.prod([q[2], q[3], q[4], q[9]], 4) - Qfraction.prod([q[2], q[3], q[5], q[9]], 4) - Qfraction.prod([q[2], q[3], q[6], q[9]], 4) - Qfraction.prod([q[2], q[3], q[7], q[9]], 4) - Qfraction.prod([q[2], q[3], q[8], q[9]], 4) - Qfraction.prod([q[2], q[4], q[5], q[9]], 4) - Qfraction.prod([q[2], q[4], q[6], q[9]], 4) - Qfraction.prod([q[2], q[4], q[7], q[9]], 4) - Qfraction.prod([q[2], q[4], q[8], q[9]], 4) - Qfraction.prod([q[2], q[5], q[6], q[9]], 4) - Qfraction.prod([q[2], q[5], q[7], q[9]], 4) - Qfraction.prod([q[2], q[5], q[8], q[9]], 4) - Qfraction.prod([q[2], q[6], q[7], q[9]], 4) - Qfraction.prod([q[2], q[6], q[8], q[9]], 4) - Qfraction.prod([q[2], q[7], q[8], q[9]], 4) - Qfraction.prod([q[3], q[4], q[5], q[9]], 4) - Qfraction.prod([q[3], q[4], q[6], q[9]], 4) - Qfraction.prod([q[3], q[4], q[7], q[9]], 4) - Qfraction.prod([q[3], q[4], q[8], q[9]], 4) - Qfraction.prod([q[3], q[5], q[6], q[9]], 4) - Qfraction.prod([q[3], q[5], q[7], q[9]], 4) - Qfraction.prod([q[3], q[5], q[8], q[9]], 4) - Qfraction.prod([q[3], q[6], q[7], q[9]], 4) - Qfraction.prod([q[3], q[6], q[8], q[9]], 4) - Qfraction.prod([q[3], q[7], q[8], q[9]], 4) - Qfraction.prod([q[4], q[5], q[6], q[9]], 4) - Qfraction.prod([q[4], q[5], q[7], q[9]], 4) - Qfraction.prod([q[4], q[5], q[8], q[9]], 4) - Qfraction.prod([q[4], q[6], q[7], q[9]], 4) - Qfraction.prod([q[4], q[6], q[8], q[9]], 4) - Qfraction.prod([q[4], q[7], q[8], q[9]], 4) - Qfraction.prod([q[5], q[6], q[7], q[9]], 4) - Qfraction.prod([q[5], q[6], q[8], q[9]], 4) - Qfraction.prod([q[5], q[7], q[8], q[9]], 4) - Qfraction.prod([q[6], q[7], q[8], q[9]], 4) + Qfraction.prod([q[0], q[1], q[2], q[3], q[9]], 5) + Qfraction.prod([q[0], q[1], q[2], q[4], q[9]], 5) + Qfraction.prod([q[0], q[1], q[2], q[5], q[9]], 5) + Qfraction.prod([q[0], q[1], q[2], q[6], q[9]], 5) + Qfraction.prod([q[0], q[1], q[2], q[7], q[9]], 5) + Qfraction.prod([q[0], q[1], q[2], q[8], q[9]], 5) + Qfraction.prod([q[0], q[1], q[3], q[4], q[9]], 5) + Qfraction.prod([q[0], q[1], q[3], q[5], q[9]], 5) + Qfraction.prod([q[0], q[1], q[3], q[6], q[9]], 5) + Qfraction.prod([q[0], q[1], q[3], q[7], q[9]], 5) + Qfraction.prod([q[0], q[1], q[3], q[8], q[9]], 5) + Qfraction.prod([q[0], q[1], q[4], q[5], q[9]], 5) + Qfraction.prod([q[0], q[1], q[4], q[6], q[9]], 5) + Qfraction.prod([q[0], q[1], q[4], q[7], q[9]], 5) + Qfraction.prod([q[0], q[1], q[4], q[8], q[9]], 5) + Qfraction.prod([q[0], q[1], q[5], q[6], q[9]], 5) + Qfraction.prod([q[0], q[1], q[5], q[7], q[9]], 5) + Qfraction.prod([q[0], q[1], q[5], q[8], q[9]], 5) + Qfraction.prod([q[0], q[1], q[6], q[7], q[9]], 5) + Qfraction.prod([q[0], q[1], q[6], q[8], q[9]], 5) + Qfraction.prod([q[0], q[1], q[7], q[8], q[9]], 5) + Qfraction.prod([q[0], q[2], q[3], q[4], q[9]], 5) + Qfraction.prod([q[0], q[2], q[3], q[5], q[9]], 5) + Qfraction.prod([q[0], q[2], q[3], q[6], q[9]], 5) + Qfraction.prod([q[0], q[2], q[3], q[7], q[9]], 5) + Qfraction.prod([q[0], q[2], q[3], q[8], q[9]], 5) + Qfraction.prod([q[0], q[2], q[4], q[5], q[9]], 5) + Qfraction.prod([q[0], q[2], q[4], q[6], q[9]], 5) + Qfraction.prod([q[0], q[2], q[4], q[7], q[9]], 5) + Qfraction.prod([q[0], q[2], q[4], q[8], q[9]], 5) + Qfraction.prod([q[0], q[2], q[5], q[6], q[9]], 5) + Qfraction.prod([q[0], q[2], q[5], q[7], q[9]], 5) + Qfraction.prod([q[0], q[2], q[5], q[8], q[9]], 5) + Qfraction.prod([q[0], q[2], q[6], q[7], q[9]], 5) + Qfraction.prod([q[0], q[2], q[6], q[8], q[9]], 5) + Qfraction.prod([q[0], q[2], q[7], q[8], q[9]], 5) + Qfraction.prod([q[0], q[3], q[4], q[5], q[9]], 5) + Qfraction.prod([q[0], q[3], q[4], q[6], q[9]], 5) + Qfraction.prod([q[0], q[3], q[4], q[7], q[9]], 5) + Qfraction.prod([q[0], q[3], q[4], q[8], q[9]], 5) + Qfraction.prod([q[0], q[3], q[5], q[6], q[9]], 5) + Qfraction.prod([q[0], q[3], q[5], q[7], q[9]], 5) + Qfraction.prod([q[0], q[3], q[5], q[8], q[9]], 5) + Qfraction.prod([q[0], q[3], q[6], q[7], q[9]], 5) + Qfraction.prod([q[0], q[3], q[6], q[8], q[9]], 5) + Qfraction.prod([q[0], q[3], q[7], q[8], q[9]], 5) + Qfraction.prod([q[0], q[4], q[5], q[6], q[9]], 5) + Qfraction.prod([q[0], q[4], q[5], q[7], q[9]], 5)
            q2b[9] += Qfraction.prod([q[0], q[4], q[5], q[8], q[9]], 5) + Qfraction.prod([q[0], q[4], q[6], q[7], q[9]], 5) + Qfraction.prod([q[0], q[4], q[6], q[8], q[9]], 5) + Qfraction.prod([q[0], q[4], q[7], q[8], q[9]], 5) + Qfraction.prod([q[0], q[5], q[6], q[7], q[9]], 5) + Qfraction.prod([q[0], q[5], q[6], q[8], q[9]], 5) + Qfraction.prod([q[0], q[5], q[7], q[8], q[9]], 5) + Qfraction.prod([q[0], q[6], q[7], q[8], q[9]], 5) + Qfraction.prod([q[1], q[2], q[3], q[4], q[9]], 5) + Qfraction.prod([q[1], q[2], q[3], q[5], q[9]], 5) + Qfraction.prod([q[1], q[2], q[3], q[6], q[9]], 5) + Qfraction.prod([q[1], q[2], q[3], q[7], q[9]], 5) + Qfraction.prod([q[1], q[2], q[3], q[8], q[9]], 5) + Qfraction.prod([q[1], q[2], q[4], q[5], q[9]], 5) + Qfraction.prod([q[1], q[2], q[4], q[6], q[9]], 5) + Qfraction.prod([q[1], q[2], q[4], q[7], q[9]], 5) + Qfraction.prod([q[1], q[2], q[4], q[8], q[9]], 5) + Qfraction.prod([q[1], q[2], q[5], q[6], q[9]], 5) + Qfraction.prod([q[1], q[2], q[5], q[7], q[9]], 5) + Qfraction.prod([q[1], q[2], q[5], q[8], q[9]], 5) + Qfraction.prod([q[1], q[2], q[6], q[7], q[9]], 5) + Qfraction.prod([q[1], q[2], q[6], q[8], q[9]], 5) + Qfraction.prod([q[1], q[2], q[7], q[8], q[9]], 5) + Qfraction.prod([q[1], q[3], q[4], q[5], q[9]], 5) + Qfraction.prod([q[1], q[3], q[4], q[6], q[9]], 5) + Qfraction.prod([q[1], q[3], q[4], q[7], q[9]], 5) + Qfraction.prod([q[1], q[3], q[4], q[8], q[9]], 5) + Qfraction.prod([q[1], q[3], q[5], q[6], q[9]], 5) + Qfraction.prod([q[1], q[3], q[5], q[7], q[9]], 5) + Qfraction.prod([q[1], q[3], q[5], q[8], q[9]], 5) + Qfraction.prod([q[1], q[3], q[6], q[7], q[9]], 5) + Qfraction.prod([q[1], q[3], q[6], q[8], q[9]], 5) + Qfraction.prod([q[1], q[3], q[7], q[8], q[9]], 5) + Qfraction.prod([q[1], q[4], q[5], q[6], q[9]], 5) + Qfraction.prod([q[1], q[4], q[5], q[7], q[9]], 5) + Qfraction.prod([q[1], q[4], q[5], q[8], q[9]], 5) + Qfraction.prod([q[1], q[4], q[6], q[7], q[9]], 5) + Qfraction.prod([q[1], q[4], q[6], q[8], q[9]], 5) + Qfraction.prod([q[1], q[4], q[7], q[8], q[9]], 5) + Qfraction.prod([q[1], q[5], q[6], q[7], q[9]], 5) + Qfraction.prod([q[1], q[5], q[6], q[8], q[9]], 5) + Qfraction.prod([q[1], q[5], q[7], q[8], q[9]], 5) + Qfraction.prod([q[1], q[6], q[7], q[8], q[9]], 5) + Qfraction.prod([q[2], q[3], q[4], q[5], q[9]], 5) + Qfraction.prod([q[2], q[3], q[4], q[6], q[9]], 5) + Qfraction.prod([q[2], q[3], q[4], q[7], q[9]], 5) + Qfraction.prod([q[2], q[3], q[4], q[8], q[9]], 5) + Qfraction.prod([q[2], q[3], q[5], q[6], q[9]], 5) + Qfraction.prod([q[2], q[3], q[5], q[7], q[9]], 5) + Qfraction.prod([q[2], q[3], q[5], q[8], q[9]], 5) + Qfraction.prod([q[2], q[3], q[6], q[7], q[9]], 5) + Qfraction.prod([q[2], q[3], q[6], q[8], q[9]], 5) + Qfraction.prod([q[2], q[3], q[7], q[8], q[9]], 5) + Qfraction.prod([q[2], q[4], q[5], q[6], q[9]], 5) + Qfraction.prod([q[2], q[4], q[5], q[7], q[9]], 5) + Qfraction.prod([q[2], q[4], q[5], q[8], q[9]], 5) + Qfraction.prod([q[2], q[4], q[6], q[7], q[9]], 5) + Qfraction.prod([q[2], q[4], q[6], q[8], q[9]], 5) + Qfraction.prod([q[2], q[4], q[7], q[8], q[9]], 5) + Qfraction.prod([q[2], q[5], q[6], q[7], q[9]], 5) + Qfraction.prod([q[2], q[5], q[6], q[8], q[9]], 5) + Qfraction.prod([q[2], q[5], q[7], q[8], q[9]], 5) + Qfraction.prod([q[2], q[6], q[7], q[8], q[9]], 5) + Qfraction.prod([q[3], q[4], q[5], q[6], q[9]], 5) + Qfraction.prod([q[3], q[4], q[5], q[7], q[9]], 5) + Qfraction.prod([q[3], q[4], q[5], q[8], q[9]], 5) + Qfraction.prod([q[3], q[4], q[6], q[7], q[9]], 5) + Qfraction.prod([q[3], q[4], q[6], q[8], q[9]], 5) + Qfraction.prod([q[3], q[4], q[7], q[8], q[9]], 5) + Qfraction.prod([q[3], q[5], q[6], q[7], q[9]], 5) + Qfraction.prod([q[3], q[5], q[6], q[8], q[9]], 5) + Qfraction.prod([q[3], q[5], q[7], q[8], q[9]], 5) + Qfraction.prod([q[3], q[6], q[7], q[8], q[9]], 5) + Qfraction.prod([q[4], q[5], q[6], q[7], q[9]], 5) + Qfraction.prod([q[4], q[5], q[6], q[8], q[9]], 5) + Qfraction.prod([q[4], q[5], q[7], q[8], q[9]], 5) + Qfraction.prod([q[4], q[6], q[7], q[8], q[9]], 5) + Qfraction.prod([q[5], q[6], q[7], q[8], q[9]], 5) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[9]], 6) - Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[9]], 6) - Qfraction.prod([q[0], q[1], q[2], q[3], q[6], q[9]], 6) - Qfraction.prod([q[0], q[1], q[2], q[3], q[7], q[9]], 6) - Qfraction.prod([q[0], q[1], q[2], q[3], q[8], q[9]], 6) - Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[9]], 6) - Qfraction.prod([q[0], q[1], q[2], q[4], q[6], q[9]], 6) - Qfraction.prod([q[0], q[1], q[2], q[4], q[7], q[9]], 6) - Qfraction.prod([q[0], q[1], q[2], q[4], q[8], q[9]], 6) - Qfraction.prod([q[0], q[1], q[2], q[5], q[6], q[9]], 6) - Qfraction.prod([q[0], q[1], q[2], q[5], q[7], q[9]], 6) - Qfraction.prod([q[0], q[1], q[2], q[5], q[8], q[9]], 6) - Qfraction.prod([q[0], q[1], q[2], q[6], q[7], q[9]], 6) - Qfraction.prod([q[0], q[1], q[2], q[6], q[8], q[9]], 6) - Qfraction.prod([q[0], q[1], q[2], q[7], q[8], q[9]], 6) - Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[9]], 6) - Qfraction.prod([q[0], q[1], q[3], q[4], q[6], q[9]], 6) - Qfraction.prod([q[0], q[1], q[3], q[4], q[7], q[9]], 6) - Qfraction.prod([q[0], q[1], q[3], q[4], q[8], q[9]], 6) - Qfraction.prod([q[0], q[1], q[3], q[5], q[6], q[9]], 6) - Qfraction.prod([q[0], q[1], q[3], q[5], q[7], q[9]], 6) - Qfraction.prod([q[0], q[1], q[3], q[5], q[8], q[9]], 6) - Qfraction.prod([q[0], q[1], q[3], q[6], q[7], q[9]], 6) - Qfraction.prod([q[0], q[1], q[3], q[6], q[8], q[9]], 6) - Qfraction.prod([q[0], q[1], q[3], q[7], q[8], q[9]], 6) - Qfraction.prod([q[0], q[1], q[4], q[5], q[6], q[9]], 6) - Qfraction.prod([q[0], q[1], q[4], q[5], q[7], q[9]], 6) - Qfraction.prod([q[0], q[1], q[4], q[5], q[8], q[9]], 6) - Qfraction.prod([q[0], q[1], q[4], q[6], q[7], q[9]], 6) - Qfraction.prod([q[0], q[1], q[4], q[6], q[8], q[9]], 6) - Qfraction.prod([q[0], q[1], q[4], q[7], q[8], q[9]], 6) - Qfraction.prod([q[0], q[1], q[5], q[6], q[7], q[9]], 6) - Qfraction.prod([q[0], q[1], q[5], q[6], q[8], q[9]], 6) - Qfraction.prod([q[0], q[1], q[5], q[7], q[8], q[9]], 6) - Qfraction.prod([q[0], q[1], q[6], q[7], q[8], q[9]], 6) - Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[9]], 6) - Qfraction.prod([q[0], q[2], q[3], q[4], q[6], q[9]], 6) - Qfraction.prod([q[0], q[2], q[3], q[4], q[7], q[9]], 6) - Qfraction.prod([q[0], q[2], q[3], q[4], q[8], q[9]], 6) - Qfraction.prod([q[0], q[2], q[3], q[5], q[6], q[9]], 6) - Qfraction.prod([q[0], q[2], q[3], q[5], q[7], q[9]], 6) - Qfraction.prod([q[0], q[2], q[3], q[5], q[8], q[9]], 6) - Qfraction.prod([q[0], q[2], q[3], q[6], q[7], q[9]], 6) - Qfraction.prod([q[0], q[2], q[3], q[6], q[8], q[9]], 6) - Qfraction.prod([q[0], q[2], q[3], q[7], q[8], q[9]], 6) - Qfraction.prod([q[0], q[2], q[4], q[5], q[6], q[9]], 6) - Qfraction.prod([q[0], q[2], q[4], q[5], q[7], q[9]], 6) - Qfraction.prod([q[0], q[2], q[4], q[5], q[8], q[9]], 6) - Qfraction.prod([q[0], q[2], q[4], q[6], q[7], q[9]], 6) - Qfraction.prod([q[0], q[2], q[4], q[6], q[8], q[9]], 6) - Qfraction.prod([q[0], q[2], q[4], q[7], q[8], q[9]], 6) - Qfraction.prod([q[0], q[2], q[5], q[6], q[7], q[9]], 6) - Qfraction.prod([q[0], q[2], q[5], q[6], q[8], q[9]], 6) - Qfraction.prod([q[0], q[2], q[5], q[7], q[8], q[9]], 6) - Qfraction.prod([q[0], q[2], q[6], q[7], q[8], q[9]], 6) - Qfraction.prod([q[0], q[3], q[4], q[5], q[6], q[9]], 6) - Qfraction.prod([q[0], q[3], q[4], q[5], q[7], q[9]], 6) - Qfraction.prod([q[0], q[3], q[4], q[5], q[8], q[9]], 6) - Qfraction.prod([q[0], q[3], q[4], q[6], q[7], q[9]], 6) - Qfraction.prod([q[0], q[3], q[4], q[6], q[8], q[9]], 6) - Qfraction.prod([q[0], q[3], q[4], q[7], q[8], q[9]], 6) - Qfraction.prod([q[0], q[3], q[5], q[6], q[7], q[9]], 6) - Qfraction.prod([q[0], q[3], q[5], q[6], q[8], q[9]], 6) - Qfraction.prod([q[0], q[3], q[5], q[7], q[8], q[9]], 6) - Qfraction.prod([q[0], q[3], q[6], q[7], q[8], q[9]], 6) - Qfraction.prod([q[0], q[4], q[5], q[6], q[7], q[9]], 6) - Qfraction.prod([q[0], q[4], q[5], q[6], q[8], q[9]], 6) - Qfraction.prod([q[0], q[4], q[5], q[7], q[8], q[9]], 6) - Qfraction.prod([q[0], q[4], q[6], q[7], q[8], q[9]], 6)
            q2b[9] += -Qfraction.prod([q[0], q[5], q[6], q[7], q[8], q[9]], 6) - Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[9]], 6) - Qfraction.prod([q[1], q[2], q[3], q[4], q[6], q[9]], 6) - Qfraction.prod([q[1], q[2], q[3], q[4], q[7], q[9]], 6) - Qfraction.prod([q[1], q[2], q[3], q[4], q[8], q[9]], 6) - Qfraction.prod([q[1], q[2], q[3], q[5], q[6], q[9]], 6) - Qfraction.prod([q[1], q[2], q[3], q[5], q[7], q[9]], 6) - Qfraction.prod([q[1], q[2], q[3], q[5], q[8], q[9]], 6) - Qfraction.prod([q[1], q[2], q[3], q[6], q[7], q[9]], 6) - Qfraction.prod([q[1], q[2], q[3], q[6], q[8], q[9]], 6) - Qfraction.prod([q[1], q[2], q[3], q[7], q[8], q[9]], 6) - Qfraction.prod([q[1], q[2], q[4], q[5], q[6], q[9]], 6) - Qfraction.prod([q[1], q[2], q[4], q[5], q[7], q[9]], 6) - Qfraction.prod([q[1], q[2], q[4], q[5], q[8], q[9]], 6) - Qfraction.prod([q[1], q[2], q[4], q[6], q[7], q[9]], 6) - Qfraction.prod([q[1], q[2], q[4], q[6], q[8], q[9]], 6) - Qfraction.prod([q[1], q[2], q[4], q[7], q[8], q[9]], 6) - Qfraction.prod([q[1], q[2], q[5], q[6], q[7], q[9]], 6) - Qfraction.prod([q[1], q[2], q[5], q[6], q[8], q[9]], 6) - Qfraction.prod([q[1], q[2], q[5], q[7], q[8], q[9]], 6) - Qfraction.prod([q[1], q[2], q[6], q[7], q[8], q[9]], 6) - Qfraction.prod([q[1], q[3], q[4], q[5], q[6], q[9]], 6) - Qfraction.prod([q[1], q[3], q[4], q[5], q[7], q[9]], 6) - Qfraction.prod([q[1], q[3], q[4], q[5], q[8], q[9]], 6) - Qfraction.prod([q[1], q[3], q[4], q[6], q[7], q[9]], 6) - Qfraction.prod([q[1], q[3], q[4], q[6], q[8], q[9]], 6) - Qfraction.prod([q[1], q[3], q[4], q[7], q[8], q[9]], 6) - Qfraction.prod([q[1], q[3], q[5], q[6], q[7], q[9]], 6) - Qfraction.prod([q[1], q[3], q[5], q[6], q[8], q[9]], 6) - Qfraction.prod([q[1], q[3], q[5], q[7], q[8], q[9]], 6) - Qfraction.prod([q[1], q[3], q[6], q[7], q[8], q[9]], 6) - Qfraction.prod([q[1], q[4], q[5], q[6], q[7], q[9]], 6) - Qfraction.prod([q[1], q[4], q[5], q[6], q[8], q[9]], 6) - Qfraction.prod([q[1], q[4], q[5], q[7], q[8], q[9]], 6) - Qfraction.prod([q[1], q[4], q[6], q[7], q[8], q[9]], 6) - Qfraction.prod([q[1], q[5], q[6], q[7], q[8], q[9]], 6) - Qfraction.prod([q[2], q[3], q[4], q[5], q[6], q[9]], 6) - Qfraction.prod([q[2], q[3], q[4], q[5], q[7], q[9]], 6) - Qfraction.prod([q[2], q[3], q[4], q[5], q[8], q[9]], 6) - Qfraction.prod([q[2], q[3], q[4], q[6], q[7], q[9]], 6) - Qfraction.prod([q[2], q[3], q[4], q[6], q[8], q[9]], 6) - Qfraction.prod([q[2], q[3], q[4], q[7], q[8], q[9]], 6) - Qfraction.prod([q[2], q[3], q[5], q[6], q[7], q[9]], 6) - Qfraction.prod([q[2], q[3], q[5], q[6], q[8], q[9]], 6) - Qfraction.prod([q[2], q[3], q[5], q[7], q[8], q[9]], 6) - Qfraction.prod([q[2], q[3], q[6], q[7], q[8], q[9]], 6) - Qfraction.prod([q[2], q[4], q[5], q[6], q[7], q[9]], 6) - Qfraction.prod([q[2], q[4], q[5], q[6], q[8], q[9]], 6) - Qfraction.prod([q[2], q[4], q[5], q[7], q[8], q[9]], 6) - Qfraction.prod([q[2], q[4], q[6], q[7], q[8], q[9]], 6) - Qfraction.prod([q[2], q[5], q[6], q[7], q[8], q[9]], 6) - Qfraction.prod([q[3], q[4], q[5], q[6], q[7], q[9]], 6) - Qfraction.prod([q[3], q[4], q[5], q[6], q[8], q[9]], 6) - Qfraction.prod([q[3], q[4], q[5], q[7], q[8], q[9]], 6) - Qfraction.prod([q[3], q[4], q[6], q[7], q[8], q[9]], 6) - Qfraction.prod([q[3], q[5], q[6], q[7], q[8], q[9]], 6) - Qfraction.prod([q[4], q[5], q[6], q[7], q[8], q[9]], 6) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[9]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[6], q[9]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[7], q[9]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[8], q[9]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[6], q[9]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[7], q[9]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[8], q[9]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[6], q[7], q[9]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[6], q[8], q[9]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[7], q[8], q[9]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[6], q[9]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[7], q[9]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[8], q[9]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[6], q[7], q[9]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[6], q[8], q[9]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[7], q[8], q[9]], 7) + Qfraction.prod([q[0], q[1], q[2], q[5], q[6], q[7], q[9]], 7) + Qfraction.prod([q[0], q[1], q[2], q[5], q[6], q[8], q[9]], 7) + Qfraction.prod([q[0], q[1], q[2], q[5], q[7], q[8], q[9]], 7) + Qfraction.prod([q[0], q[1], q[2], q[6], q[7], q[8], q[9]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[6], q[9]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[7], q[9]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[8], q[9]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[6], q[7], q[9]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[6], q[8], q[9]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[7], q[8], q[9]], 7) + Qfraction.prod([q[0], q[1], q[3], q[5], q[6], q[7], q[9]], 7) + Qfraction.prod([q[0], q[1], q[3], q[5], q[6], q[8], q[9]], 7) + Qfraction.prod([q[0], q[1], q[3], q[5], q[7], q[8], q[9]], 7) + Qfraction.prod([q[0], q[1], q[3], q[6], q[7], q[8], q[9]], 7) + Qfraction.prod([q[0], q[1], q[4], q[5], q[6], q[7], q[9]], 7) + Qfraction.prod([q[0], q[1], q[4], q[5], q[6], q[8], q[9]], 7) + Qfraction.prod([q[0], q[1], q[4], q[5], q[7], q[8], q[9]], 7) + Qfraction.prod([q[0], q[1], q[4], q[6], q[7], q[8], q[9]], 7) + Qfraction.prod([q[0], q[1], q[5], q[6], q[7], q[8], q[9]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[6], q[9]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[7], q[9]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[8], q[9]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[6], q[7], q[9]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[6], q[8], q[9]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[7], q[8], q[9]], 7) + Qfraction.prod([q[0], q[2], q[3], q[5], q[6], q[7], q[9]], 7) + Qfraction.prod([q[0], q[2], q[3], q[5], q[6], q[8], q[9]], 7) + Qfraction.prod([q[0], q[2], q[3], q[5], q[7], q[8], q[9]], 7) + Qfraction.prod([q[0], q[2], q[3], q[6], q[7], q[8], q[9]], 7) + Qfraction.prod([q[0], q[2], q[4], q[5], q[6], q[7], q[9]], 7) + Qfraction.prod([q[0], q[2], q[4], q[5], q[6], q[8], q[9]], 7) + Qfraction.prod([q[0], q[2], q[4], q[5], q[7], q[8], q[9]], 7) + Qfraction.prod([q[0], q[2], q[4], q[6], q[7], q[8], q[9]], 7) + Qfraction.prod([q[0], q[2], q[5], q[6], q[7], q[8], q[9]], 7) + Qfraction.prod([q[0], q[3], q[4], q[5], q[6], q[7], q[9]], 7) + Qfraction.prod([q[0], q[3], q[4], q[5], q[6], q[8], q[9]], 7) + Qfraction.prod([q[0], q[3], q[4], q[5], q[7], q[8], q[9]], 7) + Qfraction.prod([q[0], q[3], q[4], q[6], q[7], q[8], q[9]], 7) + Qfraction.prod([q[0], q[3], q[5], q[6], q[7], q[8], q[9]], 7) + Qfraction.prod([q[0], q[4], q[5], q[6], q[7], q[8], q[9]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[6], q[9]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[7], q[9]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[8], q[9]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[6], q[7], q[9]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[6], q[8], q[9]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[7], q[8], q[9]], 7) + Qfraction.prod([q[1], q[2], q[3], q[5], q[6], q[7], q[9]], 7) + Qfraction.prod([q[1], q[2], q[3], q[5], q[6], q[8], q[9]], 7) + Qfraction.prod([q[1], q[2], q[3], q[5], q[7], q[8], q[9]], 7) + Qfraction.prod([q[1], q[2], q[3], q[6], q[7], q[8], q[9]], 7) + Qfraction.prod([q[1], q[2], q[4], q[5], q[6], q[7], q[9]], 7) + Qfraction.prod([q[1], q[2], q[4], q[5], q[6], q[8], q[9]], 7) + Qfraction.prod([q[1], q[2], q[4], q[5], q[7], q[8], q[9]], 7) + Qfraction.prod([q[1], q[2], q[4], q[6], q[7], q[8], q[9]], 7) + Qfraction.prod([q[1], q[2], q[5], q[6], q[7], q[8], q[9]], 7) + Qfraction.prod([q[1], q[3], q[4], q[5], q[6], q[7], q[9]], 7) + Qfraction.prod([q[1], q[3], q[4], q[5], q[6], q[8], q[9]], 7) + Qfraction.prod([q[1], q[3], q[4], q[5], q[7], q[8], q[9]], 7) + Qfraction.prod([q[1], q[3], q[4], q[6], q[7], q[8], q[9]], 7) + Qfraction.prod([q[1], q[3], q[5], q[6], q[7], q[8], q[9]], 7)
            q2b[9] += Qfraction.prod([q[1], q[4], q[5], q[6], q[7], q[8], q[9]], 7) + Qfraction.prod([q[2], q[3], q[4], q[5], q[6], q[7], q[9]], 7) + Qfraction.prod([q[2], q[3], q[4], q[5], q[6], q[8], q[9]], 7) + Qfraction.prod([q[2], q[3], q[4], q[5], q[7], q[8], q[9]], 7) + Qfraction.prod([q[2], q[3], q[4], q[6], q[7], q[8], q[9]], 7) + Qfraction.prod([q[2], q[3], q[5], q[6], q[7], q[8], q[9]], 7) + Qfraction.prod([q[2], q[4], q[5], q[6], q[7], q[8], q[9]], 7) + Qfraction.prod([q[3], q[4], q[5], q[6], q[7], q[8], q[9]], 7) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[9]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[7], q[9]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[8], q[9]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[6], q[7], q[9]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[6], q[8], q[9]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[7], q[8], q[9]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[6], q[7], q[9]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[6], q[8], q[9]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[7], q[8], q[9]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[6], q[7], q[8], q[9]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[6], q[7], q[9]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[6], q[8], q[9]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[7], q[8], q[9]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[6], q[7], q[8], q[9]], 8) - Qfraction.prod([q[0], q[1], q[2], q[5], q[6], q[7], q[8], q[9]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[6], q[7], q[9]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[6], q[8], q[9]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[7], q[8], q[9]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[6], q[7], q[8], q[9]], 8) - Qfraction.prod([q[0], q[1], q[3], q[5], q[6], q[7], q[8], q[9]], 8) - Qfraction.prod([q[0], q[1], q[4], q[5], q[6], q[7], q[8], q[9]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[6], q[7], q[9]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[6], q[8], q[9]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[7], q[8], q[9]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[6], q[7], q[8], q[9]], 8) - Qfraction.prod([q[0], q[2], q[3], q[5], q[6], q[7], q[8], q[9]], 8) - Qfraction.prod([q[0], q[2], q[4], q[5], q[6], q[7], q[8], q[9]], 8) - Qfraction.prod([q[0], q[3], q[4], q[5], q[6], q[7], q[8], q[9]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[9]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[6], q[8], q[9]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[7], q[8], q[9]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[6], q[7], q[8], q[9]], 8) - Qfraction.prod([q[1], q[2], q[3], q[5], q[6], q[7], q[8], q[9]], 8) - Qfraction.prod([q[1], q[2], q[4], q[5], q[6], q[7], q[8], q[9]], 8) - Qfraction.prod([q[1], q[3], q[4], q[5], q[6], q[7], q[8], q[9]], 8) - Qfraction.prod([q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[9]], 8) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[9]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[8], q[9]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[7], q[8], q[9]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[6], q[7], q[8], q[9]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[6], q[7], q[8], q[9]], 9) + Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[6], q[7], q[8], q[9]], 9) + Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[6], q[7], q[8], q[9]], 9) + Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[9]], 9) + Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[9]], 9) - Qfraction.prod(q[0:10], 10)
            
        if len_q >= 11 and len_q2a < 11:
            q2b[10] = q[10] - Qfraction.prod([q[0], q[10]], 2) - Qfraction.prod([q[1], q[10]], 2) - Qfraction.prod([q[2], q[10]], 2) - Qfraction.prod([q[3], q[10]], 2) - Qfraction.prod([q[4], q[10]], 2) - Qfraction.prod([q[5], q[10]], 2) - Qfraction.prod([q[6], q[10]], 2) - Qfraction.prod([q[7], q[10]], 2) - Qfraction.prod([q[8], q[10]], 2) - Qfraction.prod([q[9], q[10]], 2) + Qfraction.prod([q[0], q[1], q[10]], 3) + Qfraction.prod([q[0], q[2], q[10]], 3) + Qfraction.prod([q[0], q[3], q[10]], 3) + Qfraction.prod([q[0], q[4], q[10]], 3) + Qfraction.prod([q[0], q[5], q[10]], 3) + Qfraction.prod([q[0], q[6], q[10]], 3) + Qfraction.prod([q[0], q[7], q[10]], 3) + Qfraction.prod([q[0], q[8], q[10]], 3) + Qfraction.prod([q[0], q[9], q[10]], 3) + Qfraction.prod([q[1], q[2], q[10]], 3) + Qfraction.prod([q[1], q[3], q[10]], 3) + Qfraction.prod([q[1], q[4], q[10]], 3) + Qfraction.prod([q[1], q[5], q[10]], 3) + Qfraction.prod([q[1], q[6], q[10]], 3) + Qfraction.prod([q[1], q[7], q[10]], 3) + Qfraction.prod([q[1], q[8], q[10]], 3) + Qfraction.prod([q[1], q[9], q[10]], 3) + Qfraction.prod([q[2], q[3], q[10]], 3) + Qfraction.prod([q[2], q[4], q[10]], 3) + Qfraction.prod([q[2], q[5], q[10]], 3) + Qfraction.prod([q[2], q[6], q[10]], 3) + Qfraction.prod([q[2], q[7], q[10]], 3) + Qfraction.prod([q[2], q[8], q[10]], 3) + Qfraction.prod([q[2], q[9], q[10]], 3) + Qfraction.prod([q[3], q[4], q[10]], 3) + Qfraction.prod([q[3], q[5], q[10]], 3) + Qfraction.prod([q[3], q[6], q[10]], 3) + Qfraction.prod([q[3], q[7], q[10]], 3) + Qfraction.prod([q[3], q[8], q[10]], 3) + Qfraction.prod([q[3], q[9], q[10]], 3) + Qfraction.prod([q[4], q[5], q[10]], 3) + Qfraction.prod([q[4], q[6], q[10]], 3) + Qfraction.prod([q[4], q[7], q[10]], 3) + Qfraction.prod([q[4], q[8], q[10]], 3) + Qfraction.prod([q[4], q[9], q[10]], 3) + Qfraction.prod([q[5], q[6], q[10]], 3) + Qfraction.prod([q[5], q[7], q[10]], 3) + Qfraction.prod([q[5], q[8], q[10]], 3) + Qfraction.prod([q[5], q[9], q[10]], 3) + Qfraction.prod([q[6], q[7], q[10]], 3) + Qfraction.prod([q[6], q[8], q[10]], 3) + Qfraction.prod([q[6], q[9], q[10]], 3) + Qfraction.prod([q[7], q[8], q[10]], 3) + Qfraction.prod([q[7], q[9], q[10]], 3) + Qfraction.prod([q[8], q[9], q[10]], 3) - Qfraction.prod([q[0], q[1], q[2], q[10]], 4) - Qfraction.prod([q[0], q[1], q[3], q[10]], 4) - Qfraction.prod([q[0], q[1], q[4], q[10]], 4) - Qfraction.prod([q[0], q[1], q[5], q[10]], 4) - Qfraction.prod([q[0], q[1], q[6], q[10]], 4) - Qfraction.prod([q[0], q[1], q[7], q[10]], 4) - Qfraction.prod([q[0], q[1], q[8], q[10]], 4) - Qfraction.prod([q[0], q[1], q[9], q[10]], 4) - Qfraction.prod([q[0], q[2], q[3], q[10]], 4) - Qfraction.prod([q[0], q[2], q[4], q[10]], 4) - Qfraction.prod([q[0], q[2], q[5], q[10]], 4) - Qfraction.prod([q[0], q[2], q[6], q[10]], 4) - Qfraction.prod([q[0], q[2], q[7], q[10]], 4) - Qfraction.prod([q[0], q[2], q[8], q[10]], 4) - Qfraction.prod([q[0], q[2], q[9], q[10]], 4) - Qfraction.prod([q[0], q[3], q[4], q[10]], 4) - Qfraction.prod([q[0], q[3], q[5], q[10]], 4) - Qfraction.prod([q[0], q[3], q[6], q[10]], 4) - Qfraction.prod([q[0], q[3], q[7], q[10]], 4) - Qfraction.prod([q[0], q[3], q[8], q[10]], 4) - Qfraction.prod([q[0], q[3], q[9], q[10]], 4) - Qfraction.prod([q[0], q[4], q[5], q[10]], 4) - Qfraction.prod([q[0], q[4], q[6], q[10]], 4) - Qfraction.prod([q[0], q[4], q[7], q[10]], 4) - Qfraction.prod([q[0], q[4], q[8], q[10]], 4) - Qfraction.prod([q[0], q[4], q[9], q[10]], 4) - Qfraction.prod([q[0], q[5], q[6], q[10]], 4) - Qfraction.prod([q[0], q[5], q[7], q[10]], 4) - Qfraction.prod([q[0], q[5], q[8], q[10]], 4) - Qfraction.prod([q[0], q[5], q[9], q[10]], 4) - Qfraction.prod([q[0], q[6], q[7], q[10]], 4) - Qfraction.prod([q[0], q[6], q[8], q[10]], 4) - Qfraction.prod([q[0], q[6], q[9], q[10]], 4) - Qfraction.prod([q[0], q[7], q[8], q[10]], 4) - Qfraction.prod([q[0], q[7], q[9], q[10]], 4) - Qfraction.prod([q[0], q[8], q[9], q[10]], 4) - Qfraction.prod([q[1], q[2], q[3], q[10]], 4) - Qfraction.prod([q[1], q[2], q[4], q[10]], 4) - Qfraction.prod([q[1], q[2], q[5], q[10]], 4) - Qfraction.prod([q[1], q[2], q[6], q[10]], 4) - Qfraction.prod([q[1], q[2], q[7], q[10]], 4) - Qfraction.prod([q[1], q[2], q[8], q[10]], 4) - Qfraction.prod([q[1], q[2], q[9], q[10]], 4) - Qfraction.prod([q[1], q[3], q[4], q[10]], 4) - Qfraction.prod([q[1], q[3], q[5], q[10]], 4) - Qfraction.prod([q[1], q[3], q[6], q[10]], 4) - Qfraction.prod([q[1], q[3], q[7], q[10]], 4) - Qfraction.prod([q[1], q[3], q[8], q[10]], 4) - Qfraction.prod([q[1], q[3], q[9], q[10]], 4) - Qfraction.prod([q[1], q[4], q[5], q[10]], 4) - Qfraction.prod([q[1], q[4], q[6], q[10]], 4) - Qfraction.prod([q[1], q[4], q[7], q[10]], 4) - Qfraction.prod([q[1], q[4], q[8], q[10]], 4) - Qfraction.prod([q[1], q[4], q[9], q[10]], 4) - Qfraction.prod([q[1], q[5], q[6], q[10]], 4) - Qfraction.prod([q[1], q[5], q[7], q[10]], 4) - Qfraction.prod([q[1], q[5], q[8], q[10]], 4) - Qfraction.prod([q[1], q[5], q[9], q[10]], 4) - Qfraction.prod([q[1], q[6], q[7], q[10]], 4) - Qfraction.prod([q[1], q[6], q[8], q[10]], 4) - Qfraction.prod([q[1], q[6], q[9], q[10]], 4) - Qfraction.prod([q[1], q[7], q[8], q[10]], 4) - Qfraction.prod([q[1], q[7], q[9], q[10]], 4) - Qfraction.prod([q[1], q[8], q[9], q[10]], 4) - Qfraction.prod([q[2], q[3], q[4], q[10]], 4) - Qfraction.prod([q[2], q[3], q[5], q[10]], 4) - Qfraction.prod([q[2], q[3], q[6], q[10]], 4) - Qfraction.prod([q[2], q[3], q[7], q[10]], 4) - Qfraction.prod([q[2], q[3], q[8], q[10]], 4) - Qfraction.prod([q[2], q[3], q[9], q[10]], 4) - Qfraction.prod([q[2], q[4], q[5], q[10]], 4) - Qfraction.prod([q[2], q[4], q[6], q[10]], 4) - Qfraction.prod([q[2], q[4], q[7], q[10]], 4) - Qfraction.prod([q[2], q[4], q[8], q[10]], 4) - Qfraction.prod([q[2], q[4], q[9], q[10]], 4) - Qfraction.prod([q[2], q[5], q[6], q[10]], 4) - Qfraction.prod([q[2], q[5], q[7], q[10]], 4) - Qfraction.prod([q[2], q[5], q[8], q[10]], 4) - Qfraction.prod([q[2], q[5], q[9], q[10]], 4) - Qfraction.prod([q[2], q[6], q[7], q[10]], 4) - Qfraction.prod([q[2], q[6], q[8], q[10]], 4) - Qfraction.prod([q[2], q[6], q[9], q[10]], 4) - Qfraction.prod([q[2], q[7], q[8], q[10]], 4) - Qfraction.prod([q[2], q[7], q[9], q[10]], 4) - Qfraction.prod([q[2], q[8], q[9], q[10]], 4) - Qfraction.prod([q[3], q[4], q[5], q[10]], 4) - Qfraction.prod([q[3], q[4], q[6], q[10]], 4) - Qfraction.prod([q[3], q[4], q[7], q[10]], 4) - Qfraction.prod([q[3], q[4], q[8], q[10]], 4) - Qfraction.prod([q[3], q[4], q[9], q[10]], 4) - Qfraction.prod([q[3], q[5], q[6], q[10]], 4) - Qfraction.prod([q[3], q[5], q[7], q[10]], 4) - Qfraction.prod([q[3], q[5], q[8], q[10]], 4) - Qfraction.prod([q[3], q[5], q[9], q[10]], 4) - Qfraction.prod([q[3], q[6], q[7], q[10]], 4) - Qfraction.prod([q[3], q[6], q[8], q[10]], 4) - Qfraction.prod([q[3], q[6], q[9], q[10]], 4) - Qfraction.prod([q[3], q[7], q[8], q[10]], 4) - Qfraction.prod([q[3], q[7], q[9], q[10]], 4) - Qfraction.prod([q[3], q[8], q[9], q[10]], 4) - Qfraction.prod([q[4], q[5], q[6], q[10]], 4) - Qfraction.prod([q[4], q[5], q[7], q[10]], 4) - Qfraction.prod([q[4], q[5], q[8], q[10]], 4) - Qfraction.prod([q[4], q[5], q[9], q[10]], 4) - Qfraction.prod([q[4], q[6], q[7], q[10]], 4) - Qfraction.prod([q[4], q[6], q[8], q[10]], 4) - Qfraction.prod([q[4], q[6], q[9], q[10]], 4) - Qfraction.prod([q[4], q[7], q[8], q[10]], 4) - Qfraction.prod([q[4], q[7], q[9], q[10]], 4) - Qfraction.prod([q[4], q[8], q[9], q[10]], 4) - Qfraction.prod([q[5], q[6], q[7], q[10]], 4) - Qfraction.prod([q[5], q[6], q[8], q[10]], 4) - Qfraction.prod([q[5], q[6], q[9], q[10]], 4) - Qfraction.prod([q[5], q[7], q[8], q[10]], 4) - Qfraction.prod([q[5], q[7], q[9], q[10]], 4) - Qfraction.prod([q[5], q[8], q[9], q[10]], 4) - Qfraction.prod([q[6], q[7], q[8], q[10]], 4) - Qfraction.prod([q[6], q[7], q[9], q[10]], 4) - Qfraction.prod([q[6], q[8], q[9], q[10]], 4) - Qfraction.prod([q[7], q[8], q[9], q[10]], 4) + Qfraction.prod([q[0], q[1], q[2], q[3], q[10]], 5) + Qfraction.prod([q[0], q[1], q[2], q[4], q[10]], 5) + Qfraction.prod([q[0], q[1], q[2], q[5], q[10]], 5) + Qfraction.prod([q[0], q[1], q[2], q[6], q[10]], 5) + Qfraction.prod([q[0], q[1], q[2], q[7], q[10]], 5)
            q2b[10] += Qfraction.prod([q[0], q[1], q[2], q[8], q[10]], 5) + Qfraction.prod([q[0], q[1], q[2], q[9], q[10]], 5) + Qfraction.prod([q[0], q[1], q[3], q[4], q[10]], 5) + Qfraction.prod([q[0], q[1], q[3], q[5], q[10]], 5) + Qfraction.prod([q[0], q[1], q[3], q[6], q[10]], 5) + Qfraction.prod([q[0], q[1], q[3], q[7], q[10]], 5) + Qfraction.prod([q[0], q[1], q[3], q[8], q[10]], 5) + Qfraction.prod([q[0], q[1], q[3], q[9], q[10]], 5) + Qfraction.prod([q[0], q[1], q[4], q[5], q[10]], 5) + Qfraction.prod([q[0], q[1], q[4], q[6], q[10]], 5) + Qfraction.prod([q[0], q[1], q[4], q[7], q[10]], 5) + Qfraction.prod([q[0], q[1], q[4], q[8], q[10]], 5) + Qfraction.prod([q[0], q[1], q[4], q[9], q[10]], 5) + Qfraction.prod([q[0], q[1], q[5], q[6], q[10]], 5) + Qfraction.prod([q[0], q[1], q[5], q[7], q[10]], 5) + Qfraction.prod([q[0], q[1], q[5], q[8], q[10]], 5) + Qfraction.prod([q[0], q[1], q[5], q[9], q[10]], 5) + Qfraction.prod([q[0], q[1], q[6], q[7], q[10]], 5) + Qfraction.prod([q[0], q[1], q[6], q[8], q[10]], 5) + Qfraction.prod([q[0], q[1], q[6], q[9], q[10]], 5) + Qfraction.prod([q[0], q[1], q[7], q[8], q[10]], 5) + Qfraction.prod([q[0], q[1], q[7], q[9], q[10]], 5) + Qfraction.prod([q[0], q[1], q[8], q[9], q[10]], 5) + Qfraction.prod([q[0], q[2], q[3], q[4], q[10]], 5) + Qfraction.prod([q[0], q[2], q[3], q[5], q[10]], 5) + Qfraction.prod([q[0], q[2], q[3], q[6], q[10]], 5) + Qfraction.prod([q[0], q[2], q[3], q[7], q[10]], 5) + Qfraction.prod([q[0], q[2], q[3], q[8], q[10]], 5) + Qfraction.prod([q[0], q[2], q[3], q[9], q[10]], 5) + Qfraction.prod([q[0], q[2], q[4], q[5], q[10]], 5) + Qfraction.prod([q[0], q[2], q[4], q[6], q[10]], 5) + Qfraction.prod([q[0], q[2], q[4], q[7], q[10]], 5) + Qfraction.prod([q[0], q[2], q[4], q[8], q[10]], 5) + Qfraction.prod([q[0], q[2], q[4], q[9], q[10]], 5) + Qfraction.prod([q[0], q[2], q[5], q[6], q[10]], 5) + Qfraction.prod([q[0], q[2], q[5], q[7], q[10]], 5) + Qfraction.prod([q[0], q[2], q[5], q[8], q[10]], 5) + Qfraction.prod([q[0], q[2], q[5], q[9], q[10]], 5) + Qfraction.prod([q[0], q[2], q[6], q[7], q[10]], 5) + Qfraction.prod([q[0], q[2], q[6], q[8], q[10]], 5) + Qfraction.prod([q[0], q[2], q[6], q[9], q[10]], 5) + Qfraction.prod([q[0], q[2], q[7], q[8], q[10]], 5) + Qfraction.prod([q[0], q[2], q[7], q[9], q[10]], 5) + Qfraction.prod([q[0], q[2], q[8], q[9], q[10]], 5) + Qfraction.prod([q[0], q[3], q[4], q[5], q[10]], 5) + Qfraction.prod([q[0], q[3], q[4], q[6], q[10]], 5) + Qfraction.prod([q[0], q[3], q[4], q[7], q[10]], 5) + Qfraction.prod([q[0], q[3], q[4], q[8], q[10]], 5) + Qfraction.prod([q[0], q[3], q[4], q[9], q[10]], 5) + Qfraction.prod([q[0], q[3], q[5], q[6], q[10]], 5) + Qfraction.prod([q[0], q[3], q[5], q[7], q[10]], 5) + Qfraction.prod([q[0], q[3], q[5], q[8], q[10]], 5) + Qfraction.prod([q[0], q[3], q[5], q[9], q[10]], 5) + Qfraction.prod([q[0], q[3], q[6], q[7], q[10]], 5) + Qfraction.prod([q[0], q[3], q[6], q[8], q[10]], 5) + Qfraction.prod([q[0], q[3], q[6], q[9], q[10]], 5) + Qfraction.prod([q[0], q[3], q[7], q[8], q[10]], 5) + Qfraction.prod([q[0], q[3], q[7], q[9], q[10]], 5) + Qfraction.prod([q[0], q[3], q[8], q[9], q[10]], 5) + Qfraction.prod([q[0], q[4], q[5], q[6], q[10]], 5) + Qfraction.prod([q[0], q[4], q[5], q[7], q[10]], 5) + Qfraction.prod([q[0], q[4], q[5], q[8], q[10]], 5) + Qfraction.prod([q[0], q[4], q[5], q[9], q[10]], 5) + Qfraction.prod([q[0], q[4], q[6], q[7], q[10]], 5) + Qfraction.prod([q[0], q[4], q[6], q[8], q[10]], 5) + Qfraction.prod([q[0], q[4], q[6], q[9], q[10]], 5) + Qfraction.prod([q[0], q[4], q[7], q[8], q[10]], 5) + Qfraction.prod([q[0], q[4], q[7], q[9], q[10]], 5) + Qfraction.prod([q[0], q[4], q[8], q[9], q[10]], 5) + Qfraction.prod([q[0], q[5], q[6], q[7], q[10]], 5) + Qfraction.prod([q[0], q[5], q[6], q[8], q[10]], 5) + Qfraction.prod([q[0], q[5], q[6], q[9], q[10]], 5) + Qfraction.prod([q[0], q[5], q[7], q[8], q[10]], 5) + Qfraction.prod([q[0], q[5], q[7], q[9], q[10]], 5) + Qfraction.prod([q[0], q[5], q[8], q[9], q[10]], 5) + Qfraction.prod([q[0], q[6], q[7], q[8], q[10]], 5) + Qfraction.prod([q[0], q[6], q[7], q[9], q[10]], 5) + Qfraction.prod([q[0], q[6], q[8], q[9], q[10]], 5) + Qfraction.prod([q[0], q[7], q[8], q[9], q[10]], 5) + Qfraction.prod([q[1], q[2], q[3], q[4], q[10]], 5) + Qfraction.prod([q[1], q[2], q[3], q[5], q[10]], 5) + Qfraction.prod([q[1], q[2], q[3], q[6], q[10]], 5) + Qfraction.prod([q[1], q[2], q[3], q[7], q[10]], 5) + Qfraction.prod([q[1], q[2], q[3], q[8], q[10]], 5) + Qfraction.prod([q[1], q[2], q[3], q[9], q[10]], 5) + Qfraction.prod([q[1], q[2], q[4], q[5], q[10]], 5) + Qfraction.prod([q[1], q[2], q[4], q[6], q[10]], 5) + Qfraction.prod([q[1], q[2], q[4], q[7], q[10]], 5) + Qfraction.prod([q[1], q[2], q[4], q[8], q[10]], 5) + Qfraction.prod([q[1], q[2], q[4], q[9], q[10]], 5) + Qfraction.prod([q[1], q[2], q[5], q[6], q[10]], 5) + Qfraction.prod([q[1], q[2], q[5], q[7], q[10]], 5) + Qfraction.prod([q[1], q[2], q[5], q[8], q[10]], 5) + Qfraction.prod([q[1], q[2], q[5], q[9], q[10]], 5) + Qfraction.prod([q[1], q[2], q[6], q[7], q[10]], 5) + Qfraction.prod([q[1], q[2], q[6], q[8], q[10]], 5) + Qfraction.prod([q[1], q[2], q[6], q[9], q[10]], 5) + Qfraction.prod([q[1], q[2], q[7], q[8], q[10]], 5) + Qfraction.prod([q[1], q[2], q[7], q[9], q[10]], 5) + Qfraction.prod([q[1], q[2], q[8], q[9], q[10]], 5) + Qfraction.prod([q[1], q[3], q[4], q[5], q[10]], 5) + Qfraction.prod([q[1], q[3], q[4], q[6], q[10]], 5) + Qfraction.prod([q[1], q[3], q[4], q[7], q[10]], 5) + Qfraction.prod([q[1], q[3], q[4], q[8], q[10]], 5) + Qfraction.prod([q[1], q[3], q[4], q[9], q[10]], 5) + Qfraction.prod([q[1], q[3], q[5], q[6], q[10]], 5) + Qfraction.prod([q[1], q[3], q[5], q[7], q[10]], 5) + Qfraction.prod([q[1], q[3], q[5], q[8], q[10]], 5) + Qfraction.prod([q[1], q[3], q[5], q[9], q[10]], 5) + Qfraction.prod([q[1], q[3], q[6], q[7], q[10]], 5) + Qfraction.prod([q[1], q[3], q[6], q[8], q[10]], 5) + Qfraction.prod([q[1], q[3], q[6], q[9], q[10]], 5) + Qfraction.prod([q[1], q[3], q[7], q[8], q[10]], 5) + Qfraction.prod([q[1], q[3], q[7], q[9], q[10]], 5) + Qfraction.prod([q[1], q[3], q[8], q[9], q[10]], 5) + Qfraction.prod([q[1], q[4], q[5], q[6], q[10]], 5) + Qfraction.prod([q[1], q[4], q[5], q[7], q[10]], 5) + Qfraction.prod([q[1], q[4], q[5], q[8], q[10]], 5) + Qfraction.prod([q[1], q[4], q[5], q[9], q[10]], 5) + Qfraction.prod([q[1], q[4], q[6], q[7], q[10]], 5) + Qfraction.prod([q[1], q[4], q[6], q[8], q[10]], 5) + Qfraction.prod([q[1], q[4], q[6], q[9], q[10]], 5) + Qfraction.prod([q[1], q[4], q[7], q[8], q[10]], 5) + Qfraction.prod([q[1], q[4], q[7], q[9], q[10]], 5) + Qfraction.prod([q[1], q[4], q[8], q[9], q[10]], 5) + Qfraction.prod([q[1], q[5], q[6], q[7], q[10]], 5) + Qfraction.prod([q[1], q[5], q[6], q[8], q[10]], 5) + Qfraction.prod([q[1], q[5], q[6], q[9], q[10]], 5) + Qfraction.prod([q[1], q[5], q[7], q[8], q[10]], 5) + Qfraction.prod([q[1], q[5], q[7], q[9], q[10]], 5) + Qfraction.prod([q[1], q[5], q[8], q[9], q[10]], 5) + Qfraction.prod([q[1], q[6], q[7], q[8], q[10]], 5) + Qfraction.prod([q[1], q[6], q[7], q[9], q[10]], 5) + Qfraction.prod([q[1], q[6], q[8], q[9], q[10]], 5) + Qfraction.prod([q[1], q[7], q[8], q[9], q[10]], 5) + Qfraction.prod([q[2], q[3], q[4], q[5], q[10]], 5) + Qfraction.prod([q[2], q[3], q[4], q[6], q[10]], 5) + Qfraction.prod([q[2], q[3], q[4], q[7], q[10]], 5) + Qfraction.prod([q[2], q[3], q[4], q[8], q[10]], 5) + Qfraction.prod([q[2], q[3], q[4], q[9], q[10]], 5) + Qfraction.prod([q[2], q[3], q[5], q[6], q[10]], 5) + Qfraction.prod([q[2], q[3], q[5], q[7], q[10]], 5) + Qfraction.prod([q[2], q[3], q[5], q[8], q[10]], 5) + Qfraction.prod([q[2], q[3], q[5], q[9], q[10]], 5) + Qfraction.prod([q[2], q[3], q[6], q[7], q[10]], 5) + Qfraction.prod([q[2], q[3], q[6], q[8], q[10]], 5) + Qfraction.prod([q[2], q[3], q[6], q[9], q[10]], 5) + Qfraction.prod([q[2], q[3], q[7], q[8], q[10]], 5) + Qfraction.prod([q[2], q[3], q[7], q[9], q[10]], 5) + Qfraction.prod([q[2], q[3], q[8], q[9], q[10]], 5) + Qfraction.prod([q[2], q[4], q[5], q[6], q[10]], 5) + Qfraction.prod([q[2], q[4], q[5], q[7], q[10]], 5) + Qfraction.prod([q[2], q[4], q[5], q[8], q[10]], 5)
            q2b[10] += Qfraction.prod([q[2], q[4], q[5], q[9], q[10]], 5) + Qfraction.prod([q[2], q[4], q[6], q[7], q[10]], 5) + Qfraction.prod([q[2], q[4], q[6], q[8], q[10]], 5) + Qfraction.prod([q[2], q[4], q[6], q[9], q[10]], 5) + Qfraction.prod([q[2], q[4], q[7], q[8], q[10]], 5) + Qfraction.prod([q[2], q[4], q[7], q[9], q[10]], 5) + Qfraction.prod([q[2], q[4], q[8], q[9], q[10]], 5) + Qfraction.prod([q[2], q[5], q[6], q[7], q[10]], 5) + Qfraction.prod([q[2], q[5], q[6], q[8], q[10]], 5) + Qfraction.prod([q[2], q[5], q[6], q[9], q[10]], 5) + Qfraction.prod([q[2], q[5], q[7], q[8], q[10]], 5) + Qfraction.prod([q[2], q[5], q[7], q[9], q[10]], 5) + Qfraction.prod([q[2], q[5], q[8], q[9], q[10]], 5) + Qfraction.prod([q[2], q[6], q[7], q[8], q[10]], 5) + Qfraction.prod([q[2], q[6], q[7], q[9], q[10]], 5) + Qfraction.prod([q[2], q[6], q[8], q[9], q[10]], 5) + Qfraction.prod([q[2], q[7], q[8], q[9], q[10]], 5) + Qfraction.prod([q[3], q[4], q[5], q[6], q[10]], 5) + Qfraction.prod([q[3], q[4], q[5], q[7], q[10]], 5) + Qfraction.prod([q[3], q[4], q[5], q[8], q[10]], 5) + Qfraction.prod([q[3], q[4], q[5], q[9], q[10]], 5) + Qfraction.prod([q[3], q[4], q[6], q[7], q[10]], 5) + Qfraction.prod([q[3], q[4], q[6], q[8], q[10]], 5) + Qfraction.prod([q[3], q[4], q[6], q[9], q[10]], 5) + Qfraction.prod([q[3], q[4], q[7], q[8], q[10]], 5) + Qfraction.prod([q[3], q[4], q[7], q[9], q[10]], 5) + Qfraction.prod([q[3], q[4], q[8], q[9], q[10]], 5) + Qfraction.prod([q[3], q[5], q[6], q[7], q[10]], 5) + Qfraction.prod([q[3], q[5], q[6], q[8], q[10]], 5) + Qfraction.prod([q[3], q[5], q[6], q[9], q[10]], 5) + Qfraction.prod([q[3], q[5], q[7], q[8], q[10]], 5) + Qfraction.prod([q[3], q[5], q[7], q[9], q[10]], 5) + Qfraction.prod([q[3], q[5], q[8], q[9], q[10]], 5) + Qfraction.prod([q[3], q[6], q[7], q[8], q[10]], 5) + Qfraction.prod([q[3], q[6], q[7], q[9], q[10]], 5) + Qfraction.prod([q[3], q[6], q[8], q[9], q[10]], 5) + Qfraction.prod([q[3], q[7], q[8], q[9], q[10]], 5) + Qfraction.prod([q[4], q[5], q[6], q[7], q[10]], 5) + Qfraction.prod([q[4], q[5], q[6], q[8], q[10]], 5) + Qfraction.prod([q[4], q[5], q[6], q[9], q[10]], 5) + Qfraction.prod([q[4], q[5], q[7], q[8], q[10]], 5) + Qfraction.prod([q[4], q[5], q[7], q[9], q[10]], 5) + Qfraction.prod([q[4], q[5], q[8], q[9], q[10]], 5) + Qfraction.prod([q[4], q[6], q[7], q[8], q[10]], 5) + Qfraction.prod([q[4], q[6], q[7], q[9], q[10]], 5) + Qfraction.prod([q[4], q[6], q[8], q[9], q[10]], 5) + Qfraction.prod([q[4], q[7], q[8], q[9], q[10]], 5) + Qfraction.prod([q[5], q[6], q[7], q[8], q[10]], 5) + Qfraction.prod([q[5], q[6], q[7], q[9], q[10]], 5) + Qfraction.prod([q[5], q[6], q[8], q[9], q[10]], 5) + Qfraction.prod([q[5], q[7], q[8], q[9], q[10]], 5) + Qfraction.prod([q[6], q[7], q[8], q[9], q[10]], 5) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[10]], 6) - Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[10]], 6) - Qfraction.prod([q[0], q[1], q[2], q[3], q[6], q[10]], 6) - Qfraction.prod([q[0], q[1], q[2], q[3], q[7], q[10]], 6) - Qfraction.prod([q[0], q[1], q[2], q[3], q[8], q[10]], 6) - Qfraction.prod([q[0], q[1], q[2], q[3], q[9], q[10]], 6) - Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[10]], 6) - Qfraction.prod([q[0], q[1], q[2], q[4], q[6], q[10]], 6) - Qfraction.prod([q[0], q[1], q[2], q[4], q[7], q[10]], 6) - Qfraction.prod([q[0], q[1], q[2], q[4], q[8], q[10]], 6) - Qfraction.prod([q[0], q[1], q[2], q[4], q[9], q[10]], 6) - Qfraction.prod([q[0], q[1], q[2], q[5], q[6], q[10]], 6) - Qfraction.prod([q[0], q[1], q[2], q[5], q[7], q[10]], 6) - Qfraction.prod([q[0], q[1], q[2], q[5], q[8], q[10]], 6) - Qfraction.prod([q[0], q[1], q[2], q[5], q[9], q[10]], 6) - Qfraction.prod([q[0], q[1], q[2], q[6], q[7], q[10]], 6) - Qfraction.prod([q[0], q[1], q[2], q[6], q[8], q[10]], 6) - Qfraction.prod([q[0], q[1], q[2], q[6], q[9], q[10]], 6) - Qfraction.prod([q[0], q[1], q[2], q[7], q[8], q[10]], 6) - Qfraction.prod([q[0], q[1], q[2], q[7], q[9], q[10]], 6) - Qfraction.prod([q[0], q[1], q[2], q[8], q[9], q[10]], 6) - Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[10]], 6) - Qfraction.prod([q[0], q[1], q[3], q[4], q[6], q[10]], 6) - Qfraction.prod([q[0], q[1], q[3], q[4], q[7], q[10]], 6) - Qfraction.prod([q[0], q[1], q[3], q[4], q[8], q[10]], 6) - Qfraction.prod([q[0], q[1], q[3], q[4], q[9], q[10]], 6) - Qfraction.prod([q[0], q[1], q[3], q[5], q[6], q[10]], 6) - Qfraction.prod([q[0], q[1], q[3], q[5], q[7], q[10]], 6) - Qfraction.prod([q[0], q[1], q[3], q[5], q[8], q[10]], 6) - Qfraction.prod([q[0], q[1], q[3], q[5], q[9], q[10]], 6) - Qfraction.prod([q[0], q[1], q[3], q[6], q[7], q[10]], 6) - Qfraction.prod([q[0], q[1], q[3], q[6], q[8], q[10]], 6) - Qfraction.prod([q[0], q[1], q[3], q[6], q[9], q[10]], 6) - Qfraction.prod([q[0], q[1], q[3], q[7], q[8], q[10]], 6) - Qfraction.prod([q[0], q[1], q[3], q[7], q[9], q[10]], 6) - Qfraction.prod([q[0], q[1], q[3], q[8], q[9], q[10]], 6) - Qfraction.prod([q[0], q[1], q[4], q[5], q[6], q[10]], 6) - Qfraction.prod([q[0], q[1], q[4], q[5], q[7], q[10]], 6) - Qfraction.prod([q[0], q[1], q[4], q[5], q[8], q[10]], 6) - Qfraction.prod([q[0], q[1], q[4], q[5], q[9], q[10]], 6) - Qfraction.prod([q[0], q[1], q[4], q[6], q[7], q[10]], 6) - Qfraction.prod([q[0], q[1], q[4], q[6], q[8], q[10]], 6) - Qfraction.prod([q[0], q[1], q[4], q[6], q[9], q[10]], 6) - Qfraction.prod([q[0], q[1], q[4], q[7], q[8], q[10]], 6) - Qfraction.prod([q[0], q[1], q[4], q[7], q[9], q[10]], 6) - Qfraction.prod([q[0], q[1], q[4], q[8], q[9], q[10]], 6) - Qfraction.prod([q[0], q[1], q[5], q[6], q[7], q[10]], 6) - Qfraction.prod([q[0], q[1], q[5], q[6], q[8], q[10]], 6) - Qfraction.prod([q[0], q[1], q[5], q[6], q[9], q[10]], 6) - Qfraction.prod([q[0], q[1], q[5], q[7], q[8], q[10]], 6) - Qfraction.prod([q[0], q[1], q[5], q[7], q[9], q[10]], 6) - Qfraction.prod([q[0], q[1], q[5], q[8], q[9], q[10]], 6) - Qfraction.prod([q[0], q[1], q[6], q[7], q[8], q[10]], 6) - Qfraction.prod([q[0], q[1], q[6], q[7], q[9], q[10]], 6) - Qfraction.prod([q[0], q[1], q[6], q[8], q[9], q[10]], 6) - Qfraction.prod([q[0], q[1], q[7], q[8], q[9], q[10]], 6) - Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[10]], 6) - Qfraction.prod([q[0], q[2], q[3], q[4], q[6], q[10]], 6) - Qfraction.prod([q[0], q[2], q[3], q[4], q[7], q[10]], 6) - Qfraction.prod([q[0], q[2], q[3], q[4], q[8], q[10]], 6) - Qfraction.prod([q[0], q[2], q[3], q[4], q[9], q[10]], 6) - Qfraction.prod([q[0], q[2], q[3], q[5], q[6], q[10]], 6) - Qfraction.prod([q[0], q[2], q[3], q[5], q[7], q[10]], 6) - Qfraction.prod([q[0], q[2], q[3], q[5], q[8], q[10]], 6) - Qfraction.prod([q[0], q[2], q[3], q[5], q[9], q[10]], 6) - Qfraction.prod([q[0], q[2], q[3], q[6], q[7], q[10]], 6) - Qfraction.prod([q[0], q[2], q[3], q[6], q[8], q[10]], 6) - Qfraction.prod([q[0], q[2], q[3], q[6], q[9], q[10]], 6) - Qfraction.prod([q[0], q[2], q[3], q[7], q[8], q[10]], 6) - Qfraction.prod([q[0], q[2], q[3], q[7], q[9], q[10]], 6) - Qfraction.prod([q[0], q[2], q[3], q[8], q[9], q[10]], 6) - Qfraction.prod([q[0], q[2], q[4], q[5], q[6], q[10]], 6) - Qfraction.prod([q[0], q[2], q[4], q[5], q[7], q[10]], 6) - Qfraction.prod([q[0], q[2], q[4], q[5], q[8], q[10]], 6) - Qfraction.prod([q[0], q[2], q[4], q[5], q[9], q[10]], 6) - Qfraction.prod([q[0], q[2], q[4], q[6], q[7], q[10]], 6) - Qfraction.prod([q[0], q[2], q[4], q[6], q[8], q[10]], 6) - Qfraction.prod([q[0], q[2], q[4], q[6], q[9], q[10]], 6) - Qfraction.prod([q[0], q[2], q[4], q[7], q[8], q[10]], 6) - Qfraction.prod([q[0], q[2], q[4], q[7], q[9], q[10]], 6) - Qfraction.prod([q[0], q[2], q[4], q[8], q[9], q[10]], 6) - Qfraction.prod([q[0], q[2], q[5], q[6], q[7], q[10]], 6) - Qfraction.prod([q[0], q[2], q[5], q[6], q[8], q[10]], 6) - Qfraction.prod([q[0], q[2], q[5], q[6], q[9], q[10]], 6) - Qfraction.prod([q[0], q[2], q[5], q[7], q[8], q[10]], 6) - Qfraction.prod([q[0], q[2], q[5], q[7], q[9], q[10]], 6) - Qfraction.prod([q[0], q[2], q[5], q[8], q[9], q[10]], 6) - Qfraction.prod([q[0], q[2], q[6], q[7], q[8], q[10]], 6) - Qfraction.prod([q[0], q[2], q[6], q[7], q[9], q[10]], 6) - Qfraction.prod([q[0], q[2], q[6], q[8], q[9], q[10]], 6) - Qfraction.prod([q[0], q[2], q[7], q[8], q[9], q[10]], 6)
            q2b[10] += -Qfraction.prod([q[0], q[3], q[4], q[5], q[6], q[10]], 6) - Qfraction.prod([q[0], q[3], q[4], q[5], q[7], q[10]], 6) - Qfraction.prod([q[0], q[3], q[4], q[5], q[8], q[10]], 6) - Qfraction.prod([q[0], q[3], q[4], q[5], q[9], q[10]], 6) - Qfraction.prod([q[0], q[3], q[4], q[6], q[7], q[10]], 6) - Qfraction.prod([q[0], q[3], q[4], q[6], q[8], q[10]], 6) - Qfraction.prod([q[0], q[3], q[4], q[6], q[9], q[10]], 6) - Qfraction.prod([q[0], q[3], q[4], q[7], q[8], q[10]], 6) - Qfraction.prod([q[0], q[3], q[4], q[7], q[9], q[10]], 6) - Qfraction.prod([q[0], q[3], q[4], q[8], q[9], q[10]], 6) - Qfraction.prod([q[0], q[3], q[5], q[6], q[7], q[10]], 6) - Qfraction.prod([q[0], q[3], q[5], q[6], q[8], q[10]], 6) - Qfraction.prod([q[0], q[3], q[5], q[6], q[9], q[10]], 6) - Qfraction.prod([q[0], q[3], q[5], q[7], q[8], q[10]], 6) - Qfraction.prod([q[0], q[3], q[5], q[7], q[9], q[10]], 6) - Qfraction.prod([q[0], q[3], q[5], q[8], q[9], q[10]], 6) - Qfraction.prod([q[0], q[3], q[6], q[7], q[8], q[10]], 6) - Qfraction.prod([q[0], q[3], q[6], q[7], q[9], q[10]], 6) - Qfraction.prod([q[0], q[3], q[6], q[8], q[9], q[10]], 6) - Qfraction.prod([q[0], q[3], q[7], q[8], q[9], q[10]], 6) - Qfraction.prod([q[0], q[4], q[5], q[6], q[7], q[10]], 6) - Qfraction.prod([q[0], q[4], q[5], q[6], q[8], q[10]], 6) - Qfraction.prod([q[0], q[4], q[5], q[6], q[9], q[10]], 6) - Qfraction.prod([q[0], q[4], q[5], q[7], q[8], q[10]], 6) - Qfraction.prod([q[0], q[4], q[5], q[7], q[9], q[10]], 6) - Qfraction.prod([q[0], q[4], q[5], q[8], q[9], q[10]], 6) - Qfraction.prod([q[0], q[4], q[6], q[7], q[8], q[10]], 6) - Qfraction.prod([q[0], q[4], q[6], q[7], q[9], q[10]], 6) - Qfraction.prod([q[0], q[4], q[6], q[8], q[9], q[10]], 6) - Qfraction.prod([q[0], q[4], q[7], q[8], q[9], q[10]], 6) - Qfraction.prod([q[0], q[5], q[6], q[7], q[8], q[10]], 6) - Qfraction.prod([q[0], q[5], q[6], q[7], q[9], q[10]], 6) - Qfraction.prod([q[0], q[5], q[6], q[8], q[9], q[10]], 6) - Qfraction.prod([q[0], q[5], q[7], q[8], q[9], q[10]], 6) - Qfraction.prod([q[0], q[6], q[7], q[8], q[9], q[10]], 6) - Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[10]], 6) - Qfraction.prod([q[1], q[2], q[3], q[4], q[6], q[10]], 6) - Qfraction.prod([q[1], q[2], q[3], q[4], q[7], q[10]], 6) - Qfraction.prod([q[1], q[2], q[3], q[4], q[8], q[10]], 6) - Qfraction.prod([q[1], q[2], q[3], q[4], q[9], q[10]], 6) - Qfraction.prod([q[1], q[2], q[3], q[5], q[6], q[10]], 6) - Qfraction.prod([q[1], q[2], q[3], q[5], q[7], q[10]], 6) - Qfraction.prod([q[1], q[2], q[3], q[5], q[8], q[10]], 6) - Qfraction.prod([q[1], q[2], q[3], q[5], q[9], q[10]], 6) - Qfraction.prod([q[1], q[2], q[3], q[6], q[7], q[10]], 6) - Qfraction.prod([q[1], q[2], q[3], q[6], q[8], q[10]], 6) - Qfraction.prod([q[1], q[2], q[3], q[6], q[9], q[10]], 6) - Qfraction.prod([q[1], q[2], q[3], q[7], q[8], q[10]], 6) - Qfraction.prod([q[1], q[2], q[3], q[7], q[9], q[10]], 6) - Qfraction.prod([q[1], q[2], q[3], q[8], q[9], q[10]], 6) - Qfraction.prod([q[1], q[2], q[4], q[5], q[6], q[10]], 6) - Qfraction.prod([q[1], q[2], q[4], q[5], q[7], q[10]], 6) - Qfraction.prod([q[1], q[2], q[4], q[5], q[8], q[10]], 6) - Qfraction.prod([q[1], q[2], q[4], q[5], q[9], q[10]], 6) - Qfraction.prod([q[1], q[2], q[4], q[6], q[7], q[10]], 6) - Qfraction.prod([q[1], q[2], q[4], q[6], q[8], q[10]], 6) - Qfraction.prod([q[1], q[2], q[4], q[6], q[9], q[10]], 6) - Qfraction.prod([q[1], q[2], q[4], q[7], q[8], q[10]], 6) - Qfraction.prod([q[1], q[2], q[4], q[7], q[9], q[10]], 6) - Qfraction.prod([q[1], q[2], q[4], q[8], q[9], q[10]], 6) - Qfraction.prod([q[1], q[2], q[5], q[6], q[7], q[10]], 6) - Qfraction.prod([q[1], q[2], q[5], q[6], q[8], q[10]], 6) - Qfraction.prod([q[1], q[2], q[5], q[6], q[9], q[10]], 6) - Qfraction.prod([q[1], q[2], q[5], q[7], q[8], q[10]], 6) - Qfraction.prod([q[1], q[2], q[5], q[7], q[9], q[10]], 6) - Qfraction.prod([q[1], q[2], q[5], q[8], q[9], q[10]], 6) - Qfraction.prod([q[1], q[2], q[6], q[7], q[8], q[10]], 6) - Qfraction.prod([q[1], q[2], q[6], q[7], q[9], q[10]], 6) - Qfraction.prod([q[1], q[2], q[6], q[8], q[9], q[10]], 6) - Qfraction.prod([q[1], q[2], q[7], q[8], q[9], q[10]], 6) - Qfraction.prod([q[1], q[3], q[4], q[5], q[6], q[10]], 6) - Qfraction.prod([q[1], q[3], q[4], q[5], q[7], q[10]], 6) - Qfraction.prod([q[1], q[3], q[4], q[5], q[8], q[10]], 6) - Qfraction.prod([q[1], q[3], q[4], q[5], q[9], q[10]], 6) - Qfraction.prod([q[1], q[3], q[4], q[6], q[7], q[10]], 6) - Qfraction.prod([q[1], q[3], q[4], q[6], q[8], q[10]], 6) - Qfraction.prod([q[1], q[3], q[4], q[6], q[9], q[10]], 6) - Qfraction.prod([q[1], q[3], q[4], q[7], q[8], q[10]], 6) - Qfraction.prod([q[1], q[3], q[4], q[7], q[9], q[10]], 6) - Qfraction.prod([q[1], q[3], q[4], q[8], q[9], q[10]], 6) - Qfraction.prod([q[1], q[3], q[5], q[6], q[7], q[10]], 6) - Qfraction.prod([q[1], q[3], q[5], q[6], q[8], q[10]], 6) - Qfraction.prod([q[1], q[3], q[5], q[6], q[9], q[10]], 6) - Qfraction.prod([q[1], q[3], q[5], q[7], q[8], q[10]], 6) - Qfraction.prod([q[1], q[3], q[5], q[7], q[9], q[10]], 6) - Qfraction.prod([q[1], q[3], q[5], q[8], q[9], q[10]], 6) - Qfraction.prod([q[1], q[3], q[6], q[7], q[8], q[10]], 6) - Qfraction.prod([q[1], q[3], q[6], q[7], q[9], q[10]], 6) - Qfraction.prod([q[1], q[3], q[6], q[8], q[9], q[10]], 6) - Qfraction.prod([q[1], q[3], q[7], q[8], q[9], q[10]], 6) - Qfraction.prod([q[1], q[4], q[5], q[6], q[7], q[10]], 6) - Qfraction.prod([q[1], q[4], q[5], q[6], q[8], q[10]], 6) - Qfraction.prod([q[1], q[4], q[5], q[6], q[9], q[10]], 6) - Qfraction.prod([q[1], q[4], q[5], q[7], q[8], q[10]], 6) - Qfraction.prod([q[1], q[4], q[5], q[7], q[9], q[10]], 6) - Qfraction.prod([q[1], q[4], q[5], q[8], q[9], q[10]], 6) - Qfraction.prod([q[1], q[4], q[6], q[7], q[8], q[10]], 6) - Qfraction.prod([q[1], q[4], q[6], q[7], q[9], q[10]], 6) - Qfraction.prod([q[1], q[4], q[6], q[8], q[9], q[10]], 6) - Qfraction.prod([q[1], q[4], q[7], q[8], q[9], q[10]], 6) - Qfraction.prod([q[1], q[5], q[6], q[7], q[8], q[10]], 6) - Qfraction.prod([q[1], q[5], q[6], q[7], q[9], q[10]], 6) - Qfraction.prod([q[1], q[5], q[6], q[8], q[9], q[10]], 6) - Qfraction.prod([q[1], q[5], q[7], q[8], q[9], q[10]], 6) - Qfraction.prod([q[1], q[6], q[7], q[8], q[9], q[10]], 6) - Qfraction.prod([q[2], q[3], q[4], q[5], q[6], q[10]], 6) - Qfraction.prod([q[2], q[3], q[4], q[5], q[7], q[10]], 6) - Qfraction.prod([q[2], q[3], q[4], q[5], q[8], q[10]], 6) - Qfraction.prod([q[2], q[3], q[4], q[5], q[9], q[10]], 6) - Qfraction.prod([q[2], q[3], q[4], q[6], q[7], q[10]], 6) - Qfraction.prod([q[2], q[3], q[4], q[6], q[8], q[10]], 6) - Qfraction.prod([q[2], q[3], q[4], q[6], q[9], q[10]], 6) - Qfraction.prod([q[2], q[3], q[4], q[7], q[8], q[10]], 6) - Qfraction.prod([q[2], q[3], q[4], q[7], q[9], q[10]], 6) - Qfraction.prod([q[2], q[3], q[4], q[8], q[9], q[10]], 6) - Qfraction.prod([q[2], q[3], q[5], q[6], q[7], q[10]], 6) - Qfraction.prod([q[2], q[3], q[5], q[6], q[8], q[10]], 6) - Qfraction.prod([q[2], q[3], q[5], q[6], q[9], q[10]], 6) - Qfraction.prod([q[2], q[3], q[5], q[7], q[8], q[10]], 6) - Qfraction.prod([q[2], q[3], q[5], q[7], q[9], q[10]], 6) - Qfraction.prod([q[2], q[3], q[5], q[8], q[9], q[10]], 6) - Qfraction.prod([q[2], q[3], q[6], q[7], q[8], q[10]], 6) - Qfraction.prod([q[2], q[3], q[6], q[7], q[9], q[10]], 6) - Qfraction.prod([q[2], q[3], q[6], q[8], q[9], q[10]], 6) - Qfraction.prod([q[2], q[3], q[7], q[8], q[9], q[10]], 6) - Qfraction.prod([q[2], q[4], q[5], q[6], q[7], q[10]], 6) - Qfraction.prod([q[2], q[4], q[5], q[6], q[8], q[10]], 6) - Qfraction.prod([q[2], q[4], q[5], q[6], q[9], q[10]], 6) - Qfraction.prod([q[2], q[4], q[5], q[7], q[8], q[10]], 6) - Qfraction.prod([q[2], q[4], q[5], q[7], q[9], q[10]], 6) - Qfraction.prod([q[2], q[4], q[5], q[8], q[9], q[10]], 6) - Qfraction.prod([q[2], q[4], q[6], q[7], q[8], q[10]], 6) - Qfraction.prod([q[2], q[4], q[6], q[7], q[9], q[10]], 6) - Qfraction.prod([q[2], q[4], q[6], q[8], q[9], q[10]], 6) - Qfraction.prod([q[2], q[4], q[7], q[8], q[9], q[10]], 6) - Qfraction.prod([q[2], q[5], q[6], q[7], q[8], q[10]], 6) - Qfraction.prod([q[2], q[5], q[6], q[7], q[9], q[10]], 6) - Qfraction.prod([q[2], q[5], q[6], q[8], q[9], q[10]], 6)
            q2b[10] += -Qfraction.prod([q[2], q[5], q[7], q[8], q[9], q[10]], 6) - Qfraction.prod([q[2], q[6], q[7], q[8], q[9], q[10]], 6) - Qfraction.prod([q[3], q[4], q[5], q[6], q[7], q[10]], 6) - Qfraction.prod([q[3], q[4], q[5], q[6], q[8], q[10]], 6) - Qfraction.prod([q[3], q[4], q[5], q[6], q[9], q[10]], 6) - Qfraction.prod([q[3], q[4], q[5], q[7], q[8], q[10]], 6) - Qfraction.prod([q[3], q[4], q[5], q[7], q[9], q[10]], 6) - Qfraction.prod([q[3], q[4], q[5], q[8], q[9], q[10]], 6) - Qfraction.prod([q[3], q[4], q[6], q[7], q[8], q[10]], 6) - Qfraction.prod([q[3], q[4], q[6], q[7], q[9], q[10]], 6) - Qfraction.prod([q[3], q[4], q[6], q[8], q[9], q[10]], 6) - Qfraction.prod([q[3], q[4], q[7], q[8], q[9], q[10]], 6) - Qfraction.prod([q[3], q[5], q[6], q[7], q[8], q[10]], 6) - Qfraction.prod([q[3], q[5], q[6], q[7], q[9], q[10]], 6) - Qfraction.prod([q[3], q[5], q[6], q[8], q[9], q[10]], 6) - Qfraction.prod([q[3], q[5], q[7], q[8], q[9], q[10]], 6) - Qfraction.prod([q[3], q[6], q[7], q[8], q[9], q[10]], 6) - Qfraction.prod([q[4], q[5], q[6], q[7], q[8], q[10]], 6) - Qfraction.prod([q[4], q[5], q[6], q[7], q[9], q[10]], 6) - Qfraction.prod([q[4], q[5], q[6], q[8], q[9], q[10]], 6) - Qfraction.prod([q[4], q[5], q[7], q[8], q[9], q[10]], 6) - Qfraction.prod([q[4], q[6], q[7], q[8], q[9], q[10]], 6) - Qfraction.prod([q[5], q[6], q[7], q[8], q[9], q[10]], 6) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[6], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[7], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[8], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[6], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[7], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[8], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[6], q[7], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[6], q[8], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[6], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[7], q[8], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[7], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[6], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[7], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[8], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[6], q[7], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[6], q[8], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[6], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[7], q[8], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[7], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[5], q[6], q[7], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[5], q[6], q[8], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[5], q[6], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[5], q[7], q[8], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[5], q[7], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[5], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[6], q[7], q[8], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[6], q[7], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[6], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[2], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[6], q[10]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[7], q[10]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[8], q[10]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[6], q[7], q[10]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[6], q[8], q[10]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[6], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[7], q[8], q[10]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[7], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[3], q[5], q[6], q[7], q[10]], 7) + Qfraction.prod([q[0], q[1], q[3], q[5], q[6], q[8], q[10]], 7) + Qfraction.prod([q[0], q[1], q[3], q[5], q[6], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[3], q[5], q[7], q[8], q[10]], 7) + Qfraction.prod([q[0], q[1], q[3], q[5], q[7], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[3], q[5], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[3], q[6], q[7], q[8], q[10]], 7) + Qfraction.prod([q[0], q[1], q[3], q[6], q[7], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[3], q[6], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[3], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[4], q[5], q[6], q[7], q[10]], 7) + Qfraction.prod([q[0], q[1], q[4], q[5], q[6], q[8], q[10]], 7) + Qfraction.prod([q[0], q[1], q[4], q[5], q[6], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[4], q[5], q[7], q[8], q[10]], 7) + Qfraction.prod([q[0], q[1], q[4], q[5], q[7], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[4], q[5], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[4], q[6], q[7], q[8], q[10]], 7) + Qfraction.prod([q[0], q[1], q[4], q[6], q[7], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[4], q[6], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[4], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[5], q[6], q[7], q[8], q[10]], 7) + Qfraction.prod([q[0], q[1], q[5], q[6], q[7], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[5], q[6], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[5], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[1], q[6], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[6], q[10]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[7], q[10]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[8], q[10]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[9], q[10]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[6], q[7], q[10]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[6], q[8], q[10]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[6], q[9], q[10]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[7], q[8], q[10]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[7], q[9], q[10]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[2], q[3], q[5], q[6], q[7], q[10]], 7) + Qfraction.prod([q[0], q[2], q[3], q[5], q[6], q[8], q[10]], 7) + Qfraction.prod([q[0], q[2], q[3], q[5], q[6], q[9], q[10]], 7) + Qfraction.prod([q[0], q[2], q[3], q[5], q[7], q[8], q[10]], 7) + Qfraction.prod([q[0], q[2], q[3], q[5], q[7], q[9], q[10]], 7) + Qfraction.prod([q[0], q[2], q[3], q[5], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[2], q[3], q[6], q[7], q[8], q[10]], 7) + Qfraction.prod([q[0], q[2], q[3], q[6], q[7], q[9], q[10]], 7) + Qfraction.prod([q[0], q[2], q[3], q[6], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[2], q[3], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[2], q[4], q[5], q[6], q[7], q[10]], 7) + Qfraction.prod([q[0], q[2], q[4], q[5], q[6], q[8], q[10]], 7) + Qfraction.prod([q[0], q[2], q[4], q[5], q[6], q[9], q[10]], 7) + Qfraction.prod([q[0], q[2], q[4], q[5], q[7], q[8], q[10]], 7) + Qfraction.prod([q[0], q[2], q[4], q[5], q[7], q[9], q[10]], 7) + Qfraction.prod([q[0], q[2], q[4], q[5], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[2], q[4], q[6], q[7], q[8], q[10]], 7) + Qfraction.prod([q[0], q[2], q[4], q[6], q[7], q[9], q[10]], 7) + Qfraction.prod([q[0], q[2], q[4], q[6], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[2], q[4], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[2], q[5], q[6], q[7], q[8], q[10]], 7) + Qfraction.prod([q[0], q[2], q[5], q[6], q[7], q[9], q[10]], 7) + Qfraction.prod([q[0], q[2], q[5], q[6], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[2], q[5], q[7], q[8], q[9], q[10]], 7)
            q2b[10] += Qfraction.prod([q[0], q[2], q[6], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[3], q[4], q[5], q[6], q[7], q[10]], 7) + Qfraction.prod([q[0], q[3], q[4], q[5], q[6], q[8], q[10]], 7) + Qfraction.prod([q[0], q[3], q[4], q[5], q[6], q[9], q[10]], 7) + Qfraction.prod([q[0], q[3], q[4], q[5], q[7], q[8], q[10]], 7) + Qfraction.prod([q[0], q[3], q[4], q[5], q[7], q[9], q[10]], 7) + Qfraction.prod([q[0], q[3], q[4], q[5], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[3], q[4], q[6], q[7], q[8], q[10]], 7) + Qfraction.prod([q[0], q[3], q[4], q[6], q[7], q[9], q[10]], 7) + Qfraction.prod([q[0], q[3], q[4], q[6], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[3], q[4], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[3], q[5], q[6], q[7], q[8], q[10]], 7) + Qfraction.prod([q[0], q[3], q[5], q[6], q[7], q[9], q[10]], 7) + Qfraction.prod([q[0], q[3], q[5], q[6], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[3], q[5], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[3], q[6], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[4], q[5], q[6], q[7], q[8], q[10]], 7) + Qfraction.prod([q[0], q[4], q[5], q[6], q[7], q[9], q[10]], 7) + Qfraction.prod([q[0], q[4], q[5], q[6], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[4], q[5], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[4], q[6], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[0], q[5], q[6], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[6], q[10]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[7], q[10]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[8], q[10]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[9], q[10]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[6], q[7], q[10]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[6], q[8], q[10]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[6], q[9], q[10]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[7], q[8], q[10]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[7], q[9], q[10]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[8], q[9], q[10]], 7) + Qfraction.prod([q[1], q[2], q[3], q[5], q[6], q[7], q[10]], 7) + Qfraction.prod([q[1], q[2], q[3], q[5], q[6], q[8], q[10]], 7) + Qfraction.prod([q[1], q[2], q[3], q[5], q[6], q[9], q[10]], 7) + Qfraction.prod([q[1], q[2], q[3], q[5], q[7], q[8], q[10]], 7) + Qfraction.prod([q[1], q[2], q[3], q[5], q[7], q[9], q[10]], 7) + Qfraction.prod([q[1], q[2], q[3], q[5], q[8], q[9], q[10]], 7) + Qfraction.prod([q[1], q[2], q[3], q[6], q[7], q[8], q[10]], 7) + Qfraction.prod([q[1], q[2], q[3], q[6], q[7], q[9], q[10]], 7) + Qfraction.prod([q[1], q[2], q[3], q[6], q[8], q[9], q[10]], 7) + Qfraction.prod([q[1], q[2], q[3], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[1], q[2], q[4], q[5], q[6], q[7], q[10]], 7) + Qfraction.prod([q[1], q[2], q[4], q[5], q[6], q[8], q[10]], 7) + Qfraction.prod([q[1], q[2], q[4], q[5], q[6], q[9], q[10]], 7) + Qfraction.prod([q[1], q[2], q[4], q[5], q[7], q[8], q[10]], 7) + Qfraction.prod([q[1], q[2], q[4], q[5], q[7], q[9], q[10]], 7) + Qfraction.prod([q[1], q[2], q[4], q[5], q[8], q[9], q[10]], 7) + Qfraction.prod([q[1], q[2], q[4], q[6], q[7], q[8], q[10]], 7) + Qfraction.prod([q[1], q[2], q[4], q[6], q[7], q[9], q[10]], 7) + Qfraction.prod([q[1], q[2], q[4], q[6], q[8], q[9], q[10]], 7) + Qfraction.prod([q[1], q[2], q[4], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[1], q[2], q[5], q[6], q[7], q[8], q[10]], 7) + Qfraction.prod([q[1], q[2], q[5], q[6], q[7], q[9], q[10]], 7) + Qfraction.prod([q[1], q[2], q[5], q[6], q[8], q[9], q[10]], 7) + Qfraction.prod([q[1], q[2], q[5], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[1], q[2], q[6], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[1], q[3], q[4], q[5], q[6], q[7], q[10]], 7) + Qfraction.prod([q[1], q[3], q[4], q[5], q[6], q[8], q[10]], 7) + Qfraction.prod([q[1], q[3], q[4], q[5], q[6], q[9], q[10]], 7) + Qfraction.prod([q[1], q[3], q[4], q[5], q[7], q[8], q[10]], 7) + Qfraction.prod([q[1], q[3], q[4], q[5], q[7], q[9], q[10]], 7) + Qfraction.prod([q[1], q[3], q[4], q[5], q[8], q[9], q[10]], 7) + Qfraction.prod([q[1], q[3], q[4], q[6], q[7], q[8], q[10]], 7) + Qfraction.prod([q[1], q[3], q[4], q[6], q[7], q[9], q[10]], 7) + Qfraction.prod([q[1], q[3], q[4], q[6], q[8], q[9], q[10]], 7) + Qfraction.prod([q[1], q[3], q[4], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[1], q[3], q[5], q[6], q[7], q[8], q[10]], 7) + Qfraction.prod([q[1], q[3], q[5], q[6], q[7], q[9], q[10]], 7) + Qfraction.prod([q[1], q[3], q[5], q[6], q[8], q[9], q[10]], 7) + Qfraction.prod([q[1], q[3], q[5], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[1], q[3], q[6], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[1], q[4], q[5], q[6], q[7], q[8], q[10]], 7) + Qfraction.prod([q[1], q[4], q[5], q[6], q[7], q[9], q[10]], 7) + Qfraction.prod([q[1], q[4], q[5], q[6], q[8], q[9], q[10]], 7) + Qfraction.prod([q[1], q[4], q[5], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[1], q[4], q[6], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[1], q[5], q[6], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[2], q[3], q[4], q[5], q[6], q[7], q[10]], 7) + Qfraction.prod([q[2], q[3], q[4], q[5], q[6], q[8], q[10]], 7) + Qfraction.prod([q[2], q[3], q[4], q[5], q[6], q[9], q[10]], 7) + Qfraction.prod([q[2], q[3], q[4], q[5], q[7], q[8], q[10]], 7) + Qfraction.prod([q[2], q[3], q[4], q[5], q[7], q[9], q[10]], 7) + Qfraction.prod([q[2], q[3], q[4], q[5], q[8], q[9], q[10]], 7) + Qfraction.prod([q[2], q[3], q[4], q[6], q[7], q[8], q[10]], 7) + Qfraction.prod([q[2], q[3], q[4], q[6], q[7], q[9], q[10]], 7) + Qfraction.prod([q[2], q[3], q[4], q[6], q[8], q[9], q[10]], 7) + Qfraction.prod([q[2], q[3], q[4], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[2], q[3], q[5], q[6], q[7], q[8], q[10]], 7) + Qfraction.prod([q[2], q[3], q[5], q[6], q[7], q[9], q[10]], 7) + Qfraction.prod([q[2], q[3], q[5], q[6], q[8], q[9], q[10]], 7) + Qfraction.prod([q[2], q[3], q[5], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[2], q[3], q[6], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[2], q[4], q[5], q[6], q[7], q[8], q[10]], 7) + Qfraction.prod([q[2], q[4], q[5], q[6], q[7], q[9], q[10]], 7) + Qfraction.prod([q[2], q[4], q[5], q[6], q[8], q[9], q[10]], 7) + Qfraction.prod([q[2], q[4], q[5], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[2], q[4], q[6], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[2], q[5], q[6], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[3], q[4], q[5], q[6], q[7], q[8], q[10]], 7) + Qfraction.prod([q[3], q[4], q[5], q[6], q[7], q[9], q[10]], 7) + Qfraction.prod([q[3], q[4], q[5], q[6], q[8], q[9], q[10]], 7) + Qfraction.prod([q[3], q[4], q[5], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[3], q[4], q[6], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[3], q[5], q[6], q[7], q[8], q[9], q[10]], 7) + Qfraction.prod([q[4], q[5], q[6], q[7], q[8], q[9], q[10]], 7) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[7], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[8], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[6], q[7], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[6], q[8], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[6], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[7], q[8], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[7], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[6], q[7], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[6], q[8], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[6], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[7], q[8], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[7], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[6], q[7], q[8], q[10]], 8)
            q2b[10] += -Qfraction.prod([q[0], q[1], q[2], q[3], q[6], q[7], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[6], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[6], q[7], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[6], q[8], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[6], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[7], q[8], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[7], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[6], q[7], q[8], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[6], q[7], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[6], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[5], q[6], q[7], q[8], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[5], q[6], q[7], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[5], q[6], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[5], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[2], q[6], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[6], q[7], q[10]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[6], q[8], q[10]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[6], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[7], q[8], q[10]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[7], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[6], q[7], q[8], q[10]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[6], q[7], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[6], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[3], q[5], q[6], q[7], q[8], q[10]], 8) - Qfraction.prod([q[0], q[1], q[3], q[5], q[6], q[7], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[3], q[5], q[6], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[3], q[5], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[3], q[6], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[4], q[5], q[6], q[7], q[8], q[10]], 8) - Qfraction.prod([q[0], q[1], q[4], q[5], q[6], q[7], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[4], q[5], q[6], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[4], q[5], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[4], q[6], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[1], q[5], q[6], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[6], q[7], q[10]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[6], q[8], q[10]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[6], q[9], q[10]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[7], q[8], q[10]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[7], q[9], q[10]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[6], q[7], q[8], q[10]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[6], q[7], q[9], q[10]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[6], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[2], q[3], q[5], q[6], q[7], q[8], q[10]], 8) - Qfraction.prod([q[0], q[2], q[3], q[5], q[6], q[7], q[9], q[10]], 8) - Qfraction.prod([q[0], q[2], q[3], q[5], q[6], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[2], q[3], q[5], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[2], q[3], q[6], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[2], q[4], q[5], q[6], q[7], q[8], q[10]], 8) - Qfraction.prod([q[0], q[2], q[4], q[5], q[6], q[7], q[9], q[10]], 8) - Qfraction.prod([q[0], q[2], q[4], q[5], q[6], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[2], q[4], q[5], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[2], q[4], q[6], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[2], q[5], q[6], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[3], q[4], q[5], q[6], q[7], q[8], q[10]], 8) - Qfraction.prod([q[0], q[3], q[4], q[5], q[6], q[7], q[9], q[10]], 8) - Qfraction.prod([q[0], q[3], q[4], q[5], q[6], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[3], q[4], q[5], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[3], q[4], q[6], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[3], q[5], q[6], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[0], q[4], q[5], q[6], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[10]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[6], q[8], q[10]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[6], q[9], q[10]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[7], q[8], q[10]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[7], q[9], q[10]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[8], q[9], q[10]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[6], q[7], q[8], q[10]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[6], q[7], q[9], q[10]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[6], q[8], q[9], q[10]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[1], q[2], q[3], q[5], q[6], q[7], q[8], q[10]], 8) - Qfraction.prod([q[1], q[2], q[3], q[5], q[6], q[7], q[9], q[10]], 8) - Qfraction.prod([q[1], q[2], q[3], q[5], q[6], q[8], q[9], q[10]], 8) - Qfraction.prod([q[1], q[2], q[3], q[5], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[1], q[2], q[3], q[6], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[1], q[2], q[4], q[5], q[6], q[7], q[8], q[10]], 8) - Qfraction.prod([q[1], q[2], q[4], q[5], q[6], q[7], q[9], q[10]], 8) - Qfraction.prod([q[1], q[2], q[4], q[5], q[6], q[8], q[9], q[10]], 8) - Qfraction.prod([q[1], q[2], q[4], q[5], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[1], q[2], q[4], q[6], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[1], q[2], q[5], q[6], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[1], q[3], q[4], q[5], q[6], q[7], q[8], q[10]], 8) - Qfraction.prod([q[1], q[3], q[4], q[5], q[6], q[7], q[9], q[10]], 8) - Qfraction.prod([q[1], q[3], q[4], q[5], q[6], q[8], q[9], q[10]], 8) - Qfraction.prod([q[1], q[3], q[4], q[5], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[1], q[3], q[4], q[6], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[1], q[3], q[5], q[6], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[1], q[4], q[5], q[6], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[10]], 8) - Qfraction.prod([q[2], q[3], q[4], q[5], q[6], q[7], q[9], q[10]], 8) - Qfraction.prod([q[2], q[3], q[4], q[5], q[6], q[8], q[9], q[10]], 8) - Qfraction.prod([q[2], q[3], q[4], q[5], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[2], q[3], q[4], q[6], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[2], q[3], q[5], q[6], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[2], q[4], q[5], q[6], q[7], q[8], q[9], q[10]], 8) - Qfraction.prod([q[3], q[4], q[5], q[6], q[7], q[8], q[9], q[10]], 8) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[10]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[8], q[10]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[9], q[10]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[7], q[8], q[10]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[7], q[9], q[10]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[8], q[9], q[10]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[6], q[7], q[8], q[10]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[6], q[7], q[9], q[10]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[6], q[8], q[9], q[10]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[7], q[8], q[9], q[10]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[6], q[7], q[8], q[10]], 9)
            q2b[10] += Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[6], q[7], q[9], q[10]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[6], q[8], q[9], q[10]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[7], q[8], q[9], q[10]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[6], q[7], q[8], q[9], q[10]], 9) + Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[6], q[7], q[8], q[10]], 9) + Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[6], q[7], q[9], q[10]], 9) + Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[6], q[8], q[9], q[10]], 9) + Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[7], q[8], q[9], q[10]], 9) + Qfraction.prod([q[0], q[1], q[2], q[4], q[6], q[7], q[8], q[9], q[10]], 9) + Qfraction.prod([q[0], q[1], q[2], q[5], q[6], q[7], q[8], q[9], q[10]], 9) + Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[6], q[7], q[8], q[10]], 9) + Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[6], q[7], q[9], q[10]], 9) + Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[6], q[8], q[9], q[10]], 9) + Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[7], q[8], q[9], q[10]], 9) + Qfraction.prod([q[0], q[1], q[3], q[4], q[6], q[7], q[8], q[9], q[10]], 9) + Qfraction.prod([q[0], q[1], q[3], q[5], q[6], q[7], q[8], q[9], q[10]], 9) + Qfraction.prod([q[0], q[1], q[4], q[5], q[6], q[7], q[8], q[9], q[10]], 9) + Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[10]], 9) + Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[6], q[7], q[9], q[10]], 9) + Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[6], q[8], q[9], q[10]], 9) + Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[7], q[8], q[9], q[10]], 9) + Qfraction.prod([q[0], q[2], q[3], q[4], q[6], q[7], q[8], q[9], q[10]], 9) + Qfraction.prod([q[0], q[2], q[3], q[5], q[6], q[7], q[8], q[9], q[10]], 9) + Qfraction.prod([q[0], q[2], q[4], q[5], q[6], q[7], q[8], q[9], q[10]], 9) + Qfraction.prod([q[0], q[3], q[4], q[5], q[6], q[7], q[8], q[9], q[10]], 9) + Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[10]], 9) + Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[9], q[10]], 9) + Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[6], q[8], q[9], q[10]], 9) + Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[7], q[8], q[9], q[10]], 9) + Qfraction.prod([q[1], q[2], q[3], q[4], q[6], q[7], q[8], q[9], q[10]], 9) + Qfraction.prod([q[1], q[2], q[3], q[5], q[6], q[7], q[8], q[9], q[10]], 9) + Qfraction.prod([q[1], q[2], q[4], q[5], q[6], q[7], q[8], q[9], q[10]], 9) + Qfraction.prod([q[1], q[3], q[4], q[5], q[6], q[7], q[8], q[9], q[10]], 9) + Qfraction.prod([q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[9], q[10]], 9) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[10]], 10) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[9], q[10]], 10) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[8], q[9], q[10]], 10) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[7], q[8], q[9], q[10]], 10) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[6], q[7], q[8], q[9], q[10]], 10) - Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[6], q[7], q[8], q[9], q[10]], 10) - Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[6], q[7], q[8], q[9], q[10]], 10) - Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[6], q[7], q[8], q[9], q[10]], 10) - Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[9], q[10]], 10) - Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[9], q[10]], 10) + Qfraction.prod(q[0:11], 11)
            
        if len_q >= 12 and len_q2a < 12:
            q2b[11] = q[11] - Qfraction.prod([q[0], q[11]], 2) - Qfraction.prod([q[1], q[11]], 2) - Qfraction.prod([q[2], q[11]], 2) - Qfraction.prod([q[3], q[11]], 2) - Qfraction.prod([q[4], q[11]], 2) - Qfraction.prod([q[5], q[11]], 2) - Qfraction.prod([q[6], q[11]], 2) - Qfraction.prod([q[7], q[11]], 2) - Qfraction.prod([q[8], q[11]], 2) - Qfraction.prod([q[9], q[11]], 2) - Qfraction.prod([q[10], q[11]], 2) + Qfraction.prod([q[0], q[1], q[11]], 3) + Qfraction.prod([q[0], q[2], q[11]], 3) + Qfraction.prod([q[0], q[3], q[11]], 3) + Qfraction.prod([q[0], q[4], q[11]], 3) + Qfraction.prod([q[0], q[5], q[11]], 3) + Qfraction.prod([q[0], q[6], q[11]], 3) + Qfraction.prod([q[0], q[7], q[11]], 3) + Qfraction.prod([q[0], q[8], q[11]], 3) + Qfraction.prod([q[0], q[9], q[11]], 3) + Qfraction.prod([q[0], q[10], q[11]], 3) + Qfraction.prod([q[1], q[2], q[11]], 3) + Qfraction.prod([q[1], q[3], q[11]], 3) + Qfraction.prod([q[1], q[4], q[11]], 3) + Qfraction.prod([q[1], q[5], q[11]], 3) + Qfraction.prod([q[1], q[6], q[11]], 3) + Qfraction.prod([q[1], q[7], q[11]], 3) + Qfraction.prod([q[1], q[8], q[11]], 3) + Qfraction.prod([q[1], q[9], q[11]], 3) + Qfraction.prod([q[1], q[10], q[11]], 3) + Qfraction.prod([q[2], q[3], q[11]], 3) + Qfraction.prod([q[2], q[4], q[11]], 3) + Qfraction.prod([q[2], q[5], q[11]], 3) + Qfraction.prod([q[2], q[6], q[11]], 3) + Qfraction.prod([q[2], q[7], q[11]], 3) + Qfraction.prod([q[2], q[8], q[11]], 3) + Qfraction.prod([q[2], q[9], q[11]], 3) + Qfraction.prod([q[2], q[10], q[11]], 3) + Qfraction.prod([q[3], q[4], q[11]], 3) + Qfraction.prod([q[3], q[5], q[11]], 3) + Qfraction.prod([q[3], q[6], q[11]], 3) + Qfraction.prod([q[3], q[7], q[11]], 3) + Qfraction.prod([q[3], q[8], q[11]], 3) + Qfraction.prod([q[3], q[9], q[11]], 3) + Qfraction.prod([q[3], q[10], q[11]], 3) + Qfraction.prod([q[4], q[5], q[11]], 3) + Qfraction.prod([q[4], q[6], q[11]], 3) + Qfraction.prod([q[4], q[7], q[11]], 3) + Qfraction.prod([q[4], q[8], q[11]], 3) + Qfraction.prod([q[4], q[9], q[11]], 3) + Qfraction.prod([q[4], q[10], q[11]], 3) + Qfraction.prod([q[5], q[6], q[11]], 3) + Qfraction.prod([q[5], q[7], q[11]], 3) + Qfraction.prod([q[5], q[8], q[11]], 3) + Qfraction.prod([q[5], q[9], q[11]], 3) + Qfraction.prod([q[5], q[10], q[11]], 3) + Qfraction.prod([q[6], q[7], q[11]], 3) + Qfraction.prod([q[6], q[8], q[11]], 3) + Qfraction.prod([q[6], q[9], q[11]], 3) + Qfraction.prod([q[6], q[10], q[11]], 3) + Qfraction.prod([q[7], q[8], q[11]], 3) + Qfraction.prod([q[7], q[9], q[11]], 3) + Qfraction.prod([q[7], q[10], q[11]], 3) + Qfraction.prod([q[8], q[9], q[11]], 3) + Qfraction.prod([q[8], q[10], q[11]], 3) + Qfraction.prod([q[9], q[10], q[11]], 3) - Qfraction.prod([q[0], q[1], q[2], q[11]], 4) - Qfraction.prod([q[0], q[1], q[3], q[11]], 4) - Qfraction.prod([q[0], q[1], q[4], q[11]], 4) - Qfraction.prod([q[0], q[1], q[5], q[11]], 4) - Qfraction.prod([q[0], q[1], q[6], q[11]], 4) - Qfraction.prod([q[0], q[1], q[7], q[11]], 4) - Qfraction.prod([q[0], q[1], q[8], q[11]], 4) - Qfraction.prod([q[0], q[1], q[9], q[11]], 4) - Qfraction.prod([q[0], q[1], q[10], q[11]], 4) - Qfraction.prod([q[0], q[2], q[3], q[11]], 4) - Qfraction.prod([q[0], q[2], q[4], q[11]], 4) - Qfraction.prod([q[0], q[2], q[5], q[11]], 4) - Qfraction.prod([q[0], q[2], q[6], q[11]], 4) - Qfraction.prod([q[0], q[2], q[7], q[11]], 4) - Qfraction.prod([q[0], q[2], q[8], q[11]], 4) - Qfraction.prod([q[0], q[2], q[9], q[11]], 4) - Qfraction.prod([q[0], q[2], q[10], q[11]], 4) - Qfraction.prod([q[0], q[3], q[4], q[11]], 4) - Qfraction.prod([q[0], q[3], q[5], q[11]], 4) - Qfraction.prod([q[0], q[3], q[6], q[11]], 4) - Qfraction.prod([q[0], q[3], q[7], q[11]], 4) - Qfraction.prod([q[0], q[3], q[8], q[11]], 4) - Qfraction.prod([q[0], q[3], q[9], q[11]], 4) - Qfraction.prod([q[0], q[3], q[10], q[11]], 4) - Qfraction.prod([q[0], q[4], q[5], q[11]], 4) - Qfraction.prod([q[0], q[4], q[6], q[11]], 4) - Qfraction.prod([q[0], q[4], q[7], q[11]], 4) - Qfraction.prod([q[0], q[4], q[8], q[11]], 4) - Qfraction.prod([q[0], q[4], q[9], q[11]], 4) - Qfraction.prod([q[0], q[4], q[10], q[11]], 4) - Qfraction.prod([q[0], q[5], q[6], q[11]], 4) - Qfraction.prod([q[0], q[5], q[7], q[11]], 4) - Qfraction.prod([q[0], q[5], q[8], q[11]], 4) - Qfraction.prod([q[0], q[5], q[9], q[11]], 4) - Qfraction.prod([q[0], q[5], q[10], q[11]], 4) - Qfraction.prod([q[0], q[6], q[7], q[11]], 4) - Qfraction.prod([q[0], q[6], q[8], q[11]], 4) - Qfraction.prod([q[0], q[6], q[9], q[11]], 4) - Qfraction.prod([q[0], q[6], q[10], q[11]], 4) - Qfraction.prod([q[0], q[7], q[8], q[11]], 4) - Qfraction.prod([q[0], q[7], q[9], q[11]], 4) - Qfraction.prod([q[0], q[7], q[10], q[11]], 4) - Qfraction.prod([q[0], q[8], q[9], q[11]], 4) - Qfraction.prod([q[0], q[8], q[10], q[11]], 4) - Qfraction.prod([q[0], q[9], q[10], q[11]], 4) - Qfraction.prod([q[1], q[2], q[3], q[11]], 4) - Qfraction.prod([q[1], q[2], q[4], q[11]], 4) - Qfraction.prod([q[1], q[2], q[5], q[11]], 4) - Qfraction.prod([q[1], q[2], q[6], q[11]], 4) - Qfraction.prod([q[1], q[2], q[7], q[11]], 4) - Qfraction.prod([q[1], q[2], q[8], q[11]], 4) - Qfraction.prod([q[1], q[2], q[9], q[11]], 4) - Qfraction.prod([q[1], q[2], q[10], q[11]], 4) - Qfraction.prod([q[1], q[3], q[4], q[11]], 4) - Qfraction.prod([q[1], q[3], q[5], q[11]], 4) - Qfraction.prod([q[1], q[3], q[6], q[11]], 4) - Qfraction.prod([q[1], q[3], q[7], q[11]], 4) - Qfraction.prod([q[1], q[3], q[8], q[11]], 4) - Qfraction.prod([q[1], q[3], q[9], q[11]], 4) - Qfraction.prod([q[1], q[3], q[10], q[11]], 4) - Qfraction.prod([q[1], q[4], q[5], q[11]], 4) - Qfraction.prod([q[1], q[4], q[6], q[11]], 4) - Qfraction.prod([q[1], q[4], q[7], q[11]], 4) - Qfraction.prod([q[1], q[4], q[8], q[11]], 4) - Qfraction.prod([q[1], q[4], q[9], q[11]], 4) - Qfraction.prod([q[1], q[4], q[10], q[11]], 4) - Qfraction.prod([q[1], q[5], q[6], q[11]], 4) - Qfraction.prod([q[1], q[5], q[7], q[11]], 4) - Qfraction.prod([q[1], q[5], q[8], q[11]], 4) - Qfraction.prod([q[1], q[5], q[9], q[11]], 4) - Qfraction.prod([q[1], q[5], q[10], q[11]], 4) - Qfraction.prod([q[1], q[6], q[7], q[11]], 4) - Qfraction.prod([q[1], q[6], q[8], q[11]], 4) - Qfraction.prod([q[1], q[6], q[9], q[11]], 4) - Qfraction.prod([q[1], q[6], q[10], q[11]], 4) - Qfraction.prod([q[1], q[7], q[8], q[11]], 4) - Qfraction.prod([q[1], q[7], q[9], q[11]], 4) - Qfraction.prod([q[1], q[7], q[10], q[11]], 4) - Qfraction.prod([q[1], q[8], q[9], q[11]], 4) - Qfraction.prod([q[1], q[8], q[10], q[11]], 4) - Qfraction.prod([q[1], q[9], q[10], q[11]], 4) - Qfraction.prod([q[2], q[3], q[4], q[11]], 4) - Qfraction.prod([q[2], q[3], q[5], q[11]], 4) - Qfraction.prod([q[2], q[3], q[6], q[11]], 4) - Qfraction.prod([q[2], q[3], q[7], q[11]], 4) - Qfraction.prod([q[2], q[3], q[8], q[11]], 4) - Qfraction.prod([q[2], q[3], q[9], q[11]], 4) - Qfraction.prod([q[2], q[3], q[10], q[11]], 4) - Qfraction.prod([q[2], q[4], q[5], q[11]], 4) - Qfraction.prod([q[2], q[4], q[6], q[11]], 4) - Qfraction.prod([q[2], q[4], q[7], q[11]], 4) - Qfraction.prod([q[2], q[4], q[8], q[11]], 4) - Qfraction.prod([q[2], q[4], q[9], q[11]], 4) - Qfraction.prod([q[2], q[4], q[10], q[11]], 4) - Qfraction.prod([q[2], q[5], q[6], q[11]], 4) - Qfraction.prod([q[2], q[5], q[7], q[11]], 4) - Qfraction.prod([q[2], q[5], q[8], q[11]], 4) - Qfraction.prod([q[2], q[5], q[9], q[11]], 4) - Qfraction.prod([q[2], q[5], q[10], q[11]], 4) - Qfraction.prod([q[2], q[6], q[7], q[11]], 4) - Qfraction.prod([q[2], q[6], q[8], q[11]], 4) - Qfraction.prod([q[2], q[6], q[9], q[11]], 4) - Qfraction.prod([q[2], q[6], q[10], q[11]], 4) - Qfraction.prod([q[2], q[7], q[8], q[11]], 4) - Qfraction.prod([q[2], q[7], q[9], q[11]], 4) - Qfraction.prod([q[2], q[7], q[10], q[11]], 4) - Qfraction.prod([q[2], q[8], q[9], q[11]], 4) - Qfraction.prod([q[2], q[8], q[10], q[11]], 4) - Qfraction.prod([q[2], q[9], q[10], q[11]], 4) - Qfraction.prod([q[3], q[4], q[5], q[11]], 4) - Qfraction.prod([q[3], q[4], q[6], q[11]], 4) - Qfraction.prod([q[3], q[4], q[7], q[11]], 4) - Qfraction.prod([q[3], q[4], q[8], q[11]], 4) - Qfraction.prod([q[3], q[4], q[9], q[11]], 4) - Qfraction.prod([q[3], q[4], q[10], q[11]], 4) - Qfraction.prod([q[3], q[5], q[6], q[11]], 4)
            q2b[11] += -Qfraction.prod([q[3], q[5], q[7], q[11]], 4) - Qfraction.prod([q[3], q[5], q[8], q[11]], 4) - Qfraction.prod([q[3], q[5], q[9], q[11]], 4) - Qfraction.prod([q[3], q[5], q[10], q[11]], 4) - Qfraction.prod([q[3], q[6], q[7], q[11]], 4) - Qfraction.prod([q[3], q[6], q[8], q[11]], 4) - Qfraction.prod([q[3], q[6], q[9], q[11]], 4) - Qfraction.prod([q[3], q[6], q[10], q[11]], 4) - Qfraction.prod([q[3], q[7], q[8], q[11]], 4) - Qfraction.prod([q[3], q[7], q[9], q[11]], 4) - Qfraction.prod([q[3], q[7], q[10], q[11]], 4) - Qfraction.prod([q[3], q[8], q[9], q[11]], 4) - Qfraction.prod([q[3], q[8], q[10], q[11]], 4) - Qfraction.prod([q[3], q[9], q[10], q[11]], 4) - Qfraction.prod([q[4], q[5], q[6], q[11]], 4) - Qfraction.prod([q[4], q[5], q[7], q[11]], 4) - Qfraction.prod([q[4], q[5], q[8], q[11]], 4) - Qfraction.prod([q[4], q[5], q[9], q[11]], 4) - Qfraction.prod([q[4], q[5], q[10], q[11]], 4) - Qfraction.prod([q[4], q[6], q[7], q[11]], 4) - Qfraction.prod([q[4], q[6], q[8], q[11]], 4) - Qfraction.prod([q[4], q[6], q[9], q[11]], 4) - Qfraction.prod([q[4], q[6], q[10], q[11]], 4) - Qfraction.prod([q[4], q[7], q[8], q[11]], 4) - Qfraction.prod([q[4], q[7], q[9], q[11]], 4) - Qfraction.prod([q[4], q[7], q[10], q[11]], 4) - Qfraction.prod([q[4], q[8], q[9], q[11]], 4) - Qfraction.prod([q[4], q[8], q[10], q[11]], 4) - Qfraction.prod([q[4], q[9], q[10], q[11]], 4) - Qfraction.prod([q[5], q[6], q[7], q[11]], 4) - Qfraction.prod([q[5], q[6], q[8], q[11]], 4) - Qfraction.prod([q[5], q[6], q[9], q[11]], 4) - Qfraction.prod([q[5], q[6], q[10], q[11]], 4) - Qfraction.prod([q[5], q[7], q[8], q[11]], 4) - Qfraction.prod([q[5], q[7], q[9], q[11]], 4) - Qfraction.prod([q[5], q[7], q[10], q[11]], 4) - Qfraction.prod([q[5], q[8], q[9], q[11]], 4) - Qfraction.prod([q[5], q[8], q[10], q[11]], 4) - Qfraction.prod([q[5], q[9], q[10], q[11]], 4) - Qfraction.prod([q[6], q[7], q[8], q[11]], 4) - Qfraction.prod([q[6], q[7], q[9], q[11]], 4) - Qfraction.prod([q[6], q[7], q[10], q[11]], 4) - Qfraction.prod([q[6], q[8], q[9], q[11]], 4) - Qfraction.prod([q[6], q[8], q[10], q[11]], 4) - Qfraction.prod([q[6], q[9], q[10], q[11]], 4) - Qfraction.prod([q[7], q[8], q[9], q[11]], 4) - Qfraction.prod([q[7], q[8], q[10], q[11]], 4) - Qfraction.prod([q[7], q[9], q[10], q[11]], 4) - Qfraction.prod([q[8], q[9], q[10], q[11]], 4) + Qfraction.prod([q[0], q[1], q[2], q[3], q[11]], 5) + Qfraction.prod([q[0], q[1], q[2], q[4], q[11]], 5) + Qfraction.prod([q[0], q[1], q[2], q[5], q[11]], 5) + Qfraction.prod([q[0], q[1], q[2], q[6], q[11]], 5) + Qfraction.prod([q[0], q[1], q[2], q[7], q[11]], 5) + Qfraction.prod([q[0], q[1], q[2], q[8], q[11]], 5) + Qfraction.prod([q[0], q[1], q[2], q[9], q[11]], 5) + Qfraction.prod([q[0], q[1], q[2], q[10], q[11]], 5) + Qfraction.prod([q[0], q[1], q[3], q[4], q[11]], 5) + Qfraction.prod([q[0], q[1], q[3], q[5], q[11]], 5) + Qfraction.prod([q[0], q[1], q[3], q[6], q[11]], 5) + Qfraction.prod([q[0], q[1], q[3], q[7], q[11]], 5) + Qfraction.prod([q[0], q[1], q[3], q[8], q[11]], 5) + Qfraction.prod([q[0], q[1], q[3], q[9], q[11]], 5) + Qfraction.prod([q[0], q[1], q[3], q[10], q[11]], 5) + Qfraction.prod([q[0], q[1], q[4], q[5], q[11]], 5) + Qfraction.prod([q[0], q[1], q[4], q[6], q[11]], 5) + Qfraction.prod([q[0], q[1], q[4], q[7], q[11]], 5) + Qfraction.prod([q[0], q[1], q[4], q[8], q[11]], 5) + Qfraction.prod([q[0], q[1], q[4], q[9], q[11]], 5) + Qfraction.prod([q[0], q[1], q[4], q[10], q[11]], 5) + Qfraction.prod([q[0], q[1], q[5], q[6], q[11]], 5) + Qfraction.prod([q[0], q[1], q[5], q[7], q[11]], 5) + Qfraction.prod([q[0], q[1], q[5], q[8], q[11]], 5) + Qfraction.prod([q[0], q[1], q[5], q[9], q[11]], 5) + Qfraction.prod([q[0], q[1], q[5], q[10], q[11]], 5) + Qfraction.prod([q[0], q[1], q[6], q[7], q[11]], 5) + Qfraction.prod([q[0], q[1], q[6], q[8], q[11]], 5) + Qfraction.prod([q[0], q[1], q[6], q[9], q[11]], 5) + Qfraction.prod([q[0], q[1], q[6], q[10], q[11]], 5) + Qfraction.prod([q[0], q[1], q[7], q[8], q[11]], 5) + Qfraction.prod([q[0], q[1], q[7], q[9], q[11]], 5) + Qfraction.prod([q[0], q[1], q[7], q[10], q[11]], 5) + Qfraction.prod([q[0], q[1], q[8], q[9], q[11]], 5) + Qfraction.prod([q[0], q[1], q[8], q[10], q[11]], 5) + Qfraction.prod([q[0], q[1], q[9], q[10], q[11]], 5) + Qfraction.prod([q[0], q[2], q[3], q[4], q[11]], 5) + Qfraction.prod([q[0], q[2], q[3], q[5], q[11]], 5) + Qfraction.prod([q[0], q[2], q[3], q[6], q[11]], 5) + Qfraction.prod([q[0], q[2], q[3], q[7], q[11]], 5) + Qfraction.prod([q[0], q[2], q[3], q[8], q[11]], 5) + Qfraction.prod([q[0], q[2], q[3], q[9], q[11]], 5) + Qfraction.prod([q[0], q[2], q[3], q[10], q[11]], 5) + Qfraction.prod([q[0], q[2], q[4], q[5], q[11]], 5) + Qfraction.prod([q[0], q[2], q[4], q[6], q[11]], 5) + Qfraction.prod([q[0], q[2], q[4], q[7], q[11]], 5) + Qfraction.prod([q[0], q[2], q[4], q[8], q[11]], 5) + Qfraction.prod([q[0], q[2], q[4], q[9], q[11]], 5) + Qfraction.prod([q[0], q[2], q[4], q[10], q[11]], 5) + Qfraction.prod([q[0], q[2], q[5], q[6], q[11]], 5) + Qfraction.prod([q[0], q[2], q[5], q[7], q[11]], 5) + Qfraction.prod([q[0], q[2], q[5], q[8], q[11]], 5) + Qfraction.prod([q[0], q[2], q[5], q[9], q[11]], 5) + Qfraction.prod([q[0], q[2], q[5], q[10], q[11]], 5) + Qfraction.prod([q[0], q[2], q[6], q[7], q[11]], 5) + Qfraction.prod([q[0], q[2], q[6], q[8], q[11]], 5) + Qfraction.prod([q[0], q[2], q[6], q[9], q[11]], 5) + Qfraction.prod([q[0], q[2], q[6], q[10], q[11]], 5) + Qfraction.prod([q[0], q[2], q[7], q[8], q[11]], 5) + Qfraction.prod([q[0], q[2], q[7], q[9], q[11]], 5) + Qfraction.prod([q[0], q[2], q[7], q[10], q[11]], 5) + Qfraction.prod([q[0], q[2], q[8], q[9], q[11]], 5) + Qfraction.prod([q[0], q[2], q[8], q[10], q[11]], 5) + Qfraction.prod([q[0], q[2], q[9], q[10], q[11]], 5) + Qfraction.prod([q[0], q[3], q[4], q[5], q[11]], 5) + Qfraction.prod([q[0], q[3], q[4], q[6], q[11]], 5) + Qfraction.prod([q[0], q[3], q[4], q[7], q[11]], 5) + Qfraction.prod([q[0], q[3], q[4], q[8], q[11]], 5) + Qfraction.prod([q[0], q[3], q[4], q[9], q[11]], 5) + Qfraction.prod([q[0], q[3], q[4], q[10], q[11]], 5) + Qfraction.prod([q[0], q[3], q[5], q[6], q[11]], 5) + Qfraction.prod([q[0], q[3], q[5], q[7], q[11]], 5) + Qfraction.prod([q[0], q[3], q[5], q[8], q[11]], 5) + Qfraction.prod([q[0], q[3], q[5], q[9], q[11]], 5) + Qfraction.prod([q[0], q[3], q[5], q[10], q[11]], 5) + Qfraction.prod([q[0], q[3], q[6], q[7], q[11]], 5) + Qfraction.prod([q[0], q[3], q[6], q[8], q[11]], 5) + Qfraction.prod([q[0], q[3], q[6], q[9], q[11]], 5) + Qfraction.prod([q[0], q[3], q[6], q[10], q[11]], 5) + Qfraction.prod([q[0], q[3], q[7], q[8], q[11]], 5) + Qfraction.prod([q[0], q[3], q[7], q[9], q[11]], 5) + Qfraction.prod([q[0], q[3], q[7], q[10], q[11]], 5) + Qfraction.prod([q[0], q[3], q[8], q[9], q[11]], 5) + Qfraction.prod([q[0], q[3], q[8], q[10], q[11]], 5) + Qfraction.prod([q[0], q[3], q[9], q[10], q[11]], 5) + Qfraction.prod([q[0], q[4], q[5], q[6], q[11]], 5) + Qfraction.prod([q[0], q[4], q[5], q[7], q[11]], 5) + Qfraction.prod([q[0], q[4], q[5], q[8], q[11]], 5) + Qfraction.prod([q[0], q[4], q[5], q[9], q[11]], 5) + Qfraction.prod([q[0], q[4], q[5], q[10], q[11]], 5) + Qfraction.prod([q[0], q[4], q[6], q[7], q[11]], 5) + Qfraction.prod([q[0], q[4], q[6], q[8], q[11]], 5) + Qfraction.prod([q[0], q[4], q[6], q[9], q[11]], 5) + Qfraction.prod([q[0], q[4], q[6], q[10], q[11]], 5) + Qfraction.prod([q[0], q[4], q[7], q[8], q[11]], 5) + Qfraction.prod([q[0], q[4], q[7], q[9], q[11]], 5) + Qfraction.prod([q[0], q[4], q[7], q[10], q[11]], 5) + Qfraction.prod([q[0], q[4], q[8], q[9], q[11]], 5) + Qfraction.prod([q[0], q[4], q[8], q[10], q[11]], 5) + Qfraction.prod([q[0], q[4], q[9], q[10], q[11]], 5) + Qfraction.prod([q[0], q[5], q[6], q[7], q[11]], 5) + Qfraction.prod([q[0], q[5], q[6], q[8], q[11]], 5) + Qfraction.prod([q[0], q[5], q[6], q[9], q[11]], 5) + Qfraction.prod([q[0], q[5], q[6], q[10], q[11]], 5) + Qfraction.prod([q[0], q[5], q[7], q[8], q[11]], 5) + Qfraction.prod([q[0], q[5], q[7], q[9], q[11]], 5) + Qfraction.prod([q[0], q[5], q[7], q[10], q[11]], 5) + Qfraction.prod([q[0], q[5], q[8], q[9], q[11]], 5) + Qfraction.prod([q[0], q[5], q[8], q[10], q[11]], 5)
            q2b[11] += Qfraction.prod([q[0], q[5], q[9], q[10], q[11]], 5) + Qfraction.prod([q[0], q[6], q[7], q[8], q[11]], 5) + Qfraction.prod([q[0], q[6], q[7], q[9], q[11]], 5) + Qfraction.prod([q[0], q[6], q[7], q[10], q[11]], 5) + Qfraction.prod([q[0], q[6], q[8], q[9], q[11]], 5) + Qfraction.prod([q[0], q[6], q[8], q[10], q[11]], 5) + Qfraction.prod([q[0], q[6], q[9], q[10], q[11]], 5) + Qfraction.prod([q[0], q[7], q[8], q[9], q[11]], 5) + Qfraction.prod([q[0], q[7], q[8], q[10], q[11]], 5) + Qfraction.prod([q[0], q[7], q[9], q[10], q[11]], 5) + Qfraction.prod([q[0], q[8], q[9], q[10], q[11]], 5) + Qfraction.prod([q[1], q[2], q[3], q[4], q[11]], 5) + Qfraction.prod([q[1], q[2], q[3], q[5], q[11]], 5) + Qfraction.prod([q[1], q[2], q[3], q[6], q[11]], 5) + Qfraction.prod([q[1], q[2], q[3], q[7], q[11]], 5) + Qfraction.prod([q[1], q[2], q[3], q[8], q[11]], 5) + Qfraction.prod([q[1], q[2], q[3], q[9], q[11]], 5) + Qfraction.prod([q[1], q[2], q[3], q[10], q[11]], 5) + Qfraction.prod([q[1], q[2], q[4], q[5], q[11]], 5) + Qfraction.prod([q[1], q[2], q[4], q[6], q[11]], 5) + Qfraction.prod([q[1], q[2], q[4], q[7], q[11]], 5) + Qfraction.prod([q[1], q[2], q[4], q[8], q[11]], 5) + Qfraction.prod([q[1], q[2], q[4], q[9], q[11]], 5) + Qfraction.prod([q[1], q[2], q[4], q[10], q[11]], 5) + Qfraction.prod([q[1], q[2], q[5], q[6], q[11]], 5) + Qfraction.prod([q[1], q[2], q[5], q[7], q[11]], 5) + Qfraction.prod([q[1], q[2], q[5], q[8], q[11]], 5) + Qfraction.prod([q[1], q[2], q[5], q[9], q[11]], 5) + Qfraction.prod([q[1], q[2], q[5], q[10], q[11]], 5) + Qfraction.prod([q[1], q[2], q[6], q[7], q[11]], 5) + Qfraction.prod([q[1], q[2], q[6], q[8], q[11]], 5) + Qfraction.prod([q[1], q[2], q[6], q[9], q[11]], 5) + Qfraction.prod([q[1], q[2], q[6], q[10], q[11]], 5) + Qfraction.prod([q[1], q[2], q[7], q[8], q[11]], 5) + Qfraction.prod([q[1], q[2], q[7], q[9], q[11]], 5) + Qfraction.prod([q[1], q[2], q[7], q[10], q[11]], 5) + Qfraction.prod([q[1], q[2], q[8], q[9], q[11]], 5) + Qfraction.prod([q[1], q[2], q[8], q[10], q[11]], 5) + Qfraction.prod([q[1], q[2], q[9], q[10], q[11]], 5) + Qfraction.prod([q[1], q[3], q[4], q[5], q[11]], 5) + Qfraction.prod([q[1], q[3], q[4], q[6], q[11]], 5) + Qfraction.prod([q[1], q[3], q[4], q[7], q[11]], 5) + Qfraction.prod([q[1], q[3], q[4], q[8], q[11]], 5) + Qfraction.prod([q[1], q[3], q[4], q[9], q[11]], 5) + Qfraction.prod([q[1], q[3], q[4], q[10], q[11]], 5) + Qfraction.prod([q[1], q[3], q[5], q[6], q[11]], 5) + Qfraction.prod([q[1], q[3], q[5], q[7], q[11]], 5) + Qfraction.prod([q[1], q[3], q[5], q[8], q[11]], 5) + Qfraction.prod([q[1], q[3], q[5], q[9], q[11]], 5) + Qfraction.prod([q[1], q[3], q[5], q[10], q[11]], 5) + Qfraction.prod([q[1], q[3], q[6], q[7], q[11]], 5) + Qfraction.prod([q[1], q[3], q[6], q[8], q[11]], 5) + Qfraction.prod([q[1], q[3], q[6], q[9], q[11]], 5) + Qfraction.prod([q[1], q[3], q[6], q[10], q[11]], 5) + Qfraction.prod([q[1], q[3], q[7], q[8], q[11]], 5) + Qfraction.prod([q[1], q[3], q[7], q[9], q[11]], 5) + Qfraction.prod([q[1], q[3], q[7], q[10], q[11]], 5) + Qfraction.prod([q[1], q[3], q[8], q[9], q[11]], 5) + Qfraction.prod([q[1], q[3], q[8], q[10], q[11]], 5) + Qfraction.prod([q[1], q[3], q[9], q[10], q[11]], 5) + Qfraction.prod([q[1], q[4], q[5], q[6], q[11]], 5) + Qfraction.prod([q[1], q[4], q[5], q[7], q[11]], 5) + Qfraction.prod([q[1], q[4], q[5], q[8], q[11]], 5) + Qfraction.prod([q[1], q[4], q[5], q[9], q[11]], 5) + Qfraction.prod([q[1], q[4], q[5], q[10], q[11]], 5) + Qfraction.prod([q[1], q[4], q[6], q[7], q[11]], 5) + Qfraction.prod([q[1], q[4], q[6], q[8], q[11]], 5) + Qfraction.prod([q[1], q[4], q[6], q[9], q[11]], 5) + Qfraction.prod([q[1], q[4], q[6], q[10], q[11]], 5) + Qfraction.prod([q[1], q[4], q[7], q[8], q[11]], 5) + Qfraction.prod([q[1], q[4], q[7], q[9], q[11]], 5) + Qfraction.prod([q[1], q[4], q[7], q[10], q[11]], 5) + Qfraction.prod([q[1], q[4], q[8], q[9], q[11]], 5) + Qfraction.prod([q[1], q[4], q[8], q[10], q[11]], 5) + Qfraction.prod([q[1], q[4], q[9], q[10], q[11]], 5) + Qfraction.prod([q[1], q[5], q[6], q[7], q[11]], 5) + Qfraction.prod([q[1], q[5], q[6], q[8], q[11]], 5) + Qfraction.prod([q[1], q[5], q[6], q[9], q[11]], 5) + Qfraction.prod([q[1], q[5], q[6], q[10], q[11]], 5) + Qfraction.prod([q[1], q[5], q[7], q[8], q[11]], 5) + Qfraction.prod([q[1], q[5], q[7], q[9], q[11]], 5) + Qfraction.prod([q[1], q[5], q[7], q[10], q[11]], 5) + Qfraction.prod([q[1], q[5], q[8], q[9], q[11]], 5) + Qfraction.prod([q[1], q[5], q[8], q[10], q[11]], 5) + Qfraction.prod([q[1], q[5], q[9], q[10], q[11]], 5) + Qfraction.prod([q[1], q[6], q[7], q[8], q[11]], 5) + Qfraction.prod([q[1], q[6], q[7], q[9], q[11]], 5) + Qfraction.prod([q[1], q[6], q[7], q[10], q[11]], 5) + Qfraction.prod([q[1], q[6], q[8], q[9], q[11]], 5) + Qfraction.prod([q[1], q[6], q[8], q[10], q[11]], 5) + Qfraction.prod([q[1], q[6], q[9], q[10], q[11]], 5) + Qfraction.prod([q[1], q[7], q[8], q[9], q[11]], 5) + Qfraction.prod([q[1], q[7], q[8], q[10], q[11]], 5) + Qfraction.prod([q[1], q[7], q[9], q[10], q[11]], 5) + Qfraction.prod([q[1], q[8], q[9], q[10], q[11]], 5) + Qfraction.prod([q[2], q[3], q[4], q[5], q[11]], 5) + Qfraction.prod([q[2], q[3], q[4], q[6], q[11]], 5) + Qfraction.prod([q[2], q[3], q[4], q[7], q[11]], 5) + Qfraction.prod([q[2], q[3], q[4], q[8], q[11]], 5) + Qfraction.prod([q[2], q[3], q[4], q[9], q[11]], 5) + Qfraction.prod([q[2], q[3], q[4], q[10], q[11]], 5) + Qfraction.prod([q[2], q[3], q[5], q[6], q[11]], 5) + Qfraction.prod([q[2], q[3], q[5], q[7], q[11]], 5) + Qfraction.prod([q[2], q[3], q[5], q[8], q[11]], 5) + Qfraction.prod([q[2], q[3], q[5], q[9], q[11]], 5) + Qfraction.prod([q[2], q[3], q[5], q[10], q[11]], 5) + Qfraction.prod([q[2], q[3], q[6], q[7], q[11]], 5) + Qfraction.prod([q[2], q[3], q[6], q[8], q[11]], 5) + Qfraction.prod([q[2], q[3], q[6], q[9], q[11]], 5) + Qfraction.prod([q[2], q[3], q[6], q[10], q[11]], 5) + Qfraction.prod([q[2], q[3], q[7], q[8], q[11]], 5) + Qfraction.prod([q[2], q[3], q[7], q[9], q[11]], 5) + Qfraction.prod([q[2], q[3], q[7], q[10], q[11]], 5) + Qfraction.prod([q[2], q[3], q[8], q[9], q[11]], 5) + Qfraction.prod([q[2], q[3], q[8], q[10], q[11]], 5) + Qfraction.prod([q[2], q[3], q[9], q[10], q[11]], 5) + Qfraction.prod([q[2], q[4], q[5], q[6], q[11]], 5) + Qfraction.prod([q[2], q[4], q[5], q[7], q[11]], 5) + Qfraction.prod([q[2], q[4], q[5], q[8], q[11]], 5) + Qfraction.prod([q[2], q[4], q[5], q[9], q[11]], 5) + Qfraction.prod([q[2], q[4], q[5], q[10], q[11]], 5) + Qfraction.prod([q[2], q[4], q[6], q[7], q[11]], 5) + Qfraction.prod([q[2], q[4], q[6], q[8], q[11]], 5) + Qfraction.prod([q[2], q[4], q[6], q[9], q[11]], 5) + Qfraction.prod([q[2], q[4], q[6], q[10], q[11]], 5) + Qfraction.prod([q[2], q[4], q[7], q[8], q[11]], 5) + Qfraction.prod([q[2], q[4], q[7], q[9], q[11]], 5) + Qfraction.prod([q[2], q[4], q[7], q[10], q[11]], 5) + Qfraction.prod([q[2], q[4], q[8], q[9], q[11]], 5) + Qfraction.prod([q[2], q[4], q[8], q[10], q[11]], 5) + Qfraction.prod([q[2], q[4], q[9], q[10], q[11]], 5) + Qfraction.prod([q[2], q[5], q[6], q[7], q[11]], 5) + Qfraction.prod([q[2], q[5], q[6], q[8], q[11]], 5) + Qfraction.prod([q[2], q[5], q[6], q[9], q[11]], 5) + Qfraction.prod([q[2], q[5], q[6], q[10], q[11]], 5) + Qfraction.prod([q[2], q[5], q[7], q[8], q[11]], 5) + Qfraction.prod([q[2], q[5], q[7], q[9], q[11]], 5) + Qfraction.prod([q[2], q[5], q[7], q[10], q[11]], 5) + Qfraction.prod([q[2], q[5], q[8], q[9], q[11]], 5) + Qfraction.prod([q[2], q[5], q[8], q[10], q[11]], 5) + Qfraction.prod([q[2], q[5], q[9], q[10], q[11]], 5) + Qfraction.prod([q[2], q[6], q[7], q[8], q[11]], 5) + Qfraction.prod([q[2], q[6], q[7], q[9], q[11]], 5) + Qfraction.prod([q[2], q[6], q[7], q[10], q[11]], 5) + Qfraction.prod([q[2], q[6], q[8], q[9], q[11]], 5) + Qfraction.prod([q[2], q[6], q[8], q[10], q[11]], 5) + Qfraction.prod([q[2], q[6], q[9], q[10], q[11]], 5) + Qfraction.prod([q[2], q[7], q[8], q[9], q[11]], 5) + Qfraction.prod([q[2], q[7], q[8], q[10], q[11]], 5) + Qfraction.prod([q[2], q[7], q[9], q[10], q[11]], 5) + Qfraction.prod([q[2], q[8], q[9], q[10], q[11]], 5) + Qfraction.prod([q[3], q[4], q[5], q[6], q[11]], 5)
            q2b[11] += Qfraction.prod([q[3], q[4], q[5], q[7], q[11]], 5) + Qfraction.prod([q[3], q[4], q[5], q[8], q[11]], 5) + Qfraction.prod([q[3], q[4], q[5], q[9], q[11]], 5) + Qfraction.prod([q[3], q[4], q[5], q[10], q[11]], 5) + Qfraction.prod([q[3], q[4], q[6], q[7], q[11]], 5) + Qfraction.prod([q[3], q[4], q[6], q[8], q[11]], 5) + Qfraction.prod([q[3], q[4], q[6], q[9], q[11]], 5) + Qfraction.prod([q[3], q[4], q[6], q[10], q[11]], 5) + Qfraction.prod([q[3], q[4], q[7], q[8], q[11]], 5) + Qfraction.prod([q[3], q[4], q[7], q[9], q[11]], 5) + Qfraction.prod([q[3], q[4], q[7], q[10], q[11]], 5) + Qfraction.prod([q[3], q[4], q[8], q[9], q[11]], 5) + Qfraction.prod([q[3], q[4], q[8], q[10], q[11]], 5) + Qfraction.prod([q[3], q[4], q[9], q[10], q[11]], 5) + Qfraction.prod([q[3], q[5], q[6], q[7], q[11]], 5) + Qfraction.prod([q[3], q[5], q[6], q[8], q[11]], 5) + Qfraction.prod([q[3], q[5], q[6], q[9], q[11]], 5) + Qfraction.prod([q[3], q[5], q[6], q[10], q[11]], 5) + Qfraction.prod([q[3], q[5], q[7], q[8], q[11]], 5) + Qfraction.prod([q[3], q[5], q[7], q[9], q[11]], 5) + Qfraction.prod([q[3], q[5], q[7], q[10], q[11]], 5) + Qfraction.prod([q[3], q[5], q[8], q[9], q[11]], 5) + Qfraction.prod([q[3], q[5], q[8], q[10], q[11]], 5) + Qfraction.prod([q[3], q[5], q[9], q[10], q[11]], 5) + Qfraction.prod([q[3], q[6], q[7], q[8], q[11]], 5) + Qfraction.prod([q[3], q[6], q[7], q[9], q[11]], 5) + Qfraction.prod([q[3], q[6], q[7], q[10], q[11]], 5) + Qfraction.prod([q[3], q[6], q[8], q[9], q[11]], 5) + Qfraction.prod([q[3], q[6], q[8], q[10], q[11]], 5) + Qfraction.prod([q[3], q[6], q[9], q[10], q[11]], 5) + Qfraction.prod([q[3], q[7], q[8], q[9], q[11]], 5) + Qfraction.prod([q[3], q[7], q[8], q[10], q[11]], 5) + Qfraction.prod([q[3], q[7], q[9], q[10], q[11]], 5) + Qfraction.prod([q[3], q[8], q[9], q[10], q[11]], 5) + Qfraction.prod([q[4], q[5], q[6], q[7], q[11]], 5) + Qfraction.prod([q[4], q[5], q[6], q[8], q[11]], 5) + Qfraction.prod([q[4], q[5], q[6], q[9], q[11]], 5) + Qfraction.prod([q[4], q[5], q[6], q[10], q[11]], 5) + Qfraction.prod([q[4], q[5], q[7], q[8], q[11]], 5) + Qfraction.prod([q[4], q[5], q[7], q[9], q[11]], 5) + Qfraction.prod([q[4], q[5], q[7], q[10], q[11]], 5) + Qfraction.prod([q[4], q[5], q[8], q[9], q[11]], 5) + Qfraction.prod([q[4], q[5], q[8], q[10], q[11]], 5) + Qfraction.prod([q[4], q[5], q[9], q[10], q[11]], 5) + Qfraction.prod([q[4], q[6], q[7], q[8], q[11]], 5) + Qfraction.prod([q[4], q[6], q[7], q[9], q[11]], 5) + Qfraction.prod([q[4], q[6], q[7], q[10], q[11]], 5) + Qfraction.prod([q[4], q[6], q[8], q[9], q[11]], 5) + Qfraction.prod([q[4], q[6], q[8], q[10], q[11]], 5) + Qfraction.prod([q[4], q[6], q[9], q[10], q[11]], 5) + Qfraction.prod([q[4], q[7], q[8], q[9], q[11]], 5) + Qfraction.prod([q[4], q[7], q[8], q[10], q[11]], 5) + Qfraction.prod([q[4], q[7], q[9], q[10], q[11]], 5) + Qfraction.prod([q[4], q[8], q[9], q[10], q[11]], 5) + Qfraction.prod([q[5], q[6], q[7], q[8], q[11]], 5) + Qfraction.prod([q[5], q[6], q[7], q[9], q[11]], 5) + Qfraction.prod([q[5], q[6], q[7], q[10], q[11]], 5) + Qfraction.prod([q[5], q[6], q[8], q[9], q[11]], 5) + Qfraction.prod([q[5], q[6], q[8], q[10], q[11]], 5) + Qfraction.prod([q[5], q[6], q[9], q[10], q[11]], 5) + Qfraction.prod([q[5], q[7], q[8], q[9], q[11]], 5) + Qfraction.prod([q[5], q[7], q[8], q[10], q[11]], 5) + Qfraction.prod([q[5], q[7], q[9], q[10], q[11]], 5) + Qfraction.prod([q[5], q[8], q[9], q[10], q[11]], 5) + Qfraction.prod([q[6], q[7], q[8], q[9], q[11]], 5) + Qfraction.prod([q[6], q[7], q[8], q[10], q[11]], 5) + Qfraction.prod([q[6], q[7], q[9], q[10], q[11]], 5) + Qfraction.prod([q[6], q[8], q[9], q[10], q[11]], 5) + Qfraction.prod([q[7], q[8], q[9], q[10], q[11]], 5) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[11]], 6) - Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[11]], 6) - Qfraction.prod([q[0], q[1], q[2], q[3], q[6], q[11]], 6) - Qfraction.prod([q[0], q[1], q[2], q[3], q[7], q[11]], 6) - Qfraction.prod([q[0], q[1], q[2], q[3], q[8], q[11]], 6) - Qfraction.prod([q[0], q[1], q[2], q[3], q[9], q[11]], 6) - Qfraction.prod([q[0], q[1], q[2], q[3], q[10], q[11]], 6) - Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[11]], 6) - Qfraction.prod([q[0], q[1], q[2], q[4], q[6], q[11]], 6) - Qfraction.prod([q[0], q[1], q[2], q[4], q[7], q[11]], 6) - Qfraction.prod([q[0], q[1], q[2], q[4], q[8], q[11]], 6) - Qfraction.prod([q[0], q[1], q[2], q[4], q[9], q[11]], 6) - Qfraction.prod([q[0], q[1], q[2], q[4], q[10], q[11]], 6) - Qfraction.prod([q[0], q[1], q[2], q[5], q[6], q[11]], 6) - Qfraction.prod([q[0], q[1], q[2], q[5], q[7], q[11]], 6) - Qfraction.prod([q[0], q[1], q[2], q[5], q[8], q[11]], 6) - Qfraction.prod([q[0], q[1], q[2], q[5], q[9], q[11]], 6) - Qfraction.prod([q[0], q[1], q[2], q[5], q[10], q[11]], 6) - Qfraction.prod([q[0], q[1], q[2], q[6], q[7], q[11]], 6) - Qfraction.prod([q[0], q[1], q[2], q[6], q[8], q[11]], 6) - Qfraction.prod([q[0], q[1], q[2], q[6], q[9], q[11]], 6) - Qfraction.prod([q[0], q[1], q[2], q[6], q[10], q[11]], 6) - Qfraction.prod([q[0], q[1], q[2], q[7], q[8], q[11]], 6) - Qfraction.prod([q[0], q[1], q[2], q[7], q[9], q[11]], 6) - Qfraction.prod([q[0], q[1], q[2], q[7], q[10], q[11]], 6) - Qfraction.prod([q[0], q[1], q[2], q[8], q[9], q[11]], 6) - Qfraction.prod([q[0], q[1], q[2], q[8], q[10], q[11]], 6) - Qfraction.prod([q[0], q[1], q[2], q[9], q[10], q[11]], 6) - Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[11]], 6) - Qfraction.prod([q[0], q[1], q[3], q[4], q[6], q[11]], 6) - Qfraction.prod([q[0], q[1], q[3], q[4], q[7], q[11]], 6) - Qfraction.prod([q[0], q[1], q[3], q[4], q[8], q[11]], 6) - Qfraction.prod([q[0], q[1], q[3], q[4], q[9], q[11]], 6) - Qfraction.prod([q[0], q[1], q[3], q[4], q[10], q[11]], 6) - Qfraction.prod([q[0], q[1], q[3], q[5], q[6], q[11]], 6) - Qfraction.prod([q[0], q[1], q[3], q[5], q[7], q[11]], 6) - Qfraction.prod([q[0], q[1], q[3], q[5], q[8], q[11]], 6) - Qfraction.prod([q[0], q[1], q[3], q[5], q[9], q[11]], 6) - Qfraction.prod([q[0], q[1], q[3], q[5], q[10], q[11]], 6) - Qfraction.prod([q[0], q[1], q[3], q[6], q[7], q[11]], 6) - Qfraction.prod([q[0], q[1], q[3], q[6], q[8], q[11]], 6) - Qfraction.prod([q[0], q[1], q[3], q[6], q[9], q[11]], 6) - Qfraction.prod([q[0], q[1], q[3], q[6], q[10], q[11]], 6) - Qfraction.prod([q[0], q[1], q[3], q[7], q[8], q[11]], 6) - Qfraction.prod([q[0], q[1], q[3], q[7], q[9], q[11]], 6) - Qfraction.prod([q[0], q[1], q[3], q[7], q[10], q[11]], 6) - Qfraction.prod([q[0], q[1], q[3], q[8], q[9], q[11]], 6) - Qfraction.prod([q[0], q[1], q[3], q[8], q[10], q[11]], 6) - Qfraction.prod([q[0], q[1], q[3], q[9], q[10], q[11]], 6) - Qfraction.prod([q[0], q[1], q[4], q[5], q[6], q[11]], 6) - Qfraction.prod([q[0], q[1], q[4], q[5], q[7], q[11]], 6) - Qfraction.prod([q[0], q[1], q[4], q[5], q[8], q[11]], 6) - Qfraction.prod([q[0], q[1], q[4], q[5], q[9], q[11]], 6) - Qfraction.prod([q[0], q[1], q[4], q[5], q[10], q[11]], 6) - Qfraction.prod([q[0], q[1], q[4], q[6], q[7], q[11]], 6) - Qfraction.prod([q[0], q[1], q[4], q[6], q[8], q[11]], 6) - Qfraction.prod([q[0], q[1], q[4], q[6], q[9], q[11]], 6) - Qfraction.prod([q[0], q[1], q[4], q[6], q[10], q[11]], 6) - Qfraction.prod([q[0], q[1], q[4], q[7], q[8], q[11]], 6) - Qfraction.prod([q[0], q[1], q[4], q[7], q[9], q[11]], 6) - Qfraction.prod([q[0], q[1], q[4], q[7], q[10], q[11]], 6) - Qfraction.prod([q[0], q[1], q[4], q[8], q[9], q[11]], 6) - Qfraction.prod([q[0], q[1], q[4], q[8], q[10], q[11]], 6) - Qfraction.prod([q[0], q[1], q[4], q[9], q[10], q[11]], 6) - Qfraction.prod([q[0], q[1], q[5], q[6], q[7], q[11]], 6) - Qfraction.prod([q[0], q[1], q[5], q[6], q[8], q[11]], 6) - Qfraction.prod([q[0], q[1], q[5], q[6], q[9], q[11]], 6) - Qfraction.prod([q[0], q[1], q[5], q[6], q[10], q[11]], 6) - Qfraction.prod([q[0], q[1], q[5], q[7], q[8], q[11]], 6) - Qfraction.prod([q[0], q[1], q[5], q[7], q[9], q[11]], 6) - Qfraction.prod([q[0], q[1], q[5], q[7], q[10], q[11]], 6) - Qfraction.prod([q[0], q[1], q[5], q[8], q[9], q[11]], 6) - Qfraction.prod([q[0], q[1], q[5], q[8], q[10], q[11]], 6) - Qfraction.prod([q[0], q[1], q[5], q[9], q[10], q[11]], 6) - Qfraction.prod([q[0], q[1], q[6], q[7], q[8], q[11]], 6)
            q2b[11] += -Qfraction.prod([q[0], q[1], q[6], q[7], q[9], q[11]], 6) - Qfraction.prod([q[0], q[1], q[6], q[7], q[10], q[11]], 6) - Qfraction.prod([q[0], q[1], q[6], q[8], q[9], q[11]], 6) - Qfraction.prod([q[0], q[1], q[6], q[8], q[10], q[11]], 6) - Qfraction.prod([q[0], q[1], q[6], q[9], q[10], q[11]], 6) - Qfraction.prod([q[0], q[1], q[7], q[8], q[9], q[11]], 6) - Qfraction.prod([q[0], q[1], q[7], q[8], q[10], q[11]], 6) - Qfraction.prod([q[0], q[1], q[7], q[9], q[10], q[11]], 6) - Qfraction.prod([q[0], q[1], q[8], q[9], q[10], q[11]], 6) - Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[11]], 6) - Qfraction.prod([q[0], q[2], q[3], q[4], q[6], q[11]], 6) - Qfraction.prod([q[0], q[2], q[3], q[4], q[7], q[11]], 6) - Qfraction.prod([q[0], q[2], q[3], q[4], q[8], q[11]], 6) - Qfraction.prod([q[0], q[2], q[3], q[4], q[9], q[11]], 6) - Qfraction.prod([q[0], q[2], q[3], q[4], q[10], q[11]], 6) - Qfraction.prod([q[0], q[2], q[3], q[5], q[6], q[11]], 6) - Qfraction.prod([q[0], q[2], q[3], q[5], q[7], q[11]], 6) - Qfraction.prod([q[0], q[2], q[3], q[5], q[8], q[11]], 6) - Qfraction.prod([q[0], q[2], q[3], q[5], q[9], q[11]], 6) - Qfraction.prod([q[0], q[2], q[3], q[5], q[10], q[11]], 6) - Qfraction.prod([q[0], q[2], q[3], q[6], q[7], q[11]], 6) - Qfraction.prod([q[0], q[2], q[3], q[6], q[8], q[11]], 6) - Qfraction.prod([q[0], q[2], q[3], q[6], q[9], q[11]], 6) - Qfraction.prod([q[0], q[2], q[3], q[6], q[10], q[11]], 6) - Qfraction.prod([q[0], q[2], q[3], q[7], q[8], q[11]], 6) - Qfraction.prod([q[0], q[2], q[3], q[7], q[9], q[11]], 6) - Qfraction.prod([q[0], q[2], q[3], q[7], q[10], q[11]], 6) - Qfraction.prod([q[0], q[2], q[3], q[8], q[9], q[11]], 6) - Qfraction.prod([q[0], q[2], q[3], q[8], q[10], q[11]], 6) - Qfraction.prod([q[0], q[2], q[3], q[9], q[10], q[11]], 6) - Qfraction.prod([q[0], q[2], q[4], q[5], q[6], q[11]], 6) - Qfraction.prod([q[0], q[2], q[4], q[5], q[7], q[11]], 6) - Qfraction.prod([q[0], q[2], q[4], q[5], q[8], q[11]], 6) - Qfraction.prod([q[0], q[2], q[4], q[5], q[9], q[11]], 6) - Qfraction.prod([q[0], q[2], q[4], q[5], q[10], q[11]], 6) - Qfraction.prod([q[0], q[2], q[4], q[6], q[7], q[11]], 6) - Qfraction.prod([q[0], q[2], q[4], q[6], q[8], q[11]], 6) - Qfraction.prod([q[0], q[2], q[4], q[6], q[9], q[11]], 6) - Qfraction.prod([q[0], q[2], q[4], q[6], q[10], q[11]], 6) - Qfraction.prod([q[0], q[2], q[4], q[7], q[8], q[11]], 6) - Qfraction.prod([q[0], q[2], q[4], q[7], q[9], q[11]], 6) - Qfraction.prod([q[0], q[2], q[4], q[7], q[10], q[11]], 6) - Qfraction.prod([q[0], q[2], q[4], q[8], q[9], q[11]], 6) - Qfraction.prod([q[0], q[2], q[4], q[8], q[10], q[11]], 6) - Qfraction.prod([q[0], q[2], q[4], q[9], q[10], q[11]], 6) - Qfraction.prod([q[0], q[2], q[5], q[6], q[7], q[11]], 6) - Qfraction.prod([q[0], q[2], q[5], q[6], q[8], q[11]], 6) - Qfraction.prod([q[0], q[2], q[5], q[6], q[9], q[11]], 6) - Qfraction.prod([q[0], q[2], q[5], q[6], q[10], q[11]], 6) - Qfraction.prod([q[0], q[2], q[5], q[7], q[8], q[11]], 6) - Qfraction.prod([q[0], q[2], q[5], q[7], q[9], q[11]], 6) - Qfraction.prod([q[0], q[2], q[5], q[7], q[10], q[11]], 6) - Qfraction.prod([q[0], q[2], q[5], q[8], q[9], q[11]], 6) - Qfraction.prod([q[0], q[2], q[5], q[8], q[10], q[11]], 6) - Qfraction.prod([q[0], q[2], q[5], q[9], q[10], q[11]], 6) - Qfraction.prod([q[0], q[2], q[6], q[7], q[8], q[11]], 6) - Qfraction.prod([q[0], q[2], q[6], q[7], q[9], q[11]], 6) - Qfraction.prod([q[0], q[2], q[6], q[7], q[10], q[11]], 6) - Qfraction.prod([q[0], q[2], q[6], q[8], q[9], q[11]], 6) - Qfraction.prod([q[0], q[2], q[6], q[8], q[10], q[11]], 6) - Qfraction.prod([q[0], q[2], q[6], q[9], q[10], q[11]], 6) - Qfraction.prod([q[0], q[2], q[7], q[8], q[9], q[11]], 6) - Qfraction.prod([q[0], q[2], q[7], q[8], q[10], q[11]], 6) - Qfraction.prod([q[0], q[2], q[7], q[9], q[10], q[11]], 6) - Qfraction.prod([q[0], q[2], q[8], q[9], q[10], q[11]], 6) - Qfraction.prod([q[0], q[3], q[4], q[5], q[6], q[11]], 6) - Qfraction.prod([q[0], q[3], q[4], q[5], q[7], q[11]], 6) - Qfraction.prod([q[0], q[3], q[4], q[5], q[8], q[11]], 6) - Qfraction.prod([q[0], q[3], q[4], q[5], q[9], q[11]], 6) - Qfraction.prod([q[0], q[3], q[4], q[5], q[10], q[11]], 6) - Qfraction.prod([q[0], q[3], q[4], q[6], q[7], q[11]], 6) - Qfraction.prod([q[0], q[3], q[4], q[6], q[8], q[11]], 6) - Qfraction.prod([q[0], q[3], q[4], q[6], q[9], q[11]], 6) - Qfraction.prod([q[0], q[3], q[4], q[6], q[10], q[11]], 6) - Qfraction.prod([q[0], q[3], q[4], q[7], q[8], q[11]], 6) - Qfraction.prod([q[0], q[3], q[4], q[7], q[9], q[11]], 6) - Qfraction.prod([q[0], q[3], q[4], q[7], q[10], q[11]], 6) - Qfraction.prod([q[0], q[3], q[4], q[8], q[9], q[11]], 6) - Qfraction.prod([q[0], q[3], q[4], q[8], q[10], q[11]], 6) - Qfraction.prod([q[0], q[3], q[4], q[9], q[10], q[11]], 6) - Qfraction.prod([q[0], q[3], q[5], q[6], q[7], q[11]], 6) - Qfraction.prod([q[0], q[3], q[5], q[6], q[8], q[11]], 6) - Qfraction.prod([q[0], q[3], q[5], q[6], q[9], q[11]], 6) - Qfraction.prod([q[0], q[3], q[5], q[6], q[10], q[11]], 6) - Qfraction.prod([q[0], q[3], q[5], q[7], q[8], q[11]], 6) - Qfraction.prod([q[0], q[3], q[5], q[7], q[9], q[11]], 6) - Qfraction.prod([q[0], q[3], q[5], q[7], q[10], q[11]], 6) - Qfraction.prod([q[0], q[3], q[5], q[8], q[9], q[11]], 6) - Qfraction.prod([q[0], q[3], q[5], q[8], q[10], q[11]], 6) - Qfraction.prod([q[0], q[3], q[5], q[9], q[10], q[11]], 6) - Qfraction.prod([q[0], q[3], q[6], q[7], q[8], q[11]], 6) - Qfraction.prod([q[0], q[3], q[6], q[7], q[9], q[11]], 6) - Qfraction.prod([q[0], q[3], q[6], q[7], q[10], q[11]], 6) - Qfraction.prod([q[0], q[3], q[6], q[8], q[9], q[11]], 6) - Qfraction.prod([q[0], q[3], q[6], q[8], q[10], q[11]], 6) - Qfraction.prod([q[0], q[3], q[6], q[9], q[10], q[11]], 6) - Qfraction.prod([q[0], q[3], q[7], q[8], q[9], q[11]], 6) - Qfraction.prod([q[0], q[3], q[7], q[8], q[10], q[11]], 6) - Qfraction.prod([q[0], q[3], q[7], q[9], q[10], q[11]], 6) - Qfraction.prod([q[0], q[3], q[8], q[9], q[10], q[11]], 6) - Qfraction.prod([q[0], q[4], q[5], q[6], q[7], q[11]], 6) - Qfraction.prod([q[0], q[4], q[5], q[6], q[8], q[11]], 6) - Qfraction.prod([q[0], q[4], q[5], q[6], q[9], q[11]], 6) - Qfraction.prod([q[0], q[4], q[5], q[6], q[10], q[11]], 6) - Qfraction.prod([q[0], q[4], q[5], q[7], q[8], q[11]], 6) - Qfraction.prod([q[0], q[4], q[5], q[7], q[9], q[11]], 6) - Qfraction.prod([q[0], q[4], q[5], q[7], q[10], q[11]], 6) - Qfraction.prod([q[0], q[4], q[5], q[8], q[9], q[11]], 6) - Qfraction.prod([q[0], q[4], q[5], q[8], q[10], q[11]], 6) - Qfraction.prod([q[0], q[4], q[5], q[9], q[10], q[11]], 6) - Qfraction.prod([q[0], q[4], q[6], q[7], q[8], q[11]], 6) - Qfraction.prod([q[0], q[4], q[6], q[7], q[9], q[11]], 6) - Qfraction.prod([q[0], q[4], q[6], q[7], q[10], q[11]], 6) - Qfraction.prod([q[0], q[4], q[6], q[8], q[9], q[11]], 6) - Qfraction.prod([q[0], q[4], q[6], q[8], q[10], q[11]], 6) - Qfraction.prod([q[0], q[4], q[6], q[9], q[10], q[11]], 6) - Qfraction.prod([q[0], q[4], q[7], q[8], q[9], q[11]], 6) - Qfraction.prod([q[0], q[4], q[7], q[8], q[10], q[11]], 6) - Qfraction.prod([q[0], q[4], q[7], q[9], q[10], q[11]], 6) - Qfraction.prod([q[0], q[4], q[8], q[9], q[10], q[11]], 6) - Qfraction.prod([q[0], q[5], q[6], q[7], q[8], q[11]], 6) - Qfraction.prod([q[0], q[5], q[6], q[7], q[9], q[11]], 6) - Qfraction.prod([q[0], q[5], q[6], q[7], q[10], q[11]], 6) - Qfraction.prod([q[0], q[5], q[6], q[8], q[9], q[11]], 6) - Qfraction.prod([q[0], q[5], q[6], q[8], q[10], q[11]], 6) - Qfraction.prod([q[0], q[5], q[6], q[9], q[10], q[11]], 6) - Qfraction.prod([q[0], q[5], q[7], q[8], q[9], q[11]], 6) - Qfraction.prod([q[0], q[5], q[7], q[8], q[10], q[11]], 6) - Qfraction.prod([q[0], q[5], q[7], q[9], q[10], q[11]], 6) - Qfraction.prod([q[0], q[5], q[8], q[9], q[10], q[11]], 6) - Qfraction.prod([q[0], q[6], q[7], q[8], q[9], q[11]], 6) - Qfraction.prod([q[0], q[6], q[7], q[8], q[10], q[11]], 6) - Qfraction.prod([q[0], q[6], q[7], q[9], q[10], q[11]], 6) - Qfraction.prod([q[0], q[6], q[8], q[9], q[10], q[11]], 6) - Qfraction.prod([q[0], q[7], q[8], q[9], q[10], q[11]], 6) - Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[11]], 6) - Qfraction.prod([q[1], q[2], q[3], q[4], q[6], q[11]], 6)
            q2b[11] += -Qfraction.prod([q[1], q[2], q[3], q[4], q[7], q[11]], 6) - Qfraction.prod([q[1], q[2], q[3], q[4], q[8], q[11]], 6) - Qfraction.prod([q[1], q[2], q[3], q[4], q[9], q[11]], 6) - Qfraction.prod([q[1], q[2], q[3], q[4], q[10], q[11]], 6) - Qfraction.prod([q[1], q[2], q[3], q[5], q[6], q[11]], 6) - Qfraction.prod([q[1], q[2], q[3], q[5], q[7], q[11]], 6) - Qfraction.prod([q[1], q[2], q[3], q[5], q[8], q[11]], 6) - Qfraction.prod([q[1], q[2], q[3], q[5], q[9], q[11]], 6) - Qfraction.prod([q[1], q[2], q[3], q[5], q[10], q[11]], 6) - Qfraction.prod([q[1], q[2], q[3], q[6], q[7], q[11]], 6) - Qfraction.prod([q[1], q[2], q[3], q[6], q[8], q[11]], 6) - Qfraction.prod([q[1], q[2], q[3], q[6], q[9], q[11]], 6) - Qfraction.prod([q[1], q[2], q[3], q[6], q[10], q[11]], 6) - Qfraction.prod([q[1], q[2], q[3], q[7], q[8], q[11]], 6) - Qfraction.prod([q[1], q[2], q[3], q[7], q[9], q[11]], 6) - Qfraction.prod([q[1], q[2], q[3], q[7], q[10], q[11]], 6) - Qfraction.prod([q[1], q[2], q[3], q[8], q[9], q[11]], 6) - Qfraction.prod([q[1], q[2], q[3], q[8], q[10], q[11]], 6) - Qfraction.prod([q[1], q[2], q[3], q[9], q[10], q[11]], 6) - Qfraction.prod([q[1], q[2], q[4], q[5], q[6], q[11]], 6) - Qfraction.prod([q[1], q[2], q[4], q[5], q[7], q[11]], 6) - Qfraction.prod([q[1], q[2], q[4], q[5], q[8], q[11]], 6) - Qfraction.prod([q[1], q[2], q[4], q[5], q[9], q[11]], 6) - Qfraction.prod([q[1], q[2], q[4], q[5], q[10], q[11]], 6) - Qfraction.prod([q[1], q[2], q[4], q[6], q[7], q[11]], 6) - Qfraction.prod([q[1], q[2], q[4], q[6], q[8], q[11]], 6) - Qfraction.prod([q[1], q[2], q[4], q[6], q[9], q[11]], 6) - Qfraction.prod([q[1], q[2], q[4], q[6], q[10], q[11]], 6) - Qfraction.prod([q[1], q[2], q[4], q[7], q[8], q[11]], 6) - Qfraction.prod([q[1], q[2], q[4], q[7], q[9], q[11]], 6) - Qfraction.prod([q[1], q[2], q[4], q[7], q[10], q[11]], 6) - Qfraction.prod([q[1], q[2], q[4], q[8], q[9], q[11]], 6) - Qfraction.prod([q[1], q[2], q[4], q[8], q[10], q[11]], 6) - Qfraction.prod([q[1], q[2], q[4], q[9], q[10], q[11]], 6) - Qfraction.prod([q[1], q[2], q[5], q[6], q[7], q[11]], 6) - Qfraction.prod([q[1], q[2], q[5], q[6], q[8], q[11]], 6) - Qfraction.prod([q[1], q[2], q[5], q[6], q[9], q[11]], 6) - Qfraction.prod([q[1], q[2], q[5], q[6], q[10], q[11]], 6) - Qfraction.prod([q[1], q[2], q[5], q[7], q[8], q[11]], 6) - Qfraction.prod([q[1], q[2], q[5], q[7], q[9], q[11]], 6) - Qfraction.prod([q[1], q[2], q[5], q[7], q[10], q[11]], 6) - Qfraction.prod([q[1], q[2], q[5], q[8], q[9], q[11]], 6) - Qfraction.prod([q[1], q[2], q[5], q[8], q[10], q[11]], 6) - Qfraction.prod([q[1], q[2], q[5], q[9], q[10], q[11]], 6) - Qfraction.prod([q[1], q[2], q[6], q[7], q[8], q[11]], 6) - Qfraction.prod([q[1], q[2], q[6], q[7], q[9], q[11]], 6) - Qfraction.prod([q[1], q[2], q[6], q[7], q[10], q[11]], 6) - Qfraction.prod([q[1], q[2], q[6], q[8], q[9], q[11]], 6) - Qfraction.prod([q[1], q[2], q[6], q[8], q[10], q[11]], 6) - Qfraction.prod([q[1], q[2], q[6], q[9], q[10], q[11]], 6) - Qfraction.prod([q[1], q[2], q[7], q[8], q[9], q[11]], 6) - Qfraction.prod([q[1], q[2], q[7], q[8], q[10], q[11]], 6) - Qfraction.prod([q[1], q[2], q[7], q[9], q[10], q[11]], 6) - Qfraction.prod([q[1], q[2], q[8], q[9], q[10], q[11]], 6) - Qfraction.prod([q[1], q[3], q[4], q[5], q[6], q[11]], 6) - Qfraction.prod([q[1], q[3], q[4], q[5], q[7], q[11]], 6) - Qfraction.prod([q[1], q[3], q[4], q[5], q[8], q[11]], 6) - Qfraction.prod([q[1], q[3], q[4], q[5], q[9], q[11]], 6) - Qfraction.prod([q[1], q[3], q[4], q[5], q[10], q[11]], 6) - Qfraction.prod([q[1], q[3], q[4], q[6], q[7], q[11]], 6) - Qfraction.prod([q[1], q[3], q[4], q[6], q[8], q[11]], 6) - Qfraction.prod([q[1], q[3], q[4], q[6], q[9], q[11]], 6) - Qfraction.prod([q[1], q[3], q[4], q[6], q[10], q[11]], 6) - Qfraction.prod([q[1], q[3], q[4], q[7], q[8], q[11]], 6) - Qfraction.prod([q[1], q[3], q[4], q[7], q[9], q[11]], 6) - Qfraction.prod([q[1], q[3], q[4], q[7], q[10], q[11]], 6) - Qfraction.prod([q[1], q[3], q[4], q[8], q[9], q[11]], 6) - Qfraction.prod([q[1], q[3], q[4], q[8], q[10], q[11]], 6) - Qfraction.prod([q[1], q[3], q[4], q[9], q[10], q[11]], 6) - Qfraction.prod([q[1], q[3], q[5], q[6], q[7], q[11]], 6) - Qfraction.prod([q[1], q[3], q[5], q[6], q[8], q[11]], 6) - Qfraction.prod([q[1], q[3], q[5], q[6], q[9], q[11]], 6) - Qfraction.prod([q[1], q[3], q[5], q[6], q[10], q[11]], 6) - Qfraction.prod([q[1], q[3], q[5], q[7], q[8], q[11]], 6) - Qfraction.prod([q[1], q[3], q[5], q[7], q[9], q[11]], 6) - Qfraction.prod([q[1], q[3], q[5], q[7], q[10], q[11]], 6) - Qfraction.prod([q[1], q[3], q[5], q[8], q[9], q[11]], 6) - Qfraction.prod([q[1], q[3], q[5], q[8], q[10], q[11]], 6) - Qfraction.prod([q[1], q[3], q[5], q[9], q[10], q[11]], 6) - Qfraction.prod([q[1], q[3], q[6], q[7], q[8], q[11]], 6) - Qfraction.prod([q[1], q[3], q[6], q[7], q[9], q[11]], 6) - Qfraction.prod([q[1], q[3], q[6], q[7], q[10], q[11]], 6) - Qfraction.prod([q[1], q[3], q[6], q[8], q[9], q[11]], 6) - Qfraction.prod([q[1], q[3], q[6], q[8], q[10], q[11]], 6) - Qfraction.prod([q[1], q[3], q[6], q[9], q[10], q[11]], 6) - Qfraction.prod([q[1], q[3], q[7], q[8], q[9], q[11]], 6) - Qfraction.prod([q[1], q[3], q[7], q[8], q[10], q[11]], 6) - Qfraction.prod([q[1], q[3], q[7], q[9], q[10], q[11]], 6) - Qfraction.prod([q[1], q[3], q[8], q[9], q[10], q[11]], 6) - Qfraction.prod([q[1], q[4], q[5], q[6], q[7], q[11]], 6) - Qfraction.prod([q[1], q[4], q[5], q[6], q[8], q[11]], 6) - Qfraction.prod([q[1], q[4], q[5], q[6], q[9], q[11]], 6) - Qfraction.prod([q[1], q[4], q[5], q[6], q[10], q[11]], 6) - Qfraction.prod([q[1], q[4], q[5], q[7], q[8], q[11]], 6) - Qfraction.prod([q[1], q[4], q[5], q[7], q[9], q[11]], 6) - Qfraction.prod([q[1], q[4], q[5], q[7], q[10], q[11]], 6) - Qfraction.prod([q[1], q[4], q[5], q[8], q[9], q[11]], 6) - Qfraction.prod([q[1], q[4], q[5], q[8], q[10], q[11]], 6) - Qfraction.prod([q[1], q[4], q[5], q[9], q[10], q[11]], 6) - Qfraction.prod([q[1], q[4], q[6], q[7], q[8], q[11]], 6) - Qfraction.prod([q[1], q[4], q[6], q[7], q[9], q[11]], 6) - Qfraction.prod([q[1], q[4], q[6], q[7], q[10], q[11]], 6) - Qfraction.prod([q[1], q[4], q[6], q[8], q[9], q[11]], 6) - Qfraction.prod([q[1], q[4], q[6], q[8], q[10], q[11]], 6) - Qfraction.prod([q[1], q[4], q[6], q[9], q[10], q[11]], 6) - Qfraction.prod([q[1], q[4], q[7], q[8], q[9], q[11]], 6) - Qfraction.prod([q[1], q[4], q[7], q[8], q[10], q[11]], 6) - Qfraction.prod([q[1], q[4], q[7], q[9], q[10], q[11]], 6) - Qfraction.prod([q[1], q[4], q[8], q[9], q[10], q[11]], 6) - Qfraction.prod([q[1], q[5], q[6], q[7], q[8], q[11]], 6) - Qfraction.prod([q[1], q[5], q[6], q[7], q[9], q[11]], 6) - Qfraction.prod([q[1], q[5], q[6], q[7], q[10], q[11]], 6) - Qfraction.prod([q[1], q[5], q[6], q[8], q[9], q[11]], 6) - Qfraction.prod([q[1], q[5], q[6], q[8], q[10], q[11]], 6) - Qfraction.prod([q[1], q[5], q[6], q[9], q[10], q[11]], 6) - Qfraction.prod([q[1], q[5], q[7], q[8], q[9], q[11]], 6) - Qfraction.prod([q[1], q[5], q[7], q[8], q[10], q[11]], 6) - Qfraction.prod([q[1], q[5], q[7], q[9], q[10], q[11]], 6) - Qfraction.prod([q[1], q[5], q[8], q[9], q[10], q[11]], 6) - Qfraction.prod([q[1], q[6], q[7], q[8], q[9], q[11]], 6) - Qfraction.prod([q[1], q[6], q[7], q[8], q[10], q[11]], 6) - Qfraction.prod([q[1], q[6], q[7], q[9], q[10], q[11]], 6) - Qfraction.prod([q[1], q[6], q[8], q[9], q[10], q[11]], 6) - Qfraction.prod([q[1], q[7], q[8], q[9], q[10], q[11]], 6) - Qfraction.prod([q[2], q[3], q[4], q[5], q[6], q[11]], 6) - Qfraction.prod([q[2], q[3], q[4], q[5], q[7], q[11]], 6) - Qfraction.prod([q[2], q[3], q[4], q[5], q[8], q[11]], 6) - Qfraction.prod([q[2], q[3], q[4], q[5], q[9], q[11]], 6) - Qfraction.prod([q[2], q[3], q[4], q[5], q[10], q[11]], 6) - Qfraction.prod([q[2], q[3], q[4], q[6], q[7], q[11]], 6) - Qfraction.prod([q[2], q[3], q[4], q[6], q[8], q[11]], 6) - Qfraction.prod([q[2], q[3], q[4], q[6], q[9], q[11]], 6) - Qfraction.prod([q[2], q[3], q[4], q[6], q[10], q[11]], 6) - Qfraction.prod([q[2], q[3], q[4], q[7], q[8], q[11]], 6) - Qfraction.prod([q[2], q[3], q[4], q[7], q[9], q[11]], 6) - Qfraction.prod([q[2], q[3], q[4], q[7], q[10], q[11]], 6) - Qfraction.prod([q[2], q[3], q[4], q[8], q[9], q[11]], 6)
            q2b[11] += -Qfraction.prod([q[2], q[3], q[4], q[8], q[10], q[11]], 6) - Qfraction.prod([q[2], q[3], q[4], q[9], q[10], q[11]], 6) - Qfraction.prod([q[2], q[3], q[5], q[6], q[7], q[11]], 6) - Qfraction.prod([q[2], q[3], q[5], q[6], q[8], q[11]], 6) - Qfraction.prod([q[2], q[3], q[5], q[6], q[9], q[11]], 6) - Qfraction.prod([q[2], q[3], q[5], q[6], q[10], q[11]], 6) - Qfraction.prod([q[2], q[3], q[5], q[7], q[8], q[11]], 6) - Qfraction.prod([q[2], q[3], q[5], q[7], q[9], q[11]], 6) - Qfraction.prod([q[2], q[3], q[5], q[7], q[10], q[11]], 6) - Qfraction.prod([q[2], q[3], q[5], q[8], q[9], q[11]], 6) - Qfraction.prod([q[2], q[3], q[5], q[8], q[10], q[11]], 6) - Qfraction.prod([q[2], q[3], q[5], q[9], q[10], q[11]], 6) - Qfraction.prod([q[2], q[3], q[6], q[7], q[8], q[11]], 6) - Qfraction.prod([q[2], q[3], q[6], q[7], q[9], q[11]], 6) - Qfraction.prod([q[2], q[3], q[6], q[7], q[10], q[11]], 6) - Qfraction.prod([q[2], q[3], q[6], q[8], q[9], q[11]], 6) - Qfraction.prod([q[2], q[3], q[6], q[8], q[10], q[11]], 6) - Qfraction.prod([q[2], q[3], q[6], q[9], q[10], q[11]], 6) - Qfraction.prod([q[2], q[3], q[7], q[8], q[9], q[11]], 6) - Qfraction.prod([q[2], q[3], q[7], q[8], q[10], q[11]], 6) - Qfraction.prod([q[2], q[3], q[7], q[9], q[10], q[11]], 6) - Qfraction.prod([q[2], q[3], q[8], q[9], q[10], q[11]], 6) - Qfraction.prod([q[2], q[4], q[5], q[6], q[7], q[11]], 6) - Qfraction.prod([q[2], q[4], q[5], q[6], q[8], q[11]], 6) - Qfraction.prod([q[2], q[4], q[5], q[6], q[9], q[11]], 6) - Qfraction.prod([q[2], q[4], q[5], q[6], q[10], q[11]], 6) - Qfraction.prod([q[2], q[4], q[5], q[7], q[8], q[11]], 6) - Qfraction.prod([q[2], q[4], q[5], q[7], q[9], q[11]], 6) - Qfraction.prod([q[2], q[4], q[5], q[7], q[10], q[11]], 6) - Qfraction.prod([q[2], q[4], q[5], q[8], q[9], q[11]], 6) - Qfraction.prod([q[2], q[4], q[5], q[8], q[10], q[11]], 6) - Qfraction.prod([q[2], q[4], q[5], q[9], q[10], q[11]], 6) - Qfraction.prod([q[2], q[4], q[6], q[7], q[8], q[11]], 6) - Qfraction.prod([q[2], q[4], q[6], q[7], q[9], q[11]], 6) - Qfraction.prod([q[2], q[4], q[6], q[7], q[10], q[11]], 6) - Qfraction.prod([q[2], q[4], q[6], q[8], q[9], q[11]], 6) - Qfraction.prod([q[2], q[4], q[6], q[8], q[10], q[11]], 6) - Qfraction.prod([q[2], q[4], q[6], q[9], q[10], q[11]], 6) - Qfraction.prod([q[2], q[4], q[7], q[8], q[9], q[11]], 6) - Qfraction.prod([q[2], q[4], q[7], q[8], q[10], q[11]], 6) - Qfraction.prod([q[2], q[4], q[7], q[9], q[10], q[11]], 6) - Qfraction.prod([q[2], q[4], q[8], q[9], q[10], q[11]], 6) - Qfraction.prod([q[2], q[5], q[6], q[7], q[8], q[11]], 6) - Qfraction.prod([q[2], q[5], q[6], q[7], q[9], q[11]], 6) - Qfraction.prod([q[2], q[5], q[6], q[7], q[10], q[11]], 6) - Qfraction.prod([q[2], q[5], q[6], q[8], q[9], q[11]], 6) - Qfraction.prod([q[2], q[5], q[6], q[8], q[10], q[11]], 6) - Qfraction.prod([q[2], q[5], q[6], q[9], q[10], q[11]], 6) - Qfraction.prod([q[2], q[5], q[7], q[8], q[9], q[11]], 6) - Qfraction.prod([q[2], q[5], q[7], q[8], q[10], q[11]], 6) - Qfraction.prod([q[2], q[5], q[7], q[9], q[10], q[11]], 6) - Qfraction.prod([q[2], q[5], q[8], q[9], q[10], q[11]], 6) - Qfraction.prod([q[2], q[6], q[7], q[8], q[9], q[11]], 6) - Qfraction.prod([q[2], q[6], q[7], q[8], q[10], q[11]], 6) - Qfraction.prod([q[2], q[6], q[7], q[9], q[10], q[11]], 6) - Qfraction.prod([q[2], q[6], q[8], q[9], q[10], q[11]], 6) - Qfraction.prod([q[2], q[7], q[8], q[9], q[10], q[11]], 6) - Qfraction.prod([q[3], q[4], q[5], q[6], q[7], q[11]], 6) - Qfraction.prod([q[3], q[4], q[5], q[6], q[8], q[11]], 6) - Qfraction.prod([q[3], q[4], q[5], q[6], q[9], q[11]], 6) - Qfraction.prod([q[3], q[4], q[5], q[6], q[10], q[11]], 6) - Qfraction.prod([q[3], q[4], q[5], q[7], q[8], q[11]], 6) - Qfraction.prod([q[3], q[4], q[5], q[7], q[9], q[11]], 6) - Qfraction.prod([q[3], q[4], q[5], q[7], q[10], q[11]], 6) - Qfraction.prod([q[3], q[4], q[5], q[8], q[9], q[11]], 6) - Qfraction.prod([q[3], q[4], q[5], q[8], q[10], q[11]], 6) - Qfraction.prod([q[3], q[4], q[5], q[9], q[10], q[11]], 6) - Qfraction.prod([q[3], q[4], q[6], q[7], q[8], q[11]], 6) - Qfraction.prod([q[3], q[4], q[6], q[7], q[9], q[11]], 6) - Qfraction.prod([q[3], q[4], q[6], q[7], q[10], q[11]], 6) - Qfraction.prod([q[3], q[4], q[6], q[8], q[9], q[11]], 6) - Qfraction.prod([q[3], q[4], q[6], q[8], q[10], q[11]], 6) - Qfraction.prod([q[3], q[4], q[6], q[9], q[10], q[11]], 6) - Qfraction.prod([q[3], q[4], q[7], q[8], q[9], q[11]], 6) - Qfraction.prod([q[3], q[4], q[7], q[8], q[10], q[11]], 6) - Qfraction.prod([q[3], q[4], q[7], q[9], q[10], q[11]], 6) - Qfraction.prod([q[3], q[4], q[8], q[9], q[10], q[11]], 6) - Qfraction.prod([q[3], q[5], q[6], q[7], q[8], q[11]], 6) - Qfraction.prod([q[3], q[5], q[6], q[7], q[9], q[11]], 6) - Qfraction.prod([q[3], q[5], q[6], q[7], q[10], q[11]], 6) - Qfraction.prod([q[3], q[5], q[6], q[8], q[9], q[11]], 6) - Qfraction.prod([q[3], q[5], q[6], q[8], q[10], q[11]], 6) - Qfraction.prod([q[3], q[5], q[6], q[9], q[10], q[11]], 6) - Qfraction.prod([q[3], q[5], q[7], q[8], q[9], q[11]], 6) - Qfraction.prod([q[3], q[5], q[7], q[8], q[10], q[11]], 6) - Qfraction.prod([q[3], q[5], q[7], q[9], q[10], q[11]], 6) - Qfraction.prod([q[3], q[5], q[8], q[9], q[10], q[11]], 6) - Qfraction.prod([q[3], q[6], q[7], q[8], q[9], q[11]], 6) - Qfraction.prod([q[3], q[6], q[7], q[8], q[10], q[11]], 6) - Qfraction.prod([q[3], q[6], q[7], q[9], q[10], q[11]], 6) - Qfraction.prod([q[3], q[6], q[8], q[9], q[10], q[11]], 6) - Qfraction.prod([q[3], q[7], q[8], q[9], q[10], q[11]], 6) - Qfraction.prod([q[4], q[5], q[6], q[7], q[8], q[11]], 6) - Qfraction.prod([q[4], q[5], q[6], q[7], q[9], q[11]], 6) - Qfraction.prod([q[4], q[5], q[6], q[7], q[10], q[11]], 6) - Qfraction.prod([q[4], q[5], q[6], q[8], q[9], q[11]], 6) - Qfraction.prod([q[4], q[5], q[6], q[8], q[10], q[11]], 6) - Qfraction.prod([q[4], q[5], q[6], q[9], q[10], q[11]], 6) - Qfraction.prod([q[4], q[5], q[7], q[8], q[9], q[11]], 6) - Qfraction.prod([q[4], q[5], q[7], q[8], q[10], q[11]], 6) - Qfraction.prod([q[4], q[5], q[7], q[9], q[10], q[11]], 6) - Qfraction.prod([q[4], q[5], q[8], q[9], q[10], q[11]], 6) - Qfraction.prod([q[4], q[6], q[7], q[8], q[9], q[11]], 6) - Qfraction.prod([q[4], q[6], q[7], q[8], q[10], q[11]], 6) - Qfraction.prod([q[4], q[6], q[7], q[9], q[10], q[11]], 6) - Qfraction.prod([q[4], q[6], q[8], q[9], q[10], q[11]], 6) - Qfraction.prod([q[4], q[7], q[8], q[9], q[10], q[11]], 6) - Qfraction.prod([q[5], q[6], q[7], q[8], q[9], q[11]], 6) - Qfraction.prod([q[5], q[6], q[7], q[8], q[10], q[11]], 6) - Qfraction.prod([q[5], q[6], q[7], q[9], q[10], q[11]], 6) - Qfraction.prod([q[5], q[6], q[8], q[9], q[10], q[11]], 6) - Qfraction.prod([q[5], q[7], q[8], q[9], q[10], q[11]], 6) - Qfraction.prod([q[6], q[7], q[8], q[9], q[10], q[11]], 6) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[6], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[7], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[8], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[6], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[7], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[8], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[6], q[7], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[6], q[8], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[6], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[6], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[7], q[8], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[7], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[7], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[3], q[9], q[10], q[11]], 7)
            q2b[11] += Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[6], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[7], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[8], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[6], q[7], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[6], q[8], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[6], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[6], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[7], q[8], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[7], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[7], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[4], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[5], q[6], q[7], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[5], q[6], q[8], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[5], q[6], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[5], q[6], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[5], q[7], q[8], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[5], q[7], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[5], q[7], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[5], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[5], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[5], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[6], q[7], q[8], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[6], q[7], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[6], q[7], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[6], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[6], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[6], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[2], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[6], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[7], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[8], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[6], q[7], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[6], q[8], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[6], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[6], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[7], q[8], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[7], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[7], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[4], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[5], q[6], q[7], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[5], q[6], q[8], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[5], q[6], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[5], q[6], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[5], q[7], q[8], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[5], q[7], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[5], q[7], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[5], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[5], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[5], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[6], q[7], q[8], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[6], q[7], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[6], q[7], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[6], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[6], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[6], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[3], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[4], q[5], q[6], q[7], q[11]], 7) + Qfraction.prod([q[0], q[1], q[4], q[5], q[6], q[8], q[11]], 7) + Qfraction.prod([q[0], q[1], q[4], q[5], q[6], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[4], q[5], q[6], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[4], q[5], q[7], q[8], q[11]], 7) + Qfraction.prod([q[0], q[1], q[4], q[5], q[7], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[4], q[5], q[7], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[4], q[5], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[4], q[5], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[4], q[5], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[4], q[6], q[7], q[8], q[11]], 7) + Qfraction.prod([q[0], q[1], q[4], q[6], q[7], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[4], q[6], q[7], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[4], q[6], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[4], q[6], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[4], q[6], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[4], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[4], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[4], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[4], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[5], q[6], q[7], q[8], q[11]], 7) + Qfraction.prod([q[0], q[1], q[5], q[6], q[7], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[5], q[6], q[7], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[5], q[6], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[5], q[6], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[5], q[6], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[5], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[5], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[5], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[5], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[6], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[1], q[6], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[6], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[6], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[1], q[7], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[6], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[7], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[8], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[9], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[6], q[7], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[6], q[8], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[6], q[9], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[6], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[7], q[8], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[7], q[9], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[7], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[4], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[5], q[6], q[7], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[5], q[6], q[8], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[5], q[6], q[9], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[5], q[6], q[10], q[11]], 7)
            q2b[11] += Qfraction.prod([q[0], q[2], q[3], q[5], q[7], q[8], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[5], q[7], q[9], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[5], q[7], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[5], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[5], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[5], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[6], q[7], q[8], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[6], q[7], q[9], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[6], q[7], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[6], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[6], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[6], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[3], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[4], q[5], q[6], q[7], q[11]], 7) + Qfraction.prod([q[0], q[2], q[4], q[5], q[6], q[8], q[11]], 7) + Qfraction.prod([q[0], q[2], q[4], q[5], q[6], q[9], q[11]], 7) + Qfraction.prod([q[0], q[2], q[4], q[5], q[6], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[4], q[5], q[7], q[8], q[11]], 7) + Qfraction.prod([q[0], q[2], q[4], q[5], q[7], q[9], q[11]], 7) + Qfraction.prod([q[0], q[2], q[4], q[5], q[7], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[4], q[5], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[2], q[4], q[5], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[4], q[5], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[4], q[6], q[7], q[8], q[11]], 7) + Qfraction.prod([q[0], q[2], q[4], q[6], q[7], q[9], q[11]], 7) + Qfraction.prod([q[0], q[2], q[4], q[6], q[7], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[4], q[6], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[2], q[4], q[6], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[4], q[6], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[4], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[2], q[4], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[4], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[4], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[5], q[6], q[7], q[8], q[11]], 7) + Qfraction.prod([q[0], q[2], q[5], q[6], q[7], q[9], q[11]], 7) + Qfraction.prod([q[0], q[2], q[5], q[6], q[7], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[5], q[6], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[2], q[5], q[6], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[5], q[6], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[5], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[2], q[5], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[5], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[5], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[6], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[2], q[6], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[6], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[6], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[2], q[7], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[3], q[4], q[5], q[6], q[7], q[11]], 7) + Qfraction.prod([q[0], q[3], q[4], q[5], q[6], q[8], q[11]], 7) + Qfraction.prod([q[0], q[3], q[4], q[5], q[6], q[9], q[11]], 7) + Qfraction.prod([q[0], q[3], q[4], q[5], q[6], q[10], q[11]], 7) + Qfraction.prod([q[0], q[3], q[4], q[5], q[7], q[8], q[11]], 7) + Qfraction.prod([q[0], q[3], q[4], q[5], q[7], q[9], q[11]], 7) + Qfraction.prod([q[0], q[3], q[4], q[5], q[7], q[10], q[11]], 7) + Qfraction.prod([q[0], q[3], q[4], q[5], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[3], q[4], q[5], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[3], q[4], q[5], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[3], q[4], q[6], q[7], q[8], q[11]], 7) + Qfraction.prod([q[0], q[3], q[4], q[6], q[7], q[9], q[11]], 7) + Qfraction.prod([q[0], q[3], q[4], q[6], q[7], q[10], q[11]], 7) + Qfraction.prod([q[0], q[3], q[4], q[6], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[3], q[4], q[6], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[3], q[4], q[6], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[3], q[4], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[3], q[4], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[3], q[4], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[3], q[4], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[3], q[5], q[6], q[7], q[8], q[11]], 7) + Qfraction.prod([q[0], q[3], q[5], q[6], q[7], q[9], q[11]], 7) + Qfraction.prod([q[0], q[3], q[5], q[6], q[7], q[10], q[11]], 7) + Qfraction.prod([q[0], q[3], q[5], q[6], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[3], q[5], q[6], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[3], q[5], q[6], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[3], q[5], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[3], q[5], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[3], q[5], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[3], q[5], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[3], q[6], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[3], q[6], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[3], q[6], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[3], q[6], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[3], q[7], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[4], q[5], q[6], q[7], q[8], q[11]], 7) + Qfraction.prod([q[0], q[4], q[5], q[6], q[7], q[9], q[11]], 7) + Qfraction.prod([q[0], q[4], q[5], q[6], q[7], q[10], q[11]], 7) + Qfraction.prod([q[0], q[4], q[5], q[6], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[4], q[5], q[6], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[4], q[5], q[6], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[4], q[5], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[4], q[5], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[4], q[5], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[4], q[5], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[4], q[6], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[4], q[6], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[4], q[6], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[4], q[6], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[4], q[7], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[5], q[6], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[0], q[5], q[6], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[0], q[5], q[6], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[5], q[6], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[5], q[7], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[0], q[6], q[7], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[6], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[7], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[8], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[9], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[6], q[7], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[6], q[8], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[6], q[9], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[6], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[7], q[8], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[7], q[9], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[7], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[8], q[9], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[8], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[4], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[5], q[6], q[7], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[5], q[6], q[8], q[11]], 7)
            q2b[11] += Qfraction.prod([q[1], q[2], q[3], q[5], q[6], q[9], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[5], q[6], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[5], q[7], q[8], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[5], q[7], q[9], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[5], q[7], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[5], q[8], q[9], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[5], q[8], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[5], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[6], q[7], q[8], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[6], q[7], q[9], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[6], q[7], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[6], q[8], q[9], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[6], q[8], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[6], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[3], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[4], q[5], q[6], q[7], q[11]], 7) + Qfraction.prod([q[1], q[2], q[4], q[5], q[6], q[8], q[11]], 7) + Qfraction.prod([q[1], q[2], q[4], q[5], q[6], q[9], q[11]], 7) + Qfraction.prod([q[1], q[2], q[4], q[5], q[6], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[4], q[5], q[7], q[8], q[11]], 7) + Qfraction.prod([q[1], q[2], q[4], q[5], q[7], q[9], q[11]], 7) + Qfraction.prod([q[1], q[2], q[4], q[5], q[7], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[4], q[5], q[8], q[9], q[11]], 7) + Qfraction.prod([q[1], q[2], q[4], q[5], q[8], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[4], q[5], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[4], q[6], q[7], q[8], q[11]], 7) + Qfraction.prod([q[1], q[2], q[4], q[6], q[7], q[9], q[11]], 7) + Qfraction.prod([q[1], q[2], q[4], q[6], q[7], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[4], q[6], q[8], q[9], q[11]], 7) + Qfraction.prod([q[1], q[2], q[4], q[6], q[8], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[4], q[6], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[4], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[1], q[2], q[4], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[4], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[4], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[5], q[6], q[7], q[8], q[11]], 7) + Qfraction.prod([q[1], q[2], q[5], q[6], q[7], q[9], q[11]], 7) + Qfraction.prod([q[1], q[2], q[5], q[6], q[7], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[5], q[6], q[8], q[9], q[11]], 7) + Qfraction.prod([q[1], q[2], q[5], q[6], q[8], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[5], q[6], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[5], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[1], q[2], q[5], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[5], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[5], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[6], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[1], q[2], q[6], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[6], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[6], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[2], q[7], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[3], q[4], q[5], q[6], q[7], q[11]], 7) + Qfraction.prod([q[1], q[3], q[4], q[5], q[6], q[8], q[11]], 7) + Qfraction.prod([q[1], q[3], q[4], q[5], q[6], q[9], q[11]], 7) + Qfraction.prod([q[1], q[3], q[4], q[5], q[6], q[10], q[11]], 7) + Qfraction.prod([q[1], q[3], q[4], q[5], q[7], q[8], q[11]], 7) + Qfraction.prod([q[1], q[3], q[4], q[5], q[7], q[9], q[11]], 7) + Qfraction.prod([q[1], q[3], q[4], q[5], q[7], q[10], q[11]], 7) + Qfraction.prod([q[1], q[3], q[4], q[5], q[8], q[9], q[11]], 7) + Qfraction.prod([q[1], q[3], q[4], q[5], q[8], q[10], q[11]], 7) + Qfraction.prod([q[1], q[3], q[4], q[5], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[3], q[4], q[6], q[7], q[8], q[11]], 7) + Qfraction.prod([q[1], q[3], q[4], q[6], q[7], q[9], q[11]], 7) + Qfraction.prod([q[1], q[3], q[4], q[6], q[7], q[10], q[11]], 7) + Qfraction.prod([q[1], q[3], q[4], q[6], q[8], q[9], q[11]], 7) + Qfraction.prod([q[1], q[3], q[4], q[6], q[8], q[10], q[11]], 7) + Qfraction.prod([q[1], q[3], q[4], q[6], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[3], q[4], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[1], q[3], q[4], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[1], q[3], q[4], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[3], q[4], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[3], q[5], q[6], q[7], q[8], q[11]], 7) + Qfraction.prod([q[1], q[3], q[5], q[6], q[7], q[9], q[11]], 7) + Qfraction.prod([q[1], q[3], q[5], q[6], q[7], q[10], q[11]], 7) + Qfraction.prod([q[1], q[3], q[5], q[6], q[8], q[9], q[11]], 7) + Qfraction.prod([q[1], q[3], q[5], q[6], q[8], q[10], q[11]], 7) + Qfraction.prod([q[1], q[3], q[5], q[6], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[3], q[5], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[1], q[3], q[5], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[1], q[3], q[5], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[3], q[5], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[3], q[6], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[1], q[3], q[6], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[1], q[3], q[6], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[3], q[6], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[3], q[7], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[4], q[5], q[6], q[7], q[8], q[11]], 7) + Qfraction.prod([q[1], q[4], q[5], q[6], q[7], q[9], q[11]], 7) + Qfraction.prod([q[1], q[4], q[5], q[6], q[7], q[10], q[11]], 7) + Qfraction.prod([q[1], q[4], q[5], q[6], q[8], q[9], q[11]], 7) + Qfraction.prod([q[1], q[4], q[5], q[6], q[8], q[10], q[11]], 7) + Qfraction.prod([q[1], q[4], q[5], q[6], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[4], q[5], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[1], q[4], q[5], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[1], q[4], q[5], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[4], q[5], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[4], q[6], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[1], q[4], q[6], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[1], q[4], q[6], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[4], q[6], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[4], q[7], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[5], q[6], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[1], q[5], q[6], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[1], q[5], q[6], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[5], q[6], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[5], q[7], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[1], q[6], q[7], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[2], q[3], q[4], q[5], q[6], q[7], q[11]], 7) + Qfraction.prod([q[2], q[3], q[4], q[5], q[6], q[8], q[11]], 7) + Qfraction.prod([q[2], q[3], q[4], q[5], q[6], q[9], q[11]], 7) + Qfraction.prod([q[2], q[3], q[4], q[5], q[6], q[10], q[11]], 7) + Qfraction.prod([q[2], q[3], q[4], q[5], q[7], q[8], q[11]], 7) + Qfraction.prod([q[2], q[3], q[4], q[5], q[7], q[9], q[11]], 7) + Qfraction.prod([q[2], q[3], q[4], q[5], q[7], q[10], q[11]], 7) + Qfraction.prod([q[2], q[3], q[4], q[5], q[8], q[9], q[11]], 7) + Qfraction.prod([q[2], q[3], q[4], q[5], q[8], q[10], q[11]], 7) + Qfraction.prod([q[2], q[3], q[4], q[5], q[9], q[10], q[11]], 7) + Qfraction.prod([q[2], q[3], q[4], q[6], q[7], q[8], q[11]], 7) + Qfraction.prod([q[2], q[3], q[4], q[6], q[7], q[9], q[11]], 7) + Qfraction.prod([q[2], q[3], q[4], q[6], q[7], q[10], q[11]], 7) + Qfraction.prod([q[2], q[3], q[4], q[6], q[8], q[9], q[11]], 7) + Qfraction.prod([q[2], q[3], q[4], q[6], q[8], q[10], q[11]], 7)
            q2b[11] += Qfraction.prod([q[2], q[3], q[4], q[6], q[9], q[10], q[11]], 7) + Qfraction.prod([q[2], q[3], q[4], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[2], q[3], q[4], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[2], q[3], q[4], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[2], q[3], q[4], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[2], q[3], q[5], q[6], q[7], q[8], q[11]], 7) + Qfraction.prod([q[2], q[3], q[5], q[6], q[7], q[9], q[11]], 7) + Qfraction.prod([q[2], q[3], q[5], q[6], q[7], q[10], q[11]], 7) + Qfraction.prod([q[2], q[3], q[5], q[6], q[8], q[9], q[11]], 7) + Qfraction.prod([q[2], q[3], q[5], q[6], q[8], q[10], q[11]], 7) + Qfraction.prod([q[2], q[3], q[5], q[6], q[9], q[10], q[11]], 7) + Qfraction.prod([q[2], q[3], q[5], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[2], q[3], q[5], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[2], q[3], q[5], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[2], q[3], q[5], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[2], q[3], q[6], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[2], q[3], q[6], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[2], q[3], q[6], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[2], q[3], q[6], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[2], q[3], q[7], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[2], q[4], q[5], q[6], q[7], q[8], q[11]], 7) + Qfraction.prod([q[2], q[4], q[5], q[6], q[7], q[9], q[11]], 7) + Qfraction.prod([q[2], q[4], q[5], q[6], q[7], q[10], q[11]], 7) + Qfraction.prod([q[2], q[4], q[5], q[6], q[8], q[9], q[11]], 7) + Qfraction.prod([q[2], q[4], q[5], q[6], q[8], q[10], q[11]], 7) + Qfraction.prod([q[2], q[4], q[5], q[6], q[9], q[10], q[11]], 7) + Qfraction.prod([q[2], q[4], q[5], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[2], q[4], q[5], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[2], q[4], q[5], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[2], q[4], q[5], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[2], q[4], q[6], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[2], q[4], q[6], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[2], q[4], q[6], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[2], q[4], q[6], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[2], q[4], q[7], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[2], q[5], q[6], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[2], q[5], q[6], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[2], q[5], q[6], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[2], q[5], q[6], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[2], q[5], q[7], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[2], q[6], q[7], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[3], q[4], q[5], q[6], q[7], q[8], q[11]], 7) + Qfraction.prod([q[3], q[4], q[5], q[6], q[7], q[9], q[11]], 7) + Qfraction.prod([q[3], q[4], q[5], q[6], q[7], q[10], q[11]], 7) + Qfraction.prod([q[3], q[4], q[5], q[6], q[8], q[9], q[11]], 7) + Qfraction.prod([q[3], q[4], q[5], q[6], q[8], q[10], q[11]], 7) + Qfraction.prod([q[3], q[4], q[5], q[6], q[9], q[10], q[11]], 7) + Qfraction.prod([q[3], q[4], q[5], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[3], q[4], q[5], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[3], q[4], q[5], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[3], q[4], q[5], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[3], q[4], q[6], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[3], q[4], q[6], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[3], q[4], q[6], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[3], q[4], q[6], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[3], q[4], q[7], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[3], q[5], q[6], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[3], q[5], q[6], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[3], q[5], q[6], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[3], q[5], q[6], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[3], q[5], q[7], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[3], q[6], q[7], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[4], q[5], q[6], q[7], q[8], q[9], q[11]], 7) + Qfraction.prod([q[4], q[5], q[6], q[7], q[8], q[10], q[11]], 7) + Qfraction.prod([q[4], q[5], q[6], q[7], q[9], q[10], q[11]], 7) + Qfraction.prod([q[4], q[5], q[6], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[4], q[5], q[7], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[4], q[6], q[7], q[8], q[9], q[10], q[11]], 7) + Qfraction.prod([q[5], q[6], q[7], q[8], q[9], q[10], q[11]], 7) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[7], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[8], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[6], q[7], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[6], q[8], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[6], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[6], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[7], q[8], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[7], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[7], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[6], q[7], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[6], q[8], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[6], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[6], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[7], q[8], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[7], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[7], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[6], q[7], q[8], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[6], q[7], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[6], q[7], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[6], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[6], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[6], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[3], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[6], q[7], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[6], q[8], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[6], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[6], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[7], q[8], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[7], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[7], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[6], q[7], q[8], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[6], q[7], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[6], q[7], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[6], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[6], q[8], q[10], q[11]], 8)
            q2b[11] += -Qfraction.prod([q[0], q[1], q[2], q[4], q[6], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[4], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[5], q[6], q[7], q[8], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[5], q[6], q[7], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[5], q[6], q[7], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[5], q[6], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[5], q[6], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[5], q[6], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[5], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[5], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[5], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[5], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[6], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[6], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[6], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[6], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[2], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[6], q[7], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[6], q[8], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[6], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[6], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[7], q[8], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[7], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[7], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[6], q[7], q[8], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[6], q[7], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[6], q[7], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[6], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[6], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[6], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[4], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[5], q[6], q[7], q[8], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[5], q[6], q[7], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[5], q[6], q[7], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[5], q[6], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[5], q[6], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[5], q[6], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[5], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[5], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[5], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[5], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[6], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[6], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[6], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[6], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[3], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[4], q[5], q[6], q[7], q[8], q[11]], 8) - Qfraction.prod([q[0], q[1], q[4], q[5], q[6], q[7], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[4], q[5], q[6], q[7], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[4], q[5], q[6], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[4], q[5], q[6], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[4], q[5], q[6], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[4], q[5], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[4], q[5], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[4], q[5], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[4], q[5], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[4], q[6], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[4], q[6], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[4], q[6], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[4], q[6], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[4], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[5], q[6], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[1], q[5], q[6], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[5], q[6], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[5], q[6], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[5], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[1], q[6], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[6], q[7], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[6], q[8], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[6], q[9], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[6], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[7], q[8], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[7], q[9], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[7], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[6], q[7], q[8], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[6], q[7], q[9], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[6], q[7], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[6], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[6], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[6], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[4], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[5], q[6], q[7], q[8], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[5], q[6], q[7], q[9], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[5], q[6], q[7], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[5], q[6], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[5], q[6], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[5], q[6], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[5], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[5], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[5], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[5], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[6], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[6], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[6], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[6], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[3], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[4], q[5], q[6], q[7], q[8], q[11]], 8) - Qfraction.prod([q[0], q[2], q[4], q[5], q[6], q[7], q[9], q[11]], 8)
            q2b[11] += -Qfraction.prod([q[0], q[2], q[4], q[5], q[6], q[7], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[4], q[5], q[6], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[2], q[4], q[5], q[6], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[4], q[5], q[6], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[4], q[5], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[2], q[4], q[5], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[4], q[5], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[4], q[5], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[4], q[6], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[2], q[4], q[6], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[4], q[6], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[4], q[6], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[4], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[5], q[6], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[2], q[5], q[6], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[5], q[6], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[5], q[6], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[5], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[2], q[6], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[3], q[4], q[5], q[6], q[7], q[8], q[11]], 8) - Qfraction.prod([q[0], q[3], q[4], q[5], q[6], q[7], q[9], q[11]], 8) - Qfraction.prod([q[0], q[3], q[4], q[5], q[6], q[7], q[10], q[11]], 8) - Qfraction.prod([q[0], q[3], q[4], q[5], q[6], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[3], q[4], q[5], q[6], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[3], q[4], q[5], q[6], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[3], q[4], q[5], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[3], q[4], q[5], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[3], q[4], q[5], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[3], q[4], q[5], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[3], q[4], q[6], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[3], q[4], q[6], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[3], q[4], q[6], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[3], q[4], q[6], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[3], q[4], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[3], q[5], q[6], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[3], q[5], q[6], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[3], q[5], q[6], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[3], q[5], q[6], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[3], q[5], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[3], q[6], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[4], q[5], q[6], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[0], q[4], q[5], q[6], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[0], q[4], q[5], q[6], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[4], q[5], q[6], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[4], q[5], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[4], q[6], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[0], q[5], q[6], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[6], q[8], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[6], q[9], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[6], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[7], q[8], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[7], q[9], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[7], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[8], q[9], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[8], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[6], q[7], q[8], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[6], q[7], q[9], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[6], q[7], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[6], q[8], q[9], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[6], q[8], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[6], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[4], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[5], q[6], q[7], q[8], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[5], q[6], q[7], q[9], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[5], q[6], q[7], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[5], q[6], q[8], q[9], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[5], q[6], q[8], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[5], q[6], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[5], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[5], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[5], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[5], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[6], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[6], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[6], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[6], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[3], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[4], q[5], q[6], q[7], q[8], q[11]], 8) - Qfraction.prod([q[1], q[2], q[4], q[5], q[6], q[7], q[9], q[11]], 8) - Qfraction.prod([q[1], q[2], q[4], q[5], q[6], q[7], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[4], q[5], q[6], q[8], q[9], q[11]], 8) - Qfraction.prod([q[1], q[2], q[4], q[5], q[6], q[8], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[4], q[5], q[6], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[4], q[5], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[1], q[2], q[4], q[5], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[4], q[5], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[4], q[5], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[4], q[6], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[1], q[2], q[4], q[6], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[4], q[6], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[4], q[6], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[4], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[5], q[6], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[1], q[2], q[5], q[6], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[5], q[6], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[5], q[6], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[5], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[2], q[6], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[3], q[4], q[5], q[6], q[7], q[8], q[11]], 8) - Qfraction.prod([q[1], q[3], q[4], q[5], q[6], q[7], q[9], q[11]], 8) - Qfraction.prod([q[1], q[3], q[4], q[5], q[6], q[7], q[10], q[11]], 8) - Qfraction.prod([q[1], q[3], q[4], q[5], q[6], q[8], q[9], q[11]], 8) - Qfraction.prod([q[1], q[3], q[4], q[5], q[6], q[8], q[10], q[11]], 8) - Qfraction.prod([q[1], q[3], q[4], q[5], q[6], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[3], q[4], q[5], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[1], q[3], q[4], q[5], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[1], q[3], q[4], q[5], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[3], q[4], q[5], q[8], q[9], q[10], q[11]], 8)
            q2b[11] += -Qfraction.prod([q[1], q[3], q[4], q[6], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[1], q[3], q[4], q[6], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[1], q[3], q[4], q[6], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[3], q[4], q[6], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[3], q[4], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[3], q[5], q[6], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[1], q[3], q[5], q[6], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[1], q[3], q[5], q[6], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[3], q[5], q[6], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[3], q[5], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[3], q[6], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[4], q[5], q[6], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[1], q[4], q[5], q[6], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[1], q[4], q[5], q[6], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[4], q[5], q[6], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[4], q[5], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[4], q[6], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[1], q[5], q[6], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[11]], 8) - Qfraction.prod([q[2], q[3], q[4], q[5], q[6], q[7], q[9], q[11]], 8) - Qfraction.prod([q[2], q[3], q[4], q[5], q[6], q[7], q[10], q[11]], 8) - Qfraction.prod([q[2], q[3], q[4], q[5], q[6], q[8], q[9], q[11]], 8) - Qfraction.prod([q[2], q[3], q[4], q[5], q[6], q[8], q[10], q[11]], 8) - Qfraction.prod([q[2], q[3], q[4], q[5], q[6], q[9], q[10], q[11]], 8) - Qfraction.prod([q[2], q[3], q[4], q[5], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[2], q[3], q[4], q[5], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[2], q[3], q[4], q[5], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[2], q[3], q[4], q[5], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[2], q[3], q[4], q[6], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[2], q[3], q[4], q[6], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[2], q[3], q[4], q[6], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[2], q[3], q[4], q[6], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[2], q[3], q[4], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[2], q[3], q[5], q[6], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[2], q[3], q[5], q[6], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[2], q[3], q[5], q[6], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[2], q[3], q[5], q[6], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[2], q[3], q[5], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[2], q[3], q[6], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[2], q[4], q[5], q[6], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[2], q[4], q[5], q[6], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[2], q[4], q[5], q[6], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[2], q[4], q[5], q[6], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[2], q[4], q[5], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[2], q[4], q[6], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[2], q[5], q[6], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[3], q[4], q[5], q[6], q[7], q[8], q[9], q[11]], 8) - Qfraction.prod([q[3], q[4], q[5], q[6], q[7], q[8], q[10], q[11]], 8) - Qfraction.prod([q[3], q[4], q[5], q[6], q[7], q[9], q[10], q[11]], 8) - Qfraction.prod([q[3], q[4], q[5], q[6], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[3], q[4], q[5], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[3], q[4], q[6], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[3], q[5], q[6], q[7], q[8], q[9], q[10], q[11]], 8) - Qfraction.prod([q[4], q[5], q[6], q[7], q[8], q[9], q[10], q[11]], 8) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[8], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[9], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[7], q[8], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[7], q[9], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[7], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[8], q[9], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[8], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[6], q[7], q[8], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[6], q[7], q[9], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[6], q[7], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[6], q[8], q[9], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[6], q[8], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[6], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[7], q[8], q[9], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[7], q[8], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[7], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[6], q[7], q[8], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[6], q[7], q[9], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[6], q[7], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[6], q[8], q[9], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[6], q[8], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[6], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[7], q[8], q[9], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[7], q[8], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[7], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[6], q[7], q[8], q[9], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[6], q[7], q[8], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[6], q[7], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[6], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[3], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[6], q[7], q[8], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[6], q[7], q[9], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[6], q[7], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[6], q[8], q[9], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[6], q[8], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[6], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[7], q[8], q[9], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[7], q[8], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[7], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[4], q[6], q[7], q[8], q[9], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[4], q[6], q[7], q[8], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[4], q[6], q[7], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[4], q[6], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[4], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[5], q[6], q[7], q[8], q[9], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[5], q[6], q[7], q[8], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[5], q[6], q[7], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[5], q[6], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[2], q[5], q[7], q[8], q[9], q[10], q[11]], 9)
            q2b[11] += Qfraction.prod([q[0], q[1], q[2], q[6], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[6], q[7], q[8], q[11]], 9) + Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[6], q[7], q[9], q[11]], 9) + Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[6], q[7], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[6], q[8], q[9], q[11]], 9) + Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[6], q[8], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[6], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[7], q[8], q[9], q[11]], 9) + Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[7], q[8], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[7], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[3], q[4], q[6], q[7], q[8], q[9], q[11]], 9) + Qfraction.prod([q[0], q[1], q[3], q[4], q[6], q[7], q[8], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[3], q[4], q[6], q[7], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[3], q[4], q[6], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[3], q[4], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[3], q[5], q[6], q[7], q[8], q[9], q[11]], 9) + Qfraction.prod([q[0], q[1], q[3], q[5], q[6], q[7], q[8], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[3], q[5], q[6], q[7], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[3], q[5], q[6], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[3], q[5], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[3], q[6], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[4], q[5], q[6], q[7], q[8], q[9], q[11]], 9) + Qfraction.prod([q[0], q[1], q[4], q[5], q[6], q[7], q[8], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[4], q[5], q[6], q[7], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[4], q[5], q[6], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[4], q[5], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[4], q[6], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[1], q[5], q[6], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[11]], 9) + Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[6], q[7], q[9], q[11]], 9) + Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[6], q[7], q[10], q[11]], 9) + Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[6], q[8], q[9], q[11]], 9) + Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[6], q[8], q[10], q[11]], 9) + Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[6], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[7], q[8], q[9], q[11]], 9) + Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[7], q[8], q[10], q[11]], 9) + Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[7], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[2], q[3], q[4], q[6], q[7], q[8], q[9], q[11]], 9) + Qfraction.prod([q[0], q[2], q[3], q[4], q[6], q[7], q[8], q[10], q[11]], 9) + Qfraction.prod([q[0], q[2], q[3], q[4], q[6], q[7], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[2], q[3], q[4], q[6], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[2], q[3], q[4], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[2], q[3], q[5], q[6], q[7], q[8], q[9], q[11]], 9) + Qfraction.prod([q[0], q[2], q[3], q[5], q[6], q[7], q[8], q[10], q[11]], 9) + Qfraction.prod([q[0], q[2], q[3], q[5], q[6], q[7], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[2], q[3], q[5], q[6], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[2], q[3], q[5], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[2], q[3], q[6], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[2], q[4], q[5], q[6], q[7], q[8], q[9], q[11]], 9) + Qfraction.prod([q[0], q[2], q[4], q[5], q[6], q[7], q[8], q[10], q[11]], 9) + Qfraction.prod([q[0], q[2], q[4], q[5], q[6], q[7], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[2], q[4], q[5], q[6], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[2], q[4], q[5], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[2], q[4], q[6], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[2], q[5], q[6], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[3], q[4], q[5], q[6], q[7], q[8], q[9], q[11]], 9) + Qfraction.prod([q[0], q[3], q[4], q[5], q[6], q[7], q[8], q[10], q[11]], 9) + Qfraction.prod([q[0], q[3], q[4], q[5], q[6], q[7], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[3], q[4], q[5], q[6], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[3], q[4], q[5], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[3], q[4], q[6], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[3], q[5], q[6], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[0], q[4], q[5], q[6], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[11]], 9) + Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[9], q[11]], 9) + Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[10], q[11]], 9) + Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[6], q[8], q[9], q[11]], 9) + Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[6], q[8], q[10], q[11]], 9) + Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[6], q[9], q[10], q[11]], 9) + Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[7], q[8], q[9], q[11]], 9) + Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[7], q[8], q[10], q[11]], 9) + Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[7], q[9], q[10], q[11]], 9) + Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[1], q[2], q[3], q[4], q[6], q[7], q[8], q[9], q[11]], 9) + Qfraction.prod([q[1], q[2], q[3], q[4], q[6], q[7], q[8], q[10], q[11]], 9) + Qfraction.prod([q[1], q[2], q[3], q[4], q[6], q[7], q[9], q[10], q[11]], 9) + Qfraction.prod([q[1], q[2], q[3], q[4], q[6], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[1], q[2], q[3], q[4], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[1], q[2], q[3], q[5], q[6], q[7], q[8], q[9], q[11]], 9) + Qfraction.prod([q[1], q[2], q[3], q[5], q[6], q[7], q[8], q[10], q[11]], 9) + Qfraction.prod([q[1], q[2], q[3], q[5], q[6], q[7], q[9], q[10], q[11]], 9) + Qfraction.prod([q[1], q[2], q[3], q[5], q[6], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[1], q[2], q[3], q[5], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[1], q[2], q[3], q[6], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[1], q[2], q[4], q[5], q[6], q[7], q[8], q[9], q[11]], 9) + Qfraction.prod([q[1], q[2], q[4], q[5], q[6], q[7], q[8], q[10], q[11]], 9) + Qfraction.prod([q[1], q[2], q[4], q[5], q[6], q[7], q[9], q[10], q[11]], 9) + Qfraction.prod([q[1], q[2], q[4], q[5], q[6], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[1], q[2], q[4], q[5], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[1], q[2], q[4], q[6], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[1], q[2], q[5], q[6], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[1], q[3], q[4], q[5], q[6], q[7], q[8], q[9], q[11]], 9) + Qfraction.prod([q[1], q[3], q[4], q[5], q[6], q[7], q[8], q[10], q[11]], 9) + Qfraction.prod([q[1], q[3], q[4], q[5], q[6], q[7], q[9], q[10], q[11]], 9) + Qfraction.prod([q[1], q[3], q[4], q[5], q[6], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[1], q[3], q[4], q[5], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[1], q[3], q[4], q[6], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[1], q[3], q[5], q[6], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[1], q[4], q[5], q[6], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[9], q[11]], 9) + Qfraction.prod([q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[10], q[11]], 9) + Qfraction.prod([q[2], q[3], q[4], q[5], q[6], q[7], q[9], q[10], q[11]], 9) + Qfraction.prod([q[2], q[3], q[4], q[5], q[6], q[8], q[9], q[10], q[11]], 9)
            q2b[11] += Qfraction.prod([q[2], q[3], q[4], q[5], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[2], q[3], q[4], q[6], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[2], q[3], q[5], q[6], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[2], q[4], q[5], q[6], q[7], q[8], q[9], q[10], q[11]], 9) + Qfraction.prod([q[3], q[4], q[5], q[6], q[7], q[8], q[9], q[10], q[11]], 9) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[11]], 10) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[9], q[11]], 10) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[10], q[11]], 10) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[8], q[9], q[11]], 10) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[8], q[10], q[11]], 10) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[9], q[10], q[11]], 10) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[7], q[8], q[9], q[11]], 10) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[7], q[8], q[10], q[11]], 10) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[7], q[9], q[10], q[11]], 10) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[8], q[9], q[10], q[11]], 10) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[6], q[7], q[8], q[9], q[11]], 10) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[6], q[7], q[8], q[10], q[11]], 10) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[6], q[7], q[9], q[10], q[11]], 10) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[6], q[8], q[9], q[10], q[11]], 10) - Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[7], q[8], q[9], q[10], q[11]], 10) - Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[6], q[7], q[8], q[9], q[11]], 10) - Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[6], q[7], q[8], q[10], q[11]], 10) - Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[6], q[7], q[9], q[10], q[11]], 10) - Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[6], q[8], q[9], q[10], q[11]], 10) - Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[7], q[8], q[9], q[10], q[11]], 10) - Qfraction.prod([q[0], q[1], q[2], q[3], q[6], q[7], q[8], q[9], q[10], q[11]], 10) - Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[6], q[7], q[8], q[9], q[11]], 10) - Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[6], q[7], q[8], q[10], q[11]], 10) - Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[6], q[7], q[9], q[10], q[11]], 10) - Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[6], q[8], q[9], q[10], q[11]], 10) - Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[7], q[8], q[9], q[10], q[11]], 10) - Qfraction.prod([q[0], q[1], q[2], q[4], q[6], q[7], q[8], q[9], q[10], q[11]], 10) - Qfraction.prod([q[0], q[1], q[2], q[5], q[6], q[7], q[8], q[9], q[10], q[11]], 10) - Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[6], q[7], q[8], q[9], q[11]], 10) - Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[6], q[7], q[8], q[10], q[11]], 10) - Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[6], q[7], q[9], q[10], q[11]], 10) - Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[6], q[8], q[9], q[10], q[11]], 10) - Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[7], q[8], q[9], q[10], q[11]], 10) - Qfraction.prod([q[0], q[1], q[3], q[4], q[6], q[7], q[8], q[9], q[10], q[11]], 10) - Qfraction.prod([q[0], q[1], q[3], q[5], q[6], q[7], q[8], q[9], q[10], q[11]], 10) - Qfraction.prod([q[0], q[1], q[4], q[5], q[6], q[7], q[8], q[9], q[10], q[11]], 10) - Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[9], q[11]], 10) - Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[10], q[11]], 10) - Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[6], q[7], q[9], q[10], q[11]], 10) - Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[6], q[8], q[9], q[10], q[11]], 10) - Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[7], q[8], q[9], q[10], q[11]], 10) - Qfraction.prod([q[0], q[2], q[3], q[4], q[6], q[7], q[8], q[9], q[10], q[11]], 10) - Qfraction.prod([q[0], q[2], q[3], q[5], q[6], q[7], q[8], q[9], q[10], q[11]], 10) - Qfraction.prod([q[0], q[2], q[4], q[5], q[6], q[7], q[8], q[9], q[10], q[11]], 10) - Qfraction.prod([q[0], q[3], q[4], q[5], q[6], q[7], q[8], q[9], q[10], q[11]], 10) - Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[9], q[11]], 10) - Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[10], q[11]], 10) - Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[9], q[10], q[11]], 10) - Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[6], q[8], q[9], q[10], q[11]], 10) - Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[7], q[8], q[9], q[10], q[11]], 10) - Qfraction.prod([q[1], q[2], q[3], q[4], q[6], q[7], q[8], q[9], q[10], q[11]], 10) - Qfraction.prod([q[1], q[2], q[3], q[5], q[6], q[7], q[8], q[9], q[10], q[11]], 10) - Qfraction.prod([q[1], q[2], q[4], q[5], q[6], q[7], q[8], q[9], q[10], q[11]], 10) - Qfraction.prod([q[1], q[3], q[4], q[5], q[6], q[7], q[8], q[9], q[10], q[11]], 10) - Qfraction.prod([q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[9], q[10], q[11]], 10) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[9], q[11]], 11) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[10], q[11]], 11) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[9], q[10], q[11]], 11) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[6], q[8], q[9], q[10], q[11]], 11) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[5], q[7], q[8], q[9], q[10], q[11]], 11) + Qfraction.prod([q[0], q[1], q[2], q[3], q[4], q[6], q[7], q[8], q[9], q[10], q[11]], 11) + Qfraction.prod([q[0], q[1], q[2], q[3], q[5], q[6], q[7], q[8], q[9], q[10], q[11]], 11) + Qfraction.prod([q[0], q[1], q[2], q[4], q[5], q[6], q[7], q[8], q[9], q[10], q[11]], 11) + Qfraction.prod([q[0], q[1], q[3], q[4], q[5], q[6], q[7], q[8], q[9], q[10], q[11]], 11) + Qfraction.prod([q[0], q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[9], q[10], q[11]], 11) + Qfraction.prod([q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[9], q[10], q[11]], 11) - Qfraction.prod(q[0:12], 12)
            #         #----------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|
            #---------1----------2---------3---------4---------5---------6---------7---------8---------9--------10--------11--------12--------13--------14--------15--------16--------17--------18--------19--------20--------21--------22--------23--------24--------25--------26--------27--------28--------29--------30--------31--------32--------33--------34--------35--------36--------37--------38--------39--------40--------41--------42--------43--------44--------45--------46--------47--------48--------49--------50--------51--------52--------53--------54--------55--------56--------57--------58--------59--------60--------61--------62--------63--------64--------65--------66--------67--------68--------69--------70--------71--------72--------73--------74--------75--------76--------77--------78--------79--------80--------81--------82--------83--------84--------85--------86--------87--------88--------89--------90--------91--------92--------93--------94--------95--------96--------97--------98--------99--------100------101
            
        
        if bverbose:
            print("q2b is " + str(q2b).replace("Fraction", "fractions.Fraction"))
        rslt = Qfraction(0, 1)
        for i in range(0, len_q):
            if bverbose:
                print("adding q2b[" + str(i) + "] " + str(q2b[i]))
            if q2b[i].numerator != 0:
                rslt += q2b[i]
        
        if busecache and tuple(q) not in calc_a5_cache_large:
            calc_a5_cache_large[tuple(q)] = (q2b[:len_q], rslt)
        elif not busecache and tuple(q) not in calc_a5_cache_small:
            calc_a5_cache_small[tuple(q)] = (q2b[:len_q], rslt)
        
        if baddsum:
            q2b = [Qfraction(0, 1),] * len_q
            q2b[len_q - 1] = rslt
        
    return q2b[:len_q], rslt



